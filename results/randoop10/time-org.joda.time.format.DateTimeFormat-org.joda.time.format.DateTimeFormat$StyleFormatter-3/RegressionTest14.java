import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str2 = dateTimeFieldType1.getName();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.Chronology chronology13 = localDate7.getChronology();
        long long17 = chronology13.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean18 = dateTimeFieldType6.isSupported(chronology13);
        mutableDateTime3.setChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.dayOfYear();
        java.lang.String str21 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType1.getField(chronology13);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(545606929440L, chronology13);
        org.joda.time.DurationField durationField25 = chronology13.millis();
        org.joda.time.DurationField durationField26 = chronology13.centuries();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "dayOfWeek" + "'", str2, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 200L + "'", long17 == 200L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        long long21 = chronology17.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = dateTimeField30.getAsText((long) (short) 1, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(32L, chronology17, locale32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone64);
        long long67 = dateTimeZone59.getMillisKeepLocal(dateTimeZone64, (long) (byte) -1);
        dateTimeParserBucket34.setZone(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone64);
        org.joda.time.Interval interval70 = localDate8.toInterval(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate8.minus(readablePeriod71);
        org.joda.time.LocalDate localDate74 = localDate8.minusWeeks(21907908);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusYears(0);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withWeekyear(54119608);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = localDate8.compareTo((org.joda.time.ReadablePartial) localDateTime79);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 200L + "'", long21 == 200L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) (short) 100, 54113391);
        org.joda.time.DurationField durationField13 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.yearOfEra();
        long long18 = dateTimeField15.set(1645455822633L, 21950418);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime29.toMutableDateTime();
        org.joda.time.LocalDate localDate31 = dateTime29.toLocalDate();
        org.joda.time.DateTime dateTime33 = dateTime29.withWeekyear(54112611);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime33.minusYears(744);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        long long49 = dateTimeField46.addWrapField((long) ' ', 0);
        boolean boolean50 = dateTimeField46.isSupported();
        long long53 = dateTimeField46.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = dateTimeField46.getType();
        long long57 = dateTimeField46.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate64 = localDate58.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property65 = localDate58.yearOfEra();
        org.joda.time.LocalDate localDate66 = property65.roundFloorCopy();
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.lang.String str68 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDate66, locale67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField46.getType();
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale70);
        int int72 = dateTimeField46.getMaximumTextLength(locale70);
        java.lang.String str73 = locale70.getDisplayLanguage();
        java.util.Calendar calendar74 = dateTime37.toCalendar(locale70);
        java.lang.String str75 = dateTimeField15.getAsText((long) 21950418, locale70);
        int int77 = dateTimeField15.getMaximumValue((-2371597068057L));
        int int79 = dateTimeField15.get((long) 54312369);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 692626124502222633L + "'", long18 == 692626124502222633L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 32L + "'", long49 == 32L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 58665600001L + "'", long53 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "52" + "'", str68, "52");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(locale70);
// flaky:         org.junit.Assert.assertEquals(locale70.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "sunday, february 21, -0001" + "'", str73, "sunday, february 21, -0001");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1707543426467209285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=54111867,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=49,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=52,MILLISECOND=483,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970" + "'", str75, "1970");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 292278993 + "'", int77 == 292278993);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1970 + "'", int79 == 1970);
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        int int11 = localDateTime0.getMillisOfSecond();
        int int12 = localDateTime0.getSecondOfMinute();
        org.joda.time.Chronology chronology13 = localDateTime0.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology13);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setHourOfDay(779);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 779 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 511 + "'", int11 == 511);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 51 + "'", int12 == 51);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(32);
        int int8 = localDateTime7.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 85 + "'", int8 == 85);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        boolean boolean13 = property10.isLeap();
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property10.setCopy("2022-02-21T15:05:10.954+00:00:00.035", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:05:10.954+00:00:00.035\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        int int4 = localTime2.size();
        int int5 = localTime2.getMinuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localTime2.getFieldTypes();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray6);
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.lang.String str5 = mutableDateTime0.toString();
        mutableDateTime0.addWeeks(901);
        org.joda.time.Chronology chronology8 = mutableDateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfWeek();
        org.joda.time.DurationField durationField10 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        long long13 = dateTimeField11.remainder((long) 902);
        int int14 = dateTimeField11.getMaximumValue();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456008461,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=51,MILLISECOND=659,ZONE_OFFSET=54123198,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T06:08:51.659+15:02:03.198" + "'", str5, "2022-02-22T06:08:51.659+15:02:03.198");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 4100L + "'", long13 == 4100L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1439 + "'", int14 == 1439);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate9 = localDate0.minusWeeks((-1));
        int int10 = localDate9.getWeekyear();
        org.joda.time.LocalDate localDate12 = localDate9.plusMonths(54140);
        org.joda.time.LocalDate localDate14 = localDate12.plusYears(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str16 = dateTimeFieldType15.toString();
        int int17 = localDate14.get(dateTimeFieldType15);
        org.joda.time.LocalDate localDate19 = localDate14.withYearOfEra(256);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDate localDate21 = localDate19.plus(readablePeriod20);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfCentury" + "'", str16, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 33 + "'", int17 == 33);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusSeconds(1970);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addCopy((long) 54133352);
        org.joda.time.LocalTime localTime8 = property5.roundHalfEvenCopy();
        int int9 = localTime8.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((java.lang.Object) int9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 29 + "'", int9 == 29);
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(21);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        long long13 = dateTimeField10.getDifferenceAsLong(0L, (long) 172);
        boolean boolean14 = dateTimeField10.isLenient();
        long long17 = dateTimeField10.getDifferenceAsLong(1707724464566400001L, (long) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 19765329450L + "'", long17 == 19765329450L);
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.Chronology chronology16 = localDate10.getChronology();
        long long20 = chronology16.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean21 = dateTimeFieldType9.isSupported(chronology16);
        java.lang.String str22 = dateTimeFieldType9.toString();
        boolean boolean23 = localDate7.isSupported(dateTimeFieldType9);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = localDate7.toString("52", locale25);
        org.joda.time.LocalDate localDate28 = localDate7.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate7.minus(readablePeriod29);
        org.joda.time.LocalDate.Property property31 = localDate7.weekyear();
        org.joda.time.LocalDate localDate32 = property31.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate34 = property31.setCopy(22067788);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 200L + "'", long20 == 200L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millisOfSecond" + "'", str22, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "52" + "'", str26, "52");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        java.lang.String str14 = dateTime13.toString();
        boolean boolean15 = dateTime13.isAfterNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime13.withDate(22013195, 824, 21988037);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 824 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0001-01-01T00:00:00.000+15:02:03.198" + "'", str14, "0001-01-01T00:00:00.000+15:02:03.198");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getVariant();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        long long13 = dateTimeField10.addWrapField((long) ' ', 0);
        boolean boolean14 = dateTimeField10.isSupported();
        long long17 = dateTimeField10.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField10.getType();
        long long21 = dateTimeField10.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate28 = localDate22.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate22.yearOfEra();
        org.joda.time.LocalDate localDate30 = property29.roundFloorCopy();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate30, locale31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.Chronology chronology40 = localDate34.getChronology();
        long long44 = chronology40.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = dateTimeField53.getAsText((long) (short) 1, locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(32L, chronology40, locale55);
        java.lang.String str58 = locale31.getDisplayVariant(locale55);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str60 = locale55.getDisplayScript(locale59);
        java.lang.String str61 = locale55.toLanguageTag();
        java.lang.String str62 = locale0.getDisplayLanguage(locale55);
        boolean boolean63 = locale0.hasExtensions();
        java.lang.String str64 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 58665600001L + "'", long17 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "52" + "'", str32, "52");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 200L + "'", long44 == 200L);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "und" + "'", str61, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "sunday, february 21, -0001" + "'", str62, "sunday, february 21, -0001");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "sunday, february 21, -0001_2022-02-21T15:01:56.023Z" + "'", str64, "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long5 = dateTimeZone2.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(10);
        int int15 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((-53));
        int int18 = dateTime14.getMonthOfYear();
        org.joda.time.DateTime dateTime20 = dateTime14.withMillis(281183302L);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra(21930279);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime28.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property33 = dateTime31.property(dateTimeFieldType32);
        org.joda.time.DateTime dateTime34 = property33.withMinimumValue();
        org.joda.time.DateTime dateTime35 = property33.getDateTime();
        java.lang.String str36 = property33.getAsString();
        org.joda.time.DateTime dateTime37 = property33.withMaximumValue();
        org.joda.time.DateTime.Property property38 = dateTime37.secondOfDay();
        org.joda.time.DateTime dateTime40 = property38.addToCopy(7);
        boolean boolean41 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-133144884L) + "'", long5 == (-133144884L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 212880000 + "'", int15 == 212880000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22131905 + "'", int2 == 22131905);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("0052-02-21T15:02:29.704Z");
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfDay();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime5.withCenturyOfEra((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight12 = dateTime5.toDateMidnight();
        org.joda.time.DateTime.Property property13 = dateTime5.yearOfCentury();
        int int14 = property13.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        java.util.Locale locale3 = new java.util.Locale("2022-02-22T06:07:01.866+15:02:03.198", "\u5fb7\u6587", "2022-02-22T06:05:56.271+15:02:03.198");
        java.lang.String str4 = locale3.getDisplayVariant();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u5fb7\u6587_2022-02-22T06:05:56.271+15:02:03.198");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T06:05:56.271+15:02:03.198" + "'", str4, "2022-02-22T06:05:56.271+15:02:03.198");
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        int int6 = mutableDateTime0.getHourOfDay();
        mutableDateTime0.setMillisOfDay(50);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(10);
        int int12 = mutableDateTime11.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:51.976+15:02:03.198" + "'", str1, "2022-02-22T06:08:51.976+15:02:03.198");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime6 = property3.getLocalTime();
        org.joda.time.LocalTime localTime7 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime8.withMinuteOfHour(22108931);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22108931 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "54123197" + "'", str5, "54123197");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguage("2022-02-22T06:06:34.562+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-22T06:06:34.562+15:02:03.198 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundFloorCopy();
        org.joda.time.LocalDate localDate17 = property15.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField18 = property15.getField();
        org.joda.time.LocalDate localDate20 = property15.setCopy((int) (byte) 1);
        java.util.Locale locale21 = java.util.Locale.UK;
        boolean boolean22 = locale21.hasExtensions();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale21.getDisplayName(locale23);
        java.lang.String str25 = locale23.getDisplayScript();
        int int26 = property15.getMaximumTextLength(locale23);
        java.lang.String str27 = locale23.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = localDate0.toString("", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str24, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 9 + "'", int26 == 9);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.lang.String str16 = dateTimeField13.getAsText((long) 54120, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property25 = localDate18.yearOfEra();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate27 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate28 = property25.roundCeilingCopy();
        org.joda.time.LocalDate localDate29 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate31 = localDate29.withYear(2);
        boolean boolean32 = strSet17.equals((java.lang.Object) localDate29);
        java.util.Spliterator<java.lang.String> strSpliterator33 = strSet17.spliterator();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate40 = localDate34.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property41 = localDate34.yearOfEra();
        org.joda.time.LocalDate localDate42 = property41.roundFloorCopy();
        org.joda.time.Interval interval43 = property41.toInterval();
        org.joda.time.LocalDate localDate44 = property41.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate45 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate46 = property41.roundHalfEvenCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter47.withPivotYear((int) (short) -1);
        java.lang.String str51 = dateTimeFormatter47.print(60000L);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter47.withChronology(chronology52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter47.withZoneUTC();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = localDate58.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter54.withZone(dateTimeZone67);
        org.joda.time.format.DateTimePrinter dateTimePrinter71 = dateTimeFormatter70.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withPivotYear((int) (short) -1);
        java.lang.String str76 = dateTimeFormatter72.print(60000L);
        org.joda.time.format.DateTimeParser dateTimeParser77 = dateTimeFormatter72.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter71, dateTimeParser77);
        boolean boolean79 = property41.equals((java.lang.Object) dateTimePrinter71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter80.withPivotYear((int) (short) -1);
        java.lang.String str84 = dateTimeFormatter80.print(60000L);
        org.joda.time.format.DateTimeParser dateTimeParser85 = dateTimeFormatter80.getParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter86 = dateTimeFormatter80.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter88 = dateTimeFormatter87.getPrinter();
        int int89 = dateTimePrinter88.estimatePrintedLength();
        org.joda.time.format.DateTimePrinter[] dateTimePrinterArray90 = new org.joda.time.format.DateTimePrinter[] { dateTimePrinter71, dateTimePrinter86, dateTimePrinter88 };
        org.joda.time.format.DateTimePrinter[] dateTimePrinterArray91 = strSet17.toArray(dateTimePrinterArray90);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "70" + "'", str16, "70");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSpliterator33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "3:03 PM" + "'", str51, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimePrinter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "3:03 PM" + "'", str76, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeParser77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "3:03 PM" + "'", str84, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeParser85);
        org.junit.Assert.assertNotNull(dateTimePrinter86);
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(dateTimePrinter88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 40 + "'", int89 == 40);
        org.junit.Assert.assertNotNull(dateTimePrinterArray90);
        org.junit.Assert.assertNotNull(dateTimePrinterArray91);
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.now(dateTimeZone55);
        int int68 = dateTimeZone55.getOffset((long) 54122);
        java.lang.String str69 = dateTimeZone55.getID();
        boolean boolean70 = dateTimeZone55.isFixed();
        long long72 = dateTimeZone55.previousTransition(567993600000L);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(localDate66);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 54123198 + "'", int68 == 54123198);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+15:02:03.198" + "'", str69, "+15:02:03.198");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 567993600000L + "'", long72 == 567993600000L);
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 1);
        java.util.TimeZone.setDefault(timeZone0);
        java.lang.String str4 = timeZone0.getID();
        int int6 = timeZone0.getOffset(4979544394L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeZone0.getDisplayName(false, 54314571);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 54314571");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        long long8 = mutableDateTime7.getMillis();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime14 = property9.add(87);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:52.180+15:02:03.198" + "'", str1, "2022-02-22T06:08:52.180+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-62135650923198L) + "'", long8 == (-62135650923198L));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime0.getZone();
        long long9 = dateTimeZone7.previousTransition(0L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withField(dateTimeFieldType19, 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.yearOfEra();
        int int24 = localDateTime22.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusYears((int) (byte) 100);
        int int29 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.plus(readableDuration30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.yearOfEra();
        int int36 = localDateTime34.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withPeriodAdded(readablePeriod37, 2022);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.era();
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.minuteOfHour();
        int int42 = property41.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime43 = property41.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean45 = localDateTime43.isSupported(dateTimeFieldType44);
        boolean boolean46 = localDateTime33.isSupported(dateTimeFieldType44);
        boolean boolean47 = dateTimeZone7.isLocalDateTimeGap(localDateTime33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime33.withDayOfMonth(22106715);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22106715 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22132244 + "'", int24 == 22132244);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22132244 + "'", int36 == 22132244);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 59 + "'", int42 == 59);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withDayOfMonth((-315));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -315 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.plus(readablePeriod8);
        org.joda.time.LocalDate localDate11 = localDate7.minusYears(494);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime10 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime12 = property11.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate9 = localDate0.minusWeeks((-1));
        int int10 = localDate9.getWeekyear();
        org.joda.time.LocalDate localDate12 = localDate9.plusMonths(54140);
        org.joda.time.LocalDate localDate14 = localDate9.plusWeeks(21961);
        org.joda.time.LocalDate localDate16 = localDate9.plusMonths(837);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate11.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter7.withZone(dateTimeZone20);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter23.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((int) (short) -1);
        java.lang.String str29 = dateTimeFormatter25.print(60000L);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatter25.getParser();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.Chronology chronology38 = localDate32.getChronology();
        long long42 = chronology38.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.lang.String str54 = dateTimeField51.getAsText((long) (short) 1, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(32L, chronology38, locale53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMonths((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime63.plus((-48469999L));
        org.joda.time.DateTime dateTime67 = dateTime63.plusSeconds(2);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate71 = localDate68.withField(dateTimeFieldType69, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDate71.toDateTime(readableInstant72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = localDate71.toDateTimeAtCurrentTime(dateTimeZone80);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) dateTime63, dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone85);
        long long88 = dateTimeZone80.getMillisKeepLocal(dateTimeZone85, (long) (byte) -1);
        dateTimeParserBucket55.setZone(dateTimeZone85);
        java.util.Locale locale90 = dateTimeParserBucket55.getLocale();
        dateTimeParserBucket55.setPivotYear((java.lang.Integer) 54123121);
        int int95 = dateTimeParser30.parseInto(dateTimeParserBucket55, "ISOChronology[UTC]", 427);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter96 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser30);
        org.joda.time.format.DateTimePrinter dateTimePrinter97 = dateTimeFormatter96.getPrinter();
        int int98 = dateTimePrinter97.estimatePrintedLength();
        int int99 = dateTimePrinter97.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimePrinter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3:03 PM" + "'", str29, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeParser30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 200L + "'", long42 == 200L);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
// flaky:         org.junit.Assert.assertEquals(locale53.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertNotNull(locale90);
// flaky:         org.junit.Assert.assertEquals(locale90.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-428) + "'", int95 == (-428));
        org.junit.Assert.assertNotNull(dateTimePrinter97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 40 + "'", int98 == 40);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 40 + "'", int99 == 40);
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        long long19 = dateTimeField8.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate20.yearOfEra();
        org.joda.time.LocalDate localDate28 = property27.roundFloorCopy();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate28, locale29);
        org.joda.time.DateMidnight dateMidnight31 = localDate28.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        mutableDateTime32.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime32.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime39 = property38.roundHalfEven();
        mutableDateTime39.setHourOfDay(2);
        java.lang.Object obj42 = mutableDateTime39.clone();
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime39.copy();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate50 = localDate44.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property51 = localDate44.yearOfEra();
        org.joda.time.LocalDate localDate53 = localDate44.withYear(54130144);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate64 = localDate61.withField(dateTimeFieldType62, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.DateTime dateTime66 = localDate64.toDateTime(readableInstant65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMonths((int) '4');
        org.joda.time.DateTime dateTime70 = dateTime66.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration72 = null;
        mutableDateTime71.add(readableDuration72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType74.getDurationType();
        mutableDateTime71.add(durationFieldType75, (-1));
        org.joda.time.DateTime dateTime79 = dateTime66.withFieldAdded(durationFieldType75, (int) (byte) 1);
        boolean boolean80 = dateTime59.isAfter((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime82 = dateTime79.minusMillis((int) (short) 100);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) dateTime82);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType84.getDurationType();
        org.joda.time.LocalDate localDate87 = localDate83.withField(dateTimeFieldType84, 54123121);
        org.joda.time.DurationFieldType durationFieldType88 = dateTimeFieldType84.getRangeDurationType();
        org.joda.time.LocalDate.Property property89 = localDate53.property(dateTimeFieldType84);
        java.lang.String str90 = dateTimeFieldType84.toString();
        mutableDateTime39.set(dateTimeFieldType84, 0);
        org.joda.time.LocalDate.Property property93 = localDate28.property(dateTimeFieldType84);
        java.lang.String str94 = dateTimeFieldType84.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "52" + "'", str30, "52");
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "2022-11-01T02:00:00.000+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "2022-11-01T02:00:00.000+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "2022-11-01T02:00:00.000+15:02:03.198");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNull(durationFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "year" + "'", str90, "year");
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "year" + "'", str94, "year");
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property9 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = property9.addToCopy(22061598);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        long long13 = dateTimeField11.roundHalfFloor((long) 47);
        java.lang.String str14 = dateTimeField11.toString();
        java.lang.String str15 = dateTimeField11.getName();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDate localDate21 = localDate18.withPeriodAdded(readablePeriod19, (int) (short) -1);
        int int22 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate18);
        int int23 = localDate18.getWeekOfWeekyear();
        int int24 = localDate18.getWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str14, "DateTimeField[weekyearOfCentury]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "weekyearOfCentury" + "'", str15, "weekyearOfCentury");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        long long21 = chronology17.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = dateTimeField30.getAsText((long) (short) 1, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(32L, chronology17, locale32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone64);
        long long67 = dateTimeZone59.getMillisKeepLocal(dateTimeZone64, (long) (byte) -1);
        dateTimeParserBucket34.setZone(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone64);
        org.joda.time.Interval interval70 = localDate8.toInterval(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate8.minus(readablePeriod71);
        int int73 = localDate8.getYearOfEra();
        org.joda.time.DateTime dateTime74 = localDate8.toDateTimeAtCurrentTime();
        int int75 = localDate8.getEra();
        org.joda.time.LocalDate.Property property76 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate77 = property76.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate78 = property76.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 200L + "'", long21 == 200L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate78);
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 1);
        java.util.TimeZone.setDefault(timeZone0);
        int int4 = timeZone0.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = dateTimeField8.getAsText((long) (byte) 1, locale18);
        java.lang.String str20 = locale18.getLanguage();
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet22 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray23 = strSet22.toArray();
        java.util.Iterator<java.lang.String> strItor24 = strSet22.iterator();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        long long36 = dateTimeField33.addWrapField((long) ' ', 0);
        boolean boolean37 = dateTimeField33.isSupported();
        long long40 = dateTimeField33.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField33.getType();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = dateTimeField33.getAsText((long) (byte) 1, locale43);
        boolean boolean45 = strSet22.equals((java.lang.Object) locale43);
        java.lang.String str46 = locale43.toLanguageTag();
        java.lang.String str47 = locale18.getDisplayScript(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = locale18.getISO3Language();
// flaky:             org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for sunday, february 21, -0001");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "sunday, february 21, -0001" + "'", str20, "sunday, february 21, -0001");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(strItor24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 32L + "'", long36 == 32L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 58665600001L + "'", long40 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "und" + "'", str46, "und");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusDays(14);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy(174);
        org.joda.time.LocalDateTime localDateTime7 = property4.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(86399999);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfDay(427);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withDurationAdded(readableDuration15, 709);
        int int18 = localDateTime10.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks(21899751);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfEra(54134);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        java.lang.String str20 = dateTimeFieldType18.toString();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withField(dateTimeFieldType18, 286);
        boolean boolean23 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime7.millisOfSecond();
        org.joda.time.LocalDateTime.Property property25 = localDateTime7.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "year" + "'", str20, "year");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long5 = dateTimeZone2.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(dateTimeZone2);
        java.lang.String str8 = dateTimeZone2.getName(20995200000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-133144884L) + "'", long5 == (-133144884L));
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+59:08" + "'", str8, "+59:08");
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfEvenCopy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter15.withZoneUTC();
        org.joda.time.Chronology chronology17 = dateTimeFormatter15.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime30.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        mutableDateTime35.add(durationFieldType39, (-1));
        org.joda.time.DateTime dateTime43 = dateTime30.withFieldAdded(durationFieldType39, (int) (byte) 1);
        boolean boolean44 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime46 = dateTime43.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        org.joda.time.DateTime dateTime48 = property47.roundCeilingCopy();
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks(52);
        org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra(54138295);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime54 = dateTime50.minus(readableDuration53);
        org.joda.time.DateTime dateTime56 = dateTime50.plusDays(54150465);
        java.lang.String str57 = dateTimeFormatter15.print((org.joda.time.ReadableInstant) dateTime50);
        long long58 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime50);
        java.lang.String str59 = dateTime50.toString();
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime61 = dateTime50.plus(readablePeriod60);
        org.joda.time.DateTime.Property property62 = dateTime61.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "January 3, 0000" + "'", str57, "January 3, 0000");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0000-01-03T00:00:00.000+15:02:03.198" + "'", str59, "0000-01-03T00:00:00.000+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusSeconds(1970);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime6.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readablePeriod11);
        int int13 = dateTime10.getYear();
        org.joda.time.DateTime dateTime14 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalTime localTime16 = localTime6.plusMillis(54150452);
        org.joda.time.LocalTime localTime18 = localTime6.withMillisOfDay(21914410);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = localTime6.withMinuteOfHour(21978414);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21978414 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.secondOfDay();
        mutableDateTime0.addMillis(54124521);
        mutableDateTime0.add((long) 54145);
        org.joda.time.DateTime dateTime7 = mutableDateTime0.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(21986);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:52.863+15:02:03.198" + "'", str1, "2022-02-22T06:08:52.863+15:02:03.198");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(21);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.plus((-48469999L));
        org.joda.time.DateTime.Property property22 = dateTime19.yearOfEra();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        boolean boolean24 = mutableDateTime11.equals((java.lang.Object) dateTimeField23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime11.minuteOfDay();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayCountry();
        java.util.Locale locale31 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str32 = locale26.getDisplayCountry(locale31);
        int int33 = property25.getMaximumShortTextLength(locale26);
        java.util.Locale.setDefault(category0, locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = locale26.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-21T15:01:56.023Z" + "'", str27, "2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!_PROPERTY[MILLISOFDAY]");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-21T15:01:56.023Z" + "'", str32, "2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        int int4 = localDateTime3.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(0);
        int int7 = localDateTime6.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 20 + "'", int7 == 20);
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withDayOfMonth(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withMillisOfDay(86399995);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfMonth(22115);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22115 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(54131261);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears(21941506);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter11.withOffsetParsed();
        java.lang.Integer int13 = dateTimeFormatter11.getPivotYear();
        java.lang.String str14 = localDateTime9.toString(dateTimeFormatter11);
        java.lang.Appendable appendable15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        mutableDateTime18.add(durationFieldType22, (-1));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withFieldAdded(durationFieldType22, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes(54111610);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withYearOfEra(80);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(appendable15, (org.joda.time.ReadablePartial) localDateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(int13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "October 15, 21795321" + "'", str14, "October 15, 21795321");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        long long15 = chronology9.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.Chronology chronology16 = chronology9.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(22027109, 22002, 54132302, 22099988, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22027109 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-48469999L) + "'", long15 == (-48469999L));
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        org.joda.time.DateTime dateTime19 = dateTime6.withFieldAdded(durationFieldType15, (int) (byte) 1);
        mutableDateTime0.add(durationFieldType15, 86399999);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.dayOfYear();
        mutableDateTime0.setMillis((long) (short) 10);
        org.joda.time.DateTimeField dateTimeField26 = mutableDateTime0.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfYear(21978238);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21978238 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(dateTimeField26);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter1.withDefaultYear(22053063);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = dateTimeFormatter1.parseLocalDateTime("Greenwich Mean Time");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Greenwich Mean Time\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        int int2 = localDateTime1.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        mutableDateTime4.add(durationFieldType8, (-1));
        long long11 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime4.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter0.withZone(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        long long18 = dateTimeZone14.adjustOffset((long) (byte) 0, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter0.withZone(dateTimeZone14);
        org.joda.time.format.DateTimeParser dateTimeParser20 = dateTimeFormatter19.getParser();
        int int21 = dateTimeParser20.estimateParsedLength();
        int int22 = dateTimeParser20.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeParser20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 40 + "'", int22 == 40);
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        dateTimeParserBucket24.setOffset(54111610);
        long long29 = dateTimeParserBucket24.computeMillis(false, "Property[millisOfDay]");
        long long31 = dateTimeParserBucket24.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket24.getZone();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.Chronology chronology40 = localDate34.getChronology();
        long long44 = chronology40.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = dateTimeField53.getAsText((long) (short) 1, locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(32L, chronology40, locale55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate61 = localDate58.withField(dateTimeFieldType59, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTime(readableInstant62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMonths((int) '4');
        org.joda.time.DateTime dateTime67 = dateTime65.plus((-48469999L));
        org.joda.time.DateTime dateTime69 = dateTime65.plusSeconds(2);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate73 = localDate70.withField(dateTimeFieldType71, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDate73.toDateTime(readableInstant74);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate78 = localDate76.minusMonths((int) (short) -1);
        boolean boolean80 = localDate76.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology81 = localDate76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology83 = chronology81.withZone(dateTimeZone82);
        org.joda.time.DateTime dateTime84 = localDate73.toDateTimeAtCurrentTime(dateTimeZone82);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate((java.lang.Object) dateTime65, dateTimeZone82);
        org.joda.time.DateTimeZone dateTimeZone87 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone87);
        long long90 = dateTimeZone82.getMillisKeepLocal(dateTimeZone87, (long) (byte) -1);
        dateTimeParserBucket57.setZone(dateTimeZone87);
        java.util.Locale locale92 = dateTimeParserBucket57.getLocale();
        boolean boolean93 = dateTimeParserBucket24.restoreState((java.lang.Object) locale92);
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = org.joda.time.DateTimeFieldType.minuteOfHour();
        dateTimeParserBucket24.saveField(dateTimeFieldType94, 9);
        org.joda.time.DurationFieldType durationFieldType97 = dateTimeFieldType94.getRangeDurationType();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-54111578L) + "'", long29 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-54111578L) + "'", long31 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 200L + "'", long44 == 200L);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-1L) + "'", long90 == (-1L));
        org.junit.Assert.assertNotNull(locale92);
// flaky:         org.junit.Assert.assertEquals(locale92.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertNotNull(durationFieldType97);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        long long19 = dateTimeField8.getDifferenceAsLong((long) (short) 1, 200L);
        int int20 = dateTimeField8.getMinimumValue();
        int int21 = dateTimeField8.getMaximumValue();
        org.joda.time.DurationField durationField22 = dateTimeField8.getLeapDurationField();
        int int23 = dateTimeField8.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((-1L), dateTimeZone25);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfDay();
        org.joda.time.LocalTime localTime28 = property27.withMinimumValue();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate30.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property37 = localDate30.yearOfEra();
        org.joda.time.LocalDate localDate38 = property37.roundFloorCopy();
        org.joda.time.LocalDate localDate39 = property37.roundFloorCopy();
        org.joda.time.LocalDate localDate40 = property37.roundCeilingCopy();
        org.joda.time.LocalDate localDate41 = property37.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField42 = property37.getField();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate49 = localDate43.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property50 = localDate43.yearOfEra();
        org.joda.time.LocalDate localDate51 = property50.roundFloorCopy();
        org.joda.time.LocalDate localDate52 = property50.roundFloorCopy();
        org.joda.time.LocalDate localDate53 = property50.roundCeilingCopy();
        org.joda.time.LocalDate localDate54 = property50.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate55 = property50.withMaximumValue();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.Chronology chronology62 = localDate56.getChronology();
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now(chronology62);
        int int64 = property50.compareTo((org.joda.time.ReadablePartial) localDate63);
        org.joda.time.LocalDate localDate66 = property50.addToCopy(622);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate70 = localDate67.withField(dateTimeFieldType68, (int) (byte) -1);
        org.joda.time.LocalDate localDate72 = localDate67.minusYears((int) ' ');
        int int73 = localDate72.getDayOfYear();
        int[] intArray74 = localDate72.getValues();
        int int75 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) localDate66, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = dateTimeField8.set((org.joda.time.ReadablePartial) localTime28, 21911902, intArray74, 54126273);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54126273 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 53 + "'", int73 == 53);
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[1990, 2, 22]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        boolean boolean15 = property6.equals((java.lang.Object) localDate14);
        org.joda.time.LocalDate localDate17 = localDate14.minusMonths(0);
        org.joda.time.Chronology chronology18 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.secondOfMinute();
        org.joda.time.DurationField durationField20 = chronology18.weekyears();
        long long23 = durationField20.subtract((long) 943, 22001921L);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456009924,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=53,MILLISECOND=122,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-694313564313599057L) + "'", long23 == (-694313564313599057L));
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfDay();
        int int10 = property9.get();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime16.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        mutableDateTime21.add(durationFieldType25, (-1));
        org.joda.time.DateTime dateTime29 = dateTime16.withFieldAdded(durationFieldType25, (int) (byte) 1);
        org.joda.time.DateTime dateTime31 = dateTime16.plusSeconds(0);
        long long32 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableDateTime mutableDateTime33 = property9.roundCeiling();
        org.joda.time.DateTimeField dateTimeField34 = property9.getField();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22133143 + "'", int10 == 22133143);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 63839750400000L + "'", long32 == 63839750400000L);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        int int3 = localDateTime2.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withYearOfEra(54132);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.parse("2022");
        int int8 = localDateTime7.size();
        boolean boolean9 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        mutableDateTime0.setTime(readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = mutableDateTime0.toDateTime(dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.millisOfSecond();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:53.172+15:02:03.198" + "'", str1, "2022-02-22T06:08:53.172+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate0.withWeekOfWeekyear(23);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDate7.getFieldType(21984);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21984");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime13 = dateTime5.plusHours((int) '4');
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.Chronology chronology22 = localDate16.getChronology();
        long long26 = chronology22.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = dateTimeField35.getAsText((long) (short) 1, locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(32L, chronology22, locale37);
        org.joda.time.DateTimeField dateTimeField40 = chronology22.secondOfMinute();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.plus((-48469999L));
        org.joda.time.DateTime dateTime52 = dateTime48.plusSeconds(2);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate56.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) dateTime48, dateTimeZone65);
        org.joda.time.Chronology chronology69 = chronology22.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate77 = localDate71.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology78 = localDate77.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.era();
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        long long83 = chronology78.add(readablePeriod80, (long) (short) 100, 54113391);
        org.joda.time.DurationField durationField84 = chronology78.months();
        org.joda.time.DateTimeField dateTimeField85 = chronology78.year();
        boolean boolean86 = dateTimeZone65.equals((java.lang.Object) dateTimeField85);
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime13, dateTimeZone65);
        java.lang.String str88 = mutableDateTime87.toString();
        mutableDateTime87.addYears(22010237);
        mutableDateTime87.addWeeks(22027109);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 200L + "'", long26 == 200L);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L + "'", long83 == 100L);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "-0001-02-24T10:08:53.286+15:02:03.198" + "'", str88, "-0001-02-24T10:08:53.286+15:02:03.198");
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        long long10 = chronology6.add((long) 54133701, 1000L, 54123198);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology18 = chronology16.withZone(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekOfWeekyear();
        long long22 = dateTimeField19.addWrapField((long) ' ', 0);
        boolean boolean23 = dateTimeField19.isSupported();
        long long26 = dateTimeField19.add(1L, (int) 'a');
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.lang.String str29 = locale28.getVariant();
        java.lang.String str30 = dateTimeField19.getAsShortText(100, locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 21909, chronology6, locale28);
        // The following exception was thrown during execution in test generation
        try {
            long long37 = chronology6.getDateTimeMillis(8L, 33, 138, 21994871, 21990);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 54177331701L + "'", long10 == 54177331701L);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32L + "'", long22 == 32L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 58665600001L + "'", long26 == 58665600001L);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "100" + "'", str30, "100");
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone9.toTimeZone();
        int int13 = dateTimeZone9.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean16 = dateTimeZone9.isStandardOffset(51L);
        java.lang.String str18 = dateTimeZone9.getShortName((long) 54145498);
        java.lang.String str20 = dateTimeZone9.getNameKey((long) 22099609);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.035" + "'", str18, "+00:00:00.035");
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean26 = dateTimeFieldType14.isSupported(chronology21);
        mutableDateTime11.setChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField28 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType9.getField(chronology21);
        java.util.Locale locale34 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str35 = dateTimeField29.getAsText((long) 59, locale34);
        int int37 = dateTimeField29.getMinimumValue(58665600001L);
        boolean boolean38 = dateTimeField29.isLenient();
        boolean boolean39 = dateTimeField29.isLenient();
        java.util.Locale locale43 = new java.util.Locale("French", "2022-02-21T15:02:01.240Z");
        java.lang.String str44 = dateTimeField29.getAsShortText((long) 21914410, locale43);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-292275054) + "'", int37 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals(locale43.toString(), "french_2022-02-21T15:02:01.240Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970" + "'", str44, "1970");
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfMonth();
        int int6 = localDate0.getWeekOfWeekyear();
        int int7 = localDate0.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate0.withDayOfMonth(54131961);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54131961 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        long long17 = chronology7.add((long) 21888665, 1222300800000L, 21919);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.clockhourOfHalfday();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.Chronology chronology27 = localDate21.getChronology();
        long long31 = chronology27.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = dateTimeField40.getAsText((long) (short) 1, locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(32L, chronology27, locale42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.plus((-48469999L));
        org.joda.time.DateTime dateTime56 = dateTime52.plusSeconds(2);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate60 = localDate57.withField(dateTimeFieldType58, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTime(readableInstant61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology68 = localDate63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology70 = chronology68.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = localDate60.toDateTimeAtCurrentTime(dateTimeZone69);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((java.lang.Object) dateTime52, dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone74);
        long long77 = dateTimeZone69.getMillisKeepLocal(dateTimeZone74, (long) (byte) -1);
        dateTimeParserBucket44.setZone(dateTimeZone74);
        java.util.Locale locale79 = dateTimeParserBucket44.getLocale();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket44.setZone(dateTimeZone80);
        java.util.Locale locale82 = dateTimeParserBucket44.getLocale();
        java.lang.String str83 = locale82.getVariant();
        java.lang.String str84 = locale82.getDisplayScript();
        java.lang.String str86 = locale82.getExtension('u');
        java.lang.String str87 = dateTimeField18.getAsShortText(21882000, locale82);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 26791611257088665L + "'", long17 == 26791611257088665L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 200L + "'", long31 == 200L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "21882000" + "'", str87, "21882000");
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField10 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekOfWeekyear();
        int int13 = dateTimeField11.getMinimumValue(693684035251200414L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours(40);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(54132, 21942438, 152, 540, 54314571, 54128391, 474, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 540 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.weekOfWeekyear();
        java.lang.String str14 = property13.getName();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.addWrapField((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 54123121);
        long long20 = mutableDateTime16.getMillis();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.lang.String str24 = dateTimeZone21.getNameKey((long) 4);
        mutableDateTime16.setZone(dateTimeZone21);
        int int27 = dateTimeZone21.getOffsetFromLocal((long) 22105365);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456010432,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=53,MILLISECOND=630,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "weekOfWeekyear" + "'", str14, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644851210432L + "'", long20 == 1644851210432L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertNull(str24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 54123198 + "'", int27 == 54123198);
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundFloorCopy();
        org.joda.time.LocalDate localDate17 = property15.roundFloorCopy();
        org.joda.time.LocalDate localDate18 = property15.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        org.joda.time.LocalDate localDate20 = property15.roundCeilingCopy();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths((int) '4');
        org.joda.time.DateTime dateTime30 = dateTime26.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        mutableDateTime31.add(durationFieldType35, (-1));
        org.joda.time.DateTime dateTime39 = dateTime26.withFieldAdded(durationFieldType35, (int) (byte) 1);
        org.joda.time.DateTime.Property property40 = dateTime39.minuteOfDay();
        int int41 = dateTime39.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Calendar calendar46 = mutableDateTime42.toCalendar(locale45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        mutableDateTime42.setMillis(readableInstant51);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime42.hourOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime60.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property65 = dateTime63.property(dateTimeFieldType64);
        mutableDateTime42.set(dateTimeFieldType64, 52);
        int int68 = dateTime39.get(dateTimeFieldType64);
        boolean boolean69 = localDate20.isSupported(dateTimeFieldType64);
        org.joda.time.DateTime.Property property70 = dateTime5.property(dateTimeFieldType64);
        org.joda.time.DateTime dateTime71 = property70.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645456010453,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=53,MILLISECOND=651,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDurationAdded(readableDuration11, 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.minusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plusSeconds(86399999);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusHours(100);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromCalendarFields(calendar26);
        org.joda.time.LocalDate.Property property28 = localDate27.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        boolean boolean38 = dateTimeZone29.equals((java.lang.Object) dateTimeZone36);
        org.joda.time.Interval interval39 = localDate27.toInterval(dateTimeZone36);
        int int40 = localDate27.size();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDate localDate42 = localDate27.minus(readablePeriod41);
        org.joda.time.LocalDate localDate44 = localDate42.minusYears(138);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDate42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645456010502,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=53,MILLISECOND=700,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear(22003568);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-22T06:06:55.622+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-22T06:06:55.622+15:02:03.198' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        mutableDateTime0.setTime(readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = mutableDateTime0.toDateTime(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime14 = localDate11.toDateTimeAtCurrentTime();
        int int15 = localDate11.getYear();
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property17 = localDate11.monthOfYear();
        int int18 = localDate11.getMonthOfYear();
        int int19 = localDate11.getEra();
        java.lang.Object obj20 = null;
        boolean boolean21 = localDate11.equals(obj20);
        org.joda.time.DateTime dateTime22 = localDate11.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readablePeriod23);
        boolean boolean25 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:53.768+15:02:03.198" + "'", str1, "2022-02-22T06:08:53.768+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears(54135502);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears(21978507);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        int int8 = localTime6.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime10 = localTime6.withSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        org.joda.time.LocalTime.Property property13 = localTime6.property(dateTimeFieldType11);
        int int14 = property13.getMinimumValueOverall();
        int int15 = property13.getLeapAmount();
        java.lang.String str16 = property13.getAsText();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "197" + "'", str16, "197");
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 8001879, dateTimeZone1);
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        int int6 = localDate2.size();
        int int7 = localDate2.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate2.era();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField9.set((long) 54311, 21986694);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21986694 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("United States", throwable2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("52", (java.lang.Throwable) iOException3);
        java.io.IOException iOException7 = new java.io.IOException("23:59:35.999");
        iOException3.addSuppressed((java.lang.Throwable) iOException7);
        java.io.IOException iOException10 = new java.io.IOException("yearOfCentury");
        java.lang.Throwable[] throwableArray11 = iOException10.getSuppressed();
        iOException7.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.lang.Throwable[] throwableArray14 = iOException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1L), dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property13 = localTime10.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMinimumValue();
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        boolean boolean16 = localTime7.equals((java.lang.Object) localTime14);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("2022-02-22T06:04:42.947+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T06:04:42.947+15:02:03.198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) localTime2, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((-1L), dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime9.minus(readablePeriod12);
        int int15 = localTime13.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime17 = localTime13.withSecondOfMinute((int) '#');
        int int18 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.DateTime dateTime19 = localTime17.toDateTimeToday();
        org.joda.time.DateTime dateTime21 = dateTime19.plusYears(21889439);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime19.withEra(457);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfDay();
        java.lang.String str10 = property9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Calendar calendar15 = mutableDateTime11.toCalendar(locale14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        mutableDateTime11.setMillis(readableInstant20);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        java.lang.String str26 = mutableDateTime25.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.secondOfDay();
        mutableDateTime25.addMillis(54124521);
        long long30 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.millisOfSecond();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.Chronology chronology40 = localDate34.getChronology();
        long long44 = chronology40.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.weekOfWeekyear();
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = dateTimeField53.getAsText((long) (short) 1, locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket(32L, chronology40, locale55);
        dateTimeParserBucket57.setOffset(54111610);
        long long62 = dateTimeParserBucket57.computeMillis(false, "Property[millisOfDay]");
        long long64 = dateTimeParserBucket57.computeMillis(false);
        dateTimeParserBucket57.setOffset(10373);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.tz.NameProvider nameProvider69 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str73 = nameProvider69.getShortName(locale70, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate78 = localDate76.minusMonths((int) (short) -1);
        boolean boolean80 = localDate76.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology81 = localDate76.getChronology();
        org.joda.time.Chronology chronology82 = localDate76.getChronology();
        long long86 = chronology82.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean87 = dateTimeFieldType75.isSupported(chronology82);
        java.util.Locale locale88 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology82, locale88);
        java.lang.String str90 = locale88.getLanguage();
        java.lang.String str93 = nameProvider69.getName(locale88, "zh", "2022-02-21T15:02:25.259Z");
        dateTimeParserBucket57.saveField(dateTimeFieldType67, "2022-02-21T15:02:33.597Z", locale88);
        int int95 = property32.getMaximumTextLength(locale88);
        java.lang.String str96 = property9.getAsText(locale88);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[millisOfDay]" + "'", str10, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645456010790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=53,MILLISECOND=988,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T06:08:53.988+15:02:03.198" + "'", str26, "2022-02-22T06:08:53.988+15:02:03.198");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 200L + "'", long44 == 200L);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-54111578L) + "'", long62 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-54111578L) + "'", long64 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(nameProvider69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 200L + "'", long86 == 200L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "fr" + "'", str90, "fr");
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "22133988" + "'", str96, "22133988");
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(10);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plus(readableDuration6);
        java.lang.String str8 = localDateTime2.toString();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property9.getLocalDateTime();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-01-01T00:00:00.000" + "'", str8, "2022-01-01T00:00:00.000");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-22T06:08:10.700+15:02:03.198");
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.minusMinutes((int) (short) -1);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(16);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getEra();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.minusDays(54131261);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusMillis(21882503);
        int int20 = localDateTime12.getEra();
        int int21 = localDateTime12.getDayOfYear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.minus(readablePeriod22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withDurationAdded(readableDuration24, 21908759);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readableDuration27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMinutes(21978238);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = localTime9.compareTo((org.joda.time.ReadablePartial) localDateTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime14.plus((-48469999L));
        org.joda.time.DateTime dateTime18 = dateTime14.plusSeconds(2);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate22.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) dateTime14, dateTimeZone31);
        org.joda.time.DateTime dateTime36 = dateTime14.minusDays(8);
        org.joda.time.DateTime dateTime38 = dateTime14.withYearOfEra(902);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime14.plus(readableDuration39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(286);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(22057846, 625, 21978507, 73, 22021131, 54133104, 22126505, chronology43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime localTime7 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1L), dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.LocalTime localTime18 = localTime14.withField(dateTimeFieldType15, 0);
        boolean boolean19 = localTime7.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((-1L), dateTimeZone21);
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfDay();
        java.lang.String str24 = property23.toString();
        org.joda.time.DurationField durationField25 = property23.getLeapDurationField();
        org.joda.time.LocalTime localTime27 = property23.addCopy((long) 2022);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType15.getField(chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology28);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[millisOfDay]" + "'", str24, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.year();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        long long15 = dateTimeZone12.adjustOffset((long) (-53), false);
        java.lang.String str17 = dateTimeZone12.getShortName((long) 10);
        org.joda.time.Chronology chronology18 = chronology6.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readablePeriod20);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-53L) + "'", long15 == (-53L));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.035" + "'", str17, "+00:00:00.035");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        boolean boolean1 = dateTimeFormatter0.isPrinter();
        org.joda.time.Chronology chronology2 = dateTimeFormatter0.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (short) -1);
        java.lang.String str8 = dateTimeFormatter4.print(60000L);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter4.withChronology(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter4.withZoneUTC();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.Chronology chronology19 = localDate13.getChronology();
        long long23 = chronology19.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekOfWeekyear();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.lang.String str35 = dateTimeField32.getAsText((long) (short) 1, locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(32L, chronology19, locale34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.plus((-48469999L));
        org.joda.time.DateTime dateTime48 = dateTime44.plusSeconds(2);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate52.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((java.lang.Object) dateTime44, dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone66);
        long long69 = dateTimeZone61.getMillisKeepLocal(dateTimeZone66, (long) (byte) -1);
        dateTimeParserBucket36.setZone(dateTimeZone66);
        java.util.Locale locale71 = dateTimeParserBucket36.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter4.withLocale(locale71);
        java.util.Locale locale73 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter72.withLocale(locale73);
        org.joda.time.format.DateTimeParser dateTimeParser75 = dateTimeFormatter72.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser75);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate84 = localDate78.withYear((int) (byte) 1);
        java.lang.String str85 = dateTimeFormatter77.print((org.joda.time.ReadablePartial) localDate84);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter77.withPivotYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter87.withZoneUTC();
        boolean boolean89 = dateTimeFormatter87.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser90 = dateTimeFormatter87.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser90);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "3:03 PM" + "'", str8, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeParser75);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localDate84);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str85, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeParser90);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        int int8 = property7.get();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22134163 + "'", int2 == 22134163);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(52);
        int int9 = localTime2.size();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime2.plus(readablePeriod10);
        org.joda.time.LocalTime.Property property12 = localTime2.millisOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = dateTime21.withMillisOfSecond(0);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime31.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property36 = dateTime34.property(dateTimeFieldType35);
        org.joda.time.DateTime dateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime38 = property36.getDateTime();
        org.joda.time.DateTime dateTime39 = property36.roundHalfEvenCopy();
        java.lang.String str40 = dateTime39.toString();
        int int41 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        long long53 = dateTimeField50.addWrapField((long) ' ', 0);
        boolean boolean54 = dateTimeField50.isSupported();
        long long57 = dateTimeField50.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField50.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField50.getType();
        org.joda.time.DateTime.Property property60 = dateTime39.property(dateTimeFieldType59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType59.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime63 = localTime2.withFieldAdded(durationFieldType61, 54115634);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "0001-01-01T00:00:00.000+15:02:03.198" + "'", str40, "0001-01-01T00:00:00.000+15:02:03.198");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 58665600001L + "'", long57 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationFieldType61);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DurationField durationField12 = chronology5.seconds();
        long long15 = durationField12.getMillis(59, (long) 2022);
        long long16 = durationField12.getUnitMillis();
        java.lang.String str17 = durationField12.toString();
        long long19 = durationField12.getValueAsLong((long) (-1));
        long long22 = durationField12.getValueAsLong((long) 54145498, (long) (-53));
        int int25 = durationField12.getDifference(4255573270L, (-4406399928L));
        int int27 = durationField12.getValue((-212879268L));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 59000L + "'", long15 == 59000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1000L + "'", long16 == 1000L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DurationField[seconds]" + "'", str17, "DurationField[seconds]");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 54145L + "'", long22 == 54145L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8661973 + "'", int25 == 8661973);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-212879) + "'", int27 == (-212879));
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime10.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime10.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime18 = dateTime10.plusHours((int) '4');
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime0.weekOfWeekyear();
        java.lang.String str21 = mutableDateTime0.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = mutableDateTime0.getZone();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456011046,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=54,MILLISECOND=244,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-0001-02-22T06:08:54.244+15:02:03.198" + "'", str21, "-0001-02-22T06:08:54.244+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeZone22);
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.Integer int3 = dateTimeFormatter0.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        boolean boolean6 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 270);
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime15.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime15.withDurationAdded(readableDuration20, (int) 'a');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths((int) '4');
        org.joda.time.DateTime dateTime32 = dateTime30.plus((-48469999L));
        org.joda.time.DateTime dateTime34 = dateTime30.plusSeconds(2);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology48 = chronology46.withZone(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = localDate38.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) dateTime30, dateTimeZone47);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plus((-48469999L));
        org.joda.time.DateTime dateTime62 = dateTime58.plusSeconds(2);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate66 = localDate63.withField(dateTimeFieldType64, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTime(readableInstant67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology74 = localDate69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDate66.toDateTimeAtCurrentTime(dateTimeZone75);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) dateTime58, dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone80);
        long long83 = dateTimeZone75.getMillisKeepLocal(dateTimeZone80, (long) (byte) -1);
        long long85 = dateTimeZone47.getMillisKeepLocal(dateTimeZone80, (long) 8);
        org.joda.time.DateTime dateTime86 = dateTime15.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTime dateTime88 = dateTime86.withWeekyear(54123198);
        org.joda.time.DateTime dateTime89 = dateTime88.withTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(stringBuffer9, (org.joda.time.ReadableInstant) dateTime88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 8L + "'", long85 == 8L);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        mutableDateTime8.setMillis((long) 54110102);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.getMutableDateTime();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        mutableDateTime30.add(durationFieldType34, (-1));
        org.joda.time.DateTime dateTime38 = dateTime25.withFieldAdded(durationFieldType34, (int) (byte) 1);
        boolean boolean39 = dateTime18.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime38.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.era();
        org.joda.time.DateTime dateTime43 = property42.roundCeilingCopy();
        org.joda.time.DateTime dateTime45 = dateTime43.minusWeeks(52);
        org.joda.time.DateTime dateTime47 = dateTime45.withYearOfEra(54138295);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMonths((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime53.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime53.withMillisOfSecond(0);
        boolean boolean60 = dateTime59.isBeforeNow();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate63.equals((java.lang.Object) (byte) 10);
        int int66 = localDate63.getDayOfMonth();
        org.joda.time.LocalDate localDate68 = localDate63.withDayOfYear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.Chronology chronology76 = localDate70.getChronology();
        long long80 = chronology76.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean81 = dateTimeFieldType69.isSupported(chronology76);
        boolean boolean82 = localDate63.isSupported(dateTimeFieldType69);
        boolean boolean83 = dateTime59.isSupported(dateTimeFieldType69);
        org.joda.time.DateTime.Property property84 = dateTime45.property(dateTimeFieldType69);
        org.joda.time.DateTime dateTime86 = property84.setCopy(2);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        org.joda.time.DateTime dateTime89 = dateTime86.withPeriodAdded(readablePeriod87, 21);
        org.joda.time.DateTime.Property property90 = dateTime86.secondOfMinute();
        int int91 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime86);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:54.296+15:02:03.198" + "'", str1, "2022-02-22T06:08:54.296+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 200L + "'", long80 == 200L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        long long19 = dateTimeField8.getDifferenceAsLong((long) (short) 1, 200L);
        int int20 = dateTimeField8.getMinimumValue();
        int int21 = dateTimeField8.getMaximumValue();
        java.lang.String str22 = dateTimeField8.toString();
        boolean boolean24 = dateTimeField8.isLeap((long) 21983281);
        int int25 = dateTimeField8.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str22, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.lang.String str5 = mutableDateTime0.toString();
        mutableDateTime0.addWeeks(901);
        org.joda.time.Chronology chronology8 = mutableDateTime0.getChronology();
        mutableDateTime0.addWeekyears(54130144);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.addWrapField(0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.monthOfYear();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456011262,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=54,MILLISECOND=460,ZONE_OFFSET=54123198,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T06:08:54.460+15:02:03.198" + "'", str5, "2022-02-22T06:08:54.460+15:02:03.198");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(119, 22070358, 385, 709, 38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 709 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(0L);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = localDate1.getFields();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate5 = property3.addToCopy(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(2017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2017 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        long long20 = dateTimeField17.addWrapField((long) ' ', 0);
        boolean boolean21 = dateTimeField17.isSupported();
        long long24 = dateTimeField17.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField17.getType();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = dateTimeField17.getAsText((long) (byte) 1, locale27);
        long long30 = dateTimeField17.roundHalfEven((long) 3);
        boolean boolean31 = dateTimeField17.isLenient();
        mutableDateTime8.setRounding(dateTimeField17);
        // The following exception was thrown during execution in test generation
        try {
            long long35 = dateTimeField17.set((-45359968L), 54152679);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54152679 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:54.486+15:02:03.198" + "'", str1, "2022-02-22T06:08:54.486+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 58665600001L + "'", long24 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-259200000L) + "'", long30 == (-259200000L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withYear(54156019);
        org.joda.time.LocalDate localDate12 = localDate8.minusDays((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate8.withMonthOfYear(22106691);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22106691 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        int int2 = localDateTime1.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        mutableDateTime4.add(durationFieldType8, (-1));
        long long11 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime4.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter0.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withDefaultYear(54146299);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = dateTimeFormatter15.parseLocalDateTime("-0001-02-21T15:04:39.903Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-0001-02-21T15:04:39.903Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.DateTime dateTime25 = dateTime12.withFieldAdded(durationFieldType21, (int) (byte) 1);
        boolean boolean26 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        long long38 = dateTimeField35.addWrapField((long) ' ', 0);
        boolean boolean39 = dateTimeField35.isSupported();
        long long42 = dateTimeField35.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField35.getType();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = dateTimeField35.getAsText((long) (byte) 1, locale45);
        java.lang.String str47 = locale45.getLanguage();
        java.util.Calendar calendar48 = dateTime25.toCalendar(locale45);
        org.joda.time.DateTime dateTime50 = dateTime25.withHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime50.toMutableDateTime();
        org.joda.time.DateTime dateTime53 = dateTime50.minusYears(2122);
        boolean boolean55 = dateTime50.isAfter((long) 21915);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime57 = dateTime50.withMonthOfYear(22078292);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22078292 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32L + "'", long38 == 32L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 58665600001L + "'", long42 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "sunday, february 21, -0001" + "'", str47, "sunday, february 21, -0001");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=-62194294388520,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=54,MILLISECOND=678,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        int int10 = durationField7.getDifference(10L, (-1L));
        long long13 = durationField7.add((long) 410, 21921538);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1315292280410L + "'", long13 == 1315292280410L);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        int int6 = localDate2.size();
        int int7 = localDate2.getYearOfEra();
        int int8 = localDate2.getMonthOfYear();
        int int9 = localDate2.getYearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate2.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDate2.toString("2022-02-22T06:05:12.775+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.Chronology chronology20 = localDate14.getChronology();
        long long24 = chronology20.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean25 = dateTimeFieldType13.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.weekyearOfCentury();
        org.joda.time.DurationField durationField27 = chronology20.halfdays();
        mutableDateTime0.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField29 = chronology20.hourOfHalfday();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.lang.String str32 = dateTimeField29.getAsText((long) 21919404, locale31);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456011586,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=54,MILLISECOND=784,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 200L + "'", long24 == 200L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "6" + "'", str32, "6");
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.DateTime dateTime8 = localDate0.toDateTimeAtMidnight();
        boolean boolean10 = dateTime8.isEqual((long) 21);
        org.joda.time.DateTime.Property property11 = dateTime8.weekyear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime29.add(durationFieldType33, (-1));
        org.joda.time.DateTime dateTime37 = dateTime24.withFieldAdded(durationFieldType33, (int) (byte) 1);
        boolean boolean38 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime37.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = property41.roundCeilingCopy();
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.Chronology chronology52 = localDate46.getChronology();
        long long56 = chronology52.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean57 = dateTimeFieldType45.isSupported(chronology52);
        java.lang.String str58 = dateTimeFieldType45.getName();
        org.joda.time.DateTime.Property property59 = dateTime42.property(dateTimeFieldType45);
        int int60 = dateTime8.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime62 = dateTime8.minusMillis(21894);
        org.joda.time.DateTime.Property property63 = dateTime8.era();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 200L + "'", long56 == 200L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "minuteOfDay" + "'", str58, "minuteOfDay");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream3 = languageRangeList1.stream();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9, filteringMode12);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream17 = languageRangeList15.stream();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.lang.String str25 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList23, filteringMode26);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList23, filteringMode28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.Chronology chronology37 = localDate31.getChronology();
        long long41 = chronology37.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean42 = dateTimeFieldType30.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.weekyearOfCentury();
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.lang.String str46 = dateTimeField43.getAsText((long) 54120, locale45);
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str48 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet47);
        boolean boolean49 = strSet47.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeStream3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode12.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeStream17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode26.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode28.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 200L + "'", long41 == 200L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "70" + "'", str46, "70");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long5 = dateTimeZone2.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(10);
        int int15 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = property16.setCopy("2022-02-22T06:06:17.113+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:06:17.113+15:02:03.198\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-133144884L) + "'", long5 == (-133144884L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 212880000 + "'", int15 == 212880000);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        long long13 = dateTimeField11.roundHalfFloor((long) 47);
        java.lang.String str14 = dateTimeField11.toString();
        java.lang.String str16 = dateTimeField11.getAsShortText((long) 54150465);
        long long18 = dateTimeField11.roundHalfEven(135L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str14, "DateTimeField[weekyearOfCentury]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "70" + "'", str16, "70");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        int int3 = localDateTime2.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((-1));
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.dayOfYear();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, 0);
        int[] intArray21 = localDateTime20.getValues();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDayOfYear((int) 'a');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis(54123);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = property26.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime27.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1984, 5, 24, 22734935]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-21T15:02:02.278Z");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2022-02-22T06:05:43.769+15:02:03.198");
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        boolean boolean7 = strSet6.isEmpty();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        java.util.Locale locale10 = java.util.Locale.getDefault();
        java.util.Calendar calendar11 = mutableDateTime7.toCalendar(locale10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        mutableDateTime7.setMillis(readableInstant16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime7.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Calendar calendar24 = mutableDateTime20.toCalendar(locale23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        mutableDateTime20.setMillis(readableInstant29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths((int) '4');
        org.joda.time.DateTime dateTime41 = dateTime39.plus((-48469999L));
        org.joda.time.DateTime dateTime43 = dateTime39.plusSeconds(2);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = localDate47.toDateTimeAtCurrentTime(dateTimeZone56);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) dateTime39, dateTimeZone56);
        mutableDateTime20.setZone(dateTimeZone56);
        mutableDateTime7.setZone(dateTimeZone56);
        long long64 = dateTimeZone56.convertLocalToUTC((-57801945599593L), false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(10373, 738886, 0, 22063011, 54744394, 22051075, 22106412, dateTimeZone56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22063011 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645456011783,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=54,MILLISECOND=981,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645456011783,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=54,MILLISECOND=981,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-57801999722791L) + "'", long64 == (-57801999722791L));
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDayOfYear((int) 'a');
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes((int) (short) 10);
        int int17 = localDateTime16.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusDays((-1));
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMillis((-53));
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1984, 5, 24, 22734997]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField45 = chronology6.secondOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekOfWeekyear();
        long long57 = dateTimeField54.addWrapField((long) ' ', 0);
        boolean boolean58 = dateTimeField54.isSupported();
        long long61 = dateTimeField54.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField54.getType();
        long long65 = dateTimeField54.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate72 = localDate66.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property73 = localDate66.yearOfEra();
        org.joda.time.LocalDate localDate74 = property73.roundFloorCopy();
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = dateTimeField54.getAsText((org.joda.time.ReadablePartial) localDate74, locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) 348, chronology6, locale75, (java.lang.Integer) 190, 22090096);
        dateTimeParserBucket79.setPivotYear((java.lang.Integer) 22004092);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 32L + "'", long57 == 32L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 58665600001L + "'", long61 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "52" + "'", str76, "52");
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        mutableDateTime5.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.property(dateTimeFieldType10);
        int int12 = mutableDateTime0.get(dateTimeFieldType10);
        org.joda.time.Instant instant13 = mutableDateTime0.toInstant();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        long long25 = dateTimeField22.addWrapField((long) ' ', 0);
        boolean boolean26 = dateTimeField22.isSupported();
        long long29 = dateTimeField22.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField22.getType();
        long long33 = dateTimeField22.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate40 = localDate34.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property41 = localDate34.yearOfEra();
        org.joda.time.LocalDate localDate42 = property41.roundFloorCopy();
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.lang.String str44 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDate42, locale43);
        org.joda.time.DateMidnight dateMidnight45 = localDate42.toDateMidnight();
        boolean boolean46 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) dateMidnight45);
        mutableDateTime0.addHours(0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfMonth(21969691);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21969691 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456011858,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=55,MILLISECOND=56,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 58665600001L + "'", long29 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "52" + "'", str44, "52");
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getName((long) 2000);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        java.util.TimeZone timeZone5 = dateTimeZone0.toTimeZone();
        java.lang.String str7 = dateTimeZone0.getName((long) 133);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(0L);
        org.joda.time.DateTimeField[] dateTimeFieldArray2 = localDate1.getFields();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.Chronology chronology11 = localDate5.getChronology();
        long long15 = chronology11.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = dateTimeField24.getAsText((long) (short) 1, locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(32L, chronology11, locale26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMonths((int) '4');
        org.joda.time.DateTime dateTime38 = dateTime36.plus((-48469999L));
        org.joda.time.DateTime dateTime40 = dateTime36.plusSeconds(2);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology52 = localDate47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = localDate44.toDateTimeAtCurrentTime(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) dateTime36, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone58);
        long long61 = dateTimeZone53.getMillisKeepLocal(dateTimeZone58, (long) (byte) -1);
        dateTimeParserBucket28.setZone(dateTimeZone58);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(dateTimeZone58);
        org.joda.time.DateTime dateTime66 = localDate1.toDateTimeAtStartOfDay(dateTimeZone58);
        java.util.Locale locale70 = new java.util.Locale("3", "");
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology77 = localDate72.getChronology();
        org.joda.time.Chronology chronology78 = localDate72.getChronology();
        long long82 = chronology78.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate85 = localDate83.minusMonths((int) (short) -1);
        boolean boolean87 = localDate83.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology88 = localDate83.getChronology();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology90 = chronology88.withZone(dateTimeZone89);
        org.joda.time.DateTimeField dateTimeField91 = chronology88.weekOfWeekyear();
        java.util.Locale locale93 = java.util.Locale.getDefault();
        java.lang.String str94 = dateTimeField91.getAsText((long) (short) 1, locale93);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket(32L, chronology78, locale93);
        java.lang.String str96 = locale70.getDisplayCountry(locale93);
        java.lang.String str97 = dateTimeZone58.getName((-1708655110588800000L), locale70);
        int int99 = dateTimeZone58.getOffsetFromLocal((-1645401880587L));
        org.junit.Assert.assertNotNull(dateTimeFieldArray2);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 200L + "'", long15 == 200L);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertEquals(locale70.toString(), "3");
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 200L + "'", long82 == 200L);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(locale93);
// flaky:         org.junit.Assert.assertEquals(locale93.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1" + "'", str94, "1");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+15:02:03.198" + "'", str97, "+15:02:03.198");
// flaky:         org.junit.Assert.assertTrue("'" + int99 + "' != '" + 54123198 + "'", int99 == 54123198);
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime14 = property10.setCopy(11);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime dateTime17 = dateTime14.plusSeconds(0);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        long long27 = chronology23.add((long) 54133701, 1000L, 54123198);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.era();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime17, chronology23);
        mutableDateTime29.addDays(21958469);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.Chronology chronology39 = localDate33.getChronology();
        long long43 = chronology39.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean44 = dateTimeFieldType32.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField45 = chronology39.weekyearOfCentury();
        mutableDateTime29.setRounding(dateTimeField45);
        int int48 = dateTimeField45.getMinimumValue((long) 21903);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 54177331701L + "'", long27 == 54177331701L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 200L + "'", long43 == 200L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(59000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        boolean boolean4 = mutableDateTime1.isSupported(dateTimeFieldType2);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.dayOfWeek();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime1.add(readableDuration6, 21907);
        org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime();
        org.joda.time.Instant instant10 = mutableDateTime1.toInstant();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean26 = dateTimeFieldType14.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField28 = chronology21.halfdays();
        mutableDateTime1.setChronology(chronology21);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj0, chronology21);
        org.joda.time.DurationField durationField31 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.era();
        org.joda.time.DurationField durationField33 = chronology21.weeks();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.millisOfDay();
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456012030,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=55,MILLISECOND=228,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = localTime2.getValue(80);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 80");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        int int6 = mutableDateTime0.getHourOfDay();
        mutableDateTime0.setMillisOfDay(50);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:55.254+15:02:03.198" + "'", str1, "2022-02-22T06:08:55.254+15:02:03.198");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((-133144884L), dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Calendar calendar16 = mutableDateTime12.toCalendar(locale15);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromCalendarFields(calendar16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        int int21 = localDate18.indexOf(dateTimeFieldType19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.property(dateTimeFieldType19);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime11.hourOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime11.dayOfMonth();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456012103,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=55,MILLISECOND=301,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withHourOfDay(51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22135316 + "'", int2 == 22135316);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.minuteOfHour();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.Chronology chronology25 = localDate19.getChronology();
        long long29 = chronology25.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekOfWeekyear();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.lang.String str41 = dateTimeField38.getAsText((long) (short) 1, locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket(32L, chronology25, locale40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusMonths((int) '4');
        org.joda.time.DateTime dateTime52 = dateTime50.plus((-48469999L));
        org.joda.time.DateTime dateTime54 = dateTime50.plusSeconds(2);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate58 = localDate55.withField(dateTimeFieldType56, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDate58.toDateTime(readableInstant59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTime dateTime69 = localDate58.toDateTimeAtCurrentTime(dateTimeZone67);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate((java.lang.Object) dateTime50, dateTimeZone67);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone72);
        long long75 = dateTimeZone67.getMillisKeepLocal(dateTimeZone72, (long) (byte) -1);
        dateTimeParserBucket42.setZone(dateTimeZone72);
        java.util.Locale locale77 = dateTimeParserBucket42.getLocale();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket42.setZone(dateTimeZone78);
        dateTimeParserBucket42.setPivotYear((java.lang.Integer) 59);
        java.util.Locale locale82 = dateTimeParserBucket42.getLocale();
        java.util.Locale locale83 = locale82.stripExtensions();
        java.lang.String str84 = locale82.toLanguageTag();
        int int85 = dateTimeField17.getMaximumTextLength(locale82);
        java.util.Locale locale86 = locale82.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = locale82.getUnicodeLocaleType("2022-02-22T06:05:34.103+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T06:05:34.103+15:02:03.198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 200L + "'", long29 == 200L);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertNotNull(locale77);
// flaky:         org.junit.Assert.assertEquals(locale77.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(locale83);
// flaky:         org.junit.Assert.assertEquals(locale83.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "und" + "'", str84, "und");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertNotNull(locale86);
// flaky:         org.junit.Assert.assertEquals(locale86.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withPeriodAdded(readablePeriod12, 0);
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTimeISO();
        boolean boolean17 = dateTime11.isAfter((long) 54150331);
        org.joda.time.Chronology chronology18 = dateTime11.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMillis(54134);
        org.joda.time.DateTime.Property property9 = dateTime6.year();
        int int10 = property9.get();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusHours(47);
        org.joda.time.DateTime dateTime4 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusMonths(1462);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withFieldAdded(durationFieldType8, 345);
        int int11 = localDateTime10.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        int int9 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int11 = localDateTime7.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.lang.String str14 = dateTimeFieldType13.toString();
        boolean boolean15 = localDateTime7.isSupported(dateTimeFieldType13);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.withPeriodAdded(readablePeriod16, 556);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay(2);
        int int23 = localDateTime22.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMonths(22005638);
        boolean boolean28 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime7.plusYears(22080125);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "centuryOfEra" + "'", str14, "centuryOfEra");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalTime localTime10 = localTime6.withField(dateTimeFieldType7, 0);
        int int11 = localTime10.size();
        org.joda.time.Chronology chronology12 = localTime10.getChronology();
        int int13 = localTime10.getMillisOfSecond();
        org.joda.time.LocalTime localTime15 = localTime10.minusMinutes(23);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localTime10.getFields();
        int int17 = localTime10.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 15 + "'", int17 == 15);
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        java.util.Locale locale3 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.lang.String str4 = locale3.toLanguageTag();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.monthOfYear();
        long long18 = dateTimeField15.addWrapField((long) 22075224, 8002);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 26287675224L + "'", long18 == 26287675224L);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        boolean boolean16 = dateTimeZone7.equals((java.lang.Object) dateTimeZone14);
        org.joda.time.Interval interval17 = localDate5.toInterval(dateTimeZone14);
        int int18 = localDate5.size();
        org.joda.time.LocalDate.Property property19 = localDate5.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.LocalDate localDate21 = property19.withMinimumValue();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456012377,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=55,MILLISECOND=575,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks(23);
        org.joda.time.DateTime.Property property12 = dateTime8.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime8.withEra(731);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 731 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DurationField durationField9 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfDay();
        long long13 = dateTimeField10.add(2629746000L, 46680000L);
        long long16 = dateTimeField10.add(21931872L, (long) 821);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 49309746000L + "'", long13 == 49309746000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 22752872L + "'", long16 == 22752872L);
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        boolean boolean11 = dateTimeZone2.equals((java.lang.Object) dateTimeZone9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter0.withZone(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone9);
        long long15 = dateTimeZone9.previousTransition((long) 409);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 409L + "'", long15 == 409L);
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.minusMinutes((int) (short) -1);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(16);
        int int12 = localTime9.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded(0L, 21919441);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(526);
        java.util.Locale locale14 = null;
        java.util.Calendar calendar15 = dateTime11.toCalendar(locale14);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645456012457,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=55,MILLISECOND=655,ZONE_OFFSET=54123198,DST_OFFSET=0]");
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.DateTime dateTime8 = localDate0.toDateTimeAtMidnight();
        int int9 = localDate0.getDayOfWeek();
        int int10 = localDate0.getEra();
        org.joda.time.LocalDate.Property property11 = localDate0.dayOfYear();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((int) (short) -1);
        java.lang.String str11 = dateTimeFormatter7.print(60000L);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.Chronology chronology22 = localDate16.getChronology();
        long long26 = chronology22.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = dateTimeField35.getAsText((long) (short) 1, locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(32L, chronology22, locale37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.plus((-48469999L));
        org.joda.time.DateTime dateTime51 = dateTime47.plusSeconds(2);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate55.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) dateTime47, dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone69);
        long long72 = dateTimeZone64.getMillisKeepLocal(dateTimeZone69, (long) (byte) -1);
        dateTimeParserBucket39.setZone(dateTimeZone69);
        java.util.Locale locale74 = dateTimeParserBucket39.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter7.withLocale(locale74);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter75.withPivotYear(524);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter75.withDefaultYear(54129);
        boolean boolean80 = dateTimeFormatter75.isPrinter();
        java.util.Locale locale81 = dateTimeFormatter75.getLocale();
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleAttributes();
        java.lang.String str83 = locale81.getDisplayScript();
        java.lang.String str86 = nameProvider0.getName(locale81, "0001-02-22", "Monday, January 1, 0001");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "3:03 PM" + "'", str11, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 200L + "'", long26 == 200L);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(locale74);
// flaky:         org.junit.Assert.assertEquals(locale74.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(locale81);
// flaky:         org.junit.Assert.assertEquals(locale81.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNull(str86);
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate11.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter7.withZone(dateTimeZone20);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter23.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((int) (short) -1);
        java.lang.String str29 = dateTimeFormatter25.print(60000L);
        org.joda.time.format.DateTimeParser dateTimeParser30 = dateTimeFormatter25.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser30);
        java.lang.String str33 = dateTimeFormatter31.print((long) 286);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = dateTimeFormatter31.parseLocalDateTime("2022-02-22T06:08:43.528+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:08:43.528+15:02:03.198\" is malformed at \"22-02-22T06:08:43.528+15:02:03.198\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimePrinter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3:03 PM" + "'", str29, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeParser30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "3:02 PM" + "'", str33, "3:02 PM");
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime localTime7 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property5.setCopy(21925706);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property5.setCopy("1970-01-01T06:07:49.481+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T06:07:49.481+15:02:03.198\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.Integer int3 = dateTimeFormatter0.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter0.getZone();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks(23);
        java.lang.Object obj17 = null;
        boolean boolean18 = dateTime16.equals(obj17);
        java.lang.String str19 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property20 = dateTime16.dayOfYear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths((int) '4');
        org.joda.time.DateTime dateTime39 = dateTime37.plus((-48469999L));
        org.joda.time.DateTime dateTime41 = dateTime37.plusSeconds(2);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate45.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) dateTime37, dateTimeZone54);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone59);
        long long62 = dateTimeZone54.getMillisKeepLocal(dateTimeZone59, (long) (byte) -1);
        boolean boolean63 = dateTimeZone59.isFixed();
        org.joda.time.Chronology chronology64 = chronology26.withZone(dateTimeZone59);
        org.joda.time.DateTimeField dateTimeField65 = chronology26.secondOfDay();
        boolean boolean66 = property20.equals((java.lang.Object) chronology26);
        org.joda.time.DurationField durationField67 = chronology26.centuries();
        org.joda.time.DateTimeField dateTimeField68 = chronology26.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "6:08 AM" + "'", str19, "6:08 AM");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-1L) + "'", long62 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 54119608, chronology1);
        int int3 = dateTime2.getDayOfWeek();
        boolean boolean4 = dateTime2.isAfterNow();
        org.joda.time.DateTime dateTime6 = dateTime2.minusDays(54111610);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-45359968L));
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1, chronology2);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setHourOfDay(58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime14 = property10.addToCopy(11);
        org.joda.time.DateTime dateTime16 = property10.addToCopy(427);
        int int17 = property10.getLeapAmount();
        org.joda.time.DateTime dateTime18 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime19 = property10.getDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        java.lang.String str10 = property4.getAsText(locale8);
        java.lang.String str11 = locale8.toLanguageTag();
        java.lang.String str12 = locale0.getDisplayVariant(locale8);
        java.lang.String str13 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456012799,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=55,MILLISECOND=997,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(21);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears((-1));
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfDay((int) (short) 10);
        int int20 = localDateTime19.getDayOfWeek();
        boolean boolean21 = property7.equals((java.lang.Object) localDateTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) property7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("und");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("\ufffd\ufffd\ufffd\ufffd\u4e0a\u53486:04");
        int int5 = timeZone3.getOffset((long) 46);
        boolean boolean6 = timeZone3.observesDaylightTime();
        int int7 = timeZone3.getRawOffset();
        boolean boolean8 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str9 = timeZone1.getID();
        int int10 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "GMT" + "'", str9, "GMT");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears(54135502);
        org.joda.time.LocalDate localDate11 = localDate7.withYearOfEra(901);
        org.joda.time.LocalDate.Property property12 = localDate7.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        java.io.IOException iOException0 = new java.io.IOException();
        java.lang.Throwable[] throwableArray1 = iOException0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = iOException0.getSuppressed();
        java.lang.String str3 = iOException0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.io.IOException" + "'", str3, "java.io.IOException");
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        long long8 = mutableDateTime7.getMillis();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15);
        java.util.Locale locale17 = java.util.Locale.getDefault();
        java.util.Calendar calendar18 = mutableDateTime14.toCalendar(locale17);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromCalendarFields(calendar18);
        org.joda.time.LocalDate.Property property20 = localDate19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        boolean boolean30 = dateTimeZone21.equals((java.lang.Object) dateTimeZone28);
        org.joda.time.Interval interval31 = localDate19.toInterval(dateTimeZone28);
        int int32 = localDate19.size();
        org.joda.time.LocalDate.Property property33 = localDate19.dayOfYear();
        java.util.Locale locale37 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = property33.getAsText(locale38);
        long long41 = property33.remainder();
        java.util.Locale locale45 = new java.util.Locale("2022-02-22T06:04:57.221+15:02:03.198", "en_US", "2022-02-22T06:04:48.505+15:02:03.198");
        int int46 = property33.getMaximumTextLength(locale45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = mutableDateTime12.toString("2022-02-22T06:06:01.764+15:02:03.198", locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:56.147+15:02:03.198" + "'", str1, "2022-02-22T06:08:56.147+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-62135650923198L) + "'", long8 == (-62135650923198L));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645456012949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=56,MILLISECOND=147,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals(locale37.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "sunday, february 21, -0001" + "'", str39, "sunday, february 21, -0001");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "53" + "'", str40, "53");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertEquals(locale45.toString(), "2022-02-22t06:04:57.221+15:02:03.198_EN_US_2022-02-22T06:04:48.505+15:02:03.198");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        org.joda.time.DateTime dateTime18 = dateTime5.withFieldAdded(durationFieldType14, (int) (byte) 1);
        int int19 = dateTime5.getSecondOfDay();
        org.joda.time.DateTime dateTime20 = dateTime5.toDateTime();
        boolean boolean22 = dateTime20.isEqual((-31536000000L));
        org.joda.time.LocalDate localDate23 = dateTime20.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime20.withYearOfCentury(21996512);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21996512 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22136 + "'", int19 == 22136);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) (short) 100, 54113391);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T06:07:46.483+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime13.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property18 = dateTime16.property(dateTimeFieldType17);
        org.joda.time.DateTime dateTime19 = property18.withMinimumValue();
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        boolean boolean21 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        java.lang.String str27 = mutableDateTime22.toString();
        mutableDateTime22.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime22.copy();
        mutableDateTime22.addHours((int) '#');
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        int int36 = dateTimeZone34.getOffset((long) 901);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone34);
        mutableDateTime22.setZoneRetainFields(dateTimeZone34);
        mutableDateTime7.setZone(dateTimeZone34);
        mutableDateTime7.addYears(21936);
        int int42 = mutableDateTime7.getMillisOfSecond();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:56.237+15:02:03.198" + "'", str1, "2022-02-22T06:08:56.237+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645456013039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=56,MILLISECOND=237,ZONE_OFFSET=54123198,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T06:08:56.237+15:02:03.198" + "'", str27, "2022-02-22T06:08:56.237+15:02:03.198");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 54123198 + "'", int36 == 54123198);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField10 = chronology6.months();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        int int12 = localDate11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.Chronology chronology16 = chronology6.withZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(1000L, chronology16);
        org.joda.time.Instant instant18 = mutableDateTime17.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.Chronology chronology26 = localDate20.getChronology();
        long long30 = chronology26.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean31 = dateTimeFieldType19.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.weekyearOfCentury();
        long long36 = chronology26.add((long) 21888665, 1222300800000L, 21919);
        mutableDateTime17.setChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField38 = chronology26.halfdayOfDay();
        long long41 = dateTimeField38.getDifferenceAsLong((long) 50, (long) 70021);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 200L + "'", long30 == 200L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 26791611257088665L + "'", long36 == 26791611257088665L);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        java.util.Locale locale1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-24T02:13:15.607+59:08", locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-24T02:13:15.607+59:08");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime0.add(readableDuration7);
        mutableDateTime0.addHours(22069);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology7.add(readablePeriod14, (long) 21983281, 0);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 21983281L + "'", long17 == 21983281L);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(0);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusYears(54135502);
        org.joda.time.Chronology chronology5 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.plusDays(21888665);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime65.add(readableDuration66, 54123005);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableDateTime65.add(readablePeriod69);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration72 = null;
        mutableDateTime71.add(readableDuration72);
        mutableDateTime71.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime71.property(dateTimeFieldType76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        mutableDateTime71.add(readableDuration78);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime71.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime81 = property80.roundHalfEven();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime81.minuteOfHour();
        int int83 = mutableDateTime65.compareTo((org.joda.time.ReadableInstant) mutableDateTime81);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        boolean boolean15 = property6.equals((java.lang.Object) localDate14);
        org.joda.time.LocalDate localDate17 = localDate14.plusYears(22135667);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456013327,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=56,MILLISECOND=525,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMonthOfYear(21920424);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21920424 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        dateTimeParserBucket24.setZone(dateTimeZone54);
        java.util.Locale locale59 = dateTimeParserBucket24.getLocale();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        dateTimeParserBucket24.setZone(dateTimeZone62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        dateTimeParserBucket24.saveField(dateTimeFieldType64, "2022-02-22T06:05:08.192+15:02:03.198", locale66);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        dateTimeParserBucket24.saveField(dateTimeFieldType70, 888);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withWeekyear(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusMonths(144);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.withPeriodAdded(readablePeriod15, 21921078);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek(22085044);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22085044 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        java.lang.String str13 = mutableDateTime8.toString();
        mutableDateTime8.addWeeks(901);
        org.joda.time.Chronology chronology16 = mutableDateTime8.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.halfdays();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("2022-02-22T06:04:43.393+15:02:03.198");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 22009337, chronology16, locale19);
        long long22 = dateTimeParserBucket20.computeMillis(false);
        java.util.Locale locale23 = dateTimeParserBucket20.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = localDateTime3.toString("2022-02-22T06:04:52.869+15:02:03.198", locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456013490,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=56,MILLISECOND=688,ZONE_OFFSET=54123198,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T06:08:56.688+15:02:03.198" + "'", str13, "2022-02-22T06:08:56.688+15:02:03.198");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-32113861L) + "'", long22 == (-32113861L));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(218, 54146835, 21984605, 430, 21971, 21987095);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 430 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        int int12 = dateTimeField11.getMinimumValue();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        long long24 = dateTimeField21.addWrapField((long) ' ', 0);
        boolean boolean25 = dateTimeField21.isSupported();
        long long28 = dateTimeField21.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField21.getType();
        long long32 = dateTimeField21.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate39 = localDate33.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property40 = localDate33.yearOfEra();
        org.joda.time.LocalDate localDate41 = property40.roundFloorCopy();
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.lang.String str43 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDate41, locale42);
        java.lang.String str44 = locale42.getDisplayLanguage();
        int int45 = dateTimeField11.getMaximumTextLength(locale42);
        int int47 = dateTimeField11.getMinimumValue((-62135650923198L));
        long long50 = dateTimeField11.add((long) 16, 0L);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate57 = localDate51.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property58 = localDate51.yearOfEra();
        org.joda.time.LocalDate localDate59 = property58.roundFloorCopy();
        org.joda.time.LocalDate localDate60 = property58.roundFloorCopy();
        org.joda.time.LocalDate localDate61 = property58.roundCeilingCopy();
        org.joda.time.LocalDate localDate62 = property58.roundFloorCopy();
        org.joda.time.LocalDate localDate64 = localDate62.withYear(2);
        java.lang.String str65 = localDate62.toString();
        java.util.Locale locale66 = java.util.Locale.UK;
        boolean boolean67 = locale66.hasExtensions();
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale66.getDisplayName(locale68);
        java.lang.String str70 = locale68.getDisplayLanguage();
        java.lang.String str71 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDate62, locale68);
        java.lang.String str73 = localDate62.toString("06:04");
        int int74 = localDate62.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 32L + "'", long24 == 32L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 58665600001L + "'", long28 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "52" + "'", str43, "52");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French" + "'", str44, "French");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 16L + "'", long50 == 16L);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-01-01" + "'", str65, "2022-01-01");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str69, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "German" + "'", str70, "German");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022" + "'", str71, "2022");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "06:04" + "'", str73, "06:04");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        int int9 = localDate8.getDayOfMonth();
        org.joda.time.LocalDate localDate11 = localDate8.plusDays(30);
        int int12 = localDate11.getEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime9 = property3.addCopy((long) 54149738);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay(21908000);
        org.joda.time.LocalTime localTime13 = localTime11.plusHours(256);
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property14.addCopy(3156159740309L);
        org.joda.time.LocalTime localTime18 = property14.addCopy(0L);
        org.joda.time.LocalTime localTime19 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime25.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime32 = dateTime25.withDurationAdded(readableDuration30, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int34 = dateTime25.get(dateTimeFieldType33);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Calendar calendar39 = mutableDateTime35.toCalendar(locale38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        mutableDateTime35.setMillis(readableInstant44);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime35.weekyear();
        java.lang.Object obj48 = mutableDateTime35.clone();
        org.joda.time.Chronology chronology49 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType33.getField(chronology49);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localTime19.get(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645456013567,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=56,MILLISECOND=765,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "2022-02-22T06:08:56.766+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "2022-02-22T06:08:56.766+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "2022-02-22T06:08:56.766+15:02:03.198");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime7.plusHours((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.months();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        int int24 = localDate23.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.Chronology chronology28 = chronology18.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = chronology18.clockhourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime12.toDateTime(chronology18);
        org.joda.time.DateTime dateTime31 = dateTime30.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        int int8 = mutableDateTime0.getYearOfEra();
        mutableDateTime0.setMinuteOfHour(21);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((-48469999L));
        org.joda.time.DateTime dateTime22 = dateTime18.plusSeconds(2);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTime(readableInstant27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate26.toDateTimeAtCurrentTime(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateTime18, dateTimeZone35);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology52 = chronology50.withZone(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = localDate42.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        long long56 = dateTimeZone51.getMillisKeepLocal(dateTimeZone54, (long) 2);
        org.joda.time.Interval interval57 = localDate38.toInterval(dateTimeZone51);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate61 = localDate58.withField(dateTimeFieldType59, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDate61.toDateTime(readableInstant62);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTime dateTime66 = dateTime63.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property68 = dateTime66.property(dateTimeFieldType67);
        org.joda.time.DateTime dateTime69 = property68.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime70 = localDate38.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        java.util.Date date71 = dateTime70.toDate();
        org.joda.time.LocalDate localDate72 = org.joda.time.LocalDate.fromDateFields(date71);
        int int73 = localDate72.size();
        org.joda.time.LocalDate.Property property74 = localDate72.yearOfEra();
        org.joda.time.LocalDate localDate76 = property74.setCopy(7);
        org.joda.time.Chronology chronology77 = localDate76.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone78);
        long long82 = dateTimeZone78.adjustOffset((long) (byte) 0, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone78);
        int int85 = dateTimeZone78.getOffset((long) 53);
        int int87 = dateTimeZone78.getStandardOffset(100L);
        org.joda.time.Chronology chronology88 = chronology77.withZone(dateTimeZone78);
        mutableDateTime0.setZoneRetainFields(dateTimeZone78);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfDay(54334085);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54334085 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2L + "'", long56 == 2L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(date71);
// flaky:         org.junit.Assert.assertEquals(date71.toString(), "Sat Jun 23 08:57:56 GMT 3");
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 54123198 + "'", int85 == 54123198);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 54123198 + "'", int87 == 54123198);
        org.junit.Assert.assertNotNull(chronology88);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.LocalDate localDate11 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime13 = dateTime9.withWeekyear(54112611);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(54155);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime15.withDate(445, 21999836, 22077407);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21999836 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(0);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeFormatter6.parseMillis("2022-02-22T06:04:58.794+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:04:58.794+15:02:03.198\" is malformed at \"22-02-22T06:04:58.794+15:02:03.198\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        int int29 = dateTimeField25.getMaximumTextLength(locale27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate37 = localDate31.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.era();
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.era();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale42.getDisplayCountry();
        java.lang.String str44 = locale42.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 21882000, chronology38, locale42);
        java.lang.String str46 = locale27.getDisplayScript(locale42);
        java.util.Locale locale47 = locale27.stripExtensions();
        java.lang.String str48 = locale27.getISO3Language();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-21T15:01:56.023Z" + "'", str43, "2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        int int14 = localDate6.compareTo((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate.Property property15 = localDate6.centuryOfEra();
        org.joda.time.LocalDate localDate16 = property15.withMaximumValue();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime22.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.DateTime dateTime35 = dateTime22.withFieldAdded(durationFieldType31, (int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.minuteOfDay();
        int int37 = dateTime35.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Calendar calendar42 = mutableDateTime38.toCalendar(locale41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate46 = localDate43.withField(dateTimeFieldType44, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.DateTime dateTime48 = localDate46.toDateTime(readableInstant47);
        mutableDateTime38.setMillis(readableInstant47);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime38.hourOfDay();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.Chronology chronology57 = dateTime56.getChronology();
        org.joda.time.DateTime dateTime59 = dateTime56.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property61 = dateTime59.property(dateTimeFieldType60);
        mutableDateTime38.set(dateTimeFieldType60, 52);
        int int64 = dateTime35.get(dateTimeFieldType60);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType60.getDurationType();
        boolean boolean66 = localDate16.isSupported(durationFieldType65);
        int int67 = localDate16.getMonthOfYear();
        org.joda.time.LocalDate localDate69 = localDate16.minusMonths(47672);
        java.util.Date date70 = localDate69.toDate();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray71 = localDate69.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645456013713,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=56,MILLISECOND=911,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(date70);
// flaky:         org.junit.Assert.assertEquals(date70.toString(), "Tue Jun 22 00:00:00 GMT 292274928");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray71);
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) localTime2, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((-1L), dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalTime localTime13 = localTime9.minus(readablePeriod12);
        int int15 = localTime13.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime17 = localTime13.withSecondOfMinute((int) '#');
        int int18 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.DateTime dateTime19 = localTime2.toDateTimeToday();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertNotNull(localTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        org.joda.time.DateTime dateTime18 = dateTime5.withFieldAdded(durationFieldType14, (int) (byte) 1);
        org.joda.time.DateTime dateTime20 = dateTime5.plusSeconds(0);
        java.lang.Object obj21 = null;
        boolean boolean22 = dateTime20.equals(obj21);
        org.joda.time.DateTime dateTime24 = dateTime20.withWeekyear(21904592);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTime20.toString("2022-02-22T06:04:43.393+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        java.util.Iterator<java.lang.String> strItor2 = strSet0.iterator();
        java.util.Iterator<java.lang.String> strItor3 = strSet0.iterator();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.seconds();
        java.lang.String str12 = chronology10.toString();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = strSet0.remove((java.lang.Object) dateTimeField16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) localTime2, dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime6.plus(readablePeriod7);
        int int9 = localTime6.getMillisOfDay();
        org.joda.time.LocalTime localTime11 = localTime6.plusMillis(54145337);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 54123197 + "'", int9 == 54123197);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate3.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime6 = localDate3.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str8 = dateTime6.toString(dateTimeFormatter7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withPivotYear(21883);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter7.withOffsetParsed();
        boolean boolean13 = dateTimeFormatter7.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.parse("", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "12:00:00 AM +15:02:03.198" + "'", str8, "12:00:00 AM +15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(54131261);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(54112);
        int int8 = localDateTime5.getMillisOfSecond();
        int int9 = localDateTime5.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 74 + "'", int8 == 74);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.getLocalDate();
        int int12 = property7.get();
        org.joda.time.LocalDate localDate13 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths(21);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusMillis(54127672);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minus(readablePeriod24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int27 = localDateTime25.get(dateTimeFieldType26);
        boolean boolean28 = localDateTime21.isSupported(dateTimeFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property29 = localDate13.property(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 6 + "'", int27 == 6);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        java.lang.String str9 = chronology6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        long long22 = chronology18.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean23 = dateTimeFieldType11.isSupported(chronology18);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology18, locale24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        long long37 = dateTimeField34.addWrapField((long) ' ', 0);
        boolean boolean38 = dateTimeField34.isSupported();
        long long41 = dateTimeField34.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField34.getType();
        long long45 = dateTimeField34.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate52 = localDate46.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property53 = localDate46.yearOfEra();
        org.joda.time.LocalDate localDate54 = property53.roundFloorCopy();
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate54, locale55);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.Chronology chronology64 = localDate58.getChronology();
        long long68 = chronology64.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology74 = localDate69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.lang.String str80 = dateTimeField77.getAsText((long) (short) 1, locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket(32L, chronology64, locale79);
        java.lang.String str82 = locale55.getDisplayVariant(locale79);
        java.lang.String str83 = locale24.getDisplayScript(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket86 = new org.joda.time.format.DateTimeParserBucket((long) 2000, chronology6, locale24, (java.lang.Integer) 778, 4);
        dateTimeParserBucket86.setOffset((java.lang.Integer) (-1));
        dateTimeParserBucket86.setOffset(687);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 200L + "'", long22 == 200L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 58665600001L + "'", long41 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "52" + "'", str56, "52");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 200L + "'", long68 == 200L);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1" + "'", str80, "1");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        mutableDateTime8.setMillis(readableInstant17);
        boolean boolean20 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setTime(21932768, 53, 133, 204);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21932768 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456013948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=57,MILLISECOND=146,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(0);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 153);
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer10, (long) 22024828);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        java.lang.String str14 = dateTime13.toString();
        boolean boolean15 = dateTime13.isAfterNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime13.withYearOfCentury(22069649);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22069649 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0001-01-01T00:00:00.000+15:02:03.198" + "'", str14, "0001-01-01T00:00:00.000+15:02:03.198");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.DateTime dateTime25 = dateTime12.withFieldAdded(durationFieldType21, (int) (byte) 1);
        boolean boolean26 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (short) 100);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalDate localDate33 = localDate29.withField(dateTimeFieldType30, 54123121);
        int int34 = localDate33.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.set(21942438);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456014004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=57,MILLISECOND=202,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getName((long) 2000);
        int int4 = dateTimeZone0.getOffsetFromLocal((long) (-1));
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        int int7 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.yearOfCentury();
        boolean boolean13 = dateTimeZone0.isLocalDateTimeGap(localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        int int16 = dateTimeZone0.getStandardOffset((-54152356L));
        int int18 = dateTimeZone0.getOffsetFromLocal((-35L));
        java.util.TimeZone timeZone19 = dateTimeZone0.toTimeZone();
        boolean boolean20 = timeZone19.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22137213 + "'", int7 == 22137213);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Calendar calendar24 = mutableDateTime20.toCalendar(locale23);
        java.lang.String str25 = mutableDateTime20.toString();
        mutableDateTime20.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime20.copy();
        int int29 = mutableDateTime20.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime20.centuryOfEra();
        mutableDateTime20.addYears(54115116);
        int int33 = mutableDateTime20.getHourOfDay();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime20.toMutableDateTime(dateTimeZone40);
        int int44 = property18.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime mutableDateTime46 = property18.add(385);
        mutableDateTime46.setMillisOfSecond(368);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        mutableDateTime46.add(readablePeriod49, 22090513);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645456014026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=57,MILLISECOND=224,ZONE_OFFSET=54123198,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T06:08:57.224+15:02:03.198" + "'", str25, "2022-02-22T06:08:57.224+15:02:03.198");
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(chronology44);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.plus(readableDuration55);
        org.joda.time.DateTime dateTime57 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime59 = dateTime54.withMillisOfSecond(11);
        org.joda.time.DateTime.Property property60 = dateTime54.yearOfEra();
        org.joda.time.DateTime dateTime62 = dateTime54.minusHours(129);
        mutableDateTime48.setMillis((org.joda.time.ReadableInstant) dateTime62);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime48.setMonthOfYear(21923);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21923 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime7.plusHours((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(chronology18);
        org.joda.time.DurationField durationField22 = chronology18.months();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        int int24 = localDate23.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = localDate23.toDateTimeAtStartOfDay(dateTimeZone25);
        org.joda.time.Chronology chronology28 = chronology18.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField29 = chronology18.clockhourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime12.toDateTime(chronology18);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.DateTime dateTime33 = dateTime30.minusDays(54138234);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        int int3 = localDate0.getDayOfMonth();
        int int4 = localDate0.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology10.getZone();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        int int20 = localDate19.getDayOfMonth();
        org.joda.time.LocalDate.Property property21 = localDate19.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology8.add(readablePeriod10, (long) (short) 100, 54113391);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(200L, chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.hourOfHalfday();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalTime localTime10 = localTime6.withField(dateTimeFieldType7, 0);
        int int11 = localTime10.size();
        org.joda.time.Chronology chronology12 = localTime10.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weekyears();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        mutableDateTime16.add(durationFieldType20, (-1));
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withFieldAdded(durationFieldType20, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(54111610);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(80);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks(21975628);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusHours(145);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate41 = localDate35.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property42 = localDate35.yearOfEra();
        org.joda.time.LocalDate localDate43 = property42.roundFloorCopy();
        org.joda.time.LocalDate localDate44 = property42.roundFloorCopy();
        org.joda.time.LocalDate localDate45 = property42.roundCeilingCopy();
        org.joda.time.LocalDate localDate46 = property42.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField47 = property42.getField();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate54 = localDate48.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property55 = localDate48.yearOfEra();
        org.joda.time.LocalDate localDate56 = property55.roundFloorCopy();
        org.joda.time.LocalDate localDate57 = property55.roundFloorCopy();
        org.joda.time.LocalDate localDate58 = property55.roundCeilingCopy();
        org.joda.time.LocalDate localDate59 = property55.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate60 = property55.withMaximumValue();
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.Chronology chronology67 = localDate61.getChronology();
        org.joda.time.LocalDate localDate68 = org.joda.time.LocalDate.now(chronology67);
        int int69 = property55.compareTo((org.joda.time.ReadablePartial) localDate68);
        org.joda.time.LocalDate localDate71 = property55.addToCopy(622);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate75 = localDate72.withField(dateTimeFieldType73, (int) (byte) -1);
        org.joda.time.LocalDate localDate77 = localDate72.minusYears((int) ' ');
        int int78 = localDate77.getDayOfYear();
        int[] intArray79 = localDate77.getValues();
        int int80 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDate71, intArray79);
        // The following exception was thrown during execution in test generation
        try {
            chronology12.validate((org.joda.time.ReadablePartial) localDateTime34, intArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate77);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 53 + "'", int78 == 53);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[1990, 2, 22]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.setCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = property5.getLocalTime();
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime0.add(readableDuration7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        java.lang.String str11 = mutableDateTime10.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-10-22T00:00:00.000+15:02:03.198" + "'", str11, "2022-10-22T00:00:00.000+15:02:03.198");
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long9 = chronology5.add((long) 54133701, 1000L, 54123198);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.centuryOfEra();
        org.joda.time.Chronology chronology11 = chronology5.withUTC();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = chronology5.get(readablePeriod12, (-2240179200000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 54177331701L + "'", long9 == 54177331701L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate6.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate18.equals((java.lang.Object) (byte) 10);
        int int21 = localDate18.getDayOfMonth();
        org.joda.time.LocalDate localDate23 = localDate18.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.DateTime dateTime26 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.Interval interval27 = localDate15.toInterval(dateTimeZone25);
        long long29 = dateTimeZone25.nextTransition((long) 54146807);
        boolean boolean31 = dateTimeZone25.isStandardOffset(1208236049L);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((-133144884L), dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone39);
        boolean boolean44 = dateTimeZone25.equals((java.lang.Object) mutableDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(21950850, 0, 54183198, 54130, 22053063, 30, dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54130 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 54146807L + "'", long29 == 54146807L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        mutableDateTime10.setMillis(readableInstant19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime10.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.Chronology chronology31 = localDate25.getChronology();
        long long35 = chronology31.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean36 = dateTimeFieldType24.isSupported(chronology31);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime23.property(dateTimeFieldType24);
        boolean boolean38 = dateTime9.isSupported(dateTimeFieldType24);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime9.toMutableDateTime();
        org.joda.time.DateTime dateTime42 = dateTime9.withDurationAdded((long) 21908000, 0);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(54153473);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645456014326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=57,MILLISECOND=524,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 200L + "'", long35 == 200L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        mutableDateTime0.setYear(8);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime0.add(readablePeriod4, (int) (short) 10);
        int int7 = mutableDateTime0.getMillisOfSecond();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:57.556+15:02:03.198" + "'", str1, "2022-02-22T06:08:57.556+15:02:03.198");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 556 + "'", int7 == 556);
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.LocalDate localDate11 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime13 = dateTime9.withWeekyear(54112611);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(80);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks(22117251);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        long long10 = durationField7.getDifferenceAsLong(21899751L, (-62135809679871L));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 62135831579L + "'", long10 == 62135831579L);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) localTime2, dateTimeZone5);
        long long8 = dateTimeZone5.previousTransition((long) (byte) 1);
        java.lang.String str9 = dateTimeZone5.toString();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone5);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+15:02:03.198" + "'", str9, "+15:02:03.198");
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime3 = property1.addToCopy((long) 530);
        org.joda.time.LocalDateTime localDateTime4 = property1.getLocalDateTime();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDurationAdded(readableDuration12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.minusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plusSeconds(86399999);
        java.lang.String str19 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        mutableDateTime25.add(durationFieldType29, (-1));
        long long32 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime25.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter21.withZone(dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        long long39 = dateTimeZone35.adjustOffset((long) (byte) 0, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter21.withZone(dateTimeZone35);
        int int41 = dateTimeFormatter21.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatter21.getPrinter();
        java.util.Locale locale45 = new java.util.Locale("en", "52");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter21.withLocale(locale45);
        org.joda.time.format.DateTimeParser dateTimeParser47 = dateTimeFormatter46.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser47);
        int int49 = dateTimeParser47.estimateParsedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2/18/87" + "'", str19, "2/18/87");
        org.junit.Assert.assertNotNull(dateTimePrinter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2000 + "'", int41 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter42);
        org.junit.Assert.assertEquals(locale45.toString(), "en_52");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeParser47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.setHourOfDay((int) (byte) 0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        long long14 = dateTimeField11.addWrapField((long) ' ', 0);
        boolean boolean15 = dateTimeField11.isSupported();
        long long18 = dateTimeField11.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField11.getType();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = dateTimeField11.getAsText((long) (byte) 1, locale21);
        long long24 = dateTimeField11.roundHalfEven((long) 3);
        mutableDateTime0.setRounding(dateTimeField11);
        int int26 = mutableDateTime0.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 58665600001L + "'", long18 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-259200000L) + "'", long24 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        java.lang.Object obj13 = mutableDateTime0.clone();
        org.joda.time.Chronology chronology14 = mutableDateTime0.getChronology();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime20.withDurationAdded(readableDuration25, (int) 'a');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.plus((-48469999L));
        org.joda.time.DateTime dateTime39 = dateTime35.plusSeconds(2);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate43.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) dateTime35, dateTimeZone52);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMonths((int) '4');
        org.joda.time.DateTime dateTime65 = dateTime63.plus((-48469999L));
        org.joda.time.DateTime dateTime67 = dateTime63.plusSeconds(2);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate71 = localDate68.withField(dateTimeFieldType69, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDate71.toDateTime(readableInstant72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology81 = chronology79.withZone(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = localDate71.toDateTimeAtCurrentTime(dateTimeZone80);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) dateTime63, dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone85);
        long long88 = dateTimeZone80.getMillisKeepLocal(dateTimeZone85, (long) (byte) -1);
        long long90 = dateTimeZone52.getMillisKeepLocal(dateTimeZone85, (long) 8);
        org.joda.time.DateTime dateTime91 = dateTime20.withZoneRetainFields(dateTimeZone52);
        mutableDateTime0.setZoneRetainFields(dateTimeZone52);
        boolean boolean94 = mutableDateTime0.isBefore(0L);
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        mutableDateTime0.add(readablePeriod95);
        mutableDateTime0.add(1708303996800080L);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456014527,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=57,MILLISECOND=725,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "2022-02-22T06:08:57.725+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "2022-02-22T06:08:57.725+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "2022-02-22T06:08:57.725+15:02:03.198");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L) + "'", long88 == (-1L));
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 8L + "'", long90 == 8L);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        boolean boolean12 = dateTimeField11.isLenient();
        org.joda.time.DurationField durationField13 = dateTimeField11.getLeapDurationField();
        int int15 = dateTimeField11.getLeapAmount((long) 21978414);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        int int9 = localDate8.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight10 = localDate8.toDateMidnight();
        int int11 = localDate8.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        org.joda.time.DateTime dateTime19 = dateTime6.withFieldAdded(durationFieldType15, (int) (byte) 1);
        mutableDateTime0.add(durationFieldType15, 86399999);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.dayOfYear();
        mutableDateTime0.setYear(21983493);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        long long37 = chronology33.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = dateTimeField46.getAsText((long) (short) 1, locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(32L, chronology33, locale48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plus((-48469999L));
        org.joda.time.DateTime dateTime62 = dateTime58.plusSeconds(2);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate66 = localDate63.withField(dateTimeFieldType64, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTime(readableInstant67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology74 = localDate69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDate66.toDateTimeAtCurrentTime(dateTimeZone75);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) dateTime58, dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone80);
        long long83 = dateTimeZone75.getMillisKeepLocal(dateTimeZone80, (long) (byte) -1);
        dateTimeParserBucket50.setZone(dateTimeZone80);
        long long86 = dateTimeZone80.convertUTCToLocal((long) 100);
        int int88 = dateTimeZone80.getOffsetFromLocal(2L);
        java.util.Locale locale90 = java.util.Locale.UK;
        boolean boolean91 = locale90.hasExtensions();
        java.util.Locale locale92 = java.util.Locale.GERMAN;
        java.lang.String str93 = locale90.getDisplayName(locale92);
        java.lang.String str94 = dateTimeZone80.getName((long) 54131261, locale92);
        int int96 = dateTimeZone80.getStandardOffset(0L);
        mutableDateTime0.setZoneRetainFields(dateTimeZone80);
        java.util.TimeZone timeZone98 = dateTimeZone80.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId99 = timeZone98.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +15:02:03.198");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 200L + "'", long37 == 200L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 54123298L + "'", long86 == 54123298L);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 54123198 + "'", int88 == 54123198);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str93, "Englisch (Vereinigtes K\366nigreich)");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+15:02:03.198" + "'", str94, "+15:02:03.198");
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 54123198 + "'", int96 == 54123198);
        org.junit.Assert.assertNotNull(timeZone98);
// flaky:         org.junit.Assert.assertEquals(timeZone98.getDisplayName(), "GMT+15:02");
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight28 = localDate27.toDateMidnight();
        int int29 = localDate27.getMonthOfYear();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate30.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property37 = localDate30.yearOfEra();
        org.joda.time.LocalDate localDate38 = property37.roundFloorCopy();
        org.joda.time.LocalDate localDate39 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate42.equals((java.lang.Object) (byte) 10);
        int int45 = localDate42.getDayOfMonth();
        org.joda.time.LocalDate localDate47 = localDate42.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.DateTime dateTime50 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.Interval interval51 = localDate39.toInterval(dateTimeZone49);
        long long53 = dateTimeZone49.nextTransition((long) 54146807);
        boolean boolean55 = dateTimeZone49.isStandardOffset(1208236049L);
        org.joda.time.Interval interval56 = localDate27.toInterval(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 54146807L + "'", long53 == 54146807L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval56);
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.Chronology chronology13 = localDate7.getChronology();
        long long17 = chronology13.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean18 = dateTimeFieldType6.isSupported(chronology13);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology13, locale19);
        java.lang.String str21 = locale19.getLanguage();
        java.lang.String str24 = nameProvider0.getName(locale19, "zh", "2022-02-21T15:02:25.259Z");
        java.util.Locale locale25 = null;
        java.lang.String str28 = nameProvider0.getName(locale25, "0003-06-22T06:04:46.339+15:02:03.198", "23:59:59.999");
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate35 = localDate29.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property36 = localDate29.yearOfEra();
        org.joda.time.DateTime dateTime37 = localDate29.toDateTimeAtMidnight();
        boolean boolean39 = dateTime37.isEqual((long) 21);
        org.joda.time.DateTime.Property property40 = dateTime37.weekyear();
        org.joda.time.DateTime dateTime41 = property40.withMaximumValue();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale43.getDisplayScript();
        org.joda.time.DateTime dateTime45 = property40.setCopy("197", locale43);
        java.lang.String str48 = nameProvider0.getShortName(locale43, "2022-02-22T06:06:21.247+15:02:03.198", "2022-02-21T15:01:52.229Z");
        java.util.Locale locale51 = new java.util.Locale("en", "52");
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str55 = nameProvider0.getShortName(locale51, "2022-02-22T06:04:53.606+15:02:03.198", "2022-02-22T06:06:48.914+15:02:03.198");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 200L + "'", long17 == 200L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr" + "'", str21, "fr");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals(locale51.toString(), "en_52");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_52");
        org.junit.Assert.assertNull(str55);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.setCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property5.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localTime13.toString("2022-02-22T06:05:26.487+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((-1L), chronology1);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate5 = localDate2.withPeriodAdded(readablePeriod3, 54148380);
        org.joda.time.DateMidnight dateMidnight6 = localDate5.toDateMidnight();
        long long7 = dateMidnight6.getMillis();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-54123198L) + "'", long7 == (-54123198L));
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        long long7 = property3.remainder();
        org.joda.time.LocalTime localTime9 = property3.setCopy(129);
        org.joda.time.LocalTime localTime10 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime12 = localTime10.withMillisOfSecond(87);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = localTime12.withMinuteOfHour(22129129);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22129129 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        long long5 = dateTimeZone1.adjustOffset((long) (byte) 0, false);
        boolean boolean6 = dateTimeZone1.isFixed();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((-1314049573798L), dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(0);
        org.joda.time.LocalDate localDate17 = dateTime16.toLocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime24.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property29 = dateTime27.property(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.withMillisOfSecond(0);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime37.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property42 = dateTime40.property(dateTimeFieldType41);
        org.joda.time.DateTime dateTime43 = property42.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime44 = property42.getDateTime();
        org.joda.time.DateTime dateTime45 = property42.roundHalfEvenCopy();
        java.lang.String str46 = dateTime45.toString();
        int int47 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        long long59 = dateTimeField56.addWrapField((long) ' ', 0);
        boolean boolean60 = dateTimeField56.isSupported();
        long long63 = dateTimeField56.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField56.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField56.getType();
        org.joda.time.DateTime.Property property66 = dateTime45.property(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getRangeDurationType();
        int int68 = localDate17.indexOf(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456014849,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=58,MILLISECOND=47,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "0001-01-01T00:00:00.000+15:02:03.198" + "'", str46, "0001-01-01T00:00:00.000+15:02:03.198");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 32L + "'", long59 == 32L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 58665600001L + "'", long63 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = dateTimeField8.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField8.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeField8.getDifferenceAsLong((-62167100523198L), (long) 21972002);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        org.joda.time.DateTime dateTime19 = dateTime6.withFieldAdded(durationFieldType15, (int) (byte) 1);
        mutableDateTime0.add(durationFieldType15, 86399999);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime0.dayOfYear();
        mutableDateTime0.setYear(21983493);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        long long37 = chronology33.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = dateTimeField46.getAsText((long) (short) 1, locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket(32L, chronology33, locale48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMonths((int) '4');
        org.joda.time.DateTime dateTime60 = dateTime58.plus((-48469999L));
        org.joda.time.DateTime dateTime62 = dateTime58.plusSeconds(2);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate66 = localDate63.withField(dateTimeFieldType64, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTime(readableInstant67);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology74 = localDate69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDate66.toDateTimeAtCurrentTime(dateTimeZone75);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((java.lang.Object) dateTime58, dateTimeZone75);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone80);
        long long83 = dateTimeZone75.getMillisKeepLocal(dateTimeZone80, (long) (byte) -1);
        dateTimeParserBucket50.setZone(dateTimeZone80);
        long long86 = dateTimeZone80.convertUTCToLocal((long) 100);
        int int88 = dateTimeZone80.getOffsetFromLocal(2L);
        java.util.Locale locale90 = java.util.Locale.UK;
        boolean boolean91 = locale90.hasExtensions();
        java.util.Locale locale92 = java.util.Locale.GERMAN;
        java.lang.String str93 = locale90.getDisplayName(locale92);
        java.lang.String str94 = dateTimeZone80.getName((long) 54131261, locale92);
        int int96 = dateTimeZone80.getStandardOffset(0L);
        mutableDateTime0.setZoneRetainFields(dateTimeZone80);
        java.util.TimeZone timeZone98 = dateTimeZone80.toTimeZone();
        java.lang.String str99 = timeZone98.getID();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 200L + "'", long37 == 200L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 54123298L + "'", long86 == 54123298L);
// flaky:         org.junit.Assert.assertTrue("'" + int88 + "' != '" + 54123198 + "'", int88 == 54123198);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str93, "Englisch (Vereinigtes K\366nigreich)");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+15:02:03.198" + "'", str94, "+15:02:03.198");
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 54123198 + "'", int96 == 54123198);
        org.junit.Assert.assertNotNull(timeZone98);
// flaky:         org.junit.Assert.assertEquals(timeZone98.getDisplayName(), "GMT+15:02");
// flaky:         org.junit.Assert.assertEquals("'" + str99 + "' != '" + "+15:02:03.198" + "'", str99, "+15:02:03.198");
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        java.lang.String[] strArray20 = new java.lang.String[] { "2022-02-21T15:02:02.963Z", "2022-02-21T15:02:10.158Z", "2022-02-21T15:02:13.131Z", "zh-CN", "minutes", "2022-02-21T15:02:13.192Z", "DurationField[minutes]", "0003-06-21T15:02:14.891Z", "1970", "2022-02-21T15:02:22.666Z", "1983-05-23T15:12:28.264", "CN", "months", "Property[year]", "2022-02-21T15:02:01.240Z", "2022-02-21T15:02:20.375Z", "chinois (Chine)", "0001-01-01T00:00:00.000Z", "2022-02-21T15:02:03.371Z", "2022-02-21T15:02:30.672Z" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet21.spliterator();
        boolean boolean25 = strSet21.add("ISOChronology[UTC]");
        int int26 = strSet21.size();
        boolean boolean28 = strSet21.equals((java.lang.Object) "Property[year]");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        long long17 = dateTimeField14.addWrapField((long) ' ', 0);
        boolean boolean18 = dateTimeField14.isSupported();
        long long21 = dateTimeField14.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = dateTimeField14.getType();
        long long25 = dateTimeField14.getDifferenceAsLong((long) (short) 1, 200L);
        int int26 = dateTimeField14.getMaximumValue();
        mutableDateTime0.setRounding(dateTimeField14);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDateTime(471, 0, 21882000, 790632, 5, 905, 21895);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 790632 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456015014,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=58,MILLISECOND=212,ZONE_OFFSET=54123198,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 32L + "'", long17 == 32L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 58665600001L + "'", long21 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withOffsetParsed();
        java.lang.Appendable appendable9 = null;
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable9, readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property3.roundHalfCeilingCopy();
        int int10 = localTime9.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime9.minusMinutes(54119821);
        org.joda.time.LocalTime localTime14 = localTime9.plusMillis(94);
        int int15 = localTime14.getMinuteOfHour();
        org.joda.time.LocalTime localTime17 = localTime14.plusMillis(902);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 197 + "'", int10 == 197);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusSeconds((-292275054));
        org.joda.time.LocalTime.Property property3 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property3.addWrapFieldToCopy(21932768);
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.Chronology chronology54 = chronology7.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes(21977916);
        org.joda.time.DateTime dateTime59 = dateTime57.minusSeconds(21983942);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMillisOfDay(2);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfWeek();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMinutes(54112611);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plus(readableDuration16);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(620, 312, 22099488, 322, 494, 21913732, 21887627, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 322 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        int int10 = property8.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(0);
        int int8 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.weekOfWeekyear();
        int int10 = property9.getMaximumValueOverall();
        java.lang.String str11 = property9.getName();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22138476 + "'", int2 == 22138476);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 476 + "'", int8 == 476);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekOfWeekyear" + "'", str11, "weekOfWeekyear");
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        mutableDateTime62.addWeeks(1970);
        mutableDateTime62.setYear(0);
        java.lang.Object obj67 = mutableDateTime62.clone();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(obj67);
// flaky:         org.junit.Assert.assertEquals(obj67.toString(), "0000-11-25T06:08:58.485+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "0000-11-25T06:08:58.485+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "0000-11-25T06:08:58.485+15:02:03.198");
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes(54122);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(23);
        org.joda.time.DateTime dateTime8 = localDateTime0.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis(490);
        org.joda.time.LocalDateTime localDateTime11 = dateTime8.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        int int14 = dateTime8.get(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("6:06 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"6:06 AM\" is malformed at \":06 AM\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        dateTimeParserBucket24.setOffset(54111610);
        long long29 = dateTimeParserBucket24.computeMillis(false, "Property[millisOfDay]");
        dateTimeParserBucket24.setPivotYear((java.lang.Integer) 744);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-54111578L) + "'", long29 == (-54111578L));
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 83);
        mutableDateTime1.addMinutes(21927649);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        mutableDateTime4.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime4.property(dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType9, 22074399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22074399 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        int int3 = localDateTime2.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((-1));
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readablePeriod6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readableDuration8);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("23:59:59.999");
        java.lang.String str2 = localTime1.toString();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.lang.String str6 = localTime1.toString("54135502", locale5);
        org.joda.time.LocalTime localTime8 = localTime1.plusHours(21902894);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999" + "'", str2, "23:59:59.999");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "54135502" + "'", str6, "54135502");
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.Interval interval46 = localDate27.toInterval(dateTimeZone40);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        java.util.Date date60 = dateTime59.toDate();
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.fromDateFields(date60);
        int int62 = localDate61.size();
        org.joda.time.LocalDate.Property property63 = localDate61.yearOfEra();
        org.joda.time.LocalDate localDate65 = property63.setCopy(7);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = chronology66.getZone();
        int int69 = dateTimeZone67.getStandardOffset((-59894553600000L));
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Sat Jun 23 08:57:56 GMT 3");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.Chronology chronology12 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        java.lang.String str15 = dateTimeField14.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[millisOfDay]" + "'", str15, "DateTimeField[millisOfDay]");
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay((int) (short) 100);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str16 = mutableDateTime0.toString(dateTimeFormatter15);
        mutableDateTime0.setMinuteOfDay(99);
        int int19 = mutableDateTime0.getMonthOfYear();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456015461,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=58,MILLISECOND=659,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, February 22, -0001" + "'", str16, "Monday, February 22, -0001");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusYears(778);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withWeekOfWeekyear(22001717);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22001717 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.plus((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime21.plusSeconds(2);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTime21, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone43);
        long long46 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) (byte) -1);
        boolean boolean47 = dateTimeZone43.isFixed();
        org.joda.time.Chronology chronology48 = chronology10.withZone(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology48);
        java.lang.String str50 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(54311952, 21969004, 824, 522, chronology48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54311952 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[+15:02:03.198]" + "'", str50, "ISOChronology[+15:02:03.198]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 1);
        java.util.TimeZone.setDefault(timeZone0);
        java.lang.String str4 = timeZone0.getID();
        int int6 = timeZone0.getOffset(4979544394L);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusWeeks(2022);
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        int int16 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusMillis((int) (byte) 100);
        java.util.Date date22 = localDateTime17.toDate();
        boolean boolean23 = timeZone0.inDaylightTime(date22);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T06:07:05.203+15:02:03.198" + "'", str4, "2022-02-22T06:07:05.203+15:02:03.198");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22138714 + "'", int16 == 22138714);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 06:08:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        long long12 = chronology6.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology6);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime27.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        mutableDateTime32.add(durationFieldType36, (-1));
        org.joda.time.DateTime dateTime40 = dateTime27.withFieldAdded(durationFieldType36, (int) (byte) 1);
        boolean boolean41 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        long long53 = dateTimeField50.addWrapField((long) ' ', 0);
        boolean boolean54 = dateTimeField50.isSupported();
        long long57 = dateTimeField50.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField50.getType();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = dateTimeField50.getAsText((long) (byte) 1, locale60);
        java.lang.String str62 = locale60.getLanguage();
        java.util.Calendar calendar63 = dateTime40.toCalendar(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 54150465, chronology6, locale60, (java.lang.Integer) 129);
        org.joda.time.DateTimeField dateTimeField66 = chronology6.millisOfDay();
        java.util.Locale locale68 = java.util.Locale.UK;
        boolean boolean69 = locale68.hasExtensions();
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str71 = locale68.getDisplayName(locale70);
        java.lang.String str72 = locale68.getISO3Country();
        java.lang.String str73 = locale68.getDisplayName();
        java.lang.String str74 = dateTimeField66.getAsShortText(903, locale68);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-48469999L) + "'", long12 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 58665600001L + "'", long57 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(locale60);
// flaky:         org.junit.Assert.assertEquals(locale60.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "sunday, february 21, -0001" + "'", str62, "sunday, february 21, -0001");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-62194294384469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=58,MILLISECOND=729,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str71, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GBR" + "'", str72, "GBR");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "English (United Kingdom)" + "'", str73, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "903" + "'", str74, "903");
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((int) (short) -1);
        java.lang.Integer int9 = dateTimeFormatter6.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str13 = dateTimeFieldType12.getName();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        boolean boolean22 = dateTimeFieldType12.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter6.withChronology(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(21942000, 7997289, 22064106, (-511), 556, 22010865, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -511 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(int9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfWeek" + "'", str13, "dayOfWeek");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.Chronology chronology12 = chronology5.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.millisOfDay();
        long long15 = dateTimeField13.roundHalfEven((long) 905);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 905L + "'", long15 == 905L);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DurationField durationField10 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.yearOfCentury();
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.Chronology chronology13 = chronology8.withUTC();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 21936455, chronology13, locale14, (java.lang.Integer) 21928334, 568);
        java.util.Set<java.lang.Character> charSet18 = locale14.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet18);
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(54132, 21968812, 22110966, (-523), 1826281, 575, 54312581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -523 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList7);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream10 = languageRangeList3.stream();
        boolean boolean11 = strSet0.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3);
        java.util.Set<java.lang.String> strSet12 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray13 = strSet12.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.lang.String str21 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList19);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream22 = languageRangeList15.stream();
        boolean boolean23 = strSet12.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((-1L), dateTimeZone25);
        org.joda.time.LocalTime.Property property27 = localTime26.millisOfDay();
        java.lang.String str28 = property27.toString();
        java.lang.String str29 = property27.getAsShortText();
        org.joda.time.LocalTime localTime30 = property27.getLocalTime();
        org.joda.time.LocalTime localTime31 = property27.withMinimumValue();
        org.joda.time.LocalTime localTime32 = property27.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = localTime32.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = strSet12.toArray(dateTimeFieldArray33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream38 = languageRangeList36.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strMap41);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList42, strMap43);
        java.util.Collection<java.util.Locale> localeCollection45 = null;
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter(languageRangeList42, localeCollection45, filteringMode46);
        boolean boolean48 = strSet12.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42);
        java.lang.Object[] objArray49 = strSet12.toArray();
        java.util.Iterator<java.lang.String> strItor50 = strSet12.iterator();
        boolean boolean52 = strSet12.add("2022-02-22T06:05:02.333+15:02:03.198");
        int int53 = strSet12.size();
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet12);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(languageRangeStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[millisOfDay]" + "'", str28, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "54123197" + "'", str29, "54123197");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeStream38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(strItor50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.minusMinutes(54122);
        int int17 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime20.add(durationFieldType24, (-1));
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFieldAdded(durationFieldType24, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMinutes(54111610);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYearOfEra(80);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        boolean boolean35 = localDateTime32.isSupported(durationFieldType34);
        boolean boolean36 = localDateTime11.isSupported(durationFieldType34);
        boolean boolean37 = localDateTime10.isSupported(durationFieldType34);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime10.withDayOfYear(5);
        org.joda.time.LocalDateTime.Property property40 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22138850 + "'", int17 == 22138850);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.joda.time.LocalDate localDate12 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime18.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        mutableDateTime23.add(durationFieldType27, (-1));
        org.joda.time.DateTime dateTime31 = dateTime18.withFieldAdded(durationFieldType27, (int) (byte) 1);
        org.joda.time.DateTime.Property property32 = dateTime31.minuteOfDay();
        int int33 = dateTime31.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Calendar calendar38 = mutableDateTime34.toCalendar(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        mutableDateTime34.setMillis(readableInstant43);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.hourOfDay();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        mutableDateTime34.set(dateTimeFieldType56, 52);
        int int60 = dateTime31.get(dateTimeFieldType56);
        boolean boolean61 = localDate12.isSupported(dateTimeFieldType56);
        java.lang.String str62 = localDate12.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645456015727,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=58,MILLISECOND=925,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2023-01-01" + "'", str62, "2023-01-01");
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusDays(14);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays(292278993);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.year();
        int int7 = localDateTime5.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(54131);
        int int7 = localDateTime4.getYearOfEra();
        int int8 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusMinutes(54134);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = localDateTime4.indexOf(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.minusMinutes(538);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22139077 + "'", int2 == 22139077);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate9 = localDate0.minusWeeks((-1));
        int int10 = localDate9.getWeekyear();
        org.joda.time.LocalDate localDate12 = localDate9.plusMonths(54140);
        org.joda.time.LocalDate localDate14 = localDate12.plusYears(100);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        boolean boolean20 = mutableDateTime15.isBeforeNow();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.DateTime dateTime28 = dateTime26.withMillisOfDay((int) (short) 100);
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str31 = mutableDateTime15.toString(dateTimeFormatter30);
        mutableDateTime15.setMinuteOfDay(99);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Calendar calendar38 = mutableDateTime34.toCalendar(locale37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        mutableDateTime34.setMillis(readableInstant43);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime34.weekyear();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMonths((int) '4');
        org.joda.time.DateTime dateTime56 = dateTime54.plus((-48469999L));
        int int57 = dateTime54.getSecondOfDay();
        boolean boolean58 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int60 = dateTime54.get(dateTimeFieldType59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime15.property(dateTimeFieldType59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property62 = localDate14.property(dateTimeFieldType59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645456015908,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=106,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Monday, February 22, -0001" + "'", str31, "Monday, February 22, -0001");
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645456015908,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=106,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22139 + "'", int57 == 22139);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 368 + "'", int60 == 368);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime10 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property3.addCopy(21968242);
        org.joda.time.LocalTime.Property property13 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime15 = localTime12.plusHours(560);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.plusHours(54130);
        org.joda.time.LocalTime localTime9 = localTime7.plusHours(54125);
        org.joda.time.Chronology chronology10 = localTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.centuryOfEra();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.secondOfDay();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456016000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=198,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        long long10 = durationField7.subtract((long) 18, 0);
        boolean boolean11 = durationField7.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = durationField7.getValue(1707710308412701906L, (long) 21958469);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1707710308412701");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 18L + "'", long10 == 18L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        long long8 = mutableDateTime7.getMillis();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.property(dateTimeFieldType10);
        mutableDateTime7.addWeeks(21925377);
        int int14 = mutableDateTime7.getYearOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:59.226+15:02:03.198" + "'", str1, "2022-02-22T06:08:59.226+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-62135650923198L) + "'", long8 == (-62135650923198L));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 420208 + "'", int14 == 420208);
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate11.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter7.withZone(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField32 = chronology29.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter7.withChronology(chronology29);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        java.lang.String str35 = mutableDateTime34.toString();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime34.add(readableDuration36);
        mutableDateTime34.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime34.year();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime43 = property40.roundCeiling();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.millisOfDay();
        int int47 = dateTimeFormatter33.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime43, "15.02.22 00:00", 54117);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setSecondOfMinute(1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1439 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T06:08:59.235+15:02:03.198" + "'", str35, "2022-02-22T06:08:59.235+15:02:03.198");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-54118) + "'", int47 == (-54118));
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        dateTimeParserBucket24.setZone(dateTimeZone54);
        java.util.Locale locale59 = dateTimeParserBucket24.getLocale();
        java.lang.Object obj60 = dateTimeParserBucket24.saveState();
        java.lang.Integer int61 = dateTimeParserBucket24.getOffsetInteger();
        long long63 = dateTimeParserBucket24.computeMillis(false);
        java.util.Locale locale64 = dateTimeParserBucket24.getLocale();
        org.joda.time.DateTimeZone dateTimeZone65 = dateTimeParserBucket24.getZone();
        java.lang.String str67 = dateTimeZone65.getNameKey((long) 22104000);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNull(int61);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-54123166L) + "'", long63 == (-54123166L));
        org.junit.Assert.assertNotNull(locale64);
// flaky:         org.junit.Assert.assertEquals(locale64.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.dayOfMonth();
        long long14 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime6);
        int int15 = mutableDateTime6.getMinuteOfDay();
        org.joda.time.Chronology chronology16 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        long long20 = durationField17.subtract((long) 54148380, 960);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 368 + "'", int15 == 368);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 53188380L + "'", long20 == 53188380L);
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        long long25 = dateTimeField22.addWrapField((long) ' ', 0);
        boolean boolean26 = dateTimeField22.isSupported();
        long long29 = dateTimeField22.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField22.getType();
        mutableDateTime0.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime38.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        mutableDateTime43.add(durationFieldType47, (-1));
        org.joda.time.DateTime dateTime51 = dateTime38.withFieldAdded(durationFieldType47, (int) (byte) 1);
        mutableDateTime32.add(durationFieldType47, 86399999);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.plus((-48469999L));
        org.joda.time.DateTime dateTime65 = dateTime61.plusSeconds(2);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate69 = localDate66.withField(dateTimeFieldType67, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDate69.toDateTime(readableInstant70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology77 = localDate72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology79 = chronology77.withZone(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = localDate69.toDateTimeAtCurrentTime(dateTimeZone78);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((java.lang.Object) dateTime61, dateTimeZone78);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone78);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration84 = null;
        mutableDateTime83.add(readableDuration84);
        java.util.Locale locale86 = java.util.Locale.getDefault();
        java.util.Calendar calendar87 = mutableDateTime83.toCalendar(locale86);
        boolean boolean88 = dateTime82.isAfter((org.joda.time.ReadableInstant) mutableDateTime83);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime82);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime32.era();
        int int92 = property91.getMaximumValue();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456016102,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=300,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 58665600001L + "'", long29 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(locale86);
// flaky:         org.junit.Assert.assertEquals(locale86.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1645456016103,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=301,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.hourOfDay();
        long long12 = dateTimeField10.roundHalfCeiling((long) 21935000);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 21600000L + "'", long12 == 21600000L);
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean7 = localDate0.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = localDate0.withYearOfCentury(53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((java.lang.Object) localDate9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime10 = property3.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        java.lang.String str12 = mutableDateTime11.toString();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime11.add(readableDuration13);
        mutableDateTime11.setWeekyear((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        mutableDateTime11.setTime(readableInstant17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = mutableDateTime11.toDateTime(dateTimeZone19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime11.copy();
        int int23 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        mutableDateTime22.setMillisOfSecond(190);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T06:08:59.357+15:02:03.198" + "'", str12, "2022-02-22T06:08:59.357+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(21);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        int int3 = dateTimeZone1.getOffset((long) 901);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 54123198 + "'", int3 == 54123198);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.DurationField durationField45 = chronology44.weekyears();
        boolean boolean46 = dateTimeFieldType0.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        int int7 = localDate0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDayOfMonth(2);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withYearOfEra(2000);
        int int14 = localDateTime8.size();
        int int15 = localDateTime8.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime8.plusYears(54119809);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = localDate0.isEqual((org.joda.time.ReadablePartial) localDateTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22139458 + "'", int15 == 22139458);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(54123298L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks(348);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(54141456);
        org.joda.time.LocalDate localDate13 = localDate9.plusWeeks(59);
        org.joda.time.LocalDate localDate15 = localDate9.plusWeeks(54135478);
        int int16 = localDate15.getYear();
        org.joda.time.DateTime dateTime17 = localDate15.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = localDate15.withDayOfMonth(302);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 302 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1039547 + "'", int16 == 1039547);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T06:05:37.020+15:02:03.198");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "und" + "'", str2, "und");
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long5 = dateTimeZone2.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(10);
        int int15 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((-53));
        int int18 = dateTime14.getMonthOfYear();
        org.joda.time.DateTime dateTime20 = dateTime14.withMillis(281183302L);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra(21930279);
        org.joda.time.DateTime dateTime23 = dateTime20.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-133144884L) + "'", long5 == (-133144884L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 212880000 + "'", int15 == 212880000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField13 = chronology7.seconds();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology7);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime0.add(readableDuration7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime0.add(readablePeriod10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add(28000L);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime15.add(readablePeriod16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfEra();
        int int20 = localDateTime18.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths(54131);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(59000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        boolean boolean29 = mutableDateTime26.isSupported(dateTimeFieldType27);
        boolean boolean30 = localDateTime24.isSupported(dateTimeFieldType27);
        int int31 = mutableDateTime15.get(dateTimeFieldType27);
        int int32 = mutableDateTime15.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22139621 + "'", int20 == 22139621);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.DateTime dateTime14 = mutableDateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(0);
        org.joda.time.LocalDate localDate17 = dateTime16.toLocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDate17.getFieldType(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456016437,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=635,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfFloor();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime14.add(readablePeriod15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.millisOfSecond();
        mutableDateTime14.add((long) 22003376);
        int int20 = mutableDateTime14.getSecondOfDay();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456016448,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=646,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22003 + "'", int20 == 22003);
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        int int3 = localDateTime2.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((-1));
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(57907);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYear(21886);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.plusSeconds(99);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((-1L), dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime12.minus(readablePeriod15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.LocalTime localTime20 = localTime16.withField(dateTimeFieldType17, 0);
        org.joda.time.LocalTime localTime22 = localTime16.plusMinutes((int) ' ');
        org.joda.time.LocalTime.Property property23 = localTime22.millisOfDay();
        java.lang.String str25 = localTime22.toString("23:59:35.999");
        int int26 = localTime6.compareTo((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.LocalTime localTime28 = localTime6.withMinuteOfHour(3);
        org.joda.time.LocalTime localTime30 = localTime6.withMinuteOfHour(6);
        int int31 = localTime6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "23:59:35.999" + "'", str25, "23:59:35.999");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.Chronology chronology12 = localDate6.getChronology();
        long long16 = chronology12.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean17 = dateTimeFieldType5.isSupported(chronology12);
        mutableDateTime2.setChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfYear();
        java.lang.String str20 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField(chronology12);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate26 = localDate23.withField(dateTimeFieldType24, (int) (byte) -1);
        org.joda.time.LocalDate localDate28 = localDate23.minusYears((int) ' ');
        org.joda.time.LocalDate localDate30 = localDate28.plusWeeks(54129);
        int int31 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) localDate28);
        org.joda.time.LocalDate.Property property32 = localDate28.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 200L + "'", long16 == 200L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.Chronology chronology54 = chronology7.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.minuteOfHour();
        int int58 = dateTimeField56.getLeapAmount((long) 21973795);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate9 = localDate0.withYear(54130144);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime22.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.DateTime dateTime35 = dateTime22.withFieldAdded(durationFieldType31, (int) (byte) 1);
        boolean boolean36 = dateTime15.isAfter((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime35.minusMillis((int) (short) 100);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) dateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        org.joda.time.LocalDate localDate43 = localDate39.withField(dateTimeFieldType40, 54123121);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType40.getRangeDurationType();
        org.joda.time.LocalDate.Property property45 = localDate9.property(dateTimeFieldType40);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDate localDate47 = localDate9.minus(readablePeriod46);
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.Chronology chronology49 = localDate47.getChronology();
        int int50 = localDate47.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNull(durationFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        mutableDateTime0.setTime(readableInstant6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = mutableDateTime0.toDateTime(dateTimeZone8);
        int int10 = dateTime9.getHourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        mutableDateTime15.add(durationFieldType19, (-1));
        long long22 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateTimeZone dateTimeZone23 = mutableDateTime15.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter11.withZone(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        long long29 = dateTimeZone25.adjustOffset((long) (byte) 0, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter11.withZone(dateTimeZone25);
        java.lang.String str32 = dateTimeZone25.getShortName(1902080793600000L);
        org.joda.time.DateTime dateTime33 = dateTime9.withZone(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = dateTime9.withCenturyOfEra(22062759);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22062759 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:08:59.789+15:02:03.198" + "'", str1, "2022-02-22T06:08:59.789+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+15:02:03.198" + "'", str32, "+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfEven();
        org.joda.time.DateTime dateTime20 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime20.year();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfEra(21);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withYearOfEra(54118820);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMillis(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readableDuration13);
        int int15 = localDateTime14.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(21);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        long long13 = dateTimeField10.getDifferenceAsLong(0L, (long) 172);
        boolean boolean14 = dateTimeField10.isLenient();
        long long17 = dateTimeField10.getDifferenceAsLong(1707724464566400001L, (long) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField10.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeField10.set((-40L), "\u4e0b\u5348\u65f6\u5206\u79d2 +15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??03?02?03? +15:02:03.198\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 19765329450L + "'", long17 == 19765329450L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.Chronology chronology22 = localDate16.getChronology();
        long long26 = chronology22.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean27 = dateTimeFieldType15.isSupported(chronology22);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology22, locale29, (java.lang.Integer) 54135101, 80);
        java.lang.String str34 = property13.getAsText(locale29);
        java.util.Locale locale35 = locale29.stripExtensions();
        java.util.Set<java.lang.String> strSet36 = locale29.getUnicodeLocaleKeys();
        java.lang.Object[] objArray37 = strSet36.toArray();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456016651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=8,SECOND=59,MILLISECOND=849,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 200L + "'", long26 == 200L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22" + "'", str34, "22");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime4.plus(readablePeriod5);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDurationAdded(readableDuration11, 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withWeekyear(5);
        org.joda.time.Chronology chronology16 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weeks();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate5.toDateTimeAtCurrentTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 54140332, dateTimeZone14);
        mutableDateTime18.addWeeks(54744394);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setHourOfDay(119);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 119 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        int int13 = dateTimeField11.getLeapAmount((long) 1970);
        long long16 = dateTimeField11.add(0L, (long) '4');
        org.joda.time.DurationField durationField17 = dateTimeField11.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1640995200000L + "'", long16 == 1640995200000L);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = localDateTime4.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str8 = dateTimeFieldType7.toString();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withWeekyear(21941506);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withTime(220, 22121, 21963, 21893475);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 220 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22140119 + "'", int2 == 22140119);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfCentury" + "'", str8, "yearOfCentury");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((-1L), chronology1);
        int int3 = localDate2.getWeekyear();
        org.joda.time.LocalDate localDate5 = localDate2.plusWeeks(87);
        org.joda.time.LocalDate localDate7 = localDate2.minusDays(21957666);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(945, 54146835, 70021, 21997367, 21935000, 208, 54130456);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21997367 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 576);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime3.toMutableDateTime();
        int int5 = mutableDateTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("2022-02-21T15:02:04.418Z");
        boolean boolean3 = timeZone0.observesDaylightTime();
        int int4 = timeZone0.getRawOffset();
        boolean boolean5 = timeZone0.observesDaylightTime();
        boolean boolean6 = timeZone0.observesDaylightTime();
        boolean boolean7 = timeZone0.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = timeZone0.getDisplayName(false, 22047239);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 22047239");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("United States", throwable2);
        java.lang.Throwable[] throwableArray4 = iOException3.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("52", (java.lang.Throwable) iOException3);
        java.io.IOException iOException8 = new java.io.IOException("2022-02-21T15:02:06.914Z");
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException10 = new java.io.IOException("2022-02-22T06:07:50.323", (java.lang.Throwable) iOException9);
        iOException5.addSuppressed((java.lang.Throwable) iOException10);
        org.junit.Assert.assertNotNull(throwableArray4);
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfYear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        boolean boolean21 = dateTime7.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property23 = dateTime7.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.minutes();
        long long33 = durationField32.getUnitMillis();
        int int35 = durationField32.getValue((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType36 = durationField32.getType();
        org.joda.time.DateTime dateTime38 = dateTime24.withFieldAdded(durationFieldType36, 33);
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime40 = property39.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 60000L + "'", long33 == 60000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate10.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears(0);
        org.joda.time.DateTime.Property property24 = dateTime21.millisOfSecond();
        org.joda.time.DateTime dateTime25 = property24.withMinimumValue();
        org.joda.time.DateTime dateTime27 = property24.addToCopy((long) (-4508245));
        java.util.GregorianCalendar gregorianCalendar28 = dateTime27.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        java.lang.String str30 = mutableDateTime29.toString();
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime29.add(readableDuration31);
        mutableDateTime29.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime29.year();
        mutableDateTime29.addWeekyears(3);
        boolean boolean38 = dateTime27.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        boolean boolean39 = languageRange1.equals((java.lang.Object) mutableDateTime29);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T06:09:00.367+15:02:03.198" + "'", str30, "2022-02-22T06:09:00.367+15:02:03.198");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(22092, 0, 626, 22116000, 54146807);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22116000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        mutableDateTime0.set(dateTimeFieldType22, 52);
        java.lang.String str26 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime37 = property34.getMutableDateTime();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime37);
        int int39 = mutableDateTime37.getSecondOfDay();
        mutableDateTime37.addHours(54150331);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add(22130265);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456017206,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=0,MILLISECOND=404,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0052-02-22T06:09:00.404+15:02:03.198" + "'", str26, "0052-02-22T06:09:00.404+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22140 + "'", int39 == 22140);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.withDayOfYear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean20 = dateTimeFieldType8.isSupported(chronology15);
        boolean boolean21 = localDate2.isSupported(dateTimeFieldType8);
        int int22 = localDate2.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.DateTime dateTime25 = dateTime12.withFieldAdded(durationFieldType21, (int) (byte) 1);
        boolean boolean26 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = property29.roundCeilingCopy();
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks(52);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime33.withTime(21970, 494, 21938850, (-54149028));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfEven();
        java.lang.String str9 = mutableDateTime8.toString();
        mutableDateTime8.addYears(21908000);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Calendar calendar16 = mutableDateTime12.toCalendar(locale15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        mutableDateTime12.setMillis(readableInstant21);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime12.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundFloor();
        org.joda.time.DateTime dateTime26 = mutableDateTime25.toDateTimeISO();
        org.joda.time.DateTime dateTime28 = dateTime26.plusMonths(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTimeISO();
        boolean boolean30 = mutableDateTime8.isAfter((org.joda.time.ReadableInstant) dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:09:00.639+15:02:03.198" + "'", str1, "2022-02-22T06:09:00.639+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0001-01-01T00:00:00.000+15:02:03.198" + "'", str9, "0001-01-01T00:00:00.000+15:02:03.198");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456017441,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=0,MILLISECOND=639,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (short) -1);
        java.lang.String str6 = mutableDateTime0.toString(dateTimeFormatter5);
        mutableDateTime0.addHours(54138295);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022-02-21T15:02:24.490Z");
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime10.add(readablePeriod11, 1969);
        mutableDateTime10.addSeconds(86399999);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.centuryOfEra();
        long long17 = property16.remainder();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField19 = property16.getField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setRounding(dateTimeField19, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: -292275054");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6:09 AM" + "'", str6, "6:09 AM");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1423904256510L) + "'", long17 == (-1423904256510L));
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 16, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTime dateTime8 = property5.setCopy(47);
        int int9 = property5.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property5.setCopy(54150331);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54150331 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime13 = dateTime5.plusHours((int) '4');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        org.joda.time.DateTime.Property property15 = dateTime13.year();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("2022-02-21T15:01:57.955Z");
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.Chronology chronology29 = localDate23.getChronology();
        long long33 = chronology29.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean34 = dateTimeFieldType22.isSupported(chronology29);
        mutableDateTime19.setChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.secondOfDay();
        long long38 = dateTimeField36.roundFloor(1707724464566400001L);
        java.util.Locale locale43 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str44 = dateTimeField36.getAsText((-62194316231679L), locale43);
        java.lang.String str45 = locale43.toLanguageTag();
        java.lang.String str46 = locale18.getDisplayVariant(locale43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = property15.setCopy("", locale43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 200L + "'", long33 == 200L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1707724464566400000L + "'", long38 == 1707724464566400000L);
        org.junit.Assert.assertEquals(locale43.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "32568" + "'", str44, "32568");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "und" + "'", str45, "und");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalTime localTime10 = localTime6.withField(dateTimeFieldType7, 0);
        org.joda.time.LocalTime localTime12 = localTime6.withMillisOfDay(83);
        org.joda.time.LocalTime localTime14 = localTime6.plusMinutes(292278993);
        org.joda.time.LocalTime localTime16 = localTime14.plusHours(21978);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str7 = dateTimeZone5.getName((long) 2000);
        int int9 = dateTimeZone5.getOffsetFromLocal((long) (-1));
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        int int12 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.yearOfCentury();
        boolean boolean18 = dateTimeZone5.isLocalDateTimeGap(localDateTime14);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(dateTimeZone5);
        boolean boolean20 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusWeeks(22063083);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 54417531 + "'", int4 == 54417531);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22140729 + "'", int12 == 22140729);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology10.getZone();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        long long23 = chronology10.add(4201328032L, 200L, 54130144);
        org.joda.time.DateTimeField dateTimeField24 = chronology10.weekOfWeekyear();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.LocalDate localDate27 = localDate25.plusMonths((-54118));
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 15027356832L + "'", long23 == 15027356832L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.Chronology chronology12 = localDateTime10.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 16, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        org.joda.time.DateTime dateTime15 = property14.getDateTime();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        int int17 = property8.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withDayOfYear(44);
        int int20 = dateTime16.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long20 = dateTimeZone17.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime26.minusSeconds(10);
        int int30 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((-53));
        int int33 = property14.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime34 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.minus((long) 54115116);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(901);
        org.joda.time.DateTime dateTime40 = dateTime36.plus((-2208988800000L));
        org.joda.time.DateTime dateTime42 = dateTime40.plusDays(185);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-133144884L) + "'", long20 == (-133144884L));
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 212880000 + "'", int30 == 212880000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-21T15:06:29.539Z", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t15:06:29.539z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMonths(22005638);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYearOfEra(22070323);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.millisOfDay();
        java.util.Locale locale10 = null;
        int int11 = dateTimeField9.getMaximumTextLength(locale10);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        mutableDateTime7.setMillisOfDay(129);
        int int10 = mutableDateTime7.getMillisOfDay();
        mutableDateTime7.addWeekyears(21949);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.minuteOfHour();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime7.centuryOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:09:00.875+15:02:03.198" + "'", str1, "2022-02-22T06:09:00.875+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 129 + "'", int10 == 129);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) (byte) 100);
        int int19 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.plus(readableDuration20);
        int int22 = localDateTime21.getMillisOfSecond();
        int int23 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        int int26 = property24.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime27 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = property24.addToCopy((long) 56112);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone43);
        int int48 = dateTimeZone43.getStandardOffset(15027356832L);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = new java.util.Locale("3", "");
        java.lang.String str54 = locale50.getDisplayCountry(locale53);
        java.lang.String str55 = dateTimeZone43.getShortName((long) 26, locale53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = property24.setCopy("2022-02-22T06:06:43.052+15:02:03.198", locale53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:06:43.052+15:02:03.198\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22140906 + "'", int14 == 22140906);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 54123198 + "'", int48 == 54123198);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals(locale53.toString(), "3");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+15:02:03.198" + "'", str55, "+15:02:03.198");
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology10.getZone();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra(54131261);
        org.joda.time.LocalDate.Property property22 = localDate19.yearOfCentury();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.LocalDate localDate24 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate25 = property22.roundHalfEvenCopy();
        int int26 = property22.getMinimumValueOverall();
        org.joda.time.DurationField durationField27 = property22.getRangeDurationField();
        org.joda.time.LocalDate localDate28 = property22.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone13);
        mutableDateTime16.setTime(216500L);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Calendar calendar23 = mutableDateTime19.toCalendar(locale22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        mutableDateTime19.setMillis(readableInstant28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.hourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime37.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property42 = dateTime40.property(dateTimeFieldType41);
        mutableDateTime19.set(dateTimeFieldType41, 52);
        int int45 = mutableDateTime16.get(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDayOfYear(22096377);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22096377 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645456017736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=0,MILLISECOND=934,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1970 + "'", int45 == 1970);
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.year();
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.DurationField durationField11 = chronology6.seconds();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        java.io.IOException iOException1 = new java.io.IOException("23:59:35.999");
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("United States", throwable4);
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException("52", (java.lang.Throwable) iOException5);
        iOException1.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException9);
        java.io.IOException iOException14 = new java.io.IOException("yearOfCentury");
        java.io.IOException iOException15 = new java.io.IOException("German", (java.lang.Throwable) iOException14);
        java.io.IOException iOException17 = new java.io.IOException("23:59:35.999");
        java.lang.Throwable throwable20 = null;
        java.io.IOException iOException21 = new java.io.IOException("United States", throwable20);
        java.lang.Throwable[] throwableArray22 = iOException21.getSuppressed();
        java.io.IOException iOException23 = new java.io.IOException("52", (java.lang.Throwable) iOException21);
        iOException17.addSuppressed((java.lang.Throwable) iOException21);
        iOException15.addSuppressed((java.lang.Throwable) iOException21);
        java.io.IOException iOException27 = new java.io.IOException("yearOfCentury");
        iOException15.addSuppressed((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException15);
        java.io.IOException iOException30 = new java.io.IOException("2022-02-22T06:04:53.122+15:02:03.198", (java.lang.Throwable) iOException15);
        iOException9.addSuppressed((java.lang.Throwable) iOException15);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.weekOfWeekyear();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.Chronology chronology70 = localDate64.getChronology();
        long long74 = chronology70.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.weekyearOfCentury();
        long long77 = dateTimeField75.roundHalfFloor((long) 47);
        mutableDateTime62.setRounding(dateTimeField75);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate82 = localDate79.withField(dateTimeFieldType80, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDate82.toDateTime(readableInstant83);
        org.joda.time.Chronology chronology85 = dateTime84.getChronology();
        org.joda.time.DateTime dateTime87 = dateTime84.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property89 = dateTime87.property(dateTimeFieldType88);
        org.joda.time.DateTime dateTime90 = property89.withMinimumValue();
        org.joda.time.DateTime dateTime91 = property89.getDateTime();
        org.joda.time.DateTime dateTime93 = property89.addToCopy(11);
        org.joda.time.DateTime dateTime95 = property89.addToCopy(427);
        org.joda.time.DateTime dateTime96 = property89.withMinimumValue();
        boolean boolean97 = mutableDateTime62.isEqual((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.MutableDateTime.Property property98 = mutableDateTime62.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime99 = property98.roundCeiling();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 200L + "'", long74 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(property98);
        org.junit.Assert.assertNotNull(mutableDateTime99);
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.withDayOfYear(7);
        org.joda.time.DateTime.Property property10 = dateTime5.millisOfDay();
        org.joda.time.DateTime dateTime11 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime5.withWeekyear(0);
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(314);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12:00:00 AM +15:02:03.198" + "'", str7, "12:00:00 AM +15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.Chronology chronology12 = localDate6.getChronology();
        long long16 = chronology12.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean17 = dateTimeFieldType5.isSupported(chronology12);
        mutableDateTime2.setChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfYear();
        java.lang.String str20 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.year();
        int int26 = dateTimeField24.getMinimumValue((long) 22083461);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 200L + "'", long16 == 200L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-292275054) + "'", int26 == (-292275054));
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime5.withDurationAdded(readableDuration10, (int) 'a');
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property13.setCopy("2022-02-22T06:04:48.233+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:04:48.233+15:02:03.198\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.Chronology chronology12 = localDate6.getChronology();
        long long16 = chronology12.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean17 = dateTimeFieldType5.isSupported(chronology12);
        mutableDateTime2.setChronology(chronology12);
        org.joda.time.DurationField durationField19 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology12.getZone();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DurationField durationField22 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology12.weekyear();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 39, chronology12);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) -1, chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.weekyear();
        long long29 = dateTimeField26.getDifferenceAsLong((long) 21928334, 54120L);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 200L + "'", long16 == 200L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        dateTimeParserBucket24.setZone(dateTimeZone54);
        long long60 = dateTimeZone54.convertUTCToLocal((long) 100);
        int int62 = dateTimeZone54.getOffsetFromLocal(2L);
        java.util.Locale locale64 = java.util.Locale.UK;
        boolean boolean65 = locale64.hasExtensions();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.lang.String str67 = locale64.getDisplayName(locale66);
        java.lang.String str68 = dateTimeZone54.getName((long) 54131261, locale66);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70);
        java.util.Locale locale72 = java.util.Locale.getDefault();
        java.util.Calendar calendar73 = mutableDateTime69.toCalendar(locale72);
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate77 = localDate74.withField(dateTimeFieldType75, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDate77.toDateTime(readableInstant78);
        mutableDateTime69.setMillis(readableInstant78);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime69.secondOfDay();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime69.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField83 = property82.getField();
        int int84 = property82.get();
        org.joda.time.MutableDateTime mutableDateTime85 = property82.getMutableDateTime();
        boolean boolean86 = dateTimeZone54.equals((java.lang.Object) property82);
        org.joda.time.MutableDateTime mutableDateTime87 = property82.roundCeiling();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 54123298L + "'", long60 == 54123298L);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 54123198 + "'", int62 == 54123198);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str67, "Englisch (Vereinigtes K\366nigreich)");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+15:02:03.198" + "'", str68, "+15:02:03.198");
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645456017951,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=1,MILLISECOND=149,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 8 + "'", int84 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(mutableDateTime87);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.getMutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, (-53));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setDateTime(22139077, 21947008, 22140729, 1826281, 22047239, 21892595, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1826281 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456018030,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=1,MILLISECOND=228,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        int int5 = localDate0.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate0.withWeekOfWeekyear(22105365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22105365 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(86399999);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        java.lang.String str16 = localDateTime14.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1657908-04-14T00:00:00.000" + "'", str16, "1657908-04-14T00:00:00.000");
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        int int8 = localTime6.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((-1L), dateTimeZone10);
        org.joda.time.LocalTime localTime13 = localTime11.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime11.minus(readablePeriod14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        org.joda.time.LocalTime localTime19 = localTime15.withField(dateTimeFieldType16, 0);
        int int20 = localTime6.get(dateTimeFieldType16);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime6.minus(readablePeriod21);
        org.joda.time.LocalTime.Property property23 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime25 = localTime6.minusHours(4);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 197 + "'", int20 == 197);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfEra(21);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withYearOfEra(54118820);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        int int11 = localDateTime9.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(22098454, 21884220, 22009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21884220 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.LocalDate localDate2 = dateTimeFormatter0.parseLocalDate("Sunday, February 21, -0001");
        int int3 = localDate2.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate2.withYearOfCentury(139);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 139 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 7 + "'", int3 == 7);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        boolean boolean14 = property11.equals((java.lang.Object) "2/22/07 6:07 AM");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        mutableDateTime0.setChronology(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime0.millisOfDay();
        mutableDateTime0.setDate((long) 54115634);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime0.millisOfSecond();
        int int19 = property18.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.addWrapField(365);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.Chronology chronology30 = localDate24.getChronology();
        long long34 = chronology30.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.weekOfWeekyear();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.lang.String str46 = dateTimeField43.getAsText((long) (short) 1, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(32L, chronology30, locale45);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMonths((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime55.plus((-48469999L));
        org.joda.time.DateTime dateTime59 = dateTime55.plusSeconds(2);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTime(readableInstant64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = localDate63.toDateTimeAtCurrentTime(dateTimeZone72);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((java.lang.Object) dateTime55, dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone77);
        long long80 = dateTimeZone72.getMillisKeepLocal(dateTimeZone77, (long) (byte) -1);
        dateTimeParserBucket47.setZone(dateTimeZone77);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime85 = org.joda.time.MutableDateTime.now(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(dateTimeZone77);
        org.joda.time.MutableDateTime mutableDateTime87 = mutableDateTime21.toMutableDateTime(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 200L + "'", long34 == 200L);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1L) + "'", long80 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(mutableDateTime87);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-22T06:08:10.700+15:02:03.198", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t06:08:10.700+15:02:03.198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime5.withCenturyOfEra((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay12 = dateTime5.toYearMonthDay();
        org.joda.time.DateTime dateTime14 = dateTime5.minus((long) 54117);
        boolean boolean16 = dateTime14.isBefore((long) 54145498);
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 21884565);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime14.withCenturyOfEra(21906999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21906999 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((java.lang.Object) localTime2, dateTimeZone5);
        long long8 = dateTimeZone5.previousTransition((long) (byte) 1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime7.minusDays(8);
        org.joda.time.DateTime.Property property30 = dateTime7.year();
        org.joda.time.DateTime dateTime31 = property30.roundFloorCopy();
        org.joda.time.DateTime dateTime33 = dateTime31.minusHours(0);
        boolean boolean35 = dateTime33.equals((java.lang.Object) 54133078);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T15:03:27.753Z");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((-1L), dateTimeZone3);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        java.lang.String str6 = property5.toString();
        org.joda.time.DurationField durationField7 = property5.getLeapDurationField();
        org.joda.time.LocalTime localTime9 = property5.addCopy((long) 2022);
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        org.joda.time.DateTime dateTime12 = dateTime10.withYear(54119821);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime10.minus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(4);
        java.util.Date date17 = dateTime16.toDate();
        boolean boolean18 = timeZone1.inDaylightTime(date17);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[millisOfDay]" + "'", str6, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 25 00:00:02 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 1);
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 100);
        long long7 = dateTimeZone0.convertLocalToUTC((long) 28, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54123198 + "'", int2 == 54123198);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+15:02:03.198" + "'", str4, "+15:02:03.198");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-54123170L) + "'", long7 == (-54123170L));
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        int int2 = dateTimePrinter1.estimatePrintedLength();
        int int3 = dateTimePrinter1.estimatePrintedLength();
        java.io.Writer writer4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        int int7 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        int int10 = localDateTime9.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths(54123198);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        long long27 = dateTimeField24.addWrapField((long) ' ', 0);
        long long30 = dateTimeField24.addWrapField((long) 54150, 10373);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = locale32.getVariant();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekOfWeekyear();
        long long45 = dateTimeField42.addWrapField((long) ' ', 0);
        boolean boolean46 = dateTimeField42.isSupported();
        long long49 = dateTimeField42.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField42.getType();
        long long53 = dateTimeField42.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate60 = localDate54.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property61 = localDate54.yearOfEra();
        org.joda.time.LocalDate localDate62 = property61.roundFloorCopy();
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDate62, locale63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.Chronology chronology72 = localDate66.getChronology();
        long long76 = chronology72.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.weekOfWeekyear();
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.lang.String str88 = dateTimeField85.getAsText((long) (short) 1, locale87);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket89 = new org.joda.time.format.DateTimeParserBucket(32L, chronology72, locale87);
        java.lang.String str90 = locale63.getDisplayVariant(locale87);
        java.util.Locale locale91 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str92 = locale87.getDisplayScript(locale91);
        java.lang.String str93 = locale87.toLanguageTag();
        java.lang.String str94 = locale32.getDisplayLanguage(locale87);
        java.lang.String str95 = dateTimeField24.getAsText(54122, locale32);
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter1.printTo(writer4, (org.joda.time.ReadablePartial) localDateTime13, locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40 + "'", int2 == 40);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 40 + "'", int3 == 40);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22141832 + "'", int7 == 22141832);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 22982454150L + "'", long30 == 22982454150L);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 32L + "'", long45 == 32L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 58665600001L + "'", long49 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "52" + "'", str64, "52");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 200L + "'", long76 == 200L);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(locale87);
// flaky:         org.junit.Assert.assertEquals(locale87.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "und" + "'", str93, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "sunday, february 21, -0001" + "'", str94, "sunday, february 21, -0001");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "54122" + "'", str95, "54122");
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        mutableDateTime5.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.property(dateTimeFieldType10);
        int int12 = mutableDateTime0.get(dateTimeFieldType10);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = dateTimeField34.getAsText((long) (short) 1, locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(32L, chronology21, locale36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate54.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) dateTime46, dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone68);
        long long71 = dateTimeZone63.getMillisKeepLocal(dateTimeZone68, (long) (byte) -1);
        dateTimeParserBucket38.setZone(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone68);
        mutableDateTime0.setZone(dateTimeZone68);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime0.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        mutableDateTime0.add(readablePeriod76, 20);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456018658,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=1,MILLISECOND=856,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) (short) 100, 54113391);
        org.joda.time.DurationField durationField13 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.year();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate17.equals((java.lang.Object) (byte) 10);
        int int20 = localDate17.getDayOfMonth();
        org.joda.time.LocalDate localDate22 = localDate17.withDayOfYear(8);
        org.joda.time.LocalDate localDate24 = localDate22.withYear(7);
        org.joda.time.LocalDate localDate26 = localDate24.plusWeeks(54117);
        long long28 = chronology7.set((org.joda.time.ReadablePartial) localDate24, (long) 365);
        org.joda.time.DurationField durationField29 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField30 = chronology7.centuryOfEra();
        long long33 = dateTimeField30.add(54133078000L, 10373);
        int int36 = dateTimeField30.getDifference((long) 445, 0L);
        long long38 = dateTimeField30.roundHalfCeiling((long) 100);
        org.joda.time.tz.NameProvider nameProvider40 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str44 = nameProvider40.getShortName(locale41, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider40);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.Chronology chronology54 = localDate48.getChronology();
        long long58 = chronology54.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean59 = dateTimeFieldType47.isSupported(chronology54);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology54, locale61, (java.lang.Integer) 54135101, 80);
        long long66 = dateTimeParserBucket65.computeMillis();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate70 = localDate67.withField(dateTimeFieldType68, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDate70.toDateTime(readableInstant71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusMonths((int) '4');
        org.joda.time.DateTime dateTime76 = dateTime74.plus((-48469999L));
        org.joda.time.DateTime.Property property77 = dateTime74.yearOfEra();
        org.joda.time.DateTime dateTime78 = property77.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTime dateTime80 = dateTime78.minus(readableDuration79);
        java.util.GregorianCalendar gregorianCalendar81 = dateTime80.toGregorianCalendar();
        org.joda.time.LocalDate localDate82 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar81);
        boolean boolean83 = dateTimeParserBucket65.restoreState((java.lang.Object) gregorianCalendar81);
        java.util.Locale locale84 = dateTimeParserBucket65.getLocale();
        java.lang.String str87 = nameProvider40.getShortName(locale84, "2022-02-21T15:02:30.347Z", "\u5e74\u6708\u65e5\u661f\u671f\u4e00");
        java.lang.String str88 = dateTimeField30.getAsText(21927649L, locale84);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-61945689599635L) + "'", long28 == (-61945689599635L));
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32734080507478000L + "'", long33 == 32734080507478000L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 946684800000L + "'", long38 == 946684800000L);
        org.junit.Assert.assertNotNull(nameProvider40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 200L + "'", long58 == 200L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 52L + "'", long66 == 52L);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(gregorianCalendar81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "19" + "'", str88, "19");
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        mutableDateTime0.set(dateTimeFieldType22, 52);
        java.lang.String str26 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime37 = property34.getMutableDateTime();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime37);
        boolean boolean39 = mutableDateTime0.isEqualNow();
        long long40 = mutableDateTime0.getMillis();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.Chronology chronology47 = localDate41.getChronology();
        long long51 = chronology47.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField52 = chronology47.weekyearOfCentury();
        long long54 = dateTimeField52.roundHalfFloor((long) 47);
        boolean boolean55 = dateTimeField52.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setRounding(dateTimeField52, 54135101);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 54135101");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456018770,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=1,MILLISECOND=968,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0052-02-22T06:09:01.968+15:02:03.198" + "'", str26, "0052-02-22T06:09:01.968+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644851218770L + "'", long40 == 1644851218770L);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 200L + "'", long51 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(22022, 21920424, 22130221, 54152364, 159, (int) (short) 10, 86294665);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54152364 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str2 = dateTimeFormatter0.print((-2208988800000L));
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDate6.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 2);
        long long22 = dateTimeZone15.nextTransition((long) 54130144);
        int int24 = dateTimeZone15.getOffset(2800L);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) (-2208988800000L), dateTimeZone15);
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = localDate25.withMonthOfYear(138);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 138 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Monday, January 1, 1900" + "'", str2, "Monday, January 1, 1900");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 54130144L + "'", long22 == 54130144L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 54123198 + "'", int24 == 54123198);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("eng");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: n");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = property7.addWrapFieldToCopy(21915);
        org.joda.time.LocalDate localDate14 = localDate12.withCenturyOfEra(21969);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology20);
        int int24 = localDate23.getDayOfMonth();
        org.joda.time.LocalDate localDate26 = localDate23.plusDays(30);
        org.joda.time.LocalDate localDate27 = localDate12.withFields((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate29 = localDate12.minusMonths(22062998);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 21 + "'", int24 == 21);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str2 = dateTimeFormatter0.print((-2208988800000L));
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology12 = chronology10.withZone(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.plus((-48469999L));
        org.joda.time.DateTime dateTime25 = dateTime21.plusSeconds(2);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate29.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((java.lang.Object) dateTime21, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone43);
        long long46 = dateTimeZone38.getMillisKeepLocal(dateTimeZone43, (long) (byte) -1);
        boolean boolean47 = dateTimeZone43.isFixed();
        org.joda.time.Chronology chronology48 = chronology10.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField49 = chronology10.secondOfDay();
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        long long61 = dateTimeField58.addWrapField((long) ' ', 0);
        boolean boolean62 = dateTimeField58.isSupported();
        long long65 = dateTimeField58.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = dateTimeField58.getType();
        long long69 = dateTimeField58.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate76 = localDate70.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property77 = localDate70.yearOfEra();
        org.joda.time.LocalDate localDate78 = property77.roundFloorCopy();
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        java.lang.String str80 = dateTimeField58.getAsText((org.joda.time.ReadablePartial) localDate78, locale79);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket((long) 348, chronology10, locale79, (java.lang.Integer) 190, 22090096);
        int int86 = dateTimeParser3.parseInto(dateTimeParserBucket83, "2022-02-22T06:06:14.971+15:02:03.198", 21896);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Monday, January 1, 1900" + "'", str2, "Monday, January 1, 1900");
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 58665600001L + "'", long65 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "52" + "'", str80, "52");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-21897) + "'", int86 == (-21897));
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        mutableDateTime3.add(durationFieldType7, (-1));
        long long10 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setMillis((long) 902);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime3.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setDayOfYear(21957666);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21957666 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField28.getAsText((long) (short) 1, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(32L, chronology15, locale30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((-48469999L));
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds(2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateTime40, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone62);
        long long65 = dateTimeZone57.getMillisKeepLocal(dateTimeZone62, (long) (byte) -1);
        dateTimeParserBucket32.setZone(dateTimeZone62);
        java.util.Locale locale67 = dateTimeParserBucket32.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter0.withLocale(locale67);
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withLocale(locale69);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeFormatter68.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter68.withPivotYear(54131);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter73.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeFormatter74.getZone();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeFormatter74.getZone();
        boolean boolean77 = dateTimeFormatter74.isOffsetParsed();
        java.util.Locale locale78 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str79 = locale78.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter74.withLocale(locale78);
        // The following exception was thrown during execution in test generation
        try {
            long long82 = dateTimeFormatter74.parseMillis("2022-02-22T06:07:56.953+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:07:56.953+15:02:03.198\" is malformed at \"22-02-22T06:07:56.953+15:02:03.198\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "China" + "'", str79, "China");
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField8.getType();
        java.lang.String str18 = dateTimeFieldType17.toString();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DurationField durationField28 = chronology24.months();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        int int30 = localDate29.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate29.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.Chronology chronology34 = chronology24.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField35 = chronology34.millis();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfDay();
        org.joda.time.DurationField durationField37 = chronology34.centuries();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType17.getField(chronology34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.minusMonths((int) (short) -1);
        boolean boolean44 = localDate40.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology45 = localDate40.getChronology();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology47 = chronology45.withZone(dateTimeZone46);
        boolean boolean48 = dateTimeZone39.equals((java.lang.Object) dateTimeZone46);
        int int50 = dateTimeZone46.getStandardOffset((long) 54119608);
        org.joda.time.Chronology chronology51 = chronology34.withZone(dateTimeZone46);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = chronology34.get(readablePeriod52, (long) 21884665);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekOfWeekyear" + "'", str18, "weekOfWeekyear");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 54123198 + "'", int50 == 54123198);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        dateTimeParserBucket24.setZone(dateTimeZone54);
        java.util.Locale locale59 = dateTimeParserBucket24.getLocale();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone60);
        dateTimeParserBucket24.setPivotYear((java.lang.Integer) 59);
        long long64 = dateTimeParserBucket24.computeMillis();
        java.lang.Integer int65 = dateTimeParserBucket24.getOffsetInteger();
        int int66 = dateTimeParserBucket24.getOffset();
        org.joda.time.DateTimeField dateTimeField67 = null;
        dateTimeParserBucket24.saveField(dateTimeField67, 322);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(dateTimeZone60);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-54123166L) + "'", long64 == (-54123166L));
        org.junit.Assert.assertNull(int65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean26 = dateTimeFieldType14.isSupported(chronology21);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField28 = chronology21.halfdays();
        mutableDateTime1.setChronology(chronology21);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj0, chronology21);
        org.joda.time.DurationField durationField31 = chronology21.seconds();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.era();
        org.joda.time.DurationField durationField33 = chronology21.weeks();
        int int36 = durationField33.getValue(4201328032L, (long) (short) 0);
        long long39 = durationField33.getMillis(21919404, (long) 1897);
        long long42 = durationField33.add((-1268L), 21899751);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456018980,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=2,MILLISECOND=178,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 6 + "'", int36 == 6);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 13256855539200000L + "'", long39 == 13256855539200000L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 13244969404798732L + "'", long42 == 13244969404798732L);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDurationAdded(readableDuration12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.minusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plusSeconds(86399999);
        java.lang.String str19 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfWeek();
        java.lang.String str21 = property20.getName();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = property20.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears(22098);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.year();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2/18/87" + "'", str19, "2/18/87");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "dayOfWeek" + "'", str21, "dayOfWeek");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        mutableDateTime3.add(durationFieldType7, (-1));
        long long10 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime3);
        org.joda.time.DateTimeZone dateTimeZone11 = mutableDateTime3.getZone();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        int int13 = localDateTime12.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withMillisOfDay(393);
        int int16 = localDateTime12.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        mutableDateTime0.setChronology(chronology13);
        mutableDateTime0.addWeeks(524);
        mutableDateTime0.addYears(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        int int5 = property3.get();
        org.joda.time.LocalTime localTime6 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime8 = property3.addCopy((long) 21921538);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localTime8.getField(21971);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21971");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54123197 + "'", int5 == 54123197);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(25);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate localDate11 = localDate8.withDayOfYear(87);
        int int12 = localDate11.size();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Mar 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("United States", throwable2);
        java.lang.Throwable throwable5 = null;
        java.io.IOException iOException6 = new java.io.IOException("United States", throwable5);
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        iOException3.addSuppressed((java.lang.Throwable) iOException6);
        java.io.IOException iOException9 = new java.io.IOException("Deutsch", (java.lang.Throwable) iOException6);
        java.lang.Throwable[] throwableArray10 = iOException9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        long long21 = chronology17.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = dateTimeField30.getAsText((long) (short) 1, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(32L, chronology17, locale32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone64);
        long long67 = dateTimeZone59.getMillisKeepLocal(dateTimeZone64, (long) (byte) -1);
        dateTimeParserBucket34.setZone(dateTimeZone64);
        long long70 = dateTimeZone64.convertUTCToLocal((long) 100);
        org.joda.time.DateTime dateTime71 = localDate9.toDateTimeAtMidnight(dateTimeZone64);
        org.joda.time.LocalDate localDate72 = dateTime71.toLocalDate();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.yearOfEra();
        int int75 = localDateTime73.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.withPeriodAdded(readablePeriod76, 2022);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.era();
        int int80 = property79.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime81 = property79.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField82 = property79.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property79.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = dateTime71.withField(dateTimeFieldType83, (-421775));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -421775 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 200L + "'", long21 == 200L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 54123298L + "'", long70 == 54123298L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 22142308 + "'", int75 == 22142308);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.weekyears();
        long long11 = durationField8.getDifferenceAsLong((long) 21989363, 2629746000L);
        long long14 = durationField8.getMillis(21887168L, (long) 255);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 690692310403200000L + "'", long14 == 690692310403200000L);
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DurationField durationField13 = chronology7.months();
        long long15 = durationField13.getMillis((long) (-292275054));
        long long17 = durationField13.getValueAsLong((long) 21882503);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-768609154156284000L) + "'", long15 == (-768609154156284000L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.Interval interval46 = localDate27.toInterval(dateTimeZone40);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property60 = dateTime58.dayOfYear();
        boolean boolean61 = dateTime58.isAfterNow();
        java.util.GregorianCalendar gregorianCalendar62 = dateTime58.toGregorianCalendar();
        int int63 = dateTime58.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        java.io.IOException iOException1 = new java.io.IOException("-0019-02-19T06:07:47.179+15:02:03.198");
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology8.add(readablePeriod10, (long) (short) 100, 54113391);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(200L, chronology8);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setDateTime(22011, 47672, 21993726, 47672, 22073834, 22131905, 203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47672 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        long long10 = durationField7.getValueAsLong((long) 80, (long) (short) 100);
        java.lang.String str11 = durationField7.toString();
        long long14 = durationField7.getDifferenceAsLong((long) 54150331, 142295824137600000L);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.months();
        long long26 = durationField24.getValueAsLong((long) 54131);
        int int27 = durationField7.compareTo(durationField24);
        long long28 = durationField24.getUnitMillis();
        java.lang.String str29 = durationField24.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[minutes]" + "'", str11, "DurationField[minutes]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2371597068057L) + "'", long14 == (-2371597068057L));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2629746000L + "'", long28 == 2629746000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "months" + "'", str29, "months");
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.Chronology chronology12 = localDate6.getChronology();
        long long16 = chronology12.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean17 = dateTimeFieldType5.isSupported(chronology12);
        mutableDateTime2.setChronology(chronology12);
        org.joda.time.DurationField durationField19 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology12.getZone();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology12);
        long long25 = chronology12.add(4201328032L, 200L, 54130144);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter0.withChronology(chronology12);
        org.joda.time.DurationField durationField27 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField28 = chronology12.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 200L + "'", long16 == 200L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 15027356832L + "'", long25 == 15027356832L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        boolean boolean34 = dateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        java.lang.String str36 = mutableDateTime35.toString();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        mutableDateTime37.add(durationFieldType41, (-1));
        mutableDateTime35.add(durationFieldType41, 10);
        org.joda.time.DateTime dateTime47 = dateTime28.withFieldAdded(durationFieldType41, 5);
        java.util.Date date48 = dateTime28.toDate();
        org.joda.time.DateTime dateTime50 = dateTime28.withYearOfEra(100);
        org.joda.time.DateTime dateTime51 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime28.withWeekyear(21952);
        org.joda.time.DateTime dateTime55 = dateTime28.plusMillis(21925377);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456019284,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=2,MILLISECOND=482,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T06:09:02.482+15:02:03.198" + "'", str36, "2022-02-22T06:09:02.482+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Mon Feb 21 15:06:59 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withPeriodAdded(readablePeriod6, 54183198);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay(54123277);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22142534 + "'", int2 == 22142534);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-21T15:02:24.490Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        int int3 = mutableDateTime1.getMillisOfSecond();
        mutableDateTime1.addMonths(21886838);
        int int6 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 490 + "'", int3 == 490);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 902 + "'", int6 == 902);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = localDate0.minusMonths(22110966);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime localTime7 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localTime8.getFields();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear(7);
        org.joda.time.DateTime dateTime11 = dateTime5.plusMinutes(54140309);
        org.joda.time.DateTime dateTime12 = dateTime5.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        java.lang.String str13 = property10.getAsString();
        org.joda.time.DateTime dateTime14 = property10.withMaximumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime17 = property15.addToCopy(7);
        org.joda.time.DateTime dateTime18 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        long long21 = dateTimeField19.roundCeiling(6000000L);
        long long23 = dateTimeField19.roundCeiling(54146807L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 6000802L + "'", long21 == 6000802L);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 54147802L + "'", long23 == 54147802L);
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.LocalDate localDate9 = localDate7.minusWeeks(21984605);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        mutableDateTime0.set(dateTimeFieldType22, 52);
        java.lang.String str26 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime37 = property34.getMutableDateTime();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime37);
        java.lang.Object obj39 = null;
        boolean boolean40 = mutableDateTime0.equals(obj39);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456019571,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=2,MILLISECOND=769,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0052-02-22T06:09:02.769+15:02:03.198" + "'", str26, "0052-02-22T06:09:02.769+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay((int) (short) 100);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str16 = mutableDateTime0.toString(dateTimeFormatter15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withPivotYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter15.withPivotYear(2039);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate28 = localDate22.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate22.yearOfEra();
        org.joda.time.LocalDate localDate30 = property29.roundFloorCopy();
        org.joda.time.LocalDate localDate31 = property29.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths(54141456);
        java.lang.String str34 = dateTimeFormatter21.print((org.joda.time.ReadablePartial) localDate31);
        java.io.Writer writer35 = null;
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        mutableDateTime36.setMillis((long) (byte) 1);
        mutableDateTime36.setWeekOfWeekyear(47);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime.Property property49 = dateTime48.yearOfEra();
        mutableDateTime36.setDate((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str53 = dateTimeZone51.getName((long) 2000);
        mutableDateTime36.setZoneRetainFields(dateTimeZone51);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localDate55.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(writer35, (org.joda.time.ReadablePartial) localDate55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456019593,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=2,MILLISECOND=791,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, February 22, -0001" + "'", str16, "Monday, February 22, -0001");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Saturday, January 1, 2022" + "'", str34, "Saturday, January 1, 2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.Chronology chronology16 = localDate10.getChronology();
        long long20 = chronology16.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean21 = dateTimeFieldType9.isSupported(chronology16);
        java.lang.String str22 = dateTimeFieldType9.toString();
        boolean boolean23 = localDate7.isSupported(dateTimeFieldType9);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = localDate7.toString("52", locale25);
        org.joda.time.LocalDate localDate28 = localDate7.withYear(21983578);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate30 = localDate28.withEra(286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 286 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 200L + "'", long20 == 200L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millisOfSecond" + "'", str22, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "52" + "'", str26, "52");
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        int int15 = dateTimeField12.getDifference((long) 901, (long) 54119608);
        long long17 = dateTimeField12.roundFloor((long) 54136873);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate.Property property23 = localDate18.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        mutableDateTime24.add(durationFieldType28, (-1));
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime24.dayOfMonth();
        long long32 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime45.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime50.add(readableDuration51);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        mutableDateTime50.add(durationFieldType54, (-1));
        org.joda.time.DateTime dateTime58 = dateTime45.withFieldAdded(durationFieldType54, (int) (byte) 1);
        boolean boolean59 = dateTime38.isAfter((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.weekOfWeekyear();
        long long71 = dateTimeField68.addWrapField((long) ' ', 0);
        boolean boolean72 = dateTimeField68.isSupported();
        long long75 = dateTimeField68.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField68.getType();
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.lang.String str79 = dateTimeField68.getAsText((long) (byte) 1, locale78);
        java.lang.String str80 = locale78.getLanguage();
        java.util.Calendar calendar81 = dateTime58.toCalendar(locale78);
        java.util.Locale locale82 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str83 = locale78.getDisplayName(locale82);
        int int84 = property23.getMaximumShortTextLength(locale82);
        int int85 = dateTimeField12.getMaximumShortTextLength(locale82);
        int int87 = dateTimeField12.getMinimumValue((long) 22089);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-54123198L) + "'", long17 == (-54123198L));
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 32L + "'", long71 == 32L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 58665600001L + "'", long75 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "1" + "'", str79, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "sunday, february 21, -0001" + "'", str80, "sunday, february 21, -0001");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=-62194294380362,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=24,DAY_OF_YEAR=55,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=2,MILLISECOND=836,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "sunday, february 21, -0001 (2022-02-21T15:01:56.023Z)" + "'", str83, "sunday, february 21, -0001 (2022-02-21T15:01:56.023Z)");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-292275054) + "'", int87 == (-292275054));
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(560);
        int int6 = localDateTime5.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        int int8 = localTime6.getValue((int) (byte) 0);
        java.lang.String str9 = localTime6.toString();
        org.joda.time.Chronology chronology10 = localTime6.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "15:02:03.197" + "'", str9, "15:02:03.197");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(54141456);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.Chronology chronology19 = localDate13.getChronology();
        long long23 = chronology19.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekOfWeekyear();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.lang.String str35 = dateTimeField32.getAsText((long) (short) 1, locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(32L, chronology19, locale34);
        dateTimeParserBucket36.setOffset(54111610);
        long long41 = dateTimeParserBucket36.computeMillis(false, "Property[millisOfDay]");
        long long43 = dateTimeParserBucket36.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeParserBucket36.getZone();
        int int46 = dateTimeZone44.getOffsetFromLocal((long) 70);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        mutableDateTime47.setMillis(readableInstant56);
        int int59 = mutableDateTime47.getMinuteOfDay();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime63 = localDate60.toDateTimeAtCurrentTime();
        int int64 = localDate60.getYear();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.DateTime dateTime70 = localDate68.toDateTime(readableInstant69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.minusMonths((int) (short) -1);
        boolean boolean75 = localDate71.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology76 = localDate71.getChronology();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology78 = chronology76.withZone(dateTimeZone77);
        org.joda.time.DateTime dateTime79 = localDate68.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.getDefault();
        long long82 = dateTimeZone77.getMillisKeepLocal(dateTimeZone80, (long) 2);
        long long84 = dateTimeZone77.nextTransition((long) 54130144);
        org.joda.time.DateTime dateTime85 = localDate60.toDateTimeAtStartOfDay(dateTimeZone77);
        mutableDateTime47.setZoneRetainFields(dateTimeZone77);
        long long88 = dateTimeZone44.getMillisKeepLocal(dateTimeZone77, (long) 54110102);
        org.joda.time.DateTime dateTime89 = localDate11.toDateTimeAtCurrentTime(dateTimeZone77);
        java.lang.String str90 = localDate11.toString();
        java.lang.String str91 = localDate11.toString();
        org.joda.time.DateTime dateTime92 = localDate11.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            int int94 = localDate11.getValue(8002);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 8002");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-54111578L) + "'", long41 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-54111578L) + "'", long43 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645456019701,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=2,MILLISECOND=899,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 369 + "'", int59 == 369);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2022 + "'", int64 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 2L + "'", long82 == 2L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 54130144L + "'", long84 == 54130144L);
        org.junit.Assert.assertNotNull(dateTime85);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-13096L) + "'", long88 == (-13096L));
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "-4509766-01-01" + "'", str90, "-4509766-01-01");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "-4509766-01-01" + "'", str91, "-4509766-01-01");
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.joda.time.LocalDate localDate12 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate13 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths(54119809);
        org.joda.time.LocalDate localDate17 = localDate13.withYearOfEra(286);
        int int18 = localDate17.getYearOfEra();
        int int19 = localDate17.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 286 + "'", int18 == 286);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate6.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property13 = localDate6.yearOfEra();
        org.joda.time.LocalDate localDate14 = property13.roundFloorCopy();
        org.joda.time.Interval interval15 = property13.toInterval();
        org.joda.time.LocalDate localDate16 = property13.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate17 = property13.getLocalDate();
        boolean boolean18 = localDate2.equals((java.lang.Object) property13);
        org.joda.time.LocalDate localDate20 = property13.setCopy(21895170);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDate localDate22 = localDate20.minus(readablePeriod21);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime.Property property28 = dateTime7.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = property28.setCopy(22091780);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22091780 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDurationAdded(readableDuration12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.withWeekyear(5);
        org.joda.time.Chronology chronology17 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 0, chronology17);
        int int19 = localDateTime18.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-21T15:02:02.278Z");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("22.02.07 06:04");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("2022-02-22T06:06:48.061+15:02:03.198");
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("DurationField[months]");
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        boolean boolean11 = strSet10.isEmpty();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.year();
        org.joda.time.DurationField durationField11 = chronology6.years();
        long long14 = durationField11.getMillis((long) 54134677, 0L);
        long long16 = durationField11.getValueAsLong((long) 526);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1708325403609600000L + "'", long14 == 1708325403609600000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField13 = chronology5.minuteOfHour();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DurationField durationField15 = chronology5.minutes();
        java.lang.String str16 = durationField15.getName();
        long long19 = durationField15.getMillis((long) 21980896, (-3246694680000L));
        java.lang.String str20 = durationField15.toString();
        java.lang.String str21 = durationField15.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "minutes" + "'", str16, "minutes");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1318853760000L + "'", long19 == 1318853760000L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DurationField[minutes]" + "'", str20, "DurationField[minutes]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DurationField[minutes]" + "'", str21, "DurationField[minutes]");
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        mutableDateTime8.setMillis(readableInstant17);
        boolean boolean20 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTime.Property property21 = dateTime5.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime.Property property23 = dateTime5.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime25 = property23.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime25.withDayOfMonth((-21980));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -21980 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456019932,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=3,MILLISECOND=130,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes(54111610);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(80);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        int int17 = localDateTime14.getDayOfYear();
        int int18 = localDateTime14.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.era();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDateTime21.getValue(445);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 445");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.plus((-48469999L));
        org.joda.time.DateTime dateTime23 = dateTime19.plusSeconds(2);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, dateTimeZone36);
        mutableDateTime0.setZone(dateTimeZone36);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra(54137154);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate44.minus(readablePeriod45);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfCentury(9);
        org.joda.time.LocalDate localDate50 = localDate46.plusDays(22102);
        org.joda.time.DateMidnight dateMidnight51 = localDate50.toDateMidnight();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456019956,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=3,MILLISECOND=154,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long20 = dateTimeZone17.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime26.minusSeconds(10);
        int int30 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((-53));
        int int33 = property14.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime34 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.minus((long) 54115116);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime46.toMutableDateTime();
        org.joda.time.LocalDate localDate48 = dateTime46.toLocalDate();
        org.joda.time.DateTime dateTime50 = dateTime46.withWeekyear(54112611);
        boolean boolean51 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDate localDate52 = dateTime34.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime34.withMonthOfYear(665);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 665 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-133144884L) + "'", long20 == (-133144884L));
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 212880000 + "'", int30 == 212880000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(localDate52);
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 1);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int5 = timeZone3.getOffset((long) 756);
        java.lang.Object obj6 = timeZone3.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 54123198 + "'", int2 == 54123198);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+15:02");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54123198 + "'", int5 == 54123198);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 1);
        java.time.ZoneId zoneId3 = timeZone0.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("und");
        boolean boolean6 = timeZone0.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        timeZone7.setID("2022-02-21T15:02:04.418Z");
        int int11 = timeZone7.getOffset((long) (-53));
        timeZone7.setRawOffset(54113391);
        int int15 = timeZone7.getOffset((long) (short) 100);
        boolean boolean16 = timeZone0.hasSameRules(timeZone7);
        boolean boolean17 = timeZone7.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone7);
        timeZone7.setRawOffset(905);
        java.lang.String str21 = timeZone7.getID();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(zoneId3);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54113391 + "'", int15 == 54113391);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-21T15:02:04.418Z" + "'", str21, "2022-02-21T15:02:04.418Z");
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) (byte) 100);
        int int19 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.withSecondOfMinute((int) (short) 1);
        org.joda.time.LocalDateTime.Property property22 = localDateTime11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22143262 + "'", int14 == 22143262);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime6 = property3.getLocalTime();
        org.joda.time.LocalTime localTime8 = property3.addWrapFieldToCopy(778);
        org.joda.time.DurationField durationField9 = property3.getRangeDurationField();
        int int10 = property3.getMinimumValue();
        org.joda.time.LocalTime localTime11 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property3.addWrapFieldToCopy(28);
        int int14 = localTime13.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "54123197" + "'", str5, "54123197");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime6 = property3.roundHalfEvenCopy();
        int int7 = localTime6.getMillisOfDay();
        org.joda.time.LocalTime localTime9 = localTime6.minusMinutes(21996907);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime15.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime22 = dateTime15.withDurationAdded(readableDuration20, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int24 = dateTime15.get(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property25 = localTime9.property(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "54123197" + "'", str5, "54123197");
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 54123197 + "'", int7 == 54123197);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfSecond(0);
        boolean boolean13 = dateTime11.isBefore((long) 20);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1969);
        org.joda.time.DateTime dateTime17 = dateTime11.withMillisOfDay(54133104);
        org.joda.time.DateTime.Property property18 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime11.withMillis(20L);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.withPeriodAdded(readablePeriod21, 4);
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes(54111610);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(80);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        int int17 = localDateTime14.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDateTime14.getValue(21887168);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21887168");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        long long19 = dateTimeField8.getDifferenceAsLong((long) (short) 1, 200L);
        int int20 = dateTimeField8.getMinimumValue();
        int int21 = dateTimeField8.getMaximumValue();
        org.joda.time.DurationField durationField22 = dateTimeField8.getLeapDurationField();
        org.joda.time.DurationField durationField23 = dateTimeField8.getRangeDurationField();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime29.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.Chronology chronology45 = localDate39.getChronology();
        long long49 = chronology45.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean50 = dateTimeFieldType38.isSupported(chronology45);
        mutableDateTime35.setChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField52 = chronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType33.getField(chronology45);
        long long55 = dateTimeField53.remainder((long) 54117);
        org.joda.time.DurationField durationField56 = dateTimeField53.getLeapDurationField();
        int int57 = durationField23.compareTo(durationField56);
        boolean boolean58 = durationField23.isSupported();
        long long59 = durationField23.getUnitMillis();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 200L + "'", long49 == 200L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 54117L + "'", long55 == 54117L);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 31556952000L + "'", long59 == 31556952000L);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        long long21 = chronology17.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = dateTimeField30.getAsText((long) (short) 1, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(32L, chronology17, locale32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone64);
        long long67 = dateTimeZone59.getMillisKeepLocal(dateTimeZone64, (long) (byte) -1);
        dateTimeParserBucket34.setZone(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone64);
        org.joda.time.Interval interval70 = localDate8.toInterval(dateTimeZone64);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDate localDate72 = localDate8.minus(readablePeriod71);
        int int73 = localDate8.getYearOfEra();
        org.joda.time.DateTime dateTime74 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property75 = localDate8.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate77 = property75.addToCopy(21936455);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 200L + "'", long21 == 200L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2022 + "'", int73 == 2022);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(1439, 494, 54120, 22004092, 21952903, 22013000, 76125785);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22004092 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime6 = property3.getLocalTime();
        org.joda.time.LocalTime localTime8 = property3.addCopy((-6717902692355632478L));
        int int9 = localTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "54123197" + "'", str5, "54123197");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 719 + "'", int9 == 719);
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths(21);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readablePeriod11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withYearOfEra(21);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withYearOfEra(54118820);
        int int17 = localDateTime3.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.withPeriodAdded(readablePeriod18, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDateTime20.getValue(1000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.months();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        int int13 = localDate12.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.Chronology chronology17 = chronology7.withZone(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter1.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology17.halfdays();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime0.add(readableDuration7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfEven();
        java.lang.String str11 = mutableDateTime10.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-10-22T00:00:00.000+15:02:03.198" + "'", str11, "2022-10-22T00:00:00.000+15:02:03.198");
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        long long19 = dateTimeField8.getDifferenceAsLong((long) (short) 1, 200L);
        int int20 = dateTimeField8.getMinimumValue();
        int int21 = dateTimeField8.getMaximumValue();
        org.joda.time.DurationField durationField22 = dateTimeField8.getLeapDurationField();
        org.joda.time.DurationField durationField23 = dateTimeField8.getRangeDurationField();
        long long25 = durationField23.getMillis(0L);
        long long27 = durationField23.getValueAsLong(54117L);
        long long29 = durationField23.getMillis((long) 21915);
        long long32 = durationField23.subtract((long) 21913815, 837L);
        long long35 = durationField23.getValueAsLong((-13096L), (long) 22099988);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 691570603080000L + "'", long29 == 691570603080000L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-26412803686185L) + "'", long32 == (-26412803686185L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.setMillis((long) (byte) 1);
        mutableDateTime0.setWeekOfWeekyear(47);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) '4');
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfEra();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime0.hourOfDay();
        int int16 = mutableDateTime0.getDayOfWeek();
        mutableDateTime0.addMinutes(83);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfMinute(567);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 567 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-21T15:02:32.679");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T15:02:32.679\" is malformed at \"22-02-21T15:02:32.679\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusDays(14);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusDays(292278993);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withWeekyear(54135478);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        java.lang.String str10 = localDateTime0.toString(dateTimeFormatter8);
        org.joda.time.format.DateTimeParser dateTimeParser11 = dateTimeFormatter8.getParser();
        java.lang.Appendable appendable12 = null;
        org.joda.time.ReadablePartial readablePartial13 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable12, readablePartial13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The partial must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "February 22, 2022" + "'", str10, "February 22, 2022");
        org.junit.Assert.assertNotNull(dateTimeParser11);
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        long long13 = dateTimeField10.addWrapField(0L, 18);
        int int15 = dateTimeField10.getMaximumValue((long) 1039547);
        boolean boolean16 = dateTimeField10.isLenient();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 567993600000L + "'", long13 == 567993600000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 292278993 + "'", int15 == 292278993);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        long long21 = chronology17.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = dateTimeField30.getAsText((long) (short) 1, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(32L, chronology17, locale32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone64);
        long long67 = dateTimeZone59.getMillisKeepLocal(dateTimeZone64, (long) (byte) -1);
        dateTimeParserBucket34.setZone(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone64);
        org.joda.time.Interval interval70 = localDate8.toInterval(dateTimeZone64);
        org.joda.time.LocalDate localDate71 = org.joda.time.LocalDate.now(dateTimeZone64);
        int int72 = localDate71.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 200L + "'", long21 == 200L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(localDate71);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 53 + "'", int72 == 53);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.DateTime dateTime10 = dateTime8.plus(54177330701L);
        int int11 = dateTime8.getDayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("+00:00:00.002");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00:00.002\" is malformed at \":00:00.002\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        mutableDateTime8.setMillis((long) 54110102);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add(21933802L);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        int int15 = localDate14.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        java.util.TimeZone timeZone20 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime21 = mutableDateTime13.toDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(218);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setTime(0, 0, 22137, 21965782);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22137 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-22T06:09:03.978+15:02:03.198" + "'", str1, "2022-02-22T06:09:03.978+15:02:03.198");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+15:02");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Calendar calendar19 = mutableDateTime15.toCalendar(locale18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        mutableDateTime15.setMillis(readableInstant24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime15.secondOfDay();
        java.lang.Object obj28 = mutableDateTime15.clone();
        org.joda.time.ReadableInstant readableInstant29 = null;
        mutableDateTime15.setTime(readableInstant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableDateTime15.add(readablePeriod31, 21927);
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) mutableDateTime15);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456020790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=3,MILLISECOND=988,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645456020790,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=3,MILLISECOND=988,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "2022-02-22T06:09:03.988+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "2022-02-22T06:09:03.988+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "2022-02-22T06:09:03.988+15:02:03.198");
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 54125232);
        java.util.TimeZone timeZone3 = null;
        boolean boolean4 = timeZone0.hasSameRules(timeZone3);
        timeZone0.setRawOffset(21883);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.Chronology chronology14 = localDate8.getChronology();
        long long18 = chronology14.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths((int) (short) -1);
        boolean boolean23 = localDate19.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology24 = localDate19.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology26 = chronology24.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = chronology24.weekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = dateTimeField27.getAsText((long) (short) 1, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(32L, chronology14, locale29);
        dateTimeParserBucket31.setOffset(54111610);
        long long36 = dateTimeParserBucket31.computeMillis(false, "Property[millisOfDay]");
        long long38 = dateTimeParserBucket31.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone39 = dateTimeParserBucket31.getZone();
        int int41 = dateTimeZone39.getOffsetFromLocal((long) 70);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Calendar calendar46 = mutableDateTime42.toCalendar(locale45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        mutableDateTime42.setMillis(readableInstant51);
        int int54 = mutableDateTime42.getMinuteOfDay();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime58 = localDate55.toDateTimeAtCurrentTime();
        int int59 = localDate55.getYear();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTime(readableInstant64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = localDate63.toDateTimeAtCurrentTime(dateTimeZone72);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        long long77 = dateTimeZone72.getMillisKeepLocal(dateTimeZone75, (long) 2);
        long long79 = dateTimeZone72.nextTransition((long) 54130144);
        org.joda.time.DateTime dateTime80 = localDate55.toDateTimeAtStartOfDay(dateTimeZone72);
        mutableDateTime42.setZoneRetainFields(dateTimeZone72);
        long long83 = dateTimeZone39.getMillisKeepLocal(dateTimeZone72, (long) 54110102);
        org.joda.time.LocalDate localDate84 = org.joda.time.LocalDate.now(dateTimeZone39);
        java.util.TimeZone timeZone85 = dateTimeZone39.toTimeZone();
        boolean boolean86 = timeZone0.hasSameRules(timeZone85);
        boolean boolean87 = timeZone85.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 905 + "'", int2 == 905);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 200L + "'", long18 == 200L);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-54111578L) + "'", long36 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-54111578L) + "'", long38 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645456020825,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=23,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 369 + "'", int54 == 369);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 54130144L + "'", long79 == 54130144L);
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-13096L) + "'", long83 == (-13096L));
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(timeZone85);
        org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.withDayOfYear(7);
        org.joda.time.DateTime dateTime11 = dateTime5.plusSeconds(21992128);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12:00:00 +15:02:03.198 AM" + "'", str7, "12:00:00 +15:02:03.198 AM");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        int int6 = localDate2.size();
        int int7 = localDate2.getYearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate2.era();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        int int10 = dateTimeField9.getMaximumValue();
        int int12 = dateTimeField9.getMinimumValue((long) 364);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField9.set((long) 86399999, 21932595);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21932595 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(5);
        org.joda.time.LocalTime.Property property10 = localTime6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property10.setCopy(22047230);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22047230 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfEra(21);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withYearOfEra(54118820);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMillis(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readableDuration13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str2 = dateTimeZone0.getName((long) 2000);
        int int4 = dateTimeZone0.getOffset((long) 427);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime7 = localTime5.withSecondOfMinute(54138295);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54138295 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMinimumValue();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.millisOfDay();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22144259 + "'", int2 == 22144259);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        java.lang.Object obj13 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.millisOfSecond();
        java.lang.String str15 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime0.add(readableDuration16, 54139839);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime24.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime32 = dateTime24.plusHours((int) '4');
        int int33 = dateTime32.getYearOfEra();
        org.joda.time.DateTime dateTime35 = dateTime32.withYear(0);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.plus((-48469999L));
        int int46 = dateTime43.getSecondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime43.minusMillis(10);
        org.joda.time.DateTime.Property property49 = dateTime43.dayOfYear();
        int int50 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime52 = dateTime35.plus(readablePeriod51);
        int int53 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime0.hourOfDay();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456021095,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=293,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "2022-02-22T06:09:04.293+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "2022-02-22T06:09:04.293+15:02:03.198");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "2022-02-22T06:09:04.293+15:02:03.198");
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T06:09:04.293+15:02:03.198" + "'", str15, "2022-02-22T06:09:04.293+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22144 + "'", int46 == 22144);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-22T06:06:22.709+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t06:06:22.709+15:02:03.198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDayOfYear((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(54123);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays(999);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMinutes(385);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtCurrentTime();
        int int29 = localDate25.getYear();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate33.toDateTimeAtCurrentTime(dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        long long47 = dateTimeZone42.getMillisKeepLocal(dateTimeZone45, (long) 2);
        long long49 = dateTimeZone42.nextTransition((long) 54130144);
        org.joda.time.DateTime dateTime50 = localDate25.toDateTimeAtStartOfDay(dateTimeZone42);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDate25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1984, 5, 24, 22744342]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 2L + "'", long47 == 2L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 54130144L + "'", long49 == 54130144L);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        java.lang.String str10 = property4.getAsText(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder13 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("2022-02-22T06:06:58.694+15:02:03.198", "1970-01-01T06:06:33.473+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-22T06:06:58.694+15:02:03.198 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456021159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=357,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        int int32 = property25.compareTo((org.joda.time.ReadablePartial) localDate26);
        int int33 = localDate26.getMonthOfYear();
        int int34 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate26);
        int int35 = localDate15.getCenturyOfEra();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeFormatter36.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter36.withZoneUTC();
        java.lang.String str39 = localDate15.toString(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "03/01/03" + "'", str39, "03/01/03");
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        long long25 = dateTimeField22.addWrapField((long) ' ', 0);
        boolean boolean26 = dateTimeField22.isSupported();
        long long29 = dateTimeField22.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = dateTimeField22.getType();
        mutableDateTime0.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime38.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        mutableDateTime43.add(durationFieldType47, (-1));
        org.joda.time.DateTime dateTime51 = dateTime38.withFieldAdded(durationFieldType47, (int) (byte) 1);
        mutableDateTime32.add(durationFieldType47, 86399999);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime61.plus((-48469999L));
        org.joda.time.DateTime dateTime65 = dateTime61.plusSeconds(2);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate69 = localDate66.withField(dateTimeFieldType67, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDate69.toDateTime(readableInstant70);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.minusMonths((int) (short) -1);
        boolean boolean76 = localDate72.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology77 = localDate72.getChronology();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology79 = chronology77.withZone(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = localDate69.toDateTimeAtCurrentTime(dateTimeZone78);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((java.lang.Object) dateTime61, dateTimeZone78);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone78);
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration84 = null;
        mutableDateTime83.add(readableDuration84);
        java.util.Locale locale86 = java.util.Locale.getDefault();
        java.util.Calendar calendar87 = mutableDateTime83.toCalendar(locale86);
        boolean boolean88 = dateTime82.isAfter((org.joda.time.ReadableInstant) mutableDateTime83);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime82);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime();
        org.joda.time.ReadablePeriod readablePeriod92 = null;
        org.joda.time.DateTime dateTime93 = dateTime91.minus(readablePeriod92);
        int int94 = dateTime91.getYear();
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime96 = dateTime91.withTimeAtStartOfDay();
        int int97 = dateTime96.getYearOfEra();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456021219,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=417,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 32L + "'", long25 == 32L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 58665600001L + "'", long29 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(locale86);
// flaky:         org.junit.Assert.assertEquals(locale86.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1645456021219,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=417,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2022 + "'", int94 == 2022);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2022 + "'", int97 == 2022);
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.plus((-48469999L));
        org.joda.time.DateTime dateTime23 = dateTime19.plusSeconds(2);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, dateTimeZone36);
        mutableDateTime0.setZone(dateTimeZone36);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra(54137154);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate44.minus(readablePeriod45);
        org.joda.time.LocalDate localDate48 = localDate46.withYearOfCentury(9);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime54.plus(readableDuration55);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfMonth();
        org.joda.time.DateTime.Property property58 = dateTime56.dayOfYear();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate62 = localDate59.withField(dateTimeFieldType60, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDate62.toDateTime(readableInstant63);
        org.joda.time.Chronology chronology65 = dateTime64.getChronology();
        org.joda.time.DateTime dateTime67 = dateTime64.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property69 = dateTime67.property(dateTimeFieldType68);
        boolean boolean70 = dateTime56.isSupported(dateTimeFieldType68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property72 = dateTime56.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime74 = property72.addToCopy(54141456);
        org.joda.time.DateTime dateTime76 = property72.setCopy(99);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str78 = dateTimeFieldType77.getName();
        org.joda.time.DateTime.Property property79 = dateTime76.property(dateTimeFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate81 = localDate48.withField(dateTimeFieldType77, 21970683);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21970683 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456021271,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=469,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "dayOfWeek" + "'", str78, "dayOfWeek");
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("hourOfDay");
        timeZone1.setRawOffset(21880484);
        timeZone1.setRawOffset(54135502);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfSecond(0);
        boolean boolean13 = dateTime11.isBefore((long) 20);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1969);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        org.joda.time.DateTime dateTime17 = dateTime15.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField28.getAsText((long) (short) 1, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(32L, chronology15, locale30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((-48469999L));
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds(2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateTime40, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone62);
        long long65 = dateTimeZone57.getMillisKeepLocal(dateTimeZone62, (long) (byte) -1);
        dateTimeParserBucket32.setZone(dateTimeZone62);
        java.util.Locale locale67 = dateTimeParserBucket32.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter0.withLocale(locale67);
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withLocale(locale69);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeFormatter68.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter68.withPivotYear(54131);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter73.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeFormatter74.getZone();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeFormatter74.getZone();
        int int77 = dateTimeFormatter74.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "3:03 PM" + "'", str4, "3:03 PM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2000 + "'", int77 == 2000);
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(21848L);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Calendar calendar7 = mutableDateTime3.toCalendar(locale6);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromCalendarFields(calendar7);
        java.lang.String str9 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(40);
        org.joda.time.DateTime dateTime12 = localTime8.toDateTimeToday(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.parse("2022-02-21T15:02:24.490Z");
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundCeiling();
        org.joda.time.DateTime dateTime17 = localTime8.toDateTime((org.joda.time.ReadableInstant) mutableDateTime16);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDayOfMonth(66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645456021432,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=630,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 6:09 AM" + "'", str9, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd 6:09 AM");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str1 = dateTimeFieldType0.getName();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.Chronology chronology12 = localDate6.getChronology();
        long long16 = chronology12.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean17 = dateTimeFieldType5.isSupported(chronology12);
        mutableDateTime2.setChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfYear();
        java.lang.String str20 = chronology12.toString();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField(chronology12);
        org.joda.time.DateTimeField dateTimeField23 = chronology12.hourOfDay();
        org.joda.time.DurationField durationField24 = chronology12.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dayOfWeek" + "'", str1, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 200L + "'", long16 == 200L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[UTC]" + "'", str20, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withCenturyOfEra(560);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusHours(54130);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusSeconds(21938850);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        long long11 = property10.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("2022-02-22T06:05:55.864+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:05:55.864+15:02:03.198\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 525150002L + "'", long11 == 525150002L);
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate8.equals((java.lang.Object) (byte) 10);
        int int11 = localDate8.getDayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate8.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        java.lang.String str16 = dateTimeZone15.getID();
        long long18 = dateTimeZone15.nextTransition(80L);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        long long32 = chronology28.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = dateTimeField41.getAsText((long) (short) 1, locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(32L, chronology28, locale43);
        dateTimeParserBucket45.setOffset(54111610);
        long long50 = dateTimeParserBucket45.computeMillis(false, "Property[millisOfDay]");
        long long52 = dateTimeParserBucket45.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket45.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket45.getZone();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(43200000L, dateTimeZone54);
        org.joda.time.DateTime dateTime56 = dateTime19.withZoneRetainFields(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter3.withZone(dateTimeZone54);
        java.io.Writer writer58 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter57.printTo(writer58, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+15:02:03.198" + "'", str16, "+15:02:03.198");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 80L + "'", long18 == 80L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 200L + "'", long32 == 200L);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
// flaky:         org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-54111578L) + "'", long50 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-54111578L) + "'", long52 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        long long63 = dateTimeZone55.convertLocalToUTC((long) 80, false);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str66 = dateTimeZone55.getShortName((-53L));
        long long68 = dateTimeZone55.nextTransition(3628810373L);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        java.lang.String str71 = dateTimeZone55.getName(48L);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate75 = localDate73.minusMonths((int) (short) -1);
        boolean boolean77 = localDate73.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology78 = localDate73.getChronology();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology80 = chronology78.withZone(dateTimeZone79);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate(chronology78);
        org.joda.time.DateTimeField dateTimeField82 = chronology78.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField83 = chronology78.millisOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology78.weekyear();
        org.joda.time.DurationField durationField85 = chronology78.weekyears();
        org.joda.time.DateTime dateTime86 = dateTime72.withChronology(chronology78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime88 = dateTime86.withMillisOfSecond(22008);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22008 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-54123118L) + "'", long63 == (-54123118L));
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+15:02:03.198" + "'", str66, "+15:02:03.198");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3628810373L + "'", long68 == 3628810373L);
        org.junit.Assert.assertNotNull(mutableDateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+15:02:03.198" + "'", str71, "+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 22102453);
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property7.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.plus(readablePeriod12);
        org.joda.time.LocalDate.Property property14 = localDate13.era();
        org.joda.time.DateTimeField dateTimeField16 = localDate13.getField(0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        int int5 = localDateTime4.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withFieldAdded(durationFieldType10, (int) (byte) 0);
        int int15 = localDateTime4.getMillisOfSecond();
        int int16 = localDateTime4.getSecondOfMinute();
        org.joda.time.Chronology chronology17 = localDateTime4.getChronology();
        org.joda.time.Chronology chronology18 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(7996, 21994723, 7997519, 0, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7996 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 792 + "'", int15 == 792);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        int[] intArray8 = localDate0.getValues();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate0.withPeriodAdded(readablePeriod9, 6);
        org.joda.time.LocalDate localDate13 = localDate0.plusYears(26);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate16.equals((java.lang.Object) (byte) 10);
        int int19 = localDate16.getDayOfMonth();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate20.yearOfEra();
        org.joda.time.LocalDate localDate28 = property27.roundFloorCopy();
        org.joda.time.Interval interval29 = property27.toInterval();
        org.joda.time.LocalDate localDate30 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate31 = property27.getLocalDate();
        boolean boolean32 = localDate16.equals((java.lang.Object) property27);
        org.joda.time.LocalDate localDate34 = localDate16.withYear(69);
        boolean boolean35 = localDate0.equals((java.lang.Object) localDate34);
        java.lang.String str36 = localDate34.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0069-03-22" + "'", str36, "0069-03-22");
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.plusHours(54130);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = localTime7.minusMillis(54133104);
        org.joda.time.LocalTime.Property property11 = localTime7.millisOfSecond();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.LocalTime localTime13 = property11.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime16 = property11.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = property11.setCopy("2022-02-22T06:07:49.183+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:07:49.183+15:02:03.198\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456021651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=849,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withPivotYear(21883);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withOffsetParsed();
        boolean boolean12 = dateTimeFormatter6.isOffsetParsed();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12:00:00 +15:02:03.198 AM" + "'", str7, "12:00:00 +15:02:03.198 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone9.toTimeZone();
        int int13 = dateTimeZone9.getOffsetFromLocal((long) (-1));
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        boolean boolean16 = dateTimeZone9.isStandardOffset(51L);
        java.lang.String str18 = dateTimeZone9.getShortName((long) 54145498);
        long long20 = dateTimeZone9.previousTransition(13262375548800005L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.035" + "'", str18, "+00:00:00.035");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 13262375548800005L + "'", long20 == 13262375548800005L);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.monthOfYear();
        long long52 = dateTimeField50.roundHalfCeiling((long) 315);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+15:02:03.198]" + "'", str46, "ISOChronology[+15:02:03.198]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-54123198L) + "'", long52 == (-54123198L));
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        int int4 = localDateTime3.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withYearOfEra(54126273);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(54123005);
        org.joda.time.LocalDateTime.Property property10 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate12.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property19 = localDate12.yearOfEra();
        org.joda.time.LocalDate localDate20 = property19.roundFloorCopy();
        org.joda.time.LocalDate localDate21 = property19.roundFloorCopy();
        org.joda.time.LocalDate localDate22 = property19.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField23 = property19.getField();
        long long25 = dateTimeField23.roundHalfEven((long) 47);
        long long28 = dateTimeField23.add((long) 6, (long) (short) -1);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        long long40 = dateTimeField37.addWrapField((long) ' ', 0);
        boolean boolean41 = dateTimeField37.isSupported();
        long long44 = dateTimeField37.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField37.getType();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = dateTimeField37.getAsText((long) (byte) 1, locale47);
        java.lang.String str49 = locale47.getLanguage();
        int int50 = dateTimeField23.getMaximumShortTextLength(locale47);
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder52.clear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate61 = localDate55.withYear((int) (byte) 1);
        java.lang.String str62 = dateTimeFormatter54.print((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.Chronology chronology70 = localDate64.getChronology();
        long long74 = chronology70.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean75 = dateTimeFieldType63.isSupported(chronology70);
        java.lang.String str76 = dateTimeFieldType63.toString();
        boolean boolean77 = localDate61.isSupported(dateTimeFieldType63);
        java.util.Locale locale79 = java.util.Locale.CHINESE;
        java.lang.String str80 = localDate61.toString("52", locale79);
        java.util.Locale.Builder builder81 = builder52.setLocale(locale79);
        java.lang.String str82 = dateTimeField23.getAsText((long) 54133104, locale79);
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration85 = null;
        mutableDateTime84.add(readableDuration85);
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.util.Calendar calendar88 = mutableDateTime84.toCalendar(locale87);
        java.lang.String str89 = locale87.getDisplayScript();
        java.lang.String str90 = locale83.getDisplayName(locale87);
        java.lang.String str91 = locale79.getDisplayName(locale83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime92 = property10.setCopy("2022-02-22T06:05:12.437+15:02:03.198", locale83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:05:12.437+15:02:03.198\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-31535999994L) + "'", long28 == (-31535999994L));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 58665600001L + "'", long44 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en" + "'", str49, "en");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str62, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 200L + "'", long74 == 200L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "millisOfSecond" + "'", str76, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "52" + "'", str80, "52");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970" + "'", str82, "1970");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertNotNull(locale87);
// flaky:         org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar88);
// flaky:         org.junit.Assert.assertEquals(calendar88.toString(), "java.util.GregorianCalendar[time=1645456021707,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=905,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "German" + "'", str90, "German");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Chinesisch" + "'", str91, "Chinesisch");
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.weekOfWeekyear();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.Chronology chronology70 = localDate64.getChronology();
        long long74 = chronology70.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.weekyearOfCentury();
        long long77 = dateTimeField75.roundHalfFloor((long) 47);
        mutableDateTime62.setRounding(dateTimeField75);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration80 = null;
        mutableDateTime79.add(readableDuration80);
        java.util.Locale locale82 = java.util.Locale.getDefault();
        java.util.Calendar calendar83 = mutableDateTime79.toCalendar(locale82);
        boolean boolean84 = mutableDateTime62.isBefore((org.joda.time.ReadableInstant) mutableDateTime79);
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int86 = mutableDateTime62.get(dateTimeFieldType85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 200L + "'", long74 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1645456021752,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=4,MILLISECOND=950,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(22009, 54156423, 22110966, 990, 22099988, 16, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 990 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.lang.String str16 = dateTimeField13.getAsText((long) 54120, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleAttributes();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate24 = localDate18.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property25 = localDate18.yearOfEra();
        org.joda.time.LocalDate localDate26 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate27 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate28 = property25.roundCeilingCopy();
        org.joda.time.LocalDate localDate29 = property25.roundFloorCopy();
        org.joda.time.LocalDate localDate31 = localDate29.withYear(2);
        boolean boolean32 = strSet17.equals((java.lang.Object) localDate29);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream36 = languageRangeList34.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strMap37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strMap39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList40, strMap41);
        boolean boolean43 = strSet17.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42);
        java.util.Set<java.lang.String> strSet44 = org.joda.time.DateTimeZone.getAvailableIDs();
        int int45 = strSet44.size();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(19765329450L);
        boolean boolean48 = false; // flaky: strSet44.contains((java.lang.Object) mutableDateTime47);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags(languageRangeList42, (java.util.Collection<java.lang.String>) strSet44);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "70" + "'", str16, "70");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeStream36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strSet44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strList49);
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.getLocalTime();
        org.joda.time.LocalTime localTime7 = property5.roundHalfFloorCopy();
        int int8 = property5.getMaximumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 86399999 + "'", int8 == 86399999);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean13 = dateTimeFieldType1.isSupported(chronology8);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology8, locale15, (java.lang.Integer) 54135101, 80);
        java.util.Set<java.lang.String> strSet20 = locale15.getUnicodeLocaleAttributes();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        mutableDateTime21.add(durationFieldType25, (-1));
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime21.dayOfMonth();
        int int29 = mutableDateTime21.getYearOfEra();
        mutableDateTime21.setMinuteOfHour(21);
        boolean boolean32 = strSet20.equals((java.lang.Object) mutableDateTime21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        long long44 = chronology38.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTimeField dateTimeField45 = chronology38.weekyear();
        org.joda.time.DurationField durationField46 = chronology38.seconds();
        boolean boolean47 = strSet20.equals((java.lang.Object) durationField46);
        java.util.Iterator<java.lang.String> strItor48 = strSet20.iterator();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology54 = localDate49.getChronology();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology56 = chronology54.withZone(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekOfWeekyear();
        long long60 = dateTimeField57.addWrapField((long) ' ', 0);
        boolean boolean61 = dateTimeField57.isSupported();
        long long64 = dateTimeField57.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField57.getType();
        java.util.Locale locale67 = java.util.Locale.getDefault();
        java.lang.String str68 = dateTimeField57.getAsText((long) (byte) 1, locale67);
        java.lang.String str69 = locale67.getLanguage();
        java.util.Set<java.lang.String> strSet70 = locale67.getUnicodeLocaleAttributes();
        strSet70.clear();
        java.util.Spliterator<java.lang.String> strSpliterator72 = strSet70.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray73 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList74 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74, languageRangeArray73);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream76 = languageRangeList74.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList74, strMap77);
        boolean boolean79 = strSet70.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74);
        boolean boolean80 = strSet20.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList74);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-48469999L) + "'", long44 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 32L + "'", long60 == 32L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 58665600001L + "'", long64 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(locale67);
// flaky:         org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "en" + "'", str69, "en");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertNotNull(languageRangeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(languageRangeStream76);
        org.junit.Assert.assertNotNull(languageRangeList78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        boolean boolean34 = dateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        java.lang.String str36 = mutableDateTime35.toString();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        mutableDateTime37.add(durationFieldType41, (-1));
        mutableDateTime35.add(durationFieldType41, 10);
        org.joda.time.DateTime dateTime47 = dateTime28.withFieldAdded(durationFieldType41, 5);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMonths((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime53.plusSeconds((int) (byte) 1);
        int int58 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime60 = dateTime53.plusMinutes(5);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime53.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property62 = dateTime53.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale32);
// flaky:         org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456021922,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=5,MILLISECOND=120,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T06:09:05.120+15:02:03.198" + "'", str36, "2022-02-22T06:09:05.120+15:02:03.198");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        boolean boolean15 = property6.equals((java.lang.Object) localDate14);
        org.joda.time.LocalDate localDate17 = localDate14.minusMonths(0);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.joda.time.DurationField durationField21 = dateTimeField20.getRangeDurationField();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("2022-02-22T06:05:37.020+15:02:03.198");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = dateTimeField20.getAsText(21843, locale24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21843");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456021963,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=5,MILLISECOND=161,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology10.getZone();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra(54131261);
        org.joda.time.LocalDate.Property property22 = localDate19.yearOfCentury();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.LocalDate localDate24 = property22.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate26 = localDate24.minusWeeks(901);
        java.util.Date date27 = localDate26.toDate();
        int int28 = localDate26.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(date27);
        org.junit.Assert.assertEquals(date27.toString(), "Sat Sep 25 00:00:00 GMT+00:00 2004");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property7.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean11 = localDateTime9.isSupported(dateTimeFieldType10);
        int int12 = localDateTime9.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int14 = localDateTime9.getValue(34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22145265 + "'", int2 == 22145265);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (short) -1);
        java.lang.String str6 = mutableDateTime0.toString(dateTimeFormatter5);
        mutableDateTime0.addWeekyears(21945857);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6:09 AM" + "'", str6, "6:09 AM");
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        int int9 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property12.addWrapFieldToCopy(21880901);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22145285 + "'", int9 == 22145285);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology7.weekyears();
        org.joda.time.DurationField durationField12 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.dayOfWeek();
        long long17 = dateTimeField14.add((long) 46, 22115);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1910736000046L + "'", long17 == 1910736000046L);
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) (byte) 100);
        int int19 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.plusYears((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime11.minusDays(0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        int int26 = localDateTime24.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.withPeriodAdded(readablePeriod27, 2022);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.era();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.minuteOfHour();
        int int32 = property31.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property31.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean35 = localDateTime33.isSupported(dateTimeFieldType34);
        int int36 = localDateTime23.get(dateTimeFieldType34);
        java.lang.String str37 = dateTimeFieldType34.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22145387 + "'", int14 == 22145387);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22145387 + "'", int26 == 22145387);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millisOfDay" + "'", str37, "millisOfDay");
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        java.lang.Integer int3 = dateTimeFormatter1.getPivotYear();
        boolean boolean4 = dateTimeFormatter1.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = dateTimeFormatter1.parseLocalDate("hourOfDay");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hourOfDay\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.secondOfDay();
        mutableDateTime14.addMillis(54124521);
        long long19 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime14.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setMillisOfSecond(21978654);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21978654 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456022234,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=5,MILLISECOND=432,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T06:09:05.432+15:02:03.198" + "'", str15, "2022-02-22T06:09:05.432+15:02:03.198");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(21908000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        java.util.Locale locale1 = new java.util.Locale("2022-02-22T06:08:46.103+15:02:03.198");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-22t06:08:46.103+15:02:03.198");
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.minusMillis(1039547);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        mutableDateTime13.setMillis((long) (byte) 1);
        mutableDateTime13.setWeekOfWeekyear(47);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) '4');
        org.joda.time.DateTime.Property property26 = dateTime25.yearOfEra();
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str30 = dateTimeZone28.getName((long) 2000);
        mutableDateTime13.setZoneRetainFields(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime8.toMutableDateTime(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes(54122);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(21889439);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        dateTimeParserBucket24.setOffset(54111610);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(chronology33);
        org.joda.time.DateTimeZone dateTimeZone35 = chronology33.getZone();
        java.lang.String str37 = dateTimeZone35.getShortName(15027356832L);
        dateTimeParserBucket24.setZone(dateTimeZone35);
        dateTimeParserBucket24.setOffset((java.lang.Integer) 21980896);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
// flaky:         org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes(54111610);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(80);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        boolean boolean17 = localDateTime12.isSupported(durationFieldType16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withPeriodAdded(readablePeriod18, 0);
        org.joda.time.LocalDateTime.Property property21 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((-133144884L), dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate21 = localDate15.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property22 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate23 = property22.roundFloorCopy();
        org.joda.time.LocalDate localDate24 = property22.roundFloorCopy();
        org.joda.time.LocalDate localDate25 = property22.roundCeilingCopy();
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = property22.getAsShortText(locale26);
        java.lang.String str28 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDate14, locale26);
        org.joda.time.LocalDate localDate30 = localDate14.minusMonths(54148380);
        org.joda.time.LocalDate localDate32 = localDate14.withYearOfEra(21886805);
        org.joda.time.LocalDate.Property property33 = localDate32.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35);
        mutableDateTime34.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime34.property(dateTimeFieldType39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime46.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        mutableDateTime51.add(durationFieldType55, (-1));
        org.joda.time.DateTime dateTime59 = dateTime46.withFieldAdded(durationFieldType55, (int) (byte) 1);
        org.joda.time.DateTime dateTime61 = dateTime46.plusSeconds(0);
        mutableDateTime34.setMillis((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration64 = null;
        mutableDateTime63.add(readableDuration64);
        java.util.Locale locale66 = java.util.Locale.getDefault();
        java.util.Calendar calendar67 = mutableDateTime63.toCalendar(locale66);
        mutableDateTime34.setMillis((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime63.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        mutableDateTime63.add(durationFieldType71, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate75 = localDate32.withFieldAdded(durationFieldType71, 779);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022" + "'", str27, "2022");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "69" + "'", str28, "69");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(locale66);
// flaky:         org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645456022433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=5,MILLISECOND=631,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        java.util.Locale locale3 = new java.util.Locale("2022-02-21T15:02:35.504Z", "DateTimeField[weekyearOfCentury]", "2022-02-22T06:08:40.135+15:02:03.198");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-21t15:02:35.504z_DATETIMEFIELD[WEEKYEAROFCENTURY]_2022-02-22T06:08:40.135+15:02:03.198");
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
        boolean boolean4 = dateTimeFormatter1.isOffsetParsed();
        java.lang.Appendable appendable5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.plus((-48469999L));
        org.joda.time.DateTime.Property property16 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime17 = property16.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readableDuration18);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter1.printTo(appendable5, (org.joda.time.ReadableInstant) dateMidnight20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        long long13 = dateTimeField10.addWrapField((long) ' ', 0);
        boolean boolean14 = dateTimeField10.isSupported();
        long long17 = dateTimeField10.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField10.getType();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        java.lang.String str21 = dateTimeField10.getAsText((long) (byte) 1, locale20);
        java.util.Locale locale23 = new java.util.Locale("weekyearOfCentury");
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.Chronology chronology31 = localDate25.getChronology();
        long long35 = chronology31.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = dateTimeField44.getAsText((long) (short) 1, locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(32L, chronology31, locale46);
        dateTimeParserBucket48.setOffset(54111610);
        long long53 = dateTimeParserBucket48.computeMillis(false, "Property[millisOfDay]");
        java.util.Locale locale54 = dateTimeParserBucket48.getLocale();
        java.lang.String str55 = locale23.getDisplayName(locale54);
        java.lang.String str56 = locale20.getDisplayLanguage(locale54);
        java.util.Locale.Builder builder57 = builder1.setLocale(locale54);
        java.util.Locale.Builder builder58 = builder57.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder57.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 32L + "'", long13 == 32L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 58665600001L + "'", long17 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1" + "'", str21, "1");
        org.junit.Assert.assertEquals(locale23.toString(), "weekyearofcentury");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 200L + "'", long35 == 200L);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-54111578L) + "'", long53 == (-54111578L));
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "weekyearofcentury" + "'", str55, "weekyearofcentury");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "English" + "'", str56, "English");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(22130105, 400, 0, 1223, 22111114, 22005310, 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1223 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay((int) (short) 100);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str16 = mutableDateTime0.toString(dateTimeFormatter15);
        mutableDateTime0.setMinuteOfDay(99);
        int int19 = mutableDateTime0.getDayOfWeek();
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456022572,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=5,MILLISECOND=770,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Monday, February 22, -0001" + "'", str16, "Monday, February 22, -0001");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.lang.String str5 = mutableDateTime0.toString();
        mutableDateTime0.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime0.copy();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        long long20 = dateTimeField17.addWrapField((long) ' ', 0);
        boolean boolean21 = dateTimeField17.isSupported();
        long long24 = dateTimeField17.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField17.getType();
        long long28 = dateTimeField17.getDifferenceAsLong((long) (short) 1, 200L);
        int int29 = dateTimeField17.getMaximumValue();
        mutableDateTime0.setRounding(dateTimeField17, (int) (byte) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime0.hourOfDay();
        int int33 = mutableDateTime0.getRoundingMode();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.weekyears();
        java.lang.String str43 = chronology39.toString();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology39);
        mutableDateTime0.setChronology(chronology39);
        mutableDateTime0.addWeekyears(523);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456022711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=5,MILLISECOND=909,ZONE_OFFSET=54123198,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T06:09:05.909+15:02:03.198" + "'", str5, "2022-02-22T06:09:05.909+15:02:03.198");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 58665600001L + "'", long24 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalDate localDate11 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime17.withCenturyOfEra((int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime17.toYearMonthDay();
        org.joda.time.DateTime dateTime26 = dateTime17.minus((long) 54117);
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate32.equals((java.lang.Object) (byte) 10);
        int int35 = localDate32.getDayOfMonth();
        org.joda.time.LocalDate localDate37 = localDate32.withDayOfYear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.Chronology chronology45 = localDate39.getChronology();
        long long49 = chronology45.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean50 = dateTimeFieldType38.isSupported(chronology45);
        boolean boolean51 = localDate32.isSupported(dateTimeFieldType38);
        int int52 = dateTime29.get(dateTimeFieldType38);
        int int53 = localDate11.indexOf(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 200L + "'", long49 == 200L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime9 = property3.setCopy(427);
        int int10 = property3.getMinimumValueOverall();
        org.joda.time.LocalTime localTime11 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = property3.addCopy((long) 21904592);
        org.joda.time.LocalTime localTime15 = localTime13.plusMillis(655);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate8.withMonthOfYear(21919);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21919 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        boolean boolean6 = mutableDateTime1.isBeforeNow();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay((int) (short) 100);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str17 = mutableDateTime1.toString(dateTimeFormatter16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withPivotYear((int) (short) 0);
        int int20 = dateTimeFormatter19.getDefaultYear();
        boolean boolean21 = dateTimeFormatter19.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("years", dateTimeFormatter19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"years\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456022791,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+15:02:03.198,offset=54123198,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=9,SECOND=5,MILLISECOND=989,ZONE_OFFSET=54123198,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Montag, 22. Februar -0001" + "'", str17, "Montag, 22. Februar -0001");
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2000 + "'", int20 == 2000);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str5 = dateTimeFormatter3.print((-2208988800000L));
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate9.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone18.getMillisKeepLocal(dateTimeZone21, (long) 2);
        long long25 = dateTimeZone18.nextTransition((long) 54130144);
        int int27 = dateTimeZone18.getOffset(2800L);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((java.lang.Object) (-2208988800000L), dateTimeZone18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter2.withZone(dateTimeZone18);
        boolean boolean30 = dateTimeFormatter29.isParser();
        java.lang.Appendable appendable31 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.parse("2022-02-21T15:02:24.490Z");
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableDateTime33.add(readablePeriod34, 1969);
        mutableDateTime33.addSeconds(86399999);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime33.centuryOfEra();
        mutableDateTime33.addYears(560);
        java.lang.String str42 = mutableDateTime33.toString();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long49 = dateTimeZone45.convertLocalToUTC((long) 524, false, (-62135596800000L));
        java.lang.String str51 = dateTimeZone45.getNameKey((long) 54119809);
        java.lang.String str53 = dateTimeZone45.getName((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime54.add(readableDuration55);
        mutableDateTime54.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime54.property(dateTimeFieldType59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        mutableDateTime54.add(readableDuration61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate66 = localDate63.withField(dateTimeFieldType64, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.DateTime dateTime68 = localDate66.toDateTime(readableInstant67);
        org.joda.time.Chronology chronology69 = dateTime68.getChronology();
        org.joda.time.DateTime dateTime71 = dateTime68.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property73 = dateTime71.property(dateTimeFieldType72);
        org.joda.time.DateTime dateTime74 = property73.withMinimumValue();
        org.joda.time.DateTime dateTime75 = property73.getDateTime();
        java.lang.String str76 = property73.getAsString();
        org.joda.time.DateTime dateTime77 = property73.withMaximumValue();
        org.joda.time.DateTime.Property property78 = dateTime77.secondOfDay();
        int int79 = dateTime77.getSecondOfDay();
        mutableDateTime54.setMillis((org.joda.time.ReadableInstant) dateTime77);
        int int81 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime77);
        mutableDateTime33.setZone(dateTimeZone45);
        org.joda.time.Chronology chronology83 = mutableDateTime33.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter29.printTo(appendable31, (org.joda.time.ReadableInstant) mutableDateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Montag, 1. Januar 1900" + "'", str5, "Montag, 1. Januar 1900");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 54130144L + "'", long25 == 54130144L);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 54123198 + "'", int27 == 54123198);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2584-11-17T15:02:23.490Z" + "'", str42, "2584-11-17T15:02:23.490Z");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-212879476L) + "'", long49 == (-212879476L));
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+59:08" + "'", str53, "+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22146 + "'", int79 == 22146);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 212880000 + "'", int81 == 212880000);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMillis(476);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMillis(21928387);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.seconds();
        org.joda.time.DurationField durationField10 = chronology5.eras();
        long long11 = durationField10.getUnitMillis();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = durationField10.add((long) 21996907, (long) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime6 = property3.getLocalTime();
        org.joda.time.LocalTime localTime8 = property3.addCopy(69);
        org.joda.time.LocalTime localTime10 = property3.addWrapFieldToCopy(173);
        org.joda.time.LocalTime localTime11 = property3.roundHalfCeilingCopy();
        java.util.Locale locale14 = new java.util.Locale("1/1/01 12:00 AM");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = property3.setCopy("2022-02-22T06:07:42.974", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:07:42.974\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "54123197" + "'", str5, "54123197");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals(locale14.toString(), "1/1/01 12:00 am");
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMillis(22090887);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        long long19 = dateTimeField8.getDifferenceAsLong((long) (short) 1, 200L);
        int int20 = dateTimeField8.getMinimumValue();
        int int21 = dateTimeField8.getMaximumValue();
        org.joda.time.DurationField durationField22 = dateTimeField8.getLeapDurationField();
        org.joda.time.DurationField durationField23 = dateTimeField8.getRangeDurationField();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime29.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.Chronology chronology45 = localDate39.getChronology();
        long long49 = chronology45.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean50 = dateTimeFieldType38.isSupported(chronology45);
        mutableDateTime35.setChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField52 = chronology45.dayOfYear();
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType33.getField(chronology45);
        java.util.Locale locale58 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str59 = dateTimeField53.getAsText((long) 59, locale58);
        org.joda.time.DurationField durationField60 = dateTimeField53.getLeapDurationField();
        int int61 = durationField23.compareTo(durationField60);
        java.lang.String str62 = durationField23.toString();
        long long64 = durationField23.getMillis(22032570);
        long long67 = durationField23.getDifferenceAsLong(21919726L, 4404300000L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 200L + "'", long49 == 200L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DurationField[weekyears]" + "'", str62, "DurationField[weekyears]");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 695280753926640000L + "'", long64 == 695280753926640000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }
}

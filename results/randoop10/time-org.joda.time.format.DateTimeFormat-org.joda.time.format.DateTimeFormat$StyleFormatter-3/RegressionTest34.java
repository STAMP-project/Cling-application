import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest34 {

    public static boolean debug = false;

    @Test
    public void test17001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17001");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField13 = chronology5.minuteOfHour();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DurationField durationField15 = chronology5.minutes();
        org.joda.time.DurationField durationField16 = chronology5.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology5.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((java.lang.Object) chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test17002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17002");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property8 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.joda.time.LocalDate localDate13 = property8.withMinimumValue();
        org.joda.time.LocalDate.Property property14 = localDate13.era();
        org.joda.time.LocalDate localDate16 = localDate13.withYear(15);
        org.joda.time.Chronology chronology17 = localDate13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = locale19.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket(1645456205018L, chronology17, locale19);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Japanese" + "'", str20, "Japanese");
    }

    @Test
    public void test17003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17003");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime11.setYear(21938673);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDayOfYear(22099488);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22099488 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17004");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) (byte) 100);
        int int19 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.plus(readableDuration20);
        int int22 = localDateTime21.getMillisOfSecond();
        int int23 = localDateTime21.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks(21884813);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = localDateTime25.toString(dateTimeFormatter26);
        int int28 = localDateTime25.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusYears(54485861);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8329773 + "'", int14 == 8329773);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "421452-03-25T00:00:00.000" + "'", str27, "421452-03-25T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 13 + "'", int28 == 13);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test17005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17005");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream3 = languageRangeList1.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap8 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList7, strMap8);
        java.util.Collection<java.util.Locale> localeCollection10 = null;
        java.util.Locale.FilteringMode filteringMode11 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter(languageRangeList7, localeCollection10, filteringMode11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream16 = languageRangeList14.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap17 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList18 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strMap19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream24 = languageRangeList22.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap25 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap25);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList28, strMap29);
        java.util.Collection<java.util.Locale> localeCollection31 = null;
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter(languageRangeList28, localeCollection31, filteringMode32);
        java.util.List<java.util.Locale> localeList34 = java.util.Locale.filter(languageRangeList20, localeCollection31);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream38 = languageRangeList36.stream();
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String str46 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strList44, filteringMode47);
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList34, filteringMode47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology57 = chronology55.withZone(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        long long61 = dateTimeField58.addWrapField((long) ' ', 0);
        boolean boolean62 = dateTimeField58.isSupported();
        long long65 = dateTimeField58.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = dateTimeField58.getType();
        java.util.Locale locale68 = java.util.Locale.getDefault();
        java.lang.String str69 = dateTimeField58.getAsText((long) (byte) 1, locale68);
        java.lang.String str70 = locale68.getLanguage();
        java.util.Set<java.lang.String> strSet71 = locale68.getUnicodeLocaleAttributes();
        strSet71.clear();
        java.util.Iterator<java.lang.String> strItor73 = strSet71.iterator();
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet71);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = strSet71.add("669");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeStream3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertTrue("'" + filteringMode11 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode11.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeStream16);
        org.junit.Assert.assertNotNull(languageRangeList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeStream24);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(localeList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeStream38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode47.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 32L + "'", long61 == 32L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 58665600001L + "'", long65 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1" + "'", str69, "1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "en" + "'", str70, "en");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strItor73);
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test17006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17006");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        int int2 = localDateTime1.getEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay(2);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths(21);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withYearOfEra(21);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfEra(54118820);
        int int18 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Chronology chronology19 = localDateTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) "21", chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.halfdayOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test17007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17007");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate12 = property7.setCopy(36);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test17008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17008");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        int int9 = mutableDateTime8.getYearOfCentury();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        long long22 = chronology18.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        java.util.Locale locale33 = java.util.Locale.getDefault();
        java.lang.String str34 = dateTimeField31.getAsText((long) (short) 1, locale33);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(32L, chronology18, locale33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths((int) '4');
        org.joda.time.DateTime dateTime45 = dateTime43.plus((-48469999L));
        org.joda.time.DateTime dateTime47 = dateTime43.plusSeconds(2);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = localDate51.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate((java.lang.Object) dateTime43, dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone65);
        long long68 = dateTimeZone60.getMillisKeepLocal(dateTimeZone65, (long) (byte) -1);
        dateTimeParserBucket35.setZone(dateTimeZone65);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone65);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(dateTimeZone65);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.weekOfWeekyear();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate76 = localDate74.minusMonths((int) (short) -1);
        boolean boolean78 = localDate74.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology79 = localDate74.getChronology();
        org.joda.time.Chronology chronology80 = localDate74.getChronology();
        long long84 = chronology80.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField85 = chronology80.weekyearOfCentury();
        long long87 = dateTimeField85.roundHalfFloor((long) 47);
        mutableDateTime72.setRounding(dateTimeField85);
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration90 = null;
        mutableDateTime89.add(readableDuration90);
        java.util.Locale locale92 = java.util.Locale.getDefault();
        java.util.Calendar calendar93 = mutableDateTime89.toCalendar(locale92);
        boolean boolean94 = mutableDateTime72.isBefore((org.joda.time.ReadableInstant) mutableDateTime89);
        mutableDateTime8.setTime((org.joda.time.ReadableInstant) mutableDateTime72);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setSecondOfMinute(54126273);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54126273 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 200L + "'", long22 == 200L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1" + "'", str34, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 200L + "'", long84 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar93);
// flaky:         org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=1645456249867,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=49,MILLISECOND=867,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test17009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17009");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime14 = property10.setCopy(11);
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfDay();
        java.lang.String str17 = property16.getAsString();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "8329893" + "'", str17, "8329893");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test17010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17010");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField15 = chronology5.weekOfWeekyear();
        int int18 = dateTimeField15.getDifference((long) 86, (-60458118000L));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 99 + "'", int18 == 99);
    }

    @Test
    public void test17011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17011");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property6.addWrapField(21892595);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("");
        java.lang.String str13 = locale12.getISO3Country();
        int int14 = property6.getMaximumTextLength(locale12);
        org.joda.time.MutableDateTime mutableDateTime15 = property6.roundFloor();
        boolean boolean16 = mutableDateTime15.isEqualNow();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime15.add(readableDuration17, 457);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:49.918+59:08" + "'", str1, "2022-02-24T02:18:49.918+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test17012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17012");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfEra(21);
        int int8 = localDateTime3.getCenturyOfEra();
        int int9 = localDateTime3.size();
        java.lang.String str10 = localDateTime3.toString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2020-05-24T02:18:49.930" + "'", str10, "2020-05-24T02:18:49.930");
    }

    @Test
    public void test17013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17013");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        int int15 = dateTimeField9.getMaximumTextLength(locale13);
        java.lang.String str16 = locale13.getScript();
        java.lang.String str19 = nameProvider0.getShortName(locale13, "2022-02-22T06:07:06.999+15:02:03.198", "38");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime24 = localDate21.toDateTimeAtCurrentTime();
        int int25 = localDate21.getYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate21.toDateTimeAtCurrentTime(dateTimeZone26);
        java.lang.String str29 = dateTimeZone26.toString();
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str35 = nameProvider31.getShortName(locale32, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        java.util.Locale locale36 = java.util.Locale.UK;
        boolean boolean37 = locale36.hasExtensions();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayName(locale38);
        java.lang.String str40 = locale38.getDisplayScript();
        java.lang.String str43 = nameProvider31.getName(locale38, "era", "2022-02-22T06:04:55.471+15:02:03.198");
        java.lang.String str44 = dateTimeZone26.getShortName((long) 21931872, locale38);
        java.lang.String str47 = nameProvider0.getName(locale38, "2022-02-22T06:06:04.661+15:02:03.198", "0003-06-21T01:34:21.085Z");
        java.util.Locale locale49 = new java.util.Locale("2022-02-21T15:01:52.122Z");
        java.lang.String str52 = nameProvider0.getName(locale49, "2022-02-22T06:06:51.345+15:02:03.198", "11:00:52.032");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645456249939,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=49,MILLISECOND=939,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+59:08" + "'", str29, "+59:08");
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str39, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+59:08" + "'", str44, "+59:08");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals(locale49.toString(), "2022-02-21t15:01:52.122z");
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test17014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17014");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        boolean boolean34 = dateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        java.lang.String str36 = mutableDateTime35.toString();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        mutableDateTime37.add(durationFieldType41, (-1));
        mutableDateTime35.add(durationFieldType41, 10);
        org.joda.time.DateTime dateTime47 = dateTime28.withFieldAdded(durationFieldType41, 5);
        int int48 = dateTime47.getYear();
        org.joda.time.DateTime dateTime50 = dateTime47.plusMonths(22153046);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456249961,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=49,MILLISECOND=961,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-24T02:18:49.961+59:08" + "'", str36, "2022-02-24T02:18:49.961+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test17015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17015");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        long long13 = chronology7.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.minuteOfHour();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.lang.String str17 = locale16.getVariant();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekOfWeekyear();
        long long29 = dateTimeField26.addWrapField((long) ' ', 0);
        boolean boolean30 = dateTimeField26.isSupported();
        long long33 = dateTimeField26.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField26.getType();
        long long37 = dateTimeField26.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate44 = localDate38.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property45 = localDate38.yearOfEra();
        org.joda.time.LocalDate localDate46 = property45.roundFloorCopy();
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDate46, locale47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate52 = localDate50.minusMonths((int) (short) -1);
        boolean boolean54 = localDate50.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology55 = localDate50.getChronology();
        org.joda.time.Chronology chronology56 = localDate50.getChronology();
        long long60 = chronology56.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology66 = localDate61.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology68 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.weekOfWeekyear();
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.lang.String str72 = dateTimeField69.getAsText((long) (short) 1, locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(32L, chronology56, locale71);
        java.lang.String str74 = locale47.getDisplayVariant(locale71);
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str76 = locale71.getDisplayScript(locale75);
        java.lang.String str77 = locale71.toLanguageTag();
        java.lang.String str78 = locale16.getDisplayLanguage(locale71);
        java.lang.String str79 = locale71.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology7, locale71);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = org.joda.time.format.DateTimeFormat.patternForStyle("1970-01-01T06:06:33.473+15:02:03.198", locale71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 1970-01-01T06:06:33.473+15:02:03.198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-48469999L) + "'", long13 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 32L + "'", long29 == 32L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 58665600001L + "'", long33 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "52" + "'", str48, "52");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 200L + "'", long60 == 200L);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1" + "'", str72, "1");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "en-US" + "'", str77, "en-US");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "English" + "'", str78, "English");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "eng" + "'", str79, "eng");
    }

    @Test
    public void test17016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17016");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime8.withDurationAdded(readableDuration13, (int) 'a');
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.plus((-48469999L));
        org.joda.time.DateTime dateTime27 = dateTime23.plusSeconds(2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, dateTimeZone40);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.plus((-48469999L));
        org.joda.time.DateTime dateTime55 = dateTime51.plusSeconds(2);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate59.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) dateTime51, dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone73);
        long long76 = dateTimeZone68.getMillisKeepLocal(dateTimeZone73, (long) (byte) -1);
        long long78 = dateTimeZone40.getMillisKeepLocal(dateTimeZone73, (long) 8);
        org.joda.time.DateTime dateTime79 = dateTime8.withZoneRetainFields(dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter0.withZone(dateTimeZone40);
        java.lang.String str82 = dateTimeFormatter80.print((long) 2122);
        org.joda.time.Chronology chronology83 = dateTimeFormatter80.getChronolgy();
        java.util.Locale locale84 = dateTimeFormatter80.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime86 = dateTimeFormatter80.parseLocalDateTime("-0001-02-22T06:05:56.093+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"-0001-02-22T06:05:56.093+15:02:0...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 8L + "'", long78 == 8L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "11:08 AM" + "'", str82, "11:08 AM");
        org.junit.Assert.assertNull(chronology83);
        org.junit.Assert.assertNull(locale84);
    }

    @Test
    public void test17017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17017");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDurationAdded(readableDuration11, 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withWeekyear(5);
        org.joda.time.Chronology chronology16 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.years();
        java.lang.String str18 = durationField17.getName();
        long long21 = durationField17.getMillis(54439, (long) 22138714);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "years" + "'", str18, "years");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1717928956800000L + "'", long21 == 1717928956800000L);
    }

    @Test
    public void test17018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17018");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime8 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillisOfSecond(11);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime5.toMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime5.plus(readablePeriod12);
        org.joda.time.DateTime dateTime14 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test17019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17019");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("21908001-01-01T00:00:00.000+15:02:03.198");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test17020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17020");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(86399999);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekyear(54146807);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 256);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17021");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfSecond(0);
        boolean boolean13 = dateTime11.isBefore((long) 20);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1969);
        org.joda.time.DateTime dateTime17 = dateTime11.withMillisOfDay(54133104);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime11.minus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths(2000);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Calendar calendar29 = mutableDateTime25.toCalendar(locale28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        mutableDateTime25.setMillis(readableInstant34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime25.hourOfDay();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime43.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property48 = dateTime46.property(dateTimeFieldType47);
        mutableDateTime25.set(dateTimeFieldType47, 52);
        java.lang.String str51 = mutableDateTime25.toString();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime52.add(readableDuration53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        mutableDateTime52.add(durationFieldType56, (-1));
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime52.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime61 = property59.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime62 = property59.getMutableDateTime();
        mutableDateTime25.setDate((org.joda.time.ReadableInstant) mutableDateTime62);
        int int64 = mutableDateTime62.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime62.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        mutableDateTime62.add(readablePeriod66, 54133701);
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime62.add(readableDuration69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        mutableDateTime62.add(readableDuration71, (int) (short) 1);
        long long74 = property24.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645456250126,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=50,MILLISECOND=126,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0052-02-24T02:18:50.126+59:08" + "'", str51, "0052-02-24T02:18:50.126+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 8330 + "'", int64 == 8330);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-58579718400125L) + "'", long74 == (-58579718400125L));
    }

    @Test
    public void test17022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17022");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T06:05:23.092+15:02:03.198");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(4979544394L);
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekOfWeekyear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths((int) '4');
        org.joda.time.DateTime dateTime24 = dateTime22.plus((-48469999L));
        org.joda.time.DateTime dateTime26 = dateTime22.plusSeconds(2);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate30 = localDate27.withField(dateTimeFieldType28, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(readableInstant31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate30.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((java.lang.Object) dateTime22, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone44);
        long long47 = dateTimeZone39.getMillisKeepLocal(dateTimeZone44, (long) (byte) -1);
        boolean boolean48 = dateTimeZone44.isFixed();
        org.joda.time.Chronology chronology49 = chronology11.withZone(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology49);
        java.lang.String str51 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.hourOfHalfday();
        org.joda.time.DurationField durationField54 = chronology49.millis();
        org.joda.time.DurationFieldType durationFieldType55 = durationField54.getType();
        org.joda.time.DateTime dateTime57 = dateTime3.withFieldAdded(durationFieldType55, 22003369);
        mutableDateTime1.add(durationFieldType55, 322);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[+59:08]" + "'", str51, "ISOChronology[+59:08]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test17023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17023");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMinutes(22110984);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(76125785);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8330211 + "'", int2 == 8330211);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17024");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = localDateTime4.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMonths(54123198);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withMillisOfDay(54128391);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusMinutes(21915);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(7996);
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withPeriodAdded(readablePeriod16, 219775);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8330221 + "'", int2 == 8330221);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7996 + "'", int15 == 7996);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17025");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        long long12 = chronology6.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.minuteOfHour();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale15.getVariant();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        long long28 = dateTimeField25.addWrapField((long) ' ', 0);
        boolean boolean29 = dateTimeField25.isSupported();
        long long32 = dateTimeField25.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = dateTimeField25.getType();
        long long36 = dateTimeField25.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate43 = localDate37.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property44 = localDate37.yearOfEra();
        org.joda.time.LocalDate localDate45 = property44.roundFloorCopy();
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDate45, locale46);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology54 = localDate49.getChronology();
        org.joda.time.Chronology chronology55 = localDate49.getChronology();
        long long59 = chronology55.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology67 = chronology65.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.weekOfWeekyear();
        java.util.Locale locale70 = java.util.Locale.getDefault();
        java.lang.String str71 = dateTimeField68.getAsText((long) (short) 1, locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket(32L, chronology55, locale70);
        java.lang.String str73 = locale46.getDisplayVariant(locale70);
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str75 = locale70.getDisplayScript(locale74);
        java.lang.String str76 = locale70.toLanguageTag();
        java.lang.String str77 = locale15.getDisplayLanguage(locale70);
        java.lang.String str78 = locale70.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology6, locale70);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate82 = localDate80.minusMonths((int) (short) -1);
        boolean boolean84 = localDate80.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology85 = localDate80.getChronology();
        long long91 = chronology85.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime92 = org.joda.time.MutableDateTime.now(chronology85);
        org.joda.time.DateTimeField dateTimeField93 = chronology85.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField94 = chronology85.hourOfHalfday();
        long long96 = dateTimeField94.remainder(26287675224L);
        java.lang.String str97 = dateTimeField94.toString();
        dateTimeParserBucket79.saveField(dateTimeField94, 54123198);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-48469999L) + "'", long12 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 32L + "'", long28 == 32L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 58665600001L + "'", long32 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "52" + "'", str47, "52");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 200L + "'", long59 == 200L);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "en-US" + "'", str76, "en-US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "English" + "'", str77, "English");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "eng" + "'", str78, "eng");
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + (-48469999L) + "'", long91 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 475224L + "'", long96 == 475224L);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DateTimeField[hourOfHalfday]" + "'", str97, "DateTimeField[hourOfHalfday]");
    }

    @Test
    public void test17026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17026");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        mutableDateTime7.setMillisOfDay(129);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        java.lang.String str15 = mutableDateTime10.toString();
        mutableDateTime10.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime10.copy();
        int int19 = mutableDateTime10.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addYears(54115116);
        int int23 = mutableDateTime10.getHourOfDay();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime10.toMutableDateTime(dateTimeZone30);
        mutableDateTime7.setZone(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Calendar calendar39 = mutableDateTime35.toCalendar(locale38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        mutableDateTime35.setMillis(readableInstant44);
        int int47 = mutableDateTime35.getMinuteOfHour();
        int int48 = mutableDateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:50.284+59:08" + "'", str1, "2022-02-24T02:18:50.284+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645456250285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=50,MILLISECOND=285,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-24T02:18:50.285+59:08" + "'", str15, "2022-02-24T02:18:50.285+59:08");
        org.junit.Assert.assertNotNull(mutableDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645456250285,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=50,MILLISECOND=285,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 18 + "'", int47 == 18);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test17027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17027");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime5.withDurationAdded(readableDuration10, (int) 'a');
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.plus((-48469999L));
        org.joda.time.DateTime dateTime52 = dateTime48.plusSeconds(2);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate56.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) dateTime48, dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone70);
        long long73 = dateTimeZone65.getMillisKeepLocal(dateTimeZone70, (long) (byte) -1);
        long long75 = dateTimeZone37.getMillisKeepLocal(dateTimeZone70, (long) 8);
        org.joda.time.DateTime dateTime76 = dateTime5.withZoneRetainFields(dateTimeZone37);
        org.joda.time.DateTime dateTime78 = dateTime76.withWeekyear(54123198);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime();
        mutableDateTime79.setMillis((long) (byte) 1);
        mutableDateTime79.setMillis(0L);
        boolean boolean84 = dateTime78.isEqual((org.joda.time.ReadableInstant) mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 8L + "'", long75 == 8L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test17028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17028");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalDate localDate18 = localDate15.withDayOfYear(9);
        org.joda.time.LocalDate localDate20 = localDate18.minusYears(21977516);
        org.joda.time.LocalDate localDate22 = localDate20.plusWeeks(22028515);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(localDate15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 365 + "'", int16 == 365);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test17029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17029");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.DateTime dateTime25 = dateTime12.withFieldAdded(durationFieldType21, (int) (byte) 1);
        boolean boolean26 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (short) 100);
        boolean boolean29 = dateTime28.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test17030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17030");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter3.getZone();
        boolean boolean5 = dateTimeFormatter3.isParser();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate8.equals((java.lang.Object) (byte) 10);
        int int11 = localDate8.getDayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate8.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        java.lang.String str16 = dateTimeZone15.getID();
        long long18 = dateTimeZone15.nextTransition(80L);
        org.joda.time.DateTime dateTime19 = localDate8.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        long long32 = chronology28.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.lang.String str44 = dateTimeField41.getAsText((long) (short) 1, locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(32L, chronology28, locale43);
        dateTimeParserBucket45.setOffset(54111610);
        long long50 = dateTimeParserBucket45.computeMillis(false, "Property[millisOfDay]");
        long long52 = dateTimeParserBucket45.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeParserBucket45.getZone();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket45.getZone();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(43200000L, dateTimeZone54);
        org.joda.time.DateTime dateTime56 = dateTime19.withZoneRetainFields(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter3.withZone(dateTimeZone54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = dateTimeFormatter57.parseLocalDateTime("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 24 + "'", int11 == 24);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+15:02:03.198" + "'", str16, "+15:02:03.198");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 80L + "'", long18 == 80L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 200L + "'", long32 == 200L);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-54111578L) + "'", long50 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-54111578L) + "'", long52 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
    }

    @Test
    public void test17031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17031");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.lang.String str5 = mutableDateTime0.toString();
        mutableDateTime0.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime0.copy();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        long long20 = dateTimeField17.addWrapField((long) ' ', 0);
        boolean boolean21 = dateTimeField17.isSupported();
        long long24 = dateTimeField17.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField17.getType();
        long long28 = dateTimeField17.getDifferenceAsLong((long) (short) 1, 200L);
        int int29 = dateTimeField17.getMaximumValue();
        mutableDateTime0.setRounding(dateTimeField17, (int) (byte) 0);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime0.hourOfDay();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate36.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        long long50 = dateTimeZone45.getMillisKeepLocal(dateTimeZone48, (long) 2);
        long long52 = dateTimeZone45.nextTransition((long) 54130144);
        int int54 = dateTimeZone45.getOffset(2800L);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime56.add(readableDuration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate62 = localDate60.minusMonths((int) (short) -1);
        boolean boolean64 = localDate60.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology65 = localDate60.getChronology();
        org.joda.time.Chronology chronology66 = localDate60.getChronology();
        long long70 = chronology66.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean71 = dateTimeFieldType59.isSupported(chronology66);
        mutableDateTime56.setChronology(chronology66);
        org.joda.time.DateTimeField dateTimeField73 = chronology66.secondOfDay();
        long long75 = dateTimeField73.roundFloor(1707724464566400001L);
        java.util.Locale locale80 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str81 = dateTimeField73.getAsText((-62194316231679L), locale80);
        java.lang.String str82 = dateTimeZone45.getName((long) 21897876, locale80);
        java.lang.String str84 = dateTimeZone45.getNameKey((long) 22005638);
        org.joda.time.MutableDateTime mutableDateTime85 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        boolean boolean86 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) mutableDateTime85);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456250435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=50,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-24T02:18:50.435+59:08" + "'", str5, "2022-02-24T02:18:50.435+59:08");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 58665600001L + "'", long24 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2L + "'", long50 == 2L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 54130144L + "'", long52 == 54130144L);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 212880000 + "'", int54 == 212880000);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 200L + "'", long70 == 200L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1707724464566400000L + "'", long75 == 1707724464566400000L);
        org.junit.Assert.assertEquals(locale80.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "32568" + "'", str81, "32568");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+59:08" + "'", str82, "+59:08");
// flaky:         org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test17032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17032");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromCalendarFields(calendar12);
        boolean boolean15 = property6.equals((java.lang.Object) localDate14);
        org.joda.time.MutableDateTime mutableDateTime16 = property6.roundHalfFloor();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime16.add(readablePeriod17, 21936455);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.property(dateTimeFieldType20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456250468,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=50,MILLISECOND=468,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test17033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17033");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property7.setCopy(0);
        int int12 = property7.getMaximumValue();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8330479 + "'", int2 == 8330479);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
    }

    @Test
    public void test17034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17034");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.year();
        mutableDateTime0.setMillisOfDay(22);
        java.lang.Class<?> wildcardClass13 = mutableDateTime0.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test17035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17035");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        long long23 = dateTimeField20.addWrapField((long) ' ', 0);
        boolean boolean24 = dateTimeField20.isSupported();
        long long27 = dateTimeField20.add(1L, (int) 'a');
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.lang.String str30 = locale29.getVariant();
        java.lang.String str31 = dateTimeField20.getAsShortText(100, locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(10L, chronology7, locale29, (java.lang.Integer) 490);
        org.joda.time.DateTimeField dateTimeField34 = chronology7.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 58665600001L + "'", long27 == 58665600001L);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "100" + "'", str31, "100");
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test17036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17036");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 21983942, chronology1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test17037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17037");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        int int6 = localDate3.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property7 = localDate3.monthOfYear();
        java.lang.String str8 = property7.getName();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        java.lang.String str10 = mutableDateTime9.toString();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime9.add(readableDuration11);
        mutableDateTime9.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.year();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.roundHalfEven();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.monthOfYear();
        mutableDateTime18.setHourOfDay(0);
        int int22 = property7.getDifference((org.joda.time.ReadableInstant) mutableDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate24 = property7.setCopy(54115116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54115116 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "monthOfYear" + "'", str8, "monthOfYear");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-24T02:18:50.522+59:08" + "'", str10, "2022-02-24T02:18:50.522+59:08");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-22) + "'", int22 == (-22));
    }

    @Test
    public void test17038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17038");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test17039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17039");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusSeconds(1970);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime8 = localTime6.minusHours(21965053);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test17040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17040");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYearOfEra(2022);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(427);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(80);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, 0);
        int[] intArray25 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withDayOfYear((int) 'a');
        boolean boolean28 = localDateTime11.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime11.plus(readablePeriod29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime11.minusWeeks(21968);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime11.withSecondOfMinute(22070323);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22070323 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1984, 5, 26, 8930547]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test17041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17041");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DurationField durationField18 = chronology10.years();
        org.joda.time.DurationField durationField19 = chronology10.millis();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test17042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17042");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        long long8 = mutableDateTime7.getMillis();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime7.copy();
        mutableDateTime9.setMinuteOfHour((int) (byte) 1);
        mutableDateTime9.setSecondOfDay(0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:50.571+59:08" + "'", str1, "2022-02-24T02:18:50.571+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-62135809680000L) + "'", long8 == (-62135809680000L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test17043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17043");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test17044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17044");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        java.lang.String str3 = localDateTime0.toString();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMillis(24);
        org.joda.time.Chronology chronology7 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.withMillisOfDay(0);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8330592 + "'", int2 == 8330592);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-24T02:18:50.592" + "'", str3, "2022-02-24T02:18:50.592");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test17045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17045");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.Integer int3 = dateTimeFormatter0.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        boolean boolean6 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone7 = dateTimeFormatter0.getZone();
        boolean boolean8 = dateTimeFormatter0.isOffsetParsed();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime12 = localDate9.toDateTimeAtCurrentTime();
        int int13 = localDate9.getYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTimeAtCurrentTime(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.toString();
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str23 = nameProvider19.getShortName(locale20, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        java.util.Locale locale24 = java.util.Locale.UK;
        boolean boolean25 = locale24.hasExtensions();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.lang.String str28 = locale26.getDisplayScript();
        java.lang.String str31 = nameProvider19.getName(locale26, "era", "2022-02-22T06:04:55.471+15:02:03.198");
        java.lang.String str32 = dateTimeZone14.getShortName((long) 21931872, locale26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter0.withLocale(locale26);
        java.lang.String str34 = locale26.getDisplayCountry();
        java.lang.String str35 = locale26.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+59:08" + "'", str17, "+59:08");
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str27, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+59:08" + "'", str32, "+59:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "de" + "'", str35, "de");
    }

    @Test
    public void test17046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.minusMinutes((int) (short) -1);
        org.joda.time.LocalTime localTime11 = localTime6.plusSeconds(54);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfDay(874);
        org.joda.time.LocalTime localTime15 = localTime11.withMinuteOfHour(22);
        org.joda.time.Chronology chronology16 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.era();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test17047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17047");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        int int13 = dateTimeField11.getLeapAmount((long) 1970);
        int int15 = dateTimeField11.get((long) 80);
        int int16 = dateTimeField11.getMaximumValue();
        java.util.Locale locale18 = java.util.Locale.UK;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale18.getDisplayName(locale20);
        java.lang.String str22 = locale20.getDisplayLanguage();
        java.lang.String str23 = dateTimeField11.getAsShortText((long) 21896418, locale20);
        java.util.Set<java.lang.Character> charSet24 = locale20.getExtensionKeys();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 99 + "'", int16 == 99);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str21, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
        org.junit.Assert.assertNotNull(charSet24);
    }

    @Test
    public void test17048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17048");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime6.withPeriodAdded(readablePeriod7, 54119809);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.lang.String str11 = localTime6.toString(dateTimeFormatter10);
        org.joda.time.LocalTime.Property property12 = localTime6.millisOfSecond();
        int int13 = localTime6.getMillisOfSecond();
        int int14 = localTime6.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11:07:59 AM" + "'", str11, "11:07:59 AM");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
    }

    @Test
    public void test17049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17049");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.era();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale12.getVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((long) 21882000, chronology8, locale12);
        org.joda.time.DurationField durationField16 = chronology8.minutes();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "United States" + "'", str13, "United States");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17050");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17051");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        int int11 = localDateTime0.getMillisOfSecond();
        int int12 = localDateTime0.getSecondOfMinute();
        org.joda.time.Chronology chronology13 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.minusMillis(2020);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime0.minusMillis(49);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths(83);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minus(readableDuration20);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 699 + "'", int11 == 699);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 50 + "'", int12 == 50);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test17052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17052");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        long long23 = dateTimeField20.addWrapField((long) ' ', 0);
        boolean boolean24 = dateTimeField20.isSupported();
        long long27 = dateTimeField20.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField20.getType();
        long long31 = dateTimeField20.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.yearOfEra();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate40, locale41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.Chronology chronology50 = localDate44.getChronology();
        long long54 = chronology50.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = dateTimeField63.getAsText((long) (short) 1, locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(32L, chronology50, locale65);
        java.lang.String str68 = locale41.getDisplayVariant(locale65);
        int int69 = property10.getMaximumShortTextLength(locale65);
        org.joda.time.DateTime dateTime70 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime71 = property10.roundFloorCopy();
        org.joda.time.Instant instant72 = dateTime71.toInstant();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 58665600001L + "'", long27 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "52" + "'", str42, "52");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 200L + "'", long54 == 200L);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(instant72);
    }

    @Test
    public void test17053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17053");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        long long12 = chronology6.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.weekyear();
        org.joda.time.DurationField durationField14 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField15 = chronology6.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology6.hourOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(560L, chronology6);
        org.joda.time.DateTimeField dateTimeField18 = chronology6.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-48469999L) + "'", long12 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test17054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17054");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 2, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(0);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.LocalDate localDate13 = dateTime11.toLocalDate();
        org.joda.time.DateTime dateTime15 = dateTime11.minusDays(22154599);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withDayOfMonth(8330592);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8330592 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test17055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17055");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology7.weekyears();
        org.joda.time.DurationField durationField12 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.hourOfHalfday();
        long long18 = dateTimeField15.addWrapField(4414574017L, 21892595);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4410974017L + "'", long18 == 4410974017L);
    }

    @Test
    public void test17056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17056");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1645542286397L);
        org.joda.time.Instant instant2 = mutableDateTime1.toInstant();
        org.junit.Assert.assertNotNull(instant2);
    }

    @Test
    public void test17057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17057");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.DateTime dateTime25 = dateTime12.withFieldAdded(durationFieldType21, (int) (byte) 1);
        boolean boolean26 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = property29.roundCeilingCopy();
        org.joda.time.DateTime dateTime32 = dateTime30.minusWeeks(52);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfEra(54138295);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime40.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime40.withMillisOfSecond(0);
        boolean boolean47 = dateTime46.isBeforeNow();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate50.equals((java.lang.Object) (byte) 10);
        int int53 = localDate50.getDayOfMonth();
        org.joda.time.LocalDate localDate55 = localDate50.withDayOfYear(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.Chronology chronology63 = localDate57.getChronology();
        long long67 = chronology63.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean68 = dateTimeFieldType56.isSupported(chronology63);
        boolean boolean69 = localDate50.isSupported(dateTimeFieldType56);
        boolean boolean70 = dateTime46.isSupported(dateTimeFieldType56);
        org.joda.time.DateTime.Property property71 = dateTime32.property(dateTimeFieldType56);
        org.joda.time.DateTime dateTime73 = property71.setCopy(2);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.DateTime dateTime76 = dateTime73.withPeriodAdded(readablePeriod74, 21);
        org.joda.time.DateTime.Property property77 = dateTime73.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = dateTime73.withDayOfYear(8213968);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8213968 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 24 + "'", int53 == 24);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 200L + "'", long67 == 200L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test17058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17058");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.setCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime13 = property5.addCopy(54126273);
        int int14 = property5.getMinimumValue();
        org.joda.time.LocalTime localTime15 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime16 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test17059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17059");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.Chronology chronology26 = localDate20.getChronology();
        long long30 = chronology26.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean31 = dateTimeFieldType19.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType18.getField(chronology26);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(chronology26);
        org.joda.time.DurationField durationField34 = chronology26.weeks();
        org.joda.time.DurationFieldType durationFieldType35 = durationField34.getType();
        mutableDateTime17.add(durationFieldType35, 421);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime17.secondOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 200L + "'", long30 == 200L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test17060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17060");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withDurationAdded(readableDuration11, 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.minusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.plusSeconds(86399999);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusHours(100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test17061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17061");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime8.withDurationAdded(readableDuration13, (int) 'a');
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.plus((-48469999L));
        org.joda.time.DateTime dateTime27 = dateTime23.plusSeconds(2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, dateTimeZone40);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.plus((-48469999L));
        org.joda.time.DateTime dateTime55 = dateTime51.plusSeconds(2);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate59.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) dateTime51, dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone73);
        long long76 = dateTimeZone68.getMillisKeepLocal(dateTimeZone73, (long) (byte) -1);
        long long78 = dateTimeZone40.getMillisKeepLocal(dateTimeZone73, (long) 8);
        org.joda.time.DateTime dateTime79 = dateTime8.withZoneRetainFields(dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter0.withZone(dateTimeZone40);
        java.lang.String str82 = dateTimeFormatter80.print((long) 2122);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter80.withZoneUTC();
        org.joda.time.Chronology chronology84 = dateTimeFormatter83.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 8L + "'", long78 == 8L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "11:08 AM" + "'", str82, "11:08 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNull(chronology84);
    }

    @Test
    public void test17062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17062");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay((int) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 54135478);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime7.minus(readablePeriod10);
        org.joda.time.DateTime dateTime12 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime14 = property13.getDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test17063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17063");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(10);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusWeeks(1969);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(17);
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDateTime11.compareTo(readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test17064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17064");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        int int9 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8330930 + "'", int9 == 8330930);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test17065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17065");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        long long7 = property3.remainder();
        org.joda.time.LocalTime localTime9 = property3.setCopy(129);
        org.joda.time.LocalTime localTime10 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime12 = localTime10.withMillisOfSecond(87);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime12.plus(readablePeriod13);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test17066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17066");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtCurrentTime(dateTimeZone5);
        int[] intArray8 = localDate0.getValues();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate0.withPeriodAdded(readablePeriod9, 6);
        int int12 = localDate0.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Calendar calendar17 = mutableDateTime13.toCalendar(locale16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromCalendarFields(calendar17);
        org.joda.time.LocalDate.Property property19 = localDate18.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.LocalDate.Property property21 = localDate20.year();
        org.joda.time.LocalDate localDate23 = property21.setCopy(54124521);
        org.joda.time.LocalDate.Property property24 = localDate23.era();
        boolean boolean25 = localDate0.isAfter((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate27 = localDate23.plusWeeks(22151);
        org.joda.time.LocalDate.Property property28 = localDate27.monthOfYear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(intArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[2022, 2, 24]");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645456250966,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=50,MILLISECOND=966,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17067");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(21);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        boolean boolean22 = mutableDateTime9.equals((java.lang.Object) dateTimeField21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.era();
        java.lang.String str24 = mutableDateTime9.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-17T02:18:50.981+59:08" + "'", str24, "2022-02-17T02:18:50.981+59:08");
    }

    @Test
    public void test17068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17068");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime7 = property3.setCopy(21);
        org.joda.time.LocalTime localTime9 = property3.addCopy(21921282);
        long long10 = property3.remainder();
        org.joda.time.LocalTime localTime11 = property3.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40079999" + "'", str5, "40079999");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test17069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17069");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 22008237);
        int int2 = dateTime1.getMillisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 62088237 + "'", int2 == 62088237);
    }

    @Test
    public void test17070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17070");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(22113415, 54130456);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22113415 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17071");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology19);
        org.joda.time.DurationField durationField23 = chronology19.months();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        int int25 = localDate24.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate24.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.Chronology chronology29 = chronology19.withZone(dateTimeZone26);
        org.joda.time.DurationField durationField30 = chronology29.millis();
        org.joda.time.DurationFieldType durationFieldType31 = durationField30.getType();
        mutableDateTime0.add(durationFieldType31, (-54133353));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDateTime(21889439, 54480498, 21983925, 22106691, 54459845, 905, 603);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22106691 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456251049,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=51,MILLISECOND=49,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationFieldType31);
    }

    @Test
    public void test17072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17072");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
    }

    @Test
    public void test17073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17073");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(14);
        mutableDateTime4.addYears(21965053);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.yearOfCentury();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.millisOfSecond();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:51.068+59:08" + "'", str1, "2022-02-24T02:18:51.068+59:08");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test17074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17074");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        mutableDateTime0.set(dateTimeFieldType22, 52);
        java.lang.String str26 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        mutableDateTime27.add(durationFieldType31, (-1));
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime37 = property34.getMutableDateTime();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime37);
        int int39 = mutableDateTime37.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime37.add(readablePeriod41, 54133701);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45);
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Calendar calendar48 = mutableDateTime44.toCalendar(locale47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        mutableDateTime44.setMillis(readableInstant53);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime44.secondOfDay();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime44.weekOfWeekyear();
        int int58 = mutableDateTime37.compareTo((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime44.add(readableDuration59);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456251077,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=51,MILLISECOND=77,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "0052-02-24T02:18:51.077+59:08" + "'", str26, "0052-02-24T02:18:51.077+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8331 + "'", int39 == 8331);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645456251077,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=51,MILLISECOND=77,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test17075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17075");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.set(14);
        mutableDateTime4.setMillis((long) 100);
        boolean boolean7 = mutableDateTime4.isBeforeNow();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField28.getAsText((long) (short) 1, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(32L, chronology15, locale30);
        dateTimeParserBucket32.setOffset(54111610);
        long long37 = dateTimeParserBucket32.computeMillis(false, "Property[millisOfDay]");
        long long39 = dateTimeParserBucket32.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket32.getZone();
        int int42 = dateTimeZone40.getOffsetFromLocal((long) 70);
        mutableDateTime4.setZone(dateTimeZone40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        org.joda.time.Chronology chronology51 = localDate45.getChronology();
        long long55 = chronology51.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean56 = dateTimeFieldType44.isSupported(chronology51);
        org.joda.time.DateTimeField dateTimeField57 = chronology51.weekyearOfCentury();
        org.joda.time.DurationField durationField58 = chronology51.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = chronology51.monthOfYear();
        org.joda.time.DateTimeField dateTimeField60 = chronology51.millisOfDay();
        java.lang.String str61 = chronology51.toString();
        mutableDateTime4.setChronology(chronology51);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setDayOfMonth(222);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 222 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:51.101+59:08" + "'", str1, "2022-02-24T02:18:51.101+59:08");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-54111578L) + "'", long37 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-54111578L) + "'", long39 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 200L + "'", long55 == 200L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ISOChronology[UTC]" + "'", str61, "ISOChronology[UTC]");
    }

    @Test
    public void test17076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17076");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime7.minusDays(8);
        org.joda.time.DateTime dateTime31 = dateTime7.withYearOfEra(902);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime33 = dateTime7.plus(readableDuration32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusYears(286);
        org.joda.time.DateTime dateTime36 = dateTime33.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime33.withMillis((long) 144000000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = dateTime33.withHourOfDay(863);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 863 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test17077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17077");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfEven();
        int int4 = mutableDateTime3.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime3.yearOfCentury();
        mutableDateTime3.setDate(4147195053L);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:51.130+59:08" + "'", str1, "2022-02-24T02:18:51.130+59:08");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test17078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17078");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.plus(readableDuration8);
        boolean boolean11 = dateTime7.isAfter((long) 22140729);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test17079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17079");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.months();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        int int13 = localDate12.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.Chronology chronology17 = chronology7.withZone(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter1.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyearOfCentury();
        long long22 = dateTimeField20.remainder((long) 456);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeField20);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 212880456L + "'", long22 == 212880456L);
    }

    @Test
    public void test17080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17080");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withPivotYear((int) (short) -1);
        java.lang.String str5 = dateTimeFormatter1.print(60000L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter1.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter1.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 54150112);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withDefaultYear(977);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("2022-02-22T06:05:16.322+15:02:03.198", dateTimeFormatter12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:05:16.322+15:02:03.198\" is malformed at \"22-02-22T06:05:16.322+15:02:03.198\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "11:09 AM" + "'", str5, "11:09 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test17081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17081");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        java.lang.String str10 = property4.getAsText(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder12 = builder0.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.clearExtensions();
        java.util.Locale locale15 = builder12.build();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456251198,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=51,MILLISECOND=198,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
    }

    @Test
    public void test17082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17082");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-21T15:02:24.490Z");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        mutableDateTime1.add(readablePeriod2, 1969);
        mutableDateTime1.addSeconds(86399999);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.centuryOfEra();
        long long8 = property7.remainder();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.getMutableDateTime();
        mutableDateTime9.setMillisOfDay(0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1423904256510L) + "'", long8 == (-1423904256510L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test17083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17083");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.plus((-48469999L));
        org.joda.time.DateTime dateTime23 = dateTime19.plusSeconds(2);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, dateTimeZone36);
        mutableDateTime0.setZone(dateTimeZone36);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate44 = localDate42.withYearOfEra(54137154);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDate localDate46 = localDate44.minus(readablePeriod45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate57 = localDate54.withField(dateTimeFieldType55, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDate57.toDateTime(readableInstant58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMonths((int) '4');
        org.joda.time.DateTime dateTime63 = dateTime59.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime64.add(readableDuration65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getDurationType();
        mutableDateTime64.add(durationFieldType68, (-1));
        org.joda.time.DateTime dateTime72 = dateTime59.withFieldAdded(durationFieldType68, (int) (byte) 1);
        boolean boolean73 = dateTime52.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTime dateTime75 = dateTime72.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property76 = dateTime75.era();
        org.joda.time.DateTime dateTime77 = property76.roundCeilingCopy();
        org.joda.time.DateTime dateTime79 = dateTime77.minusWeeks(52);
        org.joda.time.DateTime.Property property80 = dateTime79.weekyear();
        org.joda.time.LocalDate localDate81 = dateTime79.toLocalDate();
        int int82 = localDate81.getYear();
        int int83 = localDate46.compareTo((org.joda.time.ReadablePartial) localDate81);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456251232,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=51,MILLISECOND=232,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test17084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17084");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.DateTimeField dateTimeField26 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField27 = chronology8.year();
        java.util.Set<java.lang.String> strSet28 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray29 = strSet28.toArray();
        java.util.Iterator<java.lang.String> strItor30 = strSet28.iterator();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekOfWeekyear();
        long long42 = dateTimeField39.addWrapField((long) ' ', 0);
        boolean boolean43 = dateTimeField39.isSupported();
        long long46 = dateTimeField39.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField39.getType();
        java.util.Locale locale49 = java.util.Locale.getDefault();
        java.lang.String str50 = dateTimeField39.getAsText((long) (byte) 1, locale49);
        boolean boolean51 = strSet28.equals((java.lang.Object) locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 54128391, chronology8, locale49);
        org.joda.time.DateTimeZone dateTimeZone53 = chronology8.getZone();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertNotNull(strItor30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 32L + "'", long42 == 32L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 58665600001L + "'", long46 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
    }

    @Test
    public void test17085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17085");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime5.withCenturyOfEra((int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfCentury(80);
        org.joda.time.DateTime dateTime15 = dateTime13.minus((long) (short) 0);
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test17086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17086");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        dateTimeParserBucket24.setZone(dateTimeZone54);
        long long60 = dateTimeZone54.convertUTCToLocal((long) 100);
        int int62 = dateTimeZone54.getOffsetFromLocal(2L);
        java.util.Locale locale64 = java.util.Locale.UK;
        boolean boolean65 = locale64.hasExtensions();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.lang.String str67 = locale64.getDisplayName(locale66);
        java.lang.String str68 = dateTimeZone54.getName((long) 54131261, locale66);
        java.lang.String str70 = dateTimeZone54.getShortName((long) 54145);
        java.lang.String str72 = dateTimeZone54.getName((long) (-3628810));
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate75 = localDate73.minusMonths((int) (short) -1);
        boolean boolean77 = localDate75.equals((java.lang.Object) (byte) 10);
        int int78 = localDate75.getDayOfMonth();
        org.joda.time.LocalDate localDate80 = localDate75.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.DateTime dateTime83 = localDate80.toDateTimeAtCurrentTime(dateTimeZone82);
        java.util.TimeZone timeZone84 = dateTimeZone82.toTimeZone();
        long long87 = dateTimeZone82.convertLocalToUTC((long) 21883, false);
        long long89 = dateTimeZone54.getMillisKeepLocal(dateTimeZone82, 0L);
        long long93 = dateTimeZone82.convertLocalToUTC((long) 54565529, false, 108270005L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 212880100L + "'", long60 == 212880100L);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 212880000 + "'", int62 == 212880000);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str67, "Englisch (Vereinigtes K\366nigreich)");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+59:08" + "'", str68, "+59:08");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+59:08" + "'", str70, "+59:08");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+59:08" + "'", str72, "+59:08");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 24 + "'", int78 == 24);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 21848L + "'", long87 == 21848L);
// flaky:         org.junit.Assert.assertTrue("'" + long89 + "' != '" + 212879965L + "'", long89 == 212879965L);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 54565494L + "'", long93 == 54565494L);
    }

    @Test
    public void test17087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17087");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime14 = property10.addToCopy(11);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.Chronology chronology23 = localDate17.getChronology();
        long long27 = chronology23.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekOfWeekyear();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.lang.String str39 = dateTimeField36.getAsText((long) (short) 1, locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket(32L, chronology23, locale38);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.plus((-48469999L));
        org.joda.time.DateTime dateTime52 = dateTime48.plusSeconds(2);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate56.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) dateTime48, dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone70);
        long long73 = dateTimeZone65.getMillisKeepLocal(dateTimeZone70, (long) (byte) -1);
        dateTimeParserBucket40.setZone(dateTimeZone70);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone70);
        long long78 = dateTimeZone70.convertLocalToUTC((long) 80, false);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str81 = dateTimeZone70.getShortName((-53L));
        long long83 = dateTimeZone70.nextTransition(3628810373L);
        org.joda.time.MutableDateTime mutableDateTime84 = org.joda.time.MutableDateTime.now(dateTimeZone70);
        int int85 = dateTime14.compareTo((org.joda.time.ReadableInstant) mutableDateTime84);
        mutableDateTime84.addWeeks(21983281);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 200L + "'", long27 == 200L);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-212879920L) + "'", long78 == (-212879920L));
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+59:08" + "'", str81, "+59:08");
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 3628810373L + "'", long83 == 3628810373L);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test17088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17088");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 16, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.millisOfSecond();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime6.minusSeconds(427);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.minus(readableDuration10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test17089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17089");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.addWrapField(21887627);
        org.joda.time.MutableDateTime mutableDateTime11 = property6.addWrapField(21896);
        mutableDateTime11.setWeekyear(21930300);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:51.483+59:08" + "'", str1, "2022-02-24T02:18:51.483+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test17090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17090");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate3 = localDate0.plusDays(54152679);
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.withPeriodAdded(readablePeriod5, (int) (short) -1);
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8 + "'", int1 == 8);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test17091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17091");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        java.lang.String str10 = property4.getAsText(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder12 = builder0.clearExtensions();
        java.util.Locale.Builder builder14 = builder0.setLanguage("");
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale locale16 = builder14.build();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("java.io.IOException: hi!");
        java.util.Locale.Builder builder19 = builder14.setLocale(locale18);
        java.util.Locale.Builder builder20 = builder14.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder14.addUnicodeLocaleAttribute("2022-02-24T02:16:18.959+59:08");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-24T02:16:18.959+59:08 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456251524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=51,MILLISECOND=524,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test17092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17092");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-22T06:06:01.663+15:02:03.198");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfDay(21902894);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21902894 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test17093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17093");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        long long11 = dateTimeField8.addWrapField((long) ' ', 0);
        boolean boolean12 = dateTimeField8.isSupported();
        long long15 = dateTimeField8.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField8.getType();
        long long19 = dateTimeField8.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate26 = localDate20.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate20.yearOfEra();
        org.joda.time.LocalDate localDate28 = property27.roundFloorCopy();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDate28, locale29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.Chronology chronology38 = localDate32.getChronology();
        long long42 = chronology38.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        java.util.Locale locale53 = java.util.Locale.getDefault();
        java.lang.String str54 = dateTimeField51.getAsText((long) (short) 1, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket55 = new org.joda.time.format.DateTimeParserBucket(32L, chronology38, locale53);
        java.lang.String str56 = locale29.getDisplayVariant(locale53);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str58 = locale53.getDisplayScript(locale57);
        java.lang.String str59 = locale57.getISO3Language();
        java.util.Set<java.lang.String> strSet60 = locale57.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 32L + "'", long11 == 32L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58665600001L + "'", long15 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "52" + "'", str30, "52");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 200L + "'", long42 == 200L);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zho" + "'", str59, "zho");
        org.junit.Assert.assertNotNull(strSet60);
    }

    @Test
    public void test17094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17094");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalTime localTime8 = localTime2.withPeriodAdded(readablePeriod6, 292278993);
        org.joda.time.Chronology chronology9 = localTime2.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.weekyears();
        long long14 = chronology9.add((long) 54135502, (long) 21959976, 44);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((-1L), dateTimeZone17);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfDay();
        java.lang.String str20 = property19.toString();
        org.joda.time.LocalTime localTime21 = property19.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime22 = property19.roundCeilingCopy();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) localTime22);
        int int24 = localTime23.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withDurationAdded(readableDuration34, 0);
        int[] intArray37 = localDateTime36.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray39 = dateTimeField15.addWrapField((org.joda.time.ReadablePartial) localTime23, 54541548, intArray37, 136);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54541548");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1020374446L + "'", long14 == 1020374446L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[millisOfDay]" + "'", str20, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 999 + "'", int24 == 999);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[1984, 5, 26, 8931571]");
    }

    @Test
    public void test17095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17095");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-21T15:02:02.278Z");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2022-02-22T06:05:43.769+15:02:03.198");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("+40:00");
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("2022-10-22T00:00:00.000+15:02:03.198");
        org.joda.time.DateTimeZone dateTimeZone11 = provider0.getZone("2022-02-24T02:15:52.648+59:08");
        java.util.Set<java.lang.String> strSet12 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test17096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17096");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.LocalDate localDate11 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime13 = dateTime9.withWeekyear(54112611);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        mutableDateTime16.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.property(dateTimeFieldType21);
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfEven();
        mutableDateTime23.setHourOfDay(2);
        java.lang.Object obj26 = mutableDateTime23.clone();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime23.copy();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property35 = localDate28.yearOfEra();
        org.joda.time.LocalDate localDate37 = localDate28.withYear(54130144);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime50.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        mutableDateTime55.add(durationFieldType59, (-1));
        org.joda.time.DateTime dateTime63 = dateTime50.withFieldAdded(durationFieldType59, (int) (byte) 1);
        boolean boolean64 = dateTime43.isAfter((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime63.minusMillis((int) (short) 100);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) dateTime66);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        org.joda.time.LocalDate localDate71 = localDate67.withField(dateTimeFieldType68, 54123121);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType68.getRangeDurationType();
        org.joda.time.LocalDate.Property property73 = localDate37.property(dateTimeFieldType68);
        java.lang.String str74 = dateTimeFieldType68.toString();
        mutableDateTime23.set(dateTimeFieldType68, 0);
        int int77 = mutableDateTime23.getWeekyear();
        boolean boolean78 = dateTime15.equals((java.lang.Object) mutableDateTime23);
        org.joda.time.ReadableDuration readableDuration79 = null;
        mutableDateTime23.add(readableDuration79);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "2022-11-01T02:00:00.000+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "2022-11-01T02:00:00.000+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "2022-11-01T02:00:00.000+59:08");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNull(durationFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "year" + "'", str74, "year");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test17097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17097");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.Chronology chronology54 = chronology7.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone50);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test17098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17098");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        int int10 = dateTime7.getSecondOfDay();
        org.joda.time.DateTime.Property property11 = dateTime7.era();
        org.joda.time.DateTime dateTime12 = property11.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8331 + "'", int10 == 8331);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17099");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.dayOfWeek();
        int int9 = dateTimeField8.getMinimumValue();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test17100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17100");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 47672);
    }

    @Test
    public void test17101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17101");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        long long8 = mutableDateTime7.getMillis();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime11.getZone();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:51.786+59:08" + "'", str1, "2022-02-24T02:18:51.786+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-62135809680000L) + "'", long8 == (-62135809680000L));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test17102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17102");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate12 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate14 = property7.addWrapFieldToCopy(21992);
        org.joda.time.LocalDate localDate15 = property7.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test17103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17103");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Calendar calendar14 = mutableDateTime10.toCalendar(locale13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields(calendar14);
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        org.joda.time.LocalDate localDate17 = property16.roundCeilingCopy();
        org.joda.time.LocalDate.Property property18 = localDate17.year();
        org.joda.time.LocalDate localDate19 = property18.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        long long32 = chronology28.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean33 = dateTimeFieldType21.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.weekyearOfCentury();
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.lang.String str37 = dateTimeField34.getAsText((long) 54120, locale36);
        java.lang.String str38 = property18.getAsText(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 54127672, chronology7, locale36, (java.lang.Integer) 54150);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.minuteOfHour();
        int int43 = mutableDateTime41.getDayOfYear();
        int int44 = mutableDateTime41.getYearOfEra();
        int int45 = mutableDateTime41.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645456251838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=51,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 200L + "'", long32 == 200L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "70" + "'", str37, "70");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022" + "'", str38, "2022");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 52 + "'", int43 == 52);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 910 + "'", int45 == 910);
    }

    @Test
    public void test17104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17104");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundFloorCopy();
        boolean boolean9 = localTime7.equals((java.lang.Object) "23:59:59.999");
        int int10 = localTime7.getMinuteOfHour();
        org.joda.time.LocalTime.Property property11 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property11.addCopy((int) (byte) 0);
        org.joda.time.LocalTime localTime15 = property11.addCopy((long) 927);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test17105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17105");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusSeconds(1970);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime6.withPeriodAdded(readablePeriod7, (int) (byte) 10);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readablePeriod11);
        int int13 = dateTime10.getYear();
        org.joda.time.DateTime dateTime14 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalTime localTime16 = localTime6.plusMillis(54150452);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime18 = localTime16.plus(readablePeriod17);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long27 = chronology19.getDateTimeMillis(22089, (-962432449), 54476, 54555188, 49, 54147276, 22156460);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54555188 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test17106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17106");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        org.joda.time.DateTime dateTime18 = dateTime5.withFieldAdded(durationFieldType14, (int) (byte) 1);
        int int19 = dateTime5.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime5.minusHours(100);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        org.joda.time.DateTime dateTime23 = property22.getDateTime();
        org.joda.time.DateTime.Property property24 = dateTime23.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = property24.setCopy("2022-02-21T15:09:11.870+00:00:00.023");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:09:11.870+00:00:00.023\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8331 + "'", int19 == 8331);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test17107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17107");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 197);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = dateTimeField23.getAsText((long) (short) 1, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(32L, chronology10, locale25);
        dateTimeParserBucket27.setOffset(54111610);
        long long32 = dateTimeParserBucket27.computeMillis(false, "Property[millisOfDay]");
        long long34 = dateTimeParserBucket27.computeMillis(false);
        dateTimeParserBucket27.setOffset(10373);
        dateTimeParserBucket27.setOffset((java.lang.Integer) 6);
        dateTimeParserBucket27.setOffset((java.lang.Integer) 54149738);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket27.getZone();
        mutableDateTime2.setZoneRetainFields(dateTimeZone41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((java.lang.Object) 21954891, dateTimeZone41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-54111578L) + "'", long32 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-54111578L) + "'", long34 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone41);
    }

    @Test
    public void test17108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17108");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 54113391);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.weekOfWeekyear();
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str26 = dateTimeField23.getAsText((long) (short) 1, locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket(32L, chronology10, locale25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.plus((-48469999L));
        org.joda.time.DateTime dateTime39 = dateTime35.plusSeconds(2);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate43.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) dateTime35, dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone57);
        long long60 = dateTimeZone52.getMillisKeepLocal(dateTimeZone57, (long) (byte) -1);
        dateTimeParserBucket27.setZone(dateTimeZone57);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone57);
        long long65 = dateTimeZone57.convertLocalToUTC((long) 80, false);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone57);
        int int68 = dateTimeZone57.getStandardOffset((long) 1000);
        mutableDateTime1.setZoneRetainFields(dateTimeZone57);
        org.joda.time.DateTime dateTime70 = org.joda.time.DateTime.now(dateTimeZone57);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-1L) + "'", long60 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-212879920L) + "'", long65 == (-212879920L));
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 212880000 + "'", int68 == 212880000);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test17109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17109");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 54389509);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test17110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17110");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.lang.Object[] objArray3 = strSet2.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream7 = languageRangeList5.stream();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList13, filteringMode16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap18);
        boolean boolean20 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream21 = languageRangeList5.stream();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream25 = languageRangeList23.stream();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.lang.String str33 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList31, filteringMode34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, strMap36);
        java.util.Set<java.lang.String> strSet38 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray39 = strSet38.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.lang.String>) strList45);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream48 = languageRangeList41.stream();
        boolean boolean49 = strSet38.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((-1L), dateTimeZone51);
        org.joda.time.LocalTime.Property property53 = localTime52.millisOfDay();
        java.lang.String str54 = property53.toString();
        java.lang.String str55 = property53.getAsShortText();
        org.joda.time.LocalTime localTime56 = property53.getLocalTime();
        org.joda.time.LocalTime localTime57 = property53.withMinimumValue();
        org.joda.time.LocalTime localTime58 = property53.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray59 = localTime58.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray60 = strSet38.toArray(dateTimeFieldArray59);
        boolean boolean61 = strSet38.isEmpty();
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags(languageRangeList37, (java.util.Collection<java.lang.String>) strSet38);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet38);
        java.lang.Object[] objArray64 = strSet38.toArray();
        boolean boolean66 = strSet38.add("2022-02-22T06:06:16.016+15:02:03.198");
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream70 = languageRangeList68.stream();
        java.util.Locale.LanguageRange[] languageRangeArray71 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList72 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72, languageRangeArray71);
        java.lang.String[] strArray75 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.lang.String str78 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList72, (java.util.Collection<java.lang.String>) strList76);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.lang.String>) strList76, filteringMode79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap81 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList82 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, strMap81);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap83 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList84 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList82, strMap83);
        boolean boolean85 = strSet38.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeStream7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode16.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeStream21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeStream25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode34.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(languageRangeStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Property[millisOfDay]" + "'", str54, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "40079999" + "'", str55, "40079999");
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray59);
        org.junit.Assert.assertNotNull(dateTimeFieldArray60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(languageRangeStream70);
        org.junit.Assert.assertNotNull(languageRangeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(languageRangeList82);
        org.junit.Assert.assertNotNull(languageRangeList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test17111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17111");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        boolean boolean16 = dateTimeZone7.equals((java.lang.Object) dateTimeZone14);
        org.joda.time.Interval interval17 = localDate5.toInterval(dateTimeZone14);
        int int18 = localDate5.size();
        org.joda.time.LocalDate.Property property19 = localDate5.dayOfYear();
        java.util.Locale locale23 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = property19.getAsText(locale24);
        java.lang.String str27 = locale24.getISO3Language();
        java.lang.String str29 = locale24.getExtension('a');
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456252046,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=52,MILLISECOND=46,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "sunday, february 21, -0001" + "'", str25, "sunday, february 21, -0001");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "52" + "'", str26, "52");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "deu" + "'", str27, "deu");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test17112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17112");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime8.withDurationAdded(readableDuration13, (int) 'a');
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.plus((-48469999L));
        org.joda.time.DateTime dateTime27 = dateTime23.plusSeconds(2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, dateTimeZone40);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.plus((-48469999L));
        org.joda.time.DateTime dateTime55 = dateTime51.plusSeconds(2);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate59.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) dateTime51, dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone73);
        long long76 = dateTimeZone68.getMillisKeepLocal(dateTimeZone73, (long) (byte) -1);
        long long78 = dateTimeZone40.getMillisKeepLocal(dateTimeZone73, (long) 8);
        org.joda.time.DateTime dateTime79 = dateTime8.withZoneRetainFields(dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter0.withZone(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        java.lang.String str82 = mutableDateTime81.toString();
        org.joda.time.ReadableDuration readableDuration83 = null;
        mutableDateTime81.add(readableDuration83);
        mutableDateTime81.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property87 = mutableDateTime81.year();
        org.joda.time.Instant instant88 = mutableDateTime81.toInstant();
        mutableDateTime81.setSecondOfMinute(21);
        java.lang.String str91 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime81);
        org.joda.time.MutableDateTime mutableDateTime92 = mutableDateTime81.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime81.setSecondOfMinute(642);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 642 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 8L + "'", long78 == 8L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-02-24T02:18:52.077+59:08" + "'", str82, "2022-02-24T02:18:52.077+59:08");
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(instant88);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "2:18 AM" + "'", str91, "2:18 AM");
        org.junit.Assert.assertNotNull(mutableDateTime92);
    }

    @Test
    public void test17113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17113");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology5);
        boolean boolean14 = mutableDateTime13.isBeforeNow();
        mutableDateTime13.addDays(54156019);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) '4');
        org.joda.time.DateTime dateTime26 = dateTime24.plus((-48469999L));
        org.joda.time.DateTime dateTime28 = dateTime24.plusSeconds(2);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusMonths((int) (short) -1);
        boolean boolean39 = localDate35.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology40 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology42 = chronology40.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime43 = localDate32.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((java.lang.Object) dateTime24, dateTimeZone41);
        org.joda.time.DateTime dateTime46 = dateTime24.minusDays(8);
        org.joda.time.DateTime.Property property47 = dateTime24.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime24.minus(readablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime24.getZone();
        mutableDateTime13.setZone(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
    }

    @Test
    public void test17114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17114");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate0.withWeekOfWeekyear(23);
        org.joda.time.LocalDate.Property property8 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property8.withMinimumValue();
        int int10 = property8.getMaximumValueOverall();
        org.joda.time.LocalDate localDate11 = property8.getLocalDate();
        int int12 = localDate11.getWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2922789 + "'", int10 == 2922789);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test17115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17115");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 422);
        mutableDateTime1.addMonths(21916);
        int int4 = mutableDateTime1.getMillisOfDay();
        mutableDateTime1.addWeeks(21923);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.millisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40080422 + "'", int4 == 40080422);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test17116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17116");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.Chronology chronology9 = localDate3.getChronology();
        long long13 = chronology9.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = dateTimeField22.getAsText((long) (short) 1, locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket(32L, chronology9, locale24);
        org.joda.time.DateTimeField dateTimeField27 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = chronology9.year();
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray30 = strSet29.toArray();
        java.util.Iterator<java.lang.String> strItor31 = strSet29.iterator();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        long long43 = dateTimeField40.addWrapField((long) ' ', 0);
        boolean boolean44 = dateTimeField40.isSupported();
        long long47 = dateTimeField40.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField40.getType();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = dateTimeField40.getAsText((long) (byte) 1, locale50);
        boolean boolean52 = strSet29.equals((java.lang.Object) locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 54128391, chronology9, locale50);
        org.joda.time.DateTimeField dateTimeField54 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 21950418, chronology9);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        int int58 = localDate57.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        java.util.TimeZone timeZone63 = dateTimeZone59.toTimeZone();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(dateTimeZone59);
        org.joda.time.LocalDate localDate66 = localDate64.plusWeeks(0);
        long long68 = chronology9.set((org.joda.time.ReadablePartial) localDate64, (long) 54475901);
        org.joda.time.DateTimeField dateTimeField69 = chronology9.millisOfSecond();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 200L + "'", long13 == 200L);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 58665600001L + "'", long47 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(localDate66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645715275901L + "'", long68 == 1645715275901L);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test17117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17117");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalTime localTime10 = localTime6.withField(dateTimeFieldType7, 0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime6.withPeriodAdded(readablePeriod11, 54140);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime6.minus(readablePeriod14);
        org.joda.time.LocalTime localTime17 = localTime6.plusHours(538);
        org.joda.time.LocalTime.Property property18 = localTime6.millisOfDay();
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Calendar calendar29 = mutableDateTime25.toCalendar(locale28);
        java.lang.String str30 = property24.getAsText(locale28);
        java.lang.String str31 = locale28.toLanguageTag();
        java.lang.String str32 = locale20.getDisplayVariant(locale28);
        java.util.Set<java.lang.String> strSet33 = locale28.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime34 = property18.setCopy("2022-02-22T06:06:25.082+15:02:03.198", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:06:25.082+15:02:03.198\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645456252177,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=52,MILLISECOND=177,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "en-US" + "'", str31, "en-US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(strSet33);
    }

    @Test
    public void test17118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17118");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.LocalDate localDate11 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime13 = dateTime9.withWeekyear(54112611);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(80);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((java.lang.Object) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.minusDays(21915388);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test17119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17119");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.Chronology chronology12 = localDate6.getChronology();
        long long16 = chronology12.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean17 = dateTimeFieldType5.isSupported(chronology12);
        mutableDateTime2.setChronology(chronology12);
        org.joda.time.DurationField durationField19 = chronology12.minutes();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology12.getZone();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology12);
        long long25 = chronology12.add(4201328032L, 200L, 54130144);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter0.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField27 = chronology12.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField28 = chronology12.secondOfMinute();
        java.util.Set<java.lang.String> strSet29 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray30 = strSet29.toArray();
        java.util.Iterator<java.lang.String> strItor31 = strSet29.iterator();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        long long43 = dateTimeField40.addWrapField((long) ' ', 0);
        boolean boolean44 = dateTimeField40.isSupported();
        long long47 = dateTimeField40.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField40.getType();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = dateTimeField40.getAsText((long) (byte) 1, locale50);
        boolean boolean52 = strSet29.equals((java.lang.Object) locale50);
        int int53 = dateTimeField28.getMaximumTextLength(locale50);
        java.util.Locale locale56 = new java.util.Locale("2022-02-21T15:02:18.874Z");
        java.lang.String str57 = dateTimeField28.getAsShortText((long) 604, locale56);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 200L + "'", long16 == 200L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 15027356832L + "'", long25 == 15027356832L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 58665600001L + "'", long47 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals(locale56.toString(), "2022-02-21t15:02:18.874z");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "0" + "'", str57, "0");
    }

    @Test
    public void test17120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17120");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        mutableDateTime7.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.property(dateTimeFieldType12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime7.add(readableDuration14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime7.add(readablePeriod17);
        org.joda.time.DateTime dateTime19 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.LocalDateTime.Property property20 = localDateTime3.millisOfDay();
        int int21 = localDateTime3.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType23 = localDateTime3.getFieldType(54123197);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54123197");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test17121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17121");
        java.util.Locale locale3 = new java.util.Locale("12:15 PM", "11:07:59", "2022-02-22T06:08:11.039+15:02:03.198");
        org.junit.Assert.assertEquals(locale3.toString(), "12:15 pm_11:07:59_2022-02-22T06:08:11.039+15:02:03.198");
    }

    @Test
    public void test17122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17122");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        int int10 = dateTime8.getMonthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime8.toDateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(21934);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime11.plus(readableDuration14);
        boolean boolean16 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime11.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeZone17);
    }

    @Test
    public void test17123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17123");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.getLocalDate();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.plus((-48469999L));
        org.joda.time.DateTime dateTime23 = dateTime19.plusSeconds(2);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone41);
        long long44 = dateTimeZone36.getMillisKeepLocal(dateTimeZone41, (long) (byte) -1);
        org.joda.time.DateTime dateTime45 = localDate11.toDateTimeAtCurrentTime(dateTimeZone36);
        int int46 = localDate11.getCenturyOfEra();
        org.joda.time.LocalDate.Property property47 = localDate11.monthOfYear();
        org.joda.time.LocalDate localDate48 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property49 = localDate48.year();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test17124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17124");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0001-01-01T15:02:30.000+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0001-01-01T15:02:30.000+15:02:03.198\" is malformed at \"T15:02:30.000+15:02:03.198\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17125");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate14 = localDate8.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property15 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundFloorCopy();
        org.joda.time.LocalDate localDate17 = property15.roundFloorCopy();
        org.joda.time.LocalDate localDate18 = property15.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField19 = property15.getField();
        org.joda.time.LocalDate localDate20 = property15.withMinimumValue();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime26.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property31 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.Chronology chronology42 = localDate36.getChronology();
        long long46 = chronology42.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean47 = dateTimeFieldType35.isSupported(chronology42);
        mutableDateTime32.setChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField49 = chronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType30.getField(chronology42);
        org.joda.time.LocalDate localDate52 = localDate20.withField(dateTimeFieldType30, (int) 'a');
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        long long64 = chronology58.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DurationField durationField65 = chronology58.seconds();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType30.getField(chronology58);
        org.joda.time.DateTime dateTime68 = dateTime5.withField(dateTimeFieldType30, 54143);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 200L + "'", long46 == 200L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-48469999L) + "'", long64 == (-48469999L));
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test17126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17126");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime6 = property3.getLocalTime();
        org.joda.time.LocalTime localTime7 = property3.withMinimumValue();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.lang.String str10 = property3.getAsText(locale9);
        org.joda.time.LocalTime localTime12 = property3.addCopy((long) 21915);
        org.joda.time.LocalTime localTime14 = property3.setCopy(902);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40079999" + "'", str5, "40079999");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "40079999" + "'", str10, "40079999");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test17127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17127");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes(54111610);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(80);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusWeeks(2022);
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        int int25 = localDateTime23.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfMonth();
        int int28 = localDateTime26.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMillis(11);
        int int31 = localDateTime26.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime14.minusYears(8326765);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8332430 + "'", int25 == 8332430);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 18 + "'", int31 == 18);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test17128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17128");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField17 = chronology10.dayOfMonth();
        boolean boolean19 = dateTimeField17.isLeap((long) 54150261);
        int int22 = dateTimeField17.getDifference(62135831579L, (long) (byte) 0);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekOfWeekyear();
        long long35 = dateTimeField32.addWrapField((long) ' ', 0);
        boolean boolean36 = dateTimeField32.isSupported();
        long long39 = dateTimeField32.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField32.getType();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = dateTimeField32.getAsText((long) (byte) 1, locale42);
        long long45 = dateTimeField32.roundHalfEven((long) 3);
        boolean boolean46 = dateTimeField32.isLenient();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        java.lang.String str50 = mutableDateTime49.toString();
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime49.add(readableDuration51);
        mutableDateTime49.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime49.year();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime58 = property55.roundCeiling();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime58.millisOfDay();
        int int62 = dateTimeFormatter48.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime58, "2022-02-22T06:04:40.988+15:02:03.198", 97);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime58.monthOfYear();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime58.millisOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate71 = localDate65.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property72 = localDate65.yearOfEra();
        org.joda.time.LocalDate localDate73 = property72.roundFloorCopy();
        org.joda.time.LocalDate localDate74 = property72.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField75 = property72.getField();
        org.joda.time.LocalDate localDate77 = property72.setCopy((int) (byte) 1);
        java.util.Locale locale78 = java.util.Locale.UK;
        boolean boolean79 = locale78.hasExtensions();
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.lang.String str81 = locale78.getDisplayName(locale80);
        java.lang.String str82 = locale80.getDisplayScript();
        int int83 = property72.getMaximumTextLength(locale80);
        java.lang.String str84 = locale80.toLanguageTag();
        int int85 = property64.getMaximumTextLength(locale80);
        java.lang.String str86 = dateTimeField32.getAsText((long) 22092445, locale80);
        java.lang.String str87 = dateTimeField17.getAsText(0L, locale80);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 719 + "'", int22 == 719);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 32L + "'", long35 == 32L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 58665600001L + "'", long39 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-259200000L) + "'", long45 == (-259200000L));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-24T02:18:52.458+59:08" + "'", str50, "2022-02-24T02:18:52.458+59:08");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-98) + "'", int62 == (-98));
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str81, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "de" + "'", str84, "de");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 8 + "'", int85 == 8);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1" + "'", str86, "1");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1" + "'", str87, "1");
    }

    @Test
    public void test17129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17129");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields(calendar5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalDate localDate12 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property9.addWrapFieldToCopy((int) '4');
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(79735116L, chronology15);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456252494,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=52,MILLISECOND=494,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test17130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17130");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        boolean boolean6 = property3.isLeap();
        org.joda.time.LocalTime localTime8 = property3.addCopy((long) 756);
        org.joda.time.LocalTime localTime10 = property3.addCopy(22111114);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test17131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17131");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        int int21 = dateTimeField19.getMaximumTextLength(locale20);
        int int22 = dateTimeField19.getMaximumValue();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
    }

    @Test
    public void test17132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17132");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.centuryOfEra();
        int int9 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int11 = localDateTime7.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.plusHours(47);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMinutes(39);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test17133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17133");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-21T15:01:56.563Z");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test17134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17134");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 7);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        java.util.Date date4 = dateTime3.toDate();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date4);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test17135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17135");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime8 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillisOfSecond(11);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime5.toMutableDateTime();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime5.plus(readablePeriod12);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = dateTimeField34.getAsText((long) (short) 1, locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(32L, chronology21, locale36);
        org.joda.time.DateTimeField dateTimeField39 = chronology21.minuteOfDay();
        org.joda.time.DateTime dateTime40 = dateTime13.withChronology(chronology21);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime46.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutableDateTime51.add(readableDuration52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        mutableDateTime51.add(durationFieldType55, (-1));
        org.joda.time.DateTime dateTime59 = dateTime46.withFieldAdded(durationFieldType55, (int) (byte) 1);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTime(readableInstant64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate68 = localDate66.minusMonths((int) (short) -1);
        boolean boolean70 = localDate66.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology71 = localDate66.getChronology();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology73 = chronology71.withZone(dateTimeZone72);
        org.joda.time.DateTime dateTime74 = localDate63.toDateTimeAtCurrentTime(dateTimeZone72);
        org.joda.time.DateTime dateTime75 = dateTime59.withZone(dateTimeZone72);
        int int76 = dateTime75.getYear();
        org.joda.time.DateTime dateTime78 = dateTime75.plusYears(21957119);
        int int79 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
    }

    @Test
    public void test17136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17136");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) (byte) 100);
        int int19 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.withDayOfWeek(7);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusMonths(0);
        int int29 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.minusDays(35);
        int int32 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        int int33 = localDateTime21.size();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8332629 + "'", int14 == 8332629);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test17137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17137");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getCountry();
        boolean boolean2 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test17138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17138");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((-1L), chronology1);
        int int3 = localDate2.getWeekyear();
        org.joda.time.LocalDate localDate5 = localDate2.plusWeeks(87);
        int int6 = localDate2.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate2.withMonthOfYear(283);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 283 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(localDate5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test17139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17139");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField11 = chronology7.weekyears();
        org.joda.time.DurationField durationField12 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.year();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17140");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        int int13 = property12.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.Chronology chronology37 = localDate31.getChronology();
        long long41 = chronology37.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean42 = dateTimeFieldType30.isSupported(chronology37);
        mutableDateTime27.setChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField44 = chronology37.dayOfYear();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType25.getField(chronology37);
        long long47 = dateTimeField45.remainder((long) 54117);
        long long50 = dateTimeField45.getDifferenceAsLong((long) 427, (long) (short) 100);
        int int51 = mutableDateTime14.get(dateTimeField45);
        mutableDateTime14.addSeconds(8194682);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456252668,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=52,MILLISECOND=668,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 200L + "'", long41 == 200L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 54117L + "'", long47 == 54117L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
    }

    @Test
    public void test17141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17141");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime8.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime15 = dateTime8.withDurationAdded(readableDuration13, (int) 'a');
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMonths((int) '4');
        org.joda.time.DateTime dateTime25 = dateTime23.plus((-48469999L));
        org.joda.time.DateTime dateTime27 = dateTime23.plusSeconds(2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) dateTime23, dateTimeZone40);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate47 = localDate44.withField(dateTimeFieldType45, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.DateTime dateTime49 = localDate47.toDateTime(readableInstant48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMonths((int) '4');
        org.joda.time.DateTime dateTime53 = dateTime51.plus((-48469999L));
        org.joda.time.DateTime dateTime55 = dateTime51.plusSeconds(2);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate59 = localDate56.withField(dateTimeFieldType57, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.DateTime dateTime61 = localDate59.toDateTime(readableInstant60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology67 = localDate62.getChronology();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology69 = chronology67.withZone(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate59.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((java.lang.Object) dateTime51, dateTimeZone68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone73);
        long long76 = dateTimeZone68.getMillisKeepLocal(dateTimeZone73, (long) (byte) -1);
        long long78 = dateTimeZone40.getMillisKeepLocal(dateTimeZone73, (long) 8);
        org.joda.time.DateTime dateTime79 = dateTime8.withZoneRetainFields(dateTimeZone40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter0.withZone(dateTimeZone40);
        java.util.Locale locale81 = dateTimeFormatter80.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter80.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter83 = dateTimeFormatter82.getPrinter();
        int int84 = dateTimePrinter83.estimatePrintedLength();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 8L + "'", long78 == 8L);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(dateTimePrinter83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 40 + "'", int84 == 40);
    }

    @Test
    public void test17142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17142");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.DateTime dateTime2 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test17143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17143");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        java.util.Locale locale9 = dateTimeFormatter6.getLocale();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime10.add(readableDuration12);
        mutableDateTime10.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.year();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundCeiling();
        int int21 = dateTimeFormatter6.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime18, "2022-02-21T15:02:32.679", 70);
        org.joda.time.Chronology chronology22 = dateTimeFormatter6.getChronolgy();
        java.util.Locale locale23 = dateTimeFormatter6.getLocale();
        org.joda.time.DateTimeZone dateTimeZone24 = dateTimeFormatter6.getZone();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.Chronology chronology35 = localDate29.getChronology();
        long long39 = chronology35.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean40 = dateTimeFieldType28.isSupported(chronology35);
        mutableDateTime25.setChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.dayOfYear();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.weekOfWeekyear();
        long long55 = dateTimeField52.addWrapField((long) ' ', 0);
        boolean boolean56 = dateTimeField52.isSupported();
        long long59 = dateTimeField52.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = dateTimeField52.getType();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = dateTimeField52.getAsText((long) (byte) 1, locale62);
        java.lang.String str64 = locale62.getLanguage();
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray67 = strSet66.toArray();
        java.util.Iterator<java.lang.String> strItor68 = strSet66.iterator();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate71 = localDate69.minusMonths((int) (short) -1);
        boolean boolean73 = localDate69.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology74 = localDate69.getChronology();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology76 = chronology74.withZone(dateTimeZone75);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        long long80 = dateTimeField77.addWrapField((long) ' ', 0);
        boolean boolean81 = dateTimeField77.isSupported();
        long long84 = dateTimeField77.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType85 = dateTimeField77.getType();
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.lang.String str88 = dateTimeField77.getAsText((long) (byte) 1, locale87);
        boolean boolean89 = strSet66.equals((java.lang.Object) locale87);
        java.lang.String str90 = locale87.toLanguageTag();
        java.lang.String str91 = locale62.getDisplayScript(locale87);
        java.lang.String str92 = dateTimeField42.getAsText(874, locale87);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter6.withLocale(locale87);
        boolean boolean94 = dateTimeFormatter93.isOffsetParsed();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12:00:00 AM +59:08" + "'", str7, "12:00:00 AM +59:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(locale9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-24T02:18:52.733+59:08" + "'", str11, "2022-02-24T02:18:52.733+59:08");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-71) + "'", int21 == (-71));
        org.junit.Assert.assertNull(chronology22);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 200L + "'", long39 == 200L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 32L + "'", long55 == 32L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 58665600001L + "'", long59 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "en" + "'", str64, "en");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertNotNull(strItor68);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 32L + "'", long80 == 32L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 58665600001L + "'", long84 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1" + "'", str88, "1");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "en-US" + "'", str90, "en-US");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "874" + "'", str92, "874");
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test17144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17144");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) 4406400000L, chronology7);
        org.joda.time.DurationField durationField9 = chronology7.months();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology7);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test17145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17145");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        int int3 = localDateTime2.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays((-1));
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMaximumValue();
        java.util.Date date8 = localDateTime7.toDate();
        boolean boolean10 = localDateTime7.equals((java.lang.Object) 22353637);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 24 02:28:52 GMT 2099");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test17146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17146");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        java.util.Locale locale5 = java.util.Locale.UK;
        boolean boolean6 = locale5.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayName(locale7);
        java.lang.String str9 = locale7.getDisplayScript();
        java.lang.String str12 = nameProvider0.getName(locale7, "era", "2022-02-22T06:04:55.471+15:02:03.198");
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.Chronology chronology23 = localDate17.getChronology();
        long long27 = chronology23.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean28 = dateTimeFieldType16.isSupported(chronology23);
        mutableDateTime13.setChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField30 = chronology23.dayOfYear();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        long long43 = dateTimeField40.addWrapField((long) ' ', 0);
        boolean boolean44 = dateTimeField40.isSupported();
        long long47 = dateTimeField40.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = dateTimeField40.getType();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.lang.String str51 = dateTimeField40.getAsText((long) (byte) 1, locale50);
        java.lang.String str52 = locale50.getLanguage();
        java.util.Set<java.lang.String> strSet53 = locale50.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet54 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray55 = strSet54.toArray();
        java.util.Iterator<java.lang.String> strItor56 = strSet54.iterator();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekOfWeekyear();
        long long68 = dateTimeField65.addWrapField((long) ' ', 0);
        boolean boolean69 = dateTimeField65.isSupported();
        long long72 = dateTimeField65.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField65.getType();
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.lang.String str76 = dateTimeField65.getAsText((long) (byte) 1, locale75);
        boolean boolean77 = strSet54.equals((java.lang.Object) locale75);
        java.lang.String str78 = locale75.toLanguageTag();
        java.lang.String str79 = locale50.getDisplayScript(locale75);
        java.lang.String str80 = dateTimeField30.getAsText(874, locale75);
        java.lang.String str83 = nameProvider0.getName(locale75, "Greenwich Mean Time", "GB");
        java.lang.String str84 = locale75.toLanguageTag();
        java.lang.String str85 = locale75.getDisplayLanguage();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str8, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 200L + "'", long27 == 200L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 32L + "'", long43 == 32L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 58665600001L + "'", long47 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 32L + "'", long68 == 32L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 58665600001L + "'", long72 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "en-US" + "'", str78, "en-US");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "874" + "'", str80, "874");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "en-US" + "'", str84, "en-US");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "English" + "'", str85, "English");
    }

    @Test
    public void test17147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17147");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object obj2 = null;
        boolean boolean3 = strSet1.contains(obj2);
        java.util.Iterator<java.lang.String> strItor4 = strSet1.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strItor4);
    }

    @Test
    public void test17148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17148");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        java.lang.String str13 = property10.getAsString();
        org.joda.time.DateTime dateTime14 = property10.withMaximumValue();
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfDay();
        org.joda.time.DateTime.Property property16 = dateTime14.weekOfWeekyear();
        org.joda.time.DateTime dateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundCeilingCopy();
        int int19 = dateTime18.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 292278993 + "'", int19 == 292278993);
    }

    @Test
    public void test17149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17149");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        mutableDateTime8.setMillis((long) 54110102);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        mutableDateTime8.add(durationFieldType15, 21986118);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime8.copy();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:52.825+59:08" + "'", str1, "2022-02-24T02:18:52.825+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test17150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17150");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 2022);
        int int2 = localDate1.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight3 = localDate1.toDateMidnight();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test17151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17151");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime9.toMutableDateTime();
        org.joda.time.LocalDate localDate11 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime13 = dateTime9.withWeekyear(54112611);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(23);
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test17152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17152");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(43);
        java.lang.String str2 = dateTimeZone1.getID();
        java.lang.String str4 = dateTimeZone1.getName((long) 22102453);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.043" + "'", str2, "+00:00:00.043");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.043" + "'", str4, "+00:00:00.043");
    }

    @Test
    public void test17153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17153");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        java.lang.String str3 = localDateTime0.toString();
        java.util.Date date4 = localDateTime0.toDate();
        int int5 = localDateTime0.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minusDays((-212879));
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8332870 + "'", int2 == 8332870);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-24T02:18:52.870" + "'", str3, "2022-02-24T02:18:52.870");
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Feb 24 02:18:52 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test17154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17154");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2:16:00 AM ");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2:16:00 AM \" is malformed at \":16:00 AM \"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17155");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfSecond(0);
        boolean boolean13 = dateTime11.isBefore((long) 20);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1969);
        org.joda.time.DateTime dateTime17 = dateTime11.withMillisOfDay(54133104);
        org.joda.time.DateTime.Property property18 = dateTime11.millisOfDay();
        org.joda.time.DateTime dateTime19 = property18.withMaximumValue();
        org.joda.time.DateTime.Property property20 = dateTime19.year();
        org.joda.time.DateTime dateTime21 = property20.roundCeilingCopy();
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(21996000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime23.withCenturyOfEra(8146661);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8146661 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test17156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17156");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        long long8 = mutableDateTime7.getMillis();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime7.copy();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime dateTime21 = property20.withMinimumValue();
        org.joda.time.DateTime dateTime22 = property20.getDateTime();
        java.lang.String str23 = property20.getAsString();
        org.joda.time.DateTime dateTime24 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((-428));
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) dateTime26);
        int int28 = dateTime26.getWeekOfWeekyear();
        int int29 = dateTime26.getMonthOfYear();
        org.joda.time.DateTime.Property property30 = dateTime26.year();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:52.917+59:08" + "'", str1, "2022-02-24T02:18:52.917+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-62135809680000L) + "'", long8 == (-62135809680000L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test17157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17157");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology10.getZone();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.LocalDate localDate21 = localDate19.withYearOfEra(54131261);
        org.joda.time.LocalDate localDate23 = localDate19.minusDays(4);
        org.joda.time.LocalDate localDate25 = localDate19.withDayOfYear(31);
        org.joda.time.LocalDate localDate27 = localDate19.plusDays(21888676);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDate localDate30 = localDate27.withPeriodAdded(readablePeriod28, 54141456);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test17158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17158");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("2022-02-21T15:02:24.490Z");
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        mutableDateTime2.add(readablePeriod3, 1969);
        mutableDateTime2.addSeconds(86399999);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.centuryOfEra();
        long long9 = property8.remainder();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.getMutableDateTime();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        java.lang.String str19 = chronology17.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.centuryOfEra();
        org.joda.time.DurationField durationField22 = chronology17.centuries();
        org.joda.time.DateTime dateTime23 = mutableDateTime10.toDateTime(chronology17);
        org.joda.time.DurationField durationField24 = chronology17.months();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology17.millisOfDay();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((java.lang.Object) "0003-06-21T16:36:52.410+15:02:03.198", chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1423904256510L) + "'", long9 == (-1423904256510L));
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test17159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17159");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        org.joda.time.DateTime dateTime5 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.DateTimeFormat.longTime();
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withPivotYear(21883);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withOffsetParsed();
        java.lang.StringBuffer stringBuffer12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Calendar calendar17 = mutableDateTime13.toCalendar(locale16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        mutableDateTime13.setMillis(readableInstant22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime13.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.Chronology chronology33 = localDate27.getChronology();
        long long37 = chronology33.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean38 = dateTimeFieldType26.isSupported(chronology33);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.weekyearOfCentury();
        org.joda.time.DurationField durationField40 = chronology33.halfdays();
        mutableDateTime13.setChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField42 = chronology33.hourOfHalfday();
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(stringBuffer12, (org.joda.time.ReadablePartial) localDate43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12:00:00 AM +59:08" + "'", str7, "12:00:00 AM +59:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645456252958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=52,MILLISECOND=958,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 200L + "'", long37 == 200L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate43);
    }

    @Test
    public void test17160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17160");
        java.lang.String[] strArray20 = new java.lang.String[] { "2022-02-21T15:02:02.963Z", "2022-02-21T15:02:10.158Z", "2022-02-21T15:02:13.131Z", "zh-CN", "minutes", "2022-02-21T15:02:13.192Z", "DurationField[minutes]", "0003-06-21T15:02:14.891Z", "1970", "2022-02-21T15:02:22.666Z", "1983-05-23T15:12:28.264", "CN", "months", "Property[year]", "2022-02-21T15:02:01.240Z", "2022-02-21T15:02:20.375Z", "chinois (Chine)", "0001-01-01T00:00:00.000Z", "2022-02-21T15:02:03.371Z", "2022-02-21T15:02:30.672Z" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.util.Spliterator<java.lang.String> strSpliterator23 = strSet21.spliterator();
        boolean boolean25 = strSet21.add("ISOChronology[UTC]");
        java.util.Collection<java.util.Locale.LanguageRange> languageRangeCollection26 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = strSet21.retainAll(languageRangeCollection26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test17161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17161");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        org.joda.time.DateTime dateTime18 = dateTime5.withFieldAdded(durationFieldType14, (int) (byte) 1);
        int int19 = dateTime5.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime5.minusHours(100);
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfDay();
        int int23 = dateTime21.getSecondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime21.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = property24.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8332 + "'", int19 == 8332);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test17162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17162");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        mutableDateTime4.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime4.property(dateTimeFieldType9);
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundHalfEven();
        mutableDateTime11.setHourOfDay(2);
        org.joda.time.DateTime dateTime14 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime0.plusDays(24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury(707);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 707 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17163");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate11.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone20);
        org.joda.time.Instant instant24 = mutableDateTime23.toInstant();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.Chronology chronology31 = localDate25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.hourOfDay();
        mutableDateTime23.setChronology(chronology31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime23.property(dateTimeFieldType34);
        org.joda.time.LocalDate.Property property37 = localDate0.property(dateTimeFieldType34);
        org.joda.time.LocalDate localDate38 = property37.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Calendar calendar43 = mutableDateTime39.toCalendar(locale42);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.fromCalendarFields(calendar43);
        org.joda.time.LocalDate.Property property45 = localDate44.weekOfWeekyear();
        org.joda.time.Interval interval46 = localDate44.toInterval();
        org.joda.time.LocalDate localDate48 = localDate44.withWeekyear(21989389);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((java.lang.Object) localDate38, chronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNull(durationFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645456253008,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=8,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test17164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17164");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate19 = localDate16.withField(dateTimeFieldType17, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDate19.toDateTime(readableInstant20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime21.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        int int32 = property25.compareTo((org.joda.time.ReadablePartial) localDate26);
        int int33 = localDate26.getMonthOfYear();
        int int34 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate26);
        org.joda.time.LocalDate.Property property35 = localDate15.weekOfWeekyear();
        org.joda.time.LocalDate localDate36 = property35.getLocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusDays(22121579);
        org.joda.time.LocalDate localDate40 = localDate36.minusMonths(14);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
    }

    @Test
    public void test17165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17165");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalTime localTime10 = localTime6.withField(dateTimeFieldType7, 0);
        org.joda.time.LocalTime localTime12 = localTime6.plusMinutes((int) ' ');
        int int13 = localTime6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
    }

    @Test
    public void test17166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17166");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Calendar calendar22 = mutableDateTime18.toCalendar(locale21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromCalendarFields(calendar22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromCalendarFields(calendar22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        int int27 = localDate24.indexOf(dateTimeFieldType25);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime17.property(dateTimeFieldType25);
        int int29 = mutableDateTime17.getMillisOfSecond();
        int int30 = property6.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(40);
        mutableDateTime17.setZoneRetainFields(dateTimeZone32);
        mutableDateTime17.setDate(1645456205018L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645456253058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 58 + "'", int29 == 58);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
    }

    @Test
    public void test17167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17167");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator1 = strSet0.spliterator();
        boolean boolean2 = strSet0.isEmpty();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Calendar calendar7 = mutableDateTime3.toCalendar(locale6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        mutableDateTime3.setMillis(readableInstant12);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime3.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17);
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.util.Calendar calendar20 = mutableDateTime16.toCalendar(locale19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        mutableDateTime16.setMillis(readableInstant25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths((int) '4');
        org.joda.time.DateTime dateTime37 = dateTime35.plus((-48469999L));
        org.joda.time.DateTime dateTime39 = dateTime35.plusSeconds(2);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology53 = chronology51.withZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = localDate43.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) dateTime35, dateTimeZone52);
        mutableDateTime16.setZone(dateTimeZone52);
        mutableDateTime3.setZone(dateTimeZone52);
        boolean boolean58 = strSet0.equals((java.lang.Object) dateTimeZone52);
        java.util.Set<java.lang.String> strSet59 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray60 = strSet59.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.lang.String[] strArray65 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.lang.String str68 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strList66);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream69 = languageRangeList62.stream();
        boolean boolean70 = strSet59.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62);
        boolean boolean71 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62);
        java.util.Set<java.lang.String> strSet72 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray73 = strSet72.toArray();
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet72);
        java.util.Collection<java.util.Locale.LanguageRange> languageRangeCollection75 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = strSet72.removeAll(languageRangeCollection75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSpliterator1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645456253078,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=78,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645456253078,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=78,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[2022-02-22T06:06:16.016+15:02:03.198]");
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(languageRangeStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test17168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17168");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundCeiling();
        java.lang.String str10 = mutableDateTime9.toString();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime9.add(readablePeriod12, 98);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.add(22078751);
        mutableDateTime17.addWeeks(22028094);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:53.133+59:08" + "'", str1, "2022-02-24T02:18:53.133+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0001-01-01T00:00:00.000+59:08" + "'", str10, "0001-01-01T00:00:00.000+59:08");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test17169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17169");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456253146,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=146,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test17170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17170");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.months();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        boolean boolean13 = locale10.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 40079999, chronology7, locale10);
        java.util.Locale.setDefault(locale10);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Italy" + "'", str12, "Italy");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test17171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17171");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.plusHours(54130);
        org.joda.time.LocalTime.Property property8 = localTime7.millisOfDay();
        org.joda.time.LocalTime localTime10 = localTime7.minusMillis(54133104);
        org.joda.time.LocalTime.Property property11 = localTime7.millisOfSecond();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.LocalTime localTime13 = property11.roundCeilingCopy();
        org.joda.time.LocalTime localTime15 = property11.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime16 = property11.roundCeilingCopy();
        java.lang.String str17 = property11.getAsString();
        org.joda.time.LocalTime localTime18 = property11.withMaximumValue();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456253170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "170" + "'", str17, "170");
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test17172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17172");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField13 = chronology5.minuteOfHour();
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField15 = chronology5.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField16 = chronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology5.millis();
        int int20 = durationField18.getValue((long) 21942017);
        long long23 = durationField18.getValueAsLong((long) 21966328, (long) 545);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21942017 + "'", int20 == 21942017);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 21966328L + "'", long23 == 21966328L);
    }

    @Test
    public void test17173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17173");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T06:07:08.555+15:02:03.198");
        java.lang.Object obj2 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test17174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17174");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(13368077654400000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = localTime1.withSecondOfMinute(22046255);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22046255 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17175");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField28 = chronology7.monthOfYear();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate32 = localDate29.withField(dateTimeFieldType30, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDate32.toDateTime(readableInstant33);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTime dateTime37 = dateTime34.withWeekyear((int) (byte) 1);
        int int38 = dateTime37.getMillisOfSecond();
        org.joda.time.DateTime dateTime40 = dateTime37.minusMillis(54112611);
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime37.toYearMonthDay();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.Chronology chronology49 = localDate43.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.seconds();
        java.lang.String str51 = chronology49.toString();
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now(chronology49);
        org.joda.time.DateTimeField dateTimeField53 = chronology49.weekyear();
        java.lang.String str54 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology49.dayOfWeek();
        long long58 = dateTimeField55.addWrapField((long) (-21980), 54133701);
        long long60 = dateTimeField55.roundCeiling(690692310403200000L);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate63 = localDate61.minusMonths((int) (short) -1);
        boolean boolean65 = localDate61.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate67 = localDate61.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property68 = localDate61.yearOfEra();
        org.joda.time.LocalDate localDate69 = property68.roundFloorCopy();
        org.joda.time.LocalDate localDate70 = property68.roundFloorCopy();
        int int71 = localDate70.getEra();
        int[] intArray72 = localDate70.getValues();
        org.joda.time.LocalDate localDate74 = localDate70.withCenturyOfEra((int) '#');
        org.joda.time.ReadablePeriod readablePeriod75 = null;
        org.joda.time.LocalDate localDate76 = localDate74.minus(readablePeriod75);
        int[] intArray77 = new int[] {};
        int int78 = dateTimeField55.getMaximumValue((org.joda.time.ReadablePartial) localDate74, intArray77);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField28.set((org.joda.time.ReadablePartial) yearMonthDay41, 830, intArray77, 846);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 846 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 210 + "'", int38 == 210);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[UTC]" + "'", str54, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-86421980L) + "'", long58 == (-86421980L));
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 690692310403200000L + "'", long60 == 690692310403200000L);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[2022, 1, 1]");
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 7 + "'", int78 == 7);
    }

    @Test
    public void test17176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17176");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.Interval interval46 = localDate27.toInterval(dateTimeZone40);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        java.util.Date date60 = dateTime59.toDate();
        java.util.Date date61 = dateTime59.toDate();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63);
        mutableDateTime62.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime62.property(dateTimeFieldType67);
        org.joda.time.DateTime.Property property69 = dateTime59.property(dateTimeFieldType67);
        org.joda.time.DateTime dateTime71 = dateTime59.plusWeeks(54152679);
        org.joda.time.DateTime dateTime73 = dateTime71.withWeekyear(8172523);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Sat Jun 23 12:52:00 GMT 3");
        org.junit.Assert.assertNotNull(date61);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Sat Jun 23 12:52:00 GMT 3");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test17177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17177");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
    }

    @Test
    public void test17178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17178");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-45359968L));
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(54150465);
        org.joda.time.LocalTime localTime5 = localTime3.minusMillis(54148380);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours(21886805);
        org.joda.time.LocalTime localTime9 = localTime5.plusHours(98);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test17179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17179");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.dayOfMonth();
        int int18 = dateTimeField17.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test17180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17180");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime7.minusDays(8);
        org.joda.time.DateTime.Property property30 = dateTime7.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime7.minus(readablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime7.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime7.withTime(0, 54152679, 8197104, 8330211);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54152679 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
    }

    @Test
    public void test17181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17181");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDurationAdded(readableDuration2, 54128391);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYearOfEra(24);
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test17182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17182");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.Chronology chronology13 = localDate7.getChronology();
        long long17 = chronology13.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean18 = dateTimeFieldType6.isSupported(chronology13);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology13, locale19);
        java.lang.String str21 = locale19.getLanguage();
        java.lang.String str24 = nameProvider0.getName(locale19, "zh", "2022-02-21T15:02:25.259Z");
        java.util.Locale locale25 = null;
        java.lang.String str28 = nameProvider0.getName(locale25, "0003-06-22T06:04:46.339+15:02:03.198", "23:59:59.999");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate30.withYear((int) (byte) 1);
        java.lang.String str37 = dateTimeFormatter29.print((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.Chronology chronology45 = localDate39.getChronology();
        long long49 = chronology45.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean50 = dateTimeFieldType38.isSupported(chronology45);
        java.lang.String str51 = dateTimeFieldType38.toString();
        boolean boolean52 = localDate36.isSupported(dateTimeFieldType38);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = localDate36.toString("52", locale54);
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale54);
        java.lang.String str60 = nameProvider0.getShortName(locale54, "0052-02-22T06:04:43.200+15:02:03.198", "February 21, -0001");
        java.util.Locale locale62 = new java.util.Locale("22");
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str66 = nameProvider0.getShortName(locale62, "2022-02-22T06:06:17.924+15:02:03.198", "2022-02-21T15:05:11.451+00:00:00.035");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 200L + "'", long17 == 200L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fr" + "'", str21, "fr");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str37, "\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 200L + "'", long49 == 200L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "millisOfSecond" + "'", str51, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "52" + "'", str55, "52");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertEquals(locale62.toString(), "22");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "22" + "'", str63, "22");
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test17183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17183");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withDefaultYear(627);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(21880119);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withZone(dateTimeZone13);
        boolean boolean15 = dateTimeFormatter9.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e0a\u534811:09" + "'", str4, "\u4e0a\u534811:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test17184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17184");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology5.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology5.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology5.getZone();
        int int14 = dateTimeZone12.getOffset(13256855539200000L);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test17185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17185");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter0.withPivotYear(9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter10.withZoneUTC();
        boolean boolean12 = dateTimeFormatter10.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withZoneUTC();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.months();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        int int26 = localDate25.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone27);
        org.joda.time.Chronology chronology30 = chronology20.withZone(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(1000L, chronology30);
        org.joda.time.Instant instant32 = mutableDateTime31.toInstant();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate39 = localDate33.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        mutableDateTime31.setChronology(chronology40);
        int int43 = mutableDateTime31.getMillisOfDay();
        int int44 = mutableDateTime31.getWeekOfWeekyear();
        java.lang.String str45 = mutableDateTime31.toString();
        int int48 = dateTimeFormatter13.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime31, "2022-02-22T06:04:41.267+15:02:03.198", 174);
        mutableDateTime31.addMillis(174);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime31.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime31.setHourOfDay(54123);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54123 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1000 + "'", int43 == 1000);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:01.000Z" + "'", str45, "1970-01-01T00:00:01.000Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-175) + "'", int48 == (-175));
        org.junit.Assert.assertNotNull(mutableDateTime51);
    }

    @Test
    public void test17186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17186");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.withDayOfYear(8);
        org.joda.time.LocalDate localDate9 = localDate7.withYear(7);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime23.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        mutableDateTime28.add(durationFieldType32, (-1));
        org.joda.time.DateTime dateTime36 = dateTime23.withFieldAdded(durationFieldType32, (int) (byte) 1);
        boolean boolean37 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime36.minusMillis((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime36.withDurationAdded(readableDuration40, 54132);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutableDateTime43.add(readableDuration44);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Calendar calendar47 = mutableDateTime43.toCalendar(locale46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        mutableDateTime43.setMillis(readableInstant52);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime43.weekyear();
        java.lang.Object obj56 = mutableDateTime43.clone();
        org.joda.time.Chronology chronology57 = mutableDateTime43.getChronology();
        org.joda.time.DateTime dateTime58 = dateTime42.toDateTime(chronology57);
        boolean boolean59 = localDate7.equals((java.lang.Object) dateTime42);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645456253547,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=547,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "2022-02-24T02:18:53.547+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "2022-02-24T02:18:53.547+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "2022-02-24T02:18:53.547+59:08");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test17187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17187");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        org.joda.time.MutableDateTime mutableDateTime15 = property12.set("1", locale14);
        mutableDateTime15.setDayOfMonth(15);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.millisOfDay();
        mutableDateTime15.setWeekyear(21993726);
        mutableDateTime15.setMillisOfDay(54551861);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456253580,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=580,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test17188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17188");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.Integer int3 = dateTimeFormatter0.getPivotYear();
        boolean boolean4 = dateTimeFormatter0.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        java.lang.String str6 = mutableDateTime5.toString();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime5.add(readableDuration7);
        mutableDateTime5.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.year();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime14 = property11.roundHalfEven();
        int int17 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime14, "2022-02-22T06:05:56.952+15:02:03.198", (-3628810));
        mutableDateTime14.setMillisOfDay(100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.dayOfMonth();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        long long32 = dateTimeField29.addWrapField((long) ' ', 0);
        boolean boolean33 = dateTimeField29.isSupported();
        long long36 = dateTimeField29.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = dateTimeField29.getType();
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.lang.String str40 = dateTimeField29.getAsText((long) (byte) 1, locale39);
        java.lang.String str41 = locale39.getCountry();
        java.util.Locale.setDefault(locale39);
        java.util.Locale locale43 = locale39.stripExtensions();
        java.lang.String str44 = property20.getAsText(locale43);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-24T02:18:53.592+59:08" + "'", str6, "2022-02-24T02:18:53.592+59:08");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3628810) + "'", int17 == (-3628810));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32L + "'", long32 == 32L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 58665600001L + "'", long36 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1" + "'", str44, "1");
    }

    @Test
    public void test17189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17189");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        java.lang.String str10 = property4.getAsText(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder12 = builder0.clearExtensions();
        java.util.Locale.Builder builder13 = builder12.clearExtensions();
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Calendar calendar23 = mutableDateTime19.toCalendar(locale22);
        java.lang.String str24 = property18.getAsText(locale22);
        java.util.Locale.Builder builder25 = builder14.setLocale(locale22);
        java.util.Locale.Builder builder26 = builder14.clearExtensions();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale locale28 = builder27.build();
        java.util.Locale.Builder builder29 = builder13.setLocale(locale28);
        java.util.Locale locale30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder29.setLocale(locale30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456253624,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=624,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645456253624,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=624,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test17190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17190");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDateTime();
        int int1 = dateTimeFormatter0.getDefaultYear();
        boolean boolean2 = dateTimeFormatter0.isPrinter();
        org.joda.time.Chronology chronology3 = dateTimeFormatter0.getChronolgy();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone42);
        long long45 = dateTimeZone37.getMillisKeepLocal(dateTimeZone42, (long) (byte) -1);
        boolean boolean46 = dateTimeZone42.isFixed();
        org.joda.time.Chronology chronology47 = chronology9.withZone(dateTimeZone42);
        org.joda.time.DurationField durationField48 = chronology47.weekyears();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter0.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.minuteOfHour();
        org.joda.time.DurationField durationField51 = chronology47.millis();
        long long55 = chronology47.add((-1708655110588800000L), 58665600001L, 333);
        org.joda.time.DateTimeField dateTimeField56 = chronology47.secondOfDay();
        int int58 = dateTimeField56.getMinimumValue((long) 21957666);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2000 + "'", int1 == 2000);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1708635574943999667L) + "'", long55 == (-1708635574943999667L));
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test17191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17191");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        long long63 = dateTimeZone55.convertLocalToUTC((long) 80, false);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str66 = dateTimeZone55.getShortName((-53L));
        long long68 = dateTimeZone55.nextTransition(3628810373L);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        java.lang.String str71 = dateTimeZone55.getName(48L);
        org.joda.time.LocalDate localDate72 = org.joda.time.LocalDate.now(dateTimeZone55);
        org.joda.time.LocalDate.Property property73 = localDate72.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-212879920L) + "'", long63 == (-212879920L));
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+59:08" + "'", str66, "+59:08");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 3628810373L + "'", long68 == 3628810373L);
        org.junit.Assert.assertNotNull(mutableDateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+59:08" + "'", str71, "+59:08");
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test17192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17192");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology7.add(readablePeriod9, (long) (short) 100, 54113391);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.hourOfDay();
        org.joda.time.DurationField durationField14 = dateTimeField13.getRangeDurationField();
        long long17 = durationField14.getMillis(1020374446L, (long) 62001);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L + "'", long12 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 88160352134400000L + "'", long17 == 88160352134400000L);
    }

    @Test
    public void test17193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17193");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        int int9 = localDate6.indexOf(dateTimeFieldType7);
        int int10 = localDate6.getYearOfEra();
        org.joda.time.LocalDate localDate12 = localDate6.withDayOfYear(53);
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.LocalDate localDate15 = localDate12.plusWeeks(21984605);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 83);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.millisOfDay();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime17.add(readableDuration21);
        boolean boolean23 = localDate12.equals((java.lang.Object) readableDuration21);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456253703,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=703,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test17194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17194");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField13 = chronology11.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = durationField13.add((long) 22075807, 8202510);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test17195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17195");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        int int9 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property11.addWrapFieldToCopy(54152679);
        org.joda.time.LocalDateTime localDateTime14 = property11.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYear(49);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withField(dateTimeFieldType26, 0);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        int int31 = localDateTime29.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusYears((int) (byte) 100);
        int int36 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime28.plus(readableDuration37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.yearOfEra();
        int int43 = localDateTime41.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime41.withPeriodAdded(readablePeriod44, 2022);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.era();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.minuteOfHour();
        int int49 = property48.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime50 = property48.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean52 = localDateTime50.isSupported(dateTimeFieldType51);
        boolean boolean53 = localDateTime40.isSupported(dateTimeFieldType51);
        boolean boolean54 = localDateTime14.isSupported(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8333725 + "'", int9 == 8333725);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8333725 + "'", int31 == 8333725);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8333725 + "'", int43 == 8333725);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 59 + "'", int49 == 59);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test17196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17196");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) '4');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMillis(54127672);
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfWeek(6);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minus(readablePeriod13);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test17197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17197");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setTime((long) (-1));
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.Chronology chronology13 = localDate7.getChronology();
        long long17 = chronology13.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekOfWeekyear();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.lang.String str29 = dateTimeField26.getAsText((long) (short) 1, locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket(32L, chronology13, locale28);
        dateTimeParserBucket30.setOffset(54111610);
        long long35 = dateTimeParserBucket30.computeMillis(false, "Property[millisOfDay]");
        long long37 = dateTimeParserBucket30.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeParserBucket30.getZone();
        int int40 = dateTimeZone38.getOffsetFromLocal((long) 70);
        mutableDateTime0.setZoneRetainFields(dateTimeZone38);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate45 = localDate42.withField(dateTimeFieldType43, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDate45.toDateTime(readableInstant46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMonths((int) '4');
        org.joda.time.DateTime dateTime51 = dateTime47.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime47.withMillisOfSecond(0);
        org.joda.time.DateTime dateTime55 = dateTime47.plusHours((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime47.plusWeeks(21952066);
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(70022L, 54132302);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTime dateTime62 = dateTime57.plus(readableDuration61);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:53.768+59:08" + "'", str1, "2022-02-24T02:18:53.768+59:08");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 200L + "'", long17 == 200L);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-54111578L) + "'", long35 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-54111578L) + "'", long37 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test17198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17198");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(21930300, 712, 22134163, 760, 22065442, 3521, 22143262);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 760 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17199");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.Interval interval46 = localDate27.toInterval(dateTimeZone40);
        org.joda.time.LocalDate localDate48 = localDate27.withYearOfCentury((int) (short) 10);
        org.joda.time.LocalDate localDate50 = localDate27.plusYears(47);
        org.joda.time.DateTime dateTime51 = localDate27.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property52 = localDate27.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate54 = localDate27.withDayOfWeek(709);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 709 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test17200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17200");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField28.getAsText((long) (short) 1, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(32L, chronology15, locale30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((-48469999L));
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds(2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateTime40, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone62);
        long long65 = dateTimeZone57.getMillisKeepLocal(dateTimeZone62, (long) (byte) -1);
        dateTimeParserBucket32.setZone(dateTimeZone62);
        java.util.Locale locale67 = dateTimeParserBucket32.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter0.withLocale(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withPivotYear(524);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter68.withDefaultYear(54129);
        boolean boolean73 = dateTimeFormatter68.isPrinter();
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate77 = localDate74.withField(dateTimeFieldType75, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.DateTime dateTime79 = localDate77.toDateTime(readableInstant78);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        org.joda.time.DateTime dateTime82 = dateTime79.withWeekyear((int) (byte) 1);
        int int83 = dateTime82.getYearOfEra();
        int int84 = dateTime82.getYearOfCentury();
        java.lang.String str85 = dateTimeFormatter68.print((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean86 = dateTimeFormatter68.isOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone87 = dateTimeFormatter68.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e0a\u534811:09" + "'", str4, "\u4e0a\u534811:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u4e0a\u53482:18" + "'", str85, "\u4e0a\u53482:18");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(dateTimeZone87);
    }

    @Test
    public void test17201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17201");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(2);
        org.joda.time.LocalDate localDate16 = localDate12.withYearOfEra(21887627);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str18 = dateTimeFieldType17.getName();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.Chronology chronology29 = localDate23.getChronology();
        long long33 = chronology29.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean34 = dateTimeFieldType22.isSupported(chronology29);
        mutableDateTime19.setChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.dayOfYear();
        java.lang.String str37 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField38 = chronology29.millisOfDay();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType17.getField(chronology29);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.LocalDate localDate45 = localDate40.minusYears((int) ' ');
        org.joda.time.LocalDate localDate47 = localDate45.plusWeeks(54129);
        int int48 = dateTimeField39.getMaximumValue((org.joda.time.ReadablePartial) localDate45);
        int int49 = localDate16.compareTo((org.joda.time.ReadablePartial) localDate45);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTime(readableInstant54);
        org.joda.time.Chronology chronology56 = dateTime55.getChronology();
        org.joda.time.DateTime dateTime58 = dateTime55.withWeekyear((int) (byte) 1);
        int int59 = dateTime58.getMillisOfSecond();
        org.joda.time.DateTime dateTime61 = dateTime58.minusMillis(54112611);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate64 = localDate62.minusMonths((int) (short) -1);
        boolean boolean66 = localDate62.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate68 = localDate62.withYearOfCentury(2);
        boolean boolean69 = dateTime58.equals((java.lang.Object) localDate68);
        org.joda.time.LocalDate localDate71 = localDate68.plusWeeks(568);
        org.joda.time.LocalDate localDate72 = localDate16.withFields((org.joda.time.ReadablePartial) localDate68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate74 = localDate68.withWeekOfWeekyear(41999999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41999999 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "dayOfWeek" + "'", str18, "dayOfWeek");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 200L + "'", long33 == 200L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 847 + "'", int59 == 847);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
    }

    @Test
    public void test17202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17202");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.lang.String str5 = mutableDateTime0.toString();
        mutableDateTime0.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime0.copy();
        mutableDateTime0.addHours((int) '#');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime0.millisOfDay();
        int int12 = mutableDateTime0.getDayOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(0L);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        mutableDateTime15.add(readablePeriod16, 21962000);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456253863,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=863,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-24T02:18:53.863+59:08" + "'", str5, "2022-02-24T02:18:53.863+59:08");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 154 + "'", int12 == 154);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test17203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17203");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDurationAdded(readableDuration12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.minusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plusSeconds(86399999);
        java.lang.String str19 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter0.getPrinter();
        java.lang.Integer int21 = dateTimeFormatter0.getPivotYear();
        boolean boolean22 = dateTimeFormatter0.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "87-2-20" + "'", str19, "87-2-20");
        org.junit.Assert.assertNotNull(dateTimePrinter20);
        org.junit.Assert.assertNull(int21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test17204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17204");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        mutableDateTime0.setChronology(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime0.millisOfDay();
        mutableDateTime0.setDate((long) 54115634);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime0.millisOfSecond();
        int int19 = property18.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.addWrapField(365);
        java.lang.Object obj22 = mutableDateTime21.clone();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1970-01-04T02:18:53.247+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-04T02:18:53.247+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-04T02:18:53.247+59:08");
    }

    @Test
    public void test17205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17205");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField45 = chronology6.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (-175), chronology6);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime46.setDayOfMonth(54568137);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54568137 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test17206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17206");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate9 = localDate3.withYear((int) (byte) 1);
        java.lang.String str10 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        long long22 = chronology18.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean23 = dateTimeFieldType11.isSupported(chronology18);
        java.lang.String str24 = dateTimeFieldType11.toString();
        boolean boolean25 = localDate9.isSupported(dateTimeFieldType11);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = localDate9.toString("52", locale27);
        java.util.Locale.Builder builder29 = builder0.setLocale(locale27);
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder31 = builder0.setLocale(locale30);
        java.util.Locale locale32 = builder31.build();
        java.util.Locale.Builder builder33 = builder31.clear();
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale.Builder builder36 = builder34.setLanguage("");
        java.util.Locale.Builder builder38 = builder34.addUnicodeLocaleAttribute("eng");
        java.util.Locale.Builder builder39 = builder38.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder38.removeUnicodeLocaleAttribute("2022-02-21T15:08:32.162+00:00:00.035");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-21T15:08:32.162+00:00:00.035 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str10, "\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 200L + "'", long22 == 200L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "millisOfSecond" + "'", str24, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test17207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17207");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        org.joda.time.DateTime dateTime19 = dateTime6.withFieldAdded(durationFieldType15, (int) (byte) 1);
        mutableDateTime0.add(durationFieldType15, 86399999);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime27.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTime();
        org.joda.time.LocalDate localDate33 = dateTime31.toLocalDate();
        boolean boolean34 = mutableDateTime0.equals((java.lang.Object) dateTime31);
        org.joda.time.DateTime.Property property35 = dateTime31.centuryOfEra();
        org.joda.time.DateTime dateTime36 = property35.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test17208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17208");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Calendar calendar24 = mutableDateTime20.toCalendar(locale23);
        java.lang.String str25 = mutableDateTime20.toString();
        mutableDateTime20.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime20.copy();
        int int29 = mutableDateTime20.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime20.centuryOfEra();
        mutableDateTime20.addYears(54115116);
        int int33 = mutableDateTime20.getHourOfDay();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime20.toMutableDateTime(dateTimeZone40);
        int int44 = property18.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime mutableDateTime46 = property18.add(385);
        boolean boolean48 = mutableDateTime46.isEqual((long) 8147071);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645456253957,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=53,MILLISECOND=957,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-24T02:18:53.957+59:08" + "'", str25, "2022-02-24T02:18:53.957+59:08");
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test17209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17209");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        int int10 = localDate9.getEra();
        int[] intArray11 = localDate9.getValues();
        org.joda.time.LocalDate localDate13 = localDate9.withCenturyOfEra((int) '#');
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDate localDate15 = localDate13.minus(readablePeriod14);
        org.joda.time.LocalDate localDate17 = localDate13.withWeekyear(22085044);
        org.joda.time.LocalDate localDate19 = localDate13.plusDays(25);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime25.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property30 = dateTime28.property(dateTimeFieldType29);
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.Chronology chronology38 = localDate32.getChronology();
        long long42 = chronology38.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime43 = dateTime31.toDateTime(chronology38);
        org.joda.time.DateTime.Property property44 = dateTime43.era();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        java.lang.String str46 = mutableDateTime45.toString();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        mutableDateTime47.add(durationFieldType51, (-1));
        mutableDateTime45.add(durationFieldType51, 10);
        org.joda.time.DateTime dateTime57 = dateTime43.withFieldAdded(durationFieldType51, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate59 = localDate13.withFieldAdded(durationFieldType51, (-71));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 1, 1]");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 200L + "'", long42 == 200L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-24T02:18:53.981+59:08" + "'", str46, "2022-02-24T02:18:53.981+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test17210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17210");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        boolean boolean8 = durationField7.isSupported();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test17211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17211");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        int int9 = dateTime8.getMillisOfSecond();
        org.joda.time.DateTime dateTime11 = dateTime8.minusMillis(54112611);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate18 = localDate12.withYearOfCentury(2);
        boolean boolean19 = dateTime8.equals((java.lang.Object) localDate18);
        org.joda.time.LocalDate localDate21 = localDate18.plusWeeks(568);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        java.lang.String str23 = mutableDateTime22.toString();
        mutableDateTime22.setYear(8);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime22.add(readablePeriod26, (int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.Chronology chronology37 = localDate31.getChronology();
        long long41 = chronology37.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean42 = dateTimeFieldType30.isSupported(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType29.getField(chronology37);
        int int44 = mutableDateTime22.get(dateTimeFieldType29);
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localDate18.get(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 15 + "'", int9 == 15);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-24T02:18:54.015+59:08" + "'", str23, "2022-02-24T02:18:54.015+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 200L + "'", long41 == 200L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeField43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 15 + "'", int44 == 15);
    }

    @Test
    public void test17212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17212");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        java.lang.String str10 = dateTimeZone9.getID();
        long long12 = dateTimeZone9.nextTransition(80L);
        org.joda.time.DateTime dateTime13 = localDate2.toDateTimeAtStartOfDay(dateTimeZone9);
        java.util.TimeZone timeZone14 = dateTimeZone9.toTimeZone();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology24 = chronology22.withZone(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.months();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        int int28 = localDate27.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay(dateTimeZone29);
        org.joda.time.Chronology chronology32 = chronology22.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField33 = chronology32.millis();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology32.centuries();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.Chronology chronology38 = chronology32.withZone(dateTimeZone37);
        org.joda.time.DurationField durationField39 = chronology32.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology32.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((java.lang.Object) property16, chronology32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+15:02:03.198" + "'", str10, "+15:02:03.198");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 80L + "'", long12 == 80L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+15:02");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test17213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17213");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(43);
        java.lang.String str2 = dateTimeZone1.getID();
        boolean boolean3 = dateTimeZone1.isFixed();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = localTime4.withMillisOfSecond(54615371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54615371 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.043" + "'", str2, "+00:00:00.043");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test17214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17214");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.setHourOfDay((int) (byte) 0);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        long long14 = dateTimeField11.addWrapField((long) ' ', 0);
        boolean boolean15 = dateTimeField11.isSupported();
        long long18 = dateTimeField11.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField11.getType();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.lang.String str22 = dateTimeField11.getAsText((long) (byte) 1, locale21);
        long long24 = dateTimeField11.roundHalfEven((long) 3);
        mutableDateTime0.setRounding(dateTimeField11);
        int int26 = dateTimeField11.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        java.lang.String str34 = mutableDateTime29.toString();
        mutableDateTime29.addWeeks(901);
        org.joda.time.Chronology chronology37 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.Chronology chronology47 = localDate41.getChronology();
        long long51 = chronology47.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean52 = dateTimeFieldType40.isSupported(chronology47);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology47, locale53);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.Chronology chronology63 = localDate57.getChronology();
        long long67 = chronology63.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean68 = dateTimeFieldType56.isSupported(chronology63);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology63, locale69);
        java.lang.String str71 = locale69.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 54140309, chronology47, locale69, (java.lang.Integer) 54145337);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) 54145125, chronology37, locale69, (java.lang.Integer) 54152364, 21884813);
        java.lang.String str77 = dateTimeField11.getAsShortText(0L, locale69);
        java.lang.String str78 = locale69.getCountry();
        java.lang.String str79 = locale69.getLanguage();
        java.lang.String str80 = locale69.toLanguageTag();
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 32L + "'", long14 == 32L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 58665600001L + "'", long18 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-259200000L) + "'", long24 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456254075,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=54,MILLISECOND=75,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-24T02:18:54.075+59:08" + "'", str34, "2022-02-24T02:18:54.075+59:08");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 200L + "'", long51 == 200L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 200L + "'", long67 == 200L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1" + "'", str77, "1");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "FR" + "'", str78, "FR");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "fr" + "'", str79, "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "fr-FR" + "'", str80, "fr-FR");
    }

    @Test
    public void test17215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17215");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        org.joda.time.LocalDate localDate12 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.Chronology chronology34 = localDate28.getChronology();
        long long38 = chronology34.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean39 = dateTimeFieldType27.isSupported(chronology34);
        mutableDateTime24.setChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField41 = chronology34.dayOfYear();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType22.getField(chronology34);
        org.joda.time.LocalDate localDate44 = localDate12.withField(dateTimeFieldType22, (int) 'a');
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusMonths((int) (short) -1);
        boolean boolean49 = localDate45.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology50 = localDate45.getChronology();
        long long56 = chronology50.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DurationField durationField57 = chronology50.seconds();
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType22.getField(chronology50);
        org.joda.time.DateTimeField dateTimeField59 = chronology50.weekyear();
        org.joda.time.DateTimeField dateTimeField60 = chronology50.yearOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 200L + "'", long38 == 200L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-48469999L) + "'", long56 == (-48469999L));
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test17216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17216");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks(23);
        int int12 = dateTime8.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime8.withCenturyOfEra(22103303);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22103303 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test17217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17217");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumTime();
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime1.add(readableDuration3);
        mutableDateTime1.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.roundCeiling();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        int int14 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime10, "2022-02-22T06:04:40.988+15:02:03.198", 97);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.monthOfYear();
        mutableDateTime10.add((long) 21980168);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime20 = property18.set("2022-02-22T06:06:24.825+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:06:24.825+15:02:03.198\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-24T02:18:54.180+59:08" + "'", str2, "2022-02-24T02:18:54.180+59:08");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-98) + "'", int14 == (-98));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test17218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17218");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        java.lang.String str6 = mutableDateTime1.toString();
        mutableDateTime1.addWeeks(901);
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        mutableDateTime1.addWeekyears(54130144);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        java.lang.String str14 = mutableDateTime13.toString();
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime13.add(readableDuration15);
        mutableDateTime13.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime13.year();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = property19.addWrapField(21887627);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.dayOfYear();
        boolean boolean24 = mutableDateTime1.equals((java.lang.Object) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.dayOfWeek();
        java.util.Locale locale28 = new java.util.Locale("2022-02-22T06:06:54.652+15:02:03.198", "2022-02-22T06:08:01.107");
        java.lang.String str29 = locale28.toLanguageTag();
        java.lang.String str30 = property25.getAsText(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = org.joda.time.format.DateTimeFormat.patternForStyle("2022-02-22T06:07:44.609+15:02:03.198", locale28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2022-02-22T06:07:44.609+15:02:03.198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456254193,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=54,MILLISECOND=193,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-24T02:18:54.193+59:08" + "'", str6, "2022-02-24T02:18:54.193+59:08");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-24T02:18:54.193+59:08" + "'", str14, "2022-02-24T02:18:54.193+59:08");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals(locale28.toString(), "2022-02-22t06:06:54.652+15:02:03.198_2022-02-22T06:08:01.107");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "und" + "'", str29, "und");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Saturday" + "'", str30, "Saturday");
    }

    @Test
    public void test17219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17219");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(82, 8174, 313, 21899751, 283);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21899751 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17220");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        java.util.Date date63 = mutableDateTime62.toDate();
        java.lang.Object obj64 = mutableDateTime62.clone();
        mutableDateTime62.add((long) 7);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime62.secondOfDay();
        org.joda.time.ReadableInstant readableInstant68 = null;
        mutableDateTime62.setMillis(readableInstant68);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Mon Feb 21 15:10:54 GMT 2022");
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "2022-02-24T02:18:54.216+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "2022-02-24T02:18:54.216+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "2022-02-24T02:18:54.216+59:08");
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test17221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17221");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream9 = languageRangeList7.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology23 = chronology21.withZone(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.weekOfWeekyear();
        long long27 = dateTimeField24.addWrapField((long) ' ', 0);
        boolean boolean28 = dateTimeField24.isSupported();
        long long31 = dateTimeField24.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField24.getType();
        long long35 = dateTimeField24.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate42 = localDate36.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property43 = localDate36.yearOfEra();
        org.joda.time.LocalDate localDate44 = property43.roundFloorCopy();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDate44, locale45);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.Chronology chronology54 = localDate48.getChronology();
        long long58 = chronology54.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.weekOfWeekyear();
        java.util.Locale locale69 = java.util.Locale.getDefault();
        java.lang.String str70 = dateTimeField67.getAsText((long) (short) 1, locale69);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(32L, chronology54, locale69);
        java.lang.String str72 = locale45.getDisplayVariant(locale69);
        java.util.Set<java.lang.String> strSet73 = locale69.getUnicodeLocaleKeys();
        java.lang.String str74 = java.util.Locale.lookupTag(languageRangeList15, (java.util.Collection<java.lang.String>) strSet73);
        boolean boolean75 = strSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream79 = languageRangeList77.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, strMap80);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, strMap82);
        java.util.Locale.LanguageRange[] languageRangeArray84 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList85 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList85, languageRangeArray84);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream87 = languageRangeList85.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap88 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList89 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, strMap88);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap90 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList91 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList85, strMap90);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap92 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList93 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList91, strMap92);
        java.util.Collection<java.util.Locale> localeCollection94 = null;
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList91, localeCollection94, filteringMode95);
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter(languageRangeList83, localeCollection94);
        boolean boolean98 = strSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList83);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeStream9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 32L + "'", long27 == 32L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 58665600001L + "'", long31 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "52" + "'", str46, "52");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 200L + "'", long58 == 200L);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(languageRangeStream79);
        org.junit.Assert.assertNotNull(languageRangeList81);
        org.junit.Assert.assertNotNull(languageRangeList83);
        org.junit.Assert.assertNotNull(languageRangeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(languageRangeStream87);
        org.junit.Assert.assertNotNull(languageRangeList89);
        org.junit.Assert.assertNotNull(languageRangeList91);
        org.junit.Assert.assertNotNull(languageRangeList93);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode95.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test17222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17222");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream3 = languageRangeList1.stream();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9, filteringMode12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap14);
        java.util.Set<java.lang.String> strSet16 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet16.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream24 = languageRangeList22.stream();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList30, filteringMode33);
        java.util.Set<java.lang.String> strSet35 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray36 = strSet35.toArray();
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet35, filteringMode37);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList38, filteringMode39);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet16, filteringMode39);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream42 = languageRangeList1.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap43 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap43);
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.lang.String str55 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList53);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream56 = languageRangeList49.stream();
        boolean boolean57 = strSet47.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime58.add(readableDuration59);
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.util.Calendar calendar62 = mutableDateTime58.toCalendar(locale61);
        java.lang.String str63 = mutableDateTime58.toString();
        mutableDateTime58.addWeeks(901);
        boolean boolean66 = strSet47.contains((java.lang.Object) mutableDateTime58);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet47);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap68);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeStream3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode12.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeStream24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode33.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(languageRangeStream42);
        org.junit.Assert.assertNotNull(languageRangeList44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(languageRangeStream56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1645456254346,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=54,MILLISECOND=346,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-24T02:18:54.346+59:08" + "'", str63, "2022-02-24T02:18:54.346+59:08");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
    }

    @Test
    public void test17223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17223");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology10.getZone();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        int int20 = localDate19.getYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((-1L), dateTimeZone22);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfDay();
        java.lang.String str25 = property24.toString();
        org.joda.time.LocalTime localTime26 = property24.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime27 = property24.roundCeilingCopy();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((java.lang.Object) localTime27);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDate19.compareTo((org.joda.time.ReadablePartial) localTime28);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Property[millisOfDay]" + "'", str25, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test17224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17224");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.Chronology chronology18 = localDate12.getChronology();
        long long22 = chronology18.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime23 = dateTime11.toDateTime(chronology18);
        int int24 = dateTime23.getMonthOfYear();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMonths(570);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime23.withDayOfWeek(54551861);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54551861 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 200L + "'", long22 == 200L);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test17225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17225");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plus(readablePeriod11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.minuteOfHour();
        int int14 = localDateTime12.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMonthOfYear(22087);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22087 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 55 + "'", int14 == 55);
    }

    @Test
    public void test17226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17226");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        int int14 = localDate6.compareTo((org.joda.time.ReadablePartial) localDate13);
        int int15 = localDate13.getDayOfMonth();
        int int16 = localDate13.getMonthOfYear();
        org.joda.time.LocalDate localDate18 = localDate13.minusMonths(54123121);
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((-53));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField22 = localDate18.getField(21896418);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 21896418");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test17227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17227");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((-1L), dateTimeZone2);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        java.lang.String str5 = property4.toString();
        org.joda.time.LocalTime localTime6 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property4.withMaximumValue();
        org.joda.time.DateTime dateTime8 = localTime7.toDateTimeToday();
        org.joda.time.Chronology chronology9 = localTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 7997289, chronology9);
        org.joda.time.DurationField durationField14 = chronology9.weeks();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[millisOfDay]" + "'", str5, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test17228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17228");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long9 = chronology5.add((long) 54133701, 1000L, 54123198);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.dayOfWeek();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.DateTimeField dateTimeField12 = chronology5.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 54177331701L + "'", long9 == 54177331701L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17229");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.weekOfWeekyear();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.Chronology chronology70 = localDate64.getChronology();
        long long74 = chronology70.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.weekyearOfCentury();
        long long77 = dateTimeField75.roundHalfFloor((long) 47);
        mutableDateTime62.setRounding(dateTimeField75);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration80 = null;
        mutableDateTime79.add(readableDuration80);
        java.util.Locale locale82 = java.util.Locale.getDefault();
        java.util.Calendar calendar83 = mutableDateTime79.toCalendar(locale82);
        boolean boolean84 = mutableDateTime62.isBefore((org.joda.time.ReadableInstant) mutableDateTime79);
        java.lang.String str85 = mutableDateTime62.toString();
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime62.millisOfSecond();
        java.lang.String str87 = property86.getAsText();
        long long88 = property86.remainder();
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 200L + "'", long74 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1645456254479,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=54,MILLISECOND=479,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-01-03T11:08:00.000+59:08" + "'", str85, "2022-01-03T11:08:00.000+59:08");
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0" + "'", str87, "0");
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
    }

    @Test
    public void test17230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17230");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        mutableDateTime0.setYear(8);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime0.add(readablePeriod4, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.weekyear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfFloor();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:54.520+59:08" + "'", str1, "2022-02-24T02:18:54.520+59:08");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test17231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17231");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plus((-48469999L));
        org.joda.time.DateTime dateTime20 = dateTime16.plusSeconds(2);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) dateTime16, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone38);
        long long41 = dateTimeZone33.getMillisKeepLocal(dateTimeZone38, (long) (byte) -1);
        boolean boolean42 = dateTimeZone38.isFixed();
        org.joda.time.Chronology chronology43 = chronology5.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField44 = chronology5.secondOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology5.clockhourOfHalfday();
        long long49 = chronology5.add(252514911542406533L, (long) 22175530, 54145125);
        org.joda.time.DurationField durationField50 = chronology5.centuries();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 253715608386197783L + "'", long49 == 253715608386197783L);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test17232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17232");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDayOfYear((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(54123);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays(999);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withPeriodAdded(readablePeriod20, 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray23 = localDateTime19.getFieldTypes();
        org.joda.time.tz.Provider provider24 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider24);
        java.util.Set<java.lang.String> strSet26 = provider24.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone28 = provider24.getZone("2022-02-21T15:02:32.476Z");
        org.joda.time.DateTimeZone dateTimeZone30 = provider24.getZone("2022-02-22T06:06:21.646+15:02:03.198");
        boolean boolean31 = localDateTime19.equals((java.lang.Object) provider24);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime19.withWeekyear(21974389);
        org.joda.time.Chronology chronology34 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime19.minusMinutes(54131);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime19.withMonthOfYear(22069649);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22069649 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1984, 5, 26, 8934555]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray23);
        org.junit.Assert.assertNotNull(provider24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNull(dateTimeZone28);
        org.junit.Assert.assertNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test17233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17233");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfMonth();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test17234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17234");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate.Property property6 = localDate5.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate7.minus(readablePeriod9);
        org.joda.time.LocalDate localDate12 = localDate7.plusYears(0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456254590,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=54,MILLISECOND=590,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test17235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17235");
        java.util.Locale locale1 = new java.util.Locale("");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        mutableDateTime2.setMillis(readableInstant11);
        int int14 = mutableDateTime2.getMinuteOfDay();
        mutableDateTime2.add((long) 20);
        mutableDateTime2.addWeeks(21);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime26.plus((-48469999L));
        org.joda.time.DateTime dateTime30 = dateTime26.plusSeconds(2);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate34 = localDate31.withField(dateTimeFieldType32, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDate34.toDateTime(readableInstant35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate34.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) dateTime26, dateTimeZone43);
        int int48 = dateTimeZone43.getOffsetFromLocal((long) 54125);
        mutableDateTime2.setZoneRetainFields(dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) locale1, dateTimeZone43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456254616,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=54,MILLISECOND=616,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 138 + "'", int14 == 138);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 212880000 + "'", int48 == 212880000);
    }

    @Test
    public void test17236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17236");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("0052-02-22T06:04:43.476+15:02:03.198");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.Chronology chronology14 = localDate8.getChronology();
        long long18 = chronology14.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean19 = dateTimeFieldType7.isSupported(chronology14);
        mutableDateTime4.setChronology(chronology14);
        org.joda.time.DurationField durationField21 = chronology14.minutes();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology14.getZone();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(chronology14);
        long long27 = chronology14.add(4201328032L, 200L, 54130144);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.plus((-48469999L));
        org.joda.time.DateTime dateTime49 = dateTime45.plusSeconds(2);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTime(readableInstant54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate53.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) dateTime45, dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone67);
        long long70 = dateTimeZone62.getMillisKeepLocal(dateTimeZone67, (long) (byte) -1);
        boolean boolean71 = dateTimeZone67.isFixed();
        org.joda.time.Chronology chronology72 = chronology34.withZone(dateTimeZone67);
        org.joda.time.Chronology chronology73 = chronology14.withZone(dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology14);
        mutableDateTime1.setChronology(chronology14);
        mutableDateTime1.setMillis((long) 8330930);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 200L + "'", long18 == 200L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 15027356832L + "'", long27 == 15027356832L);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology73);
    }

    @Test
    public void test17237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17237");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.year();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.dayOfMonth();
        boolean boolean51 = dateTimeField49.isLeap(21927649L);
        boolean boolean52 = dateTimeField49.isLenient();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test17238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17238");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        int int9 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusDays(21970683);
        int int15 = localDateTime14.size();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8334690 + "'", int9 == 8334690);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test17239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17239");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology21 = chronology19.withZone(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate11.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter7.withZone(dateTimeZone20);
        java.lang.String str25 = dateTimeFormatter23.print(28481332039750L);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology31);
        int int35 = localDate34.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight36 = localDate34.toDateMidnight();
        java.lang.String str37 = dateTimeFormatter23.print((org.joda.time.ReadablePartial) localDate34);
        java.lang.Class<?> wildcardClass38 = localDate34.getClass();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e0a\u534811:09" + "'", str4, "\u4e0a\u534811:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e0b\u534812:15" + "'", str25, "\u4e0b\u534812:15");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertNotNull(dateMidnight36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\ufffd\ufffd\ufffd\ufffd" + "'", str37, "\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test17240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17240");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2017);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test17241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17241");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology10.getZone();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(chronology10);
        int int20 = localDate19.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate19.withYearOfCentury(54131261);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54131261 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
    }

    @Test
    public void test17242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17242");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime5.withMillisOfSecond(0);
        boolean boolean13 = dateTime11.isBefore((long) 20);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes(1969);
        org.joda.time.DateTime dateTime17 = dateTime11.withMillisOfDay(54133104);
        org.joda.time.DateTime dateTime20 = dateTime11.withDurationAdded((long) 54146807, 312);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        int int35 = localDate27.compareTo((org.joda.time.ReadablePartial) localDate34);
        org.joda.time.LocalDate.Property property36 = localDate27.centuryOfEra();
        org.joda.time.LocalDate localDate37 = property36.withMaximumValue();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime43.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        mutableDateTime48.add(durationFieldType52, (-1));
        org.joda.time.DateTime dateTime56 = dateTime43.withFieldAdded(durationFieldType52, (int) (byte) 1);
        org.joda.time.DateTime.Property property57 = dateTime56.minuteOfDay();
        int int58 = dateTime56.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime59.add(readableDuration60);
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.util.Calendar calendar63 = mutableDateTime59.toCalendar(locale62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate67 = localDate64.withField(dateTimeFieldType65, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTime(readableInstant68);
        mutableDateTime59.setMillis(readableInstant68);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime59.hourOfDay();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate75 = localDate72.withField(dateTimeFieldType73, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDate75.toDateTime(readableInstant76);
        org.joda.time.Chronology chronology78 = dateTime77.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime77.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property82 = dateTime80.property(dateTimeFieldType81);
        mutableDateTime59.set(dateTimeFieldType81, 52);
        int int85 = dateTime56.get(dateTimeFieldType81);
        org.joda.time.DurationFieldType durationFieldType86 = dateTimeFieldType81.getDurationType();
        boolean boolean87 = localDate37.isSupported(durationFieldType86);
        org.joda.time.DateTime dateTime89 = dateTime11.withFieldAdded(durationFieldType86, 197);
        org.joda.time.DateTime dateTime90 = dateTime11.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property91 = dateTime11.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645456254741,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=54,MILLISECOND=741,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test17243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17243");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-02-22T06:05:39.427+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:05:39.427+15:02:03.198\" is malformed at \"22-02-22T06:05:39.427+15:02:03.198\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime2.plusSeconds(52);
        int int9 = localTime2.size();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime2.plus(readablePeriod10);
        org.joda.time.LocalTime.Property property12 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime14 = null; // flaky: property12.addNoWrapToCopy(22073834);
        org.joda.time.Interval interval15 = property12.toInterval();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(interval15);
    }

    @Test
    public void test17245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17245");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList5);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream8 = languageRangeList1.parallelStream();
        java.lang.String[] strArray29 = new java.lang.String[] { "2022-02-21T15:02:02.963Z", "2022-02-21T15:02:10.158Z", "2022-02-21T15:02:13.131Z", "zh-CN", "minutes", "2022-02-21T15:02:13.192Z", "DurationField[minutes]", "0003-06-21T15:02:14.891Z", "1970", "2022-02-21T15:02:22.666Z", "1983-05-23T15:12:28.264", "CN", "months", "Property[year]", "2022-02-21T15:02:01.240Z", "2022-02-21T15:02:20.375Z", "chinois (Chine)", "0001-01-01T00:00:00.000Z", "2022-02-21T15:02:03.371Z", "2022-02-21T15:02:30.672Z" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet30.spliterator();
        boolean boolean34 = strSet30.add("ISOChronology[UTC]");
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet30);
        java.util.Spliterator<java.lang.String> strSpliterator36 = strSet30.spliterator();
        java.util.Iterator<java.lang.String> strItor37 = strSet30.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeStream8);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strSpliterator36);
        org.junit.Assert.assertNotNull(strItor37);
    }

    @Test
    public void test17246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17246");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        mutableDateTime7.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.property(dateTimeFieldType12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime7.add(readableDuration14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime7.add(readablePeriod17);
        org.joda.time.DateTime dateTime19 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.LocalDateTime.Property property20 = localDateTime3.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str22 = dateTimeFieldType21.getName();
        org.joda.time.LocalDateTime.Property property23 = localDateTime3.property(dateTimeFieldType21);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("dayOfMonth");
        boolean boolean26 = localDateTime3.equals((java.lang.Object) locale25);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hourOfHalfday" + "'", str22, "hourOfHalfday");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test17247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17247");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        int int2 = localDateTime1.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        mutableDateTime3.add(durationFieldType7, (-1));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withFieldAdded(durationFieldType7, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        java.lang.String str14 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter0.withDefaultYear(21916);
        org.joda.time.format.DateTimeParser dateTimeParser18 = dateTimeFormatter0.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u56db" + "'", str14, "\u5e74\u6708\u65e5\u661f\u671f\u56db");
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeParser18);
    }

    @Test
    public void test17248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17248");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 64391914, chronology8);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test17249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17249");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plus((-48469999L));
        org.joda.time.DateTime dateTime20 = dateTime16.plusSeconds(2);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) dateTime16, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone38);
        long long41 = dateTimeZone33.getMillisKeepLocal(dateTimeZone38, (long) (byte) -1);
        boolean boolean42 = dateTimeZone38.isFixed();
        org.joda.time.Chronology chronology43 = chronology5.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField44 = chronology43.weekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.hourOfDay();
        org.joda.time.DurationField durationField46 = chronology43.hours();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-1L) + "'", long41 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test17250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17250");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withDayOfYear((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(54123);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        int int18 = localDateTime17.getHourOfDay();
        int int19 = localDateTime17.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusYears(21992);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusYears((-1));
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfDay((int) (short) 10);
        int int32 = localDateTime31.getDayOfWeek();
        int int33 = localDateTime21.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1984, 5, 26, 8935022]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test17251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17251");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField10 = chronology6.months();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        int int12 = localDate11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.Chronology chronology16 = chronology6.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField17 = chronology16.millis();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 902, chronology16);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test17252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17252");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes(54122);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(23);
        org.joda.time.DateTime dateTime8 = localDateTime0.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis(490);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test17253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17253");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.yearOfCentury();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("32568");
        java.lang.String str18 = locale17.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField13.set((long) 21915388, "2022-02-22T06:04:43.393+15:02:03.198", locale17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:04:43.393+15:02:03.198\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test17254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17254");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate12 = localDate9.withWeekyear(54487369);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(24);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test17255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17255");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        long long20 = dateTimeField17.addWrapField((long) ' ', 0);
        boolean boolean21 = dateTimeField17.isSupported();
        long long24 = dateTimeField17.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField17.getType();
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = dateTimeField17.getAsText((long) (byte) 1, locale27);
        long long30 = dateTimeField17.roundHalfEven((long) 3);
        boolean boolean31 = dateTimeField17.isLenient();
        mutableDateTime8.setRounding(dateTimeField17);
        mutableDateTime8.addWeeks(22103383);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:55.172+59:08" + "'", str1, "2022-02-24T02:18:55.172+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 58665600001L + "'", long24 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-259200000L) + "'", long30 == (-259200000L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test17256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17256");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Calendar calendar22 = mutableDateTime18.toCalendar(locale21);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromCalendarFields(calendar22);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromCalendarFields(calendar22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        int int27 = localDate24.indexOf(dateTimeFieldType25);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime17.property(dateTimeFieldType25);
        int int29 = mutableDateTime17.getMillisOfSecond();
        int int30 = property6.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours(40);
        mutableDateTime17.setZoneRetainFields(dateTimeZone32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime17.secondOfMinute();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime17.add(readableDuration35);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645456255188,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=55,MILLISECOND=188,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 188 + "'", int29 == 188);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test17257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17257");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalTime localTime10 = localTime6.withField(dateTimeFieldType7, 0);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.Chronology chronology20 = localDate14.getChronology();
        long long24 = chronology20.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology32 = chronology30.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.lang.String str36 = dateTimeField33.getAsText((long) (short) 1, locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(32L, chronology20, locale35);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths((int) '4');
        org.joda.time.DateTime dateTime47 = dateTime45.plus((-48469999L));
        org.joda.time.DateTime dateTime49 = dateTime45.plusSeconds(2);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate53 = localDate50.withField(dateTimeFieldType51, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.DateTime dateTime55 = localDate53.toDateTime(readableInstant54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate58 = localDate56.minusMonths((int) (short) -1);
        boolean boolean60 = localDate56.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology61 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology63 = chronology61.withZone(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = localDate53.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((java.lang.Object) dateTime45, dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone67);
        long long70 = dateTimeZone62.getMillisKeepLocal(dateTimeZone67, (long) (byte) -1);
        dateTimeParserBucket37.setZone(dateTimeZone67);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(dateTimeZone67);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone67);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod76 = null;
        mutableDateTime74.add(readablePeriod76, 21880163);
        org.joda.time.LocalDate localDate79 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate82 = localDate79.withField(dateTimeFieldType80, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDate82.toDateTime(readableInstant83);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.DateTime dateTime86 = dateTime84.plus(readableDuration85);
        org.joda.time.DateTime dateTime87 = dateTime84.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime89 = dateTime84.withMillisOfSecond(11);
        org.joda.time.DateTime.Property property90 = dateTime84.yearOfEra();
        mutableDateTime74.setDate((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime74.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = property11.getDifference((org.joda.time.ReadableInstant) mutableDateTime74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 62194161423779");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 200L + "'", long24 == 200L);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(property92);
    }

    @Test
    public void test17258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17258");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = dateTime7.minusDays(8);
        org.joda.time.DateTime dateTime31 = dateTime7.withYearOfEra(902);
        boolean boolean33 = dateTime7.isEqual((long) 8152397);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test17259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17259");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        int int15 = dateTime14.getMinuteOfHour();
        int int16 = dateTime14.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 18 + "'", int15 == 18);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test17260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17260");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfYear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        boolean boolean21 = dateTime7.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property23 = dateTime7.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime25 = property23.addToCopy(54141456);
        int int26 = dateTime25.getEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test17261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17261");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        int int8 = mutableDateTime0.getYearOfEra();
        java.lang.String str9 = mutableDateTime0.toString();
        mutableDateTime0.add((long) 21976);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-24T02:18:55.347+59:08" + "'", str9, "2022-02-24T02:18:55.347+59:08");
    }

    @Test
    public void test17262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17262");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        org.joda.time.DateTime dateTime19 = dateTime6.withFieldAdded(durationFieldType15, (int) (byte) 1);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate23.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime19.withZone(dateTimeZone32);
        int int37 = dateTimeZone32.getOffset((long) 54128391);
        java.lang.String str38 = dateTimeZone32.getID();
        long long40 = dateTimeZone32.convertUTCToLocal(1894410169596000L);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 814, dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 212880000 + "'", int37 == 212880000);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+59:08" + "'", str38, "+59:08");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1894410382476000L + "'", long40 == 1894410382476000L);
    }

    @Test
    public void test17263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17263");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        int int14 = localDate6.compareTo((org.joda.time.ReadablePartial) localDate13);
        int int15 = localDate13.getDayOfMonth();
        int int16 = localDate13.getMonthOfYear();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter18.withOffsetParsed();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DurationField durationField29 = chronology25.months();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        int int31 = localDate30.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.Chronology chronology35 = chronology25.withZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter19.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekyearOfCentury();
        int int39 = dateTime17.get(dateTimeField38);
        int int40 = dateTime17.getMillisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime17.minusMinutes(54439);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 24 + "'", int15 == 24);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 391 + "'", int40 == 391);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test17264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17264");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate14 = localDate11.withField(dateTimeFieldType12, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDate14.toDateTime(readableInstant15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths((int) '4');
        org.joda.time.DateTime dateTime20 = dateTime16.plusSeconds((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Calendar calendar26 = mutableDateTime22.toCalendar(locale25);
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromCalendarFields(calendar26);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.fromCalendarFields(calendar26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType29.getDurationType();
        int int31 = localDate28.indexOf(dateTimeFieldType29);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime21.property(dateTimeFieldType29);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime21.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Calendar calendar39 = mutableDateTime35.toCalendar(locale38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        mutableDateTime35.setMillis(readableInstant44);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime35.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49);
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.util.Calendar calendar52 = mutableDateTime48.toCalendar(locale51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        mutableDateTime48.setMillis(readableInstant57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusMonths((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime67.plus((-48469999L));
        org.joda.time.DateTime dateTime71 = dateTime67.plusSeconds(2);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate75 = localDate72.withField(dateTimeFieldType73, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.DateTime dateTime77 = localDate75.toDateTime(readableInstant76);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate80 = localDate78.minusMonths((int) (short) -1);
        boolean boolean82 = localDate78.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology83 = localDate78.getChronology();
        org.joda.time.DateTimeZone dateTimeZone84 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology85 = chronology83.withZone(dateTimeZone84);
        org.joda.time.DateTime dateTime86 = localDate75.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((java.lang.Object) dateTime67, dateTimeZone84);
        mutableDateTime48.setZone(dateTimeZone84);
        mutableDateTime35.setZone(dateTimeZone84);
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime(dateTimeZone84);
        mutableDateTime21.setZoneRetainFields(dateTimeZone84);
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime9.toMutableDateTime(dateTimeZone84);
        mutableDateTime92.addHours(167);
        mutableDateTime92.addMillis(8332870);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645456255423,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=55,MILLISECOND=423,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645456255423,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=55,MILLISECOND=423,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645456255423,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=55,MILLISECOND=423,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime92);
    }

    @Test
    public void test17265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17265");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("zh");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"zh\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17266");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        long long10 = durationField7.getValueAsLong((long) 80, (long) (short) 100);
        java.lang.String str11 = durationField7.toString();
        long long14 = durationField7.getDifferenceAsLong((long) 54150331, 142295824137600000L);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology22 = chronology20.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(chronology20);
        org.joda.time.DurationField durationField24 = chronology20.months();
        long long26 = durationField24.getValueAsLong((long) 54131);
        int int27 = durationField7.compareTo(durationField24);
        long long30 = durationField24.add((-62049644832447L), 22005289);
        long long33 = durationField24.getValueAsLong((long) 22083461, 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[minutes]" + "'", str11, "DurationField[minutes]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2371597068057L) + "'", long14 == (-2371597068057L));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 57806271113567553L + "'", long30 == 57806271113567553L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test17267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17267");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.Chronology chronology9 = localDate3.getChronology();
        long long13 = chronology9.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean14 = dateTimeFieldType2.isSupported(chronology9);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology9, locale16, (java.lang.Integer) 54135101, 80);
        java.lang.String str21 = locale16.getISO3Country();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("2022-02-22T06:05:11.527+15:02:03.198");
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale24);
        java.lang.String str26 = locale23.getDisplayVariant(locale24);
        java.lang.String str27 = locale16.getDisplayVariant(locale24);
        java.lang.String str28 = locale16.getDisplayVariant();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.minusMonths((int) (short) -1);
        boolean boolean33 = localDate29.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology34 = localDate29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology36 = chronology34.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekOfWeekyear();
        long long40 = dateTimeField37.addWrapField((long) ' ', 0);
        boolean boolean41 = dateTimeField37.isSupported();
        long long44 = dateTimeField37.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField37.getType();
        long long48 = dateTimeField37.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate55 = localDate49.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property56 = localDate49.yearOfEra();
        org.joda.time.LocalDate localDate57 = property56.roundFloorCopy();
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.lang.String str59 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDate57, locale58);
        java.lang.String str60 = locale58.getDisplayLanguage();
        java.util.Locale locale64 = new java.util.Locale("\u5e74\u6708\u65e5\u661f\u671f\u65e5", "2022-02-22T06:05:15.676+15:02:03.198", "00:00:00 +15:02:03.198");
        java.lang.String str65 = locale58.getDisplayCountry(locale64);
        java.lang.String str66 = locale16.getDisplayLanguage(locale58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = org.joda.time.format.DateTimeFormat.patternForStyle("2:15 AM", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid style specification: 2:15 AM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 200L + "'", long13 == 200L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 32L + "'", long40 == 32L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 58665600001L + "'", long44 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "52" + "'", str59, "52");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u6cd5\u6587" + "'", str60, "\u6cd5\u6587");
        org.junit.Assert.assertEquals(locale64.toString(), "\u5e74\u6708\u65e5\u661f\u671f\u65e5_2022-02-22T06:05:15.676+15:02:03.198_00:00:00 +15:02:03.198");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "France" + "'", str65, "France");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test17268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17268");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        int int8 = localTime6.getValue((int) (byte) 0);
        org.joda.time.LocalTime localTime10 = localTime6.withSecondOfMinute((int) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        org.joda.time.LocalTime.Property property13 = localTime6.property(dateTimeFieldType11);
        int int14 = property13.getMinimumValueOverall();
        org.joda.time.LocalTime localTime16 = property13.addWrapFieldToCopy(54147);
        java.lang.String str17 = localTime16.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = localTime16.withSecondOfMinute(54360000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54360000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "11:07:59.146" + "'", str17, "11:07:59.146");
    }

    @Test
    public void test17269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17269");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(54610);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test17270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17270");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withDefaultYear(627);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(21880119);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withZone(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeFormatter9.parseMillis("2022-02-22T06:07:02.106+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:07:02.106+15:02:03...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e0a\u534811:09" + "'", str4, "\u4e0a\u534811:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test17271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17271");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = java.util.Locale.ENGLISH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getDisplayVariant();
        java.util.Locale locale5 = locale1.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italy" + "'", str2, "Italy");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
    }

    @Test
    public void test17272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17272");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-45359968L));
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(54150465);
        org.joda.time.LocalTime localTime5 = localTime3.minusMillis(54148380);
        org.joda.time.LocalTime localTime7 = localTime3.withMillisOfDay(21914410);
        org.joda.time.LocalTime localTime9 = localTime7.plusHours(54126273);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test17273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17273");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("17/02/87");
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test17274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17274");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        mutableDateTime8.setMillis((long) 54110102);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        mutableDateTime12.setWeekyear(54150331);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        mutableDateTime15.setMillis((long) (byte) 1);
        mutableDateTime15.setWeekOfWeekyear(47);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths((int) '4');
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfEra();
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime15.hourOfDay();
        int int31 = mutableDateTime15.getDayOfWeek();
        int int32 = mutableDateTime15.getCenturyOfEra();
        mutableDateTime12.setDate((org.joda.time.ReadableInstant) mutableDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:55.639+59:08" + "'", str1, "2022-02-24T02:18:55.639+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test17275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1645455890452L, chronology1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        int int4 = localDateTime3.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        mutableDateTime5.add(durationFieldType9, (-1));
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withFieldAdded(durationFieldType9, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.era();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int19 = localDateTime17.get(dateTimeFieldType18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = localTime2.withField(dateTimeFieldType18, 54473479);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test17276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17276");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        int int4 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        long long13 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long20 = dateTimeZone16.adjustOffset((long) (byte) 0, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone16);
        int int22 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale26 = new java.util.Locale("en", "52");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withLocale(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 21890, chronology1, locale26, (java.lang.Integer) 0, 6);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        long long34 = dateTimeParserBucket30.computeMillis(true, "Property[year]");
        java.util.Locale locale35 = dateTimeParserBucket30.getLocale();
        org.joda.time.Chronology chronology36 = dateTimeParserBucket30.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter23);
        org.junit.Assert.assertEquals(locale26.toString(), "en_52");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-212858110L) + "'", long34 == (-212858110L));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_52");
        org.junit.Assert.assertNotNull(chronology36);
    }

    @Test
    public void test17277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17277");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        mutableDateTime3.add(durationFieldType7, (-1));
        long long10 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setMillis((long) 902);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime3.monthOfYear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = property14.set(22106759);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22106759 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17278");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology10 = chronology8.withZone(dateTimeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.millisOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = dateTimeField34.getAsText((long) (short) 1, locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(32L, chronology21, locale36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate54.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) dateTime46, dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone68);
        long long71 = dateTimeZone63.getMillisKeepLocal(dateTimeZone68, (long) (byte) -1);
        dateTimeParserBucket38.setZone(dateTimeZone68);
        java.util.Locale locale73 = dateTimeParserBucket38.getLocale();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket38.setZone(dateTimeZone74);
        dateTimeParserBucket38.setPivotYear((java.lang.Integer) 59);
        java.util.Locale locale78 = dateTimeParserBucket38.getLocale();
        java.util.Locale locale79 = locale78.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket((long) 54117, chronology8, locale79, (java.lang.Integer) 2039, 14);
        java.util.Locale locale86 = new java.util.Locale("monthOfYear", "23:59:59.999", "0003-06-22T15:00:00.000+15:02:03.198");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 627, chronology8, locale86, (java.lang.Integer) 365);
        java.util.Locale.Category category89 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale90 = java.util.Locale.getDefault(category89);
        java.lang.String str91 = locale90.getISO3Country();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket93 = new org.joda.time.format.DateTimeParserBucket((long) 54112611, chronology8, locale90, (java.lang.Integer) 21998379);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh");
        org.junit.Assert.assertEquals(locale86.toString(), "monthofyear_23:59:59.999_0003-06-22T15:00:00.000+15:02:03.198");
        org.junit.Assert.assertTrue("'" + category89 + "' != '" + java.util.Locale.Category.FORMAT + "'", category89.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test17279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17279");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.Integer int3 = dateTimeFormatter0.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str7 = dateTimeFieldType6.getName();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        boolean boolean16 = dateTimeFieldType6.isSupported(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter0.withChronology(chronology15);
        int int19 = dateTimeFormatter0.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "dayOfWeek" + "'", str7, "dayOfWeek");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2000 + "'", int19 == 2000);
    }

    @Test
    public void test17280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17280");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test17281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17281");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekOfWeekyear();
        java.lang.String str9 = chronology5.toString();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withWeekyear(0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusMonths(144);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.withPeriodAdded(readablePeriod25, 21921078);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate28.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property35 = localDate28.yearOfEra();
        org.joda.time.LocalDate localDate36 = property35.roundFloorCopy();
        org.joda.time.LocalDate localDate37 = property35.roundFloorCopy();
        org.joda.time.LocalDate localDate38 = property35.roundCeilingCopy();
        org.joda.time.LocalDate localDate39 = property35.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField40 = property35.getField();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate47 = localDate41.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property48 = localDate41.yearOfEra();
        org.joda.time.LocalDate localDate49 = property48.roundFloorCopy();
        org.joda.time.LocalDate localDate50 = property48.roundFloorCopy();
        org.joda.time.LocalDate localDate51 = property48.roundCeilingCopy();
        org.joda.time.LocalDate localDate52 = property48.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate53 = property48.withMaximumValue();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.Chronology chronology60 = localDate54.getChronology();
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now(chronology60);
        int int62 = property48.compareTo((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.LocalDate localDate64 = property48.addToCopy(622);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate68 = localDate65.withField(dateTimeFieldType66, (int) (byte) -1);
        org.joda.time.LocalDate localDate70 = localDate65.minusYears((int) ' ');
        int int71 = localDate70.getDayOfYear();
        int[] intArray72 = localDate70.getValues();
        int int73 = dateTimeField40.getMinimumValue((org.joda.time.ReadablePartial) localDate64, intArray72);
        // The following exception was thrown during execution in test generation
        try {
            chronology5.validate((org.joda.time.ReadablePartial) localDateTime27, intArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 55 + "'", int71 == 55);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1990, 2, 24]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test17282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17282");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.DateTime dateTime25 = dateTime12.withFieldAdded(durationFieldType21, (int) (byte) 1);
        org.joda.time.DateTime dateTime27 = dateTime12.plusSeconds(0);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime0.monthOfYear();
        int int36 = mutableDateTime0.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfWeek((-36816480));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -36816480 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456255840,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=55,MILLISECOND=840,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test17283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17283");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths((int) '4');
        org.joda.time.DateTime dateTime21 = dateTime19.plus((-48469999L));
        org.joda.time.DateTime dateTime23 = dateTime19.plusSeconds(2);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology37 = chronology35.withZone(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate27.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((java.lang.Object) dateTime19, dateTimeZone36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime41.add(readableDuration42);
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Calendar calendar45 = mutableDateTime41.toCalendar(locale44);
        boolean boolean46 = dateTime40.isAfter((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        java.lang.String str48 = mutableDateTime47.toString();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime49.add(readableDuration50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        mutableDateTime49.add(durationFieldType53, (-1));
        mutableDateTime47.add(durationFieldType53, 10);
        org.joda.time.DateTime dateTime59 = dateTime40.withFieldAdded(durationFieldType53, 5);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate63 = localDate60.withField(dateTimeFieldType61, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDate63.toDateTime(readableInstant64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusMonths((int) '4');
        org.joda.time.DateTime dateTime69 = dateTime65.plusSeconds((int) (byte) 1);
        int int70 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTime dateTime72 = dateTime40.plusMinutes(54130456);
        int int73 = dateTime40.getMillisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime74.add(readableDuration75);
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.util.Calendar calendar78 = mutableDateTime74.toCalendar(locale77);
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.fromCalendarFields(calendar78);
        org.joda.time.LocalDate localDate80 = org.joda.time.LocalDate.fromCalendarFields(calendar78);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType81.getDurationType();
        int int83 = localDate80.indexOf(dateTimeFieldType81);
        int int84 = dateTime40.get(dateTimeFieldType81);
        boolean boolean85 = dateTime11.isSupported(dateTimeFieldType81);
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate88 = localDate86.minusMonths((int) (short) -1);
        boolean boolean90 = localDate86.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology91 = localDate86.getChronology();
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology93 = chronology91.withZone(dateTimeZone92);
        boolean boolean94 = dateTimeFieldType81.isSupported(chronology93);
        org.joda.time.DurationFieldType durationFieldType95 = dateTimeFieldType81.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645456255855,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=55,MILLISECOND=855,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-24T02:18:55.855+59:08" + "'", str48, "2022-02-24T02:18:55.855+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 855 + "'", int73 == 855);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1645456255855,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=55,MILLISECOND=855,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 855 + "'", int84 == 855);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(durationFieldType95);
    }

    @Test
    public void test17284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17284");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withPeriodAdded(readablePeriod10, 9);
        int int13 = dateTime12.getMillisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test17285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17285");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfEra();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) (byte) 100);
        int int19 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime11.plus(readableDuration20);
        int int22 = localDateTime21.size();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withWeekyear(560);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.yearOfEra();
        int int27 = localDateTime25.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withPeriodAdded(readablePeriod28, 2022);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.era();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.minuteOfHour();
        int int33 = property32.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime34 = property32.getLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean36 = localDateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime21.withFields((org.joda.time.ReadablePartial) localDateTime34);
        int int39 = localDateTime21.getWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8335943 + "'", int14 == 8335943);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8335943 + "'", int27 == 8335943);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 59 + "'", int33 == 59);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
    }

    @Test
    public void test17286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17286");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime0.add(readableDuration7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addMinutes(21901192);
        mutableDateTime0.add((long) 54598517);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test17287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17287");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.DateTime.Property property8 = dateTime7.centuryOfEra();
        org.joda.time.DateTime dateTime10 = dateTime7.plusMonths(32);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 232L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test17288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17288");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusSeconds(1970);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.DateTime dateTime8 = localTime6.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = localTime6.withMinuteOfHour(73612147);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73612147 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test17289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17289");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(54117);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withWeekyear(54115116);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.centuryOfEra();
        java.lang.String str13 = localDateTime9.toString();
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8335998 + "'", int2 == 8335998);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-04-02T16:15:55.998" + "'", str13, "2022-04-02T16:15:55.998");
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17290");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withYearOfCentury(7);
        org.joda.time.DateTime dateTime18 = dateTime16.plus(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear(8145947);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8145947 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "0001-01-01T00:00:00.000+59:08" + "'", str14, "0001-01-01T00:00:00.000+59:08");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test17291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17291");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.secondOfDay();
        mutableDateTime0.addMillis(54124521);
        boolean boolean6 = mutableDateTime0.isAfter(0L);
        int int7 = mutableDateTime0.getMillisOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        long long19 = chronology13.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTimeField dateTimeField20 = chronology13.weekyear();
        org.joda.time.DurationField durationField21 = chronology13.seconds();
        org.joda.time.DateTimeField dateTimeField22 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology13.hourOfDay();
        mutableDateTime0.setChronology(chronology13);
        boolean boolean25 = mutableDateTime0.isEqualNow();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:56.019+59:08" + "'", str1, "2022-02-24T02:18:56.019+59:08");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 62460540 + "'", int7 == 62460540);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-48469999L) + "'", long19 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test17292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17292");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.DateTime dateTime8 = localDate0.toDateTimeAtMidnight();
        boolean boolean10 = dateTime8.isEqual((long) 21);
        org.joda.time.DateTime.Property property11 = dateTime8.weekyear();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate22 = localDate19.withField(dateTimeFieldType20, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDate22.toDateTime(readableInstant23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths((int) '4');
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        mutableDateTime29.add(durationFieldType33, (-1));
        org.joda.time.DateTime dateTime37 = dateTime24.withFieldAdded(durationFieldType33, (int) (byte) 1);
        boolean boolean38 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime40 = dateTime37.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property41 = dateTime40.era();
        org.joda.time.DateTime dateTime42 = property41.roundCeilingCopy();
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology51 = localDate46.getChronology();
        org.joda.time.Chronology chronology52 = localDate46.getChronology();
        long long56 = chronology52.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean57 = dateTimeFieldType45.isSupported(chronology52);
        java.lang.String str58 = dateTimeFieldType45.getName();
        org.joda.time.DateTime.Property property59 = dateTime42.property(dateTimeFieldType45);
        int int60 = dateTime8.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime62 = dateTime8.minusMillis(21894);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str64 = dateTimeFieldType63.toString();
        org.joda.time.DateTime dateTime66 = dateTime62.withField(dateTimeFieldType63, 0);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType63.getDurationType();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 200L + "'", long56 == 200L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "minuteOfDay" + "'", str58, "minuteOfDay");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "yearOfCentury" + "'", str64, "yearOfCentury");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType67);
    }

    @Test
    public void test17293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17293");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = dateTime5.withCenturyOfEra((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.hourOfDay();
        org.joda.time.DateTime.Property property14 = dateTime11.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17294");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.weekyear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfFloor();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test17295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17295");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.weekyear();
        java.lang.String str11 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.dayOfWeek();
        long long15 = dateTimeField12.addWrapField((long) (-21980), 54133701);
        long long17 = dateTimeField12.roundCeiling(690692310403200000L);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.Locale locale21 = java.util.Locale.getDefault(category19);
        java.util.Locale locale22 = java.util.Locale.getDefault(category19);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate29 = localDate23.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property30 = localDate23.yearOfEra();
        org.joda.time.LocalDate localDate31 = property30.roundFloorCopy();
        org.joda.time.LocalDate localDate32 = property30.roundFloorCopy();
        org.joda.time.LocalDate localDate33 = property30.roundCeilingCopy();
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.lang.String str35 = property30.getAsShortText(locale34);
        java.lang.String str36 = locale34.getDisplayVariant();
        java.util.Locale locale40 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.lang.String str41 = locale40.toLanguageTag();
        java.lang.String str42 = locale40.toLanguageTag();
        java.lang.String str43 = locale34.getDisplayCountry(locale40);
        java.util.Locale.setDefault(category19, locale34);
        java.util.Locale locale45 = java.util.Locale.getDefault(category19);
        java.lang.String str46 = locale45.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = dateTimeField12.getAsText(21908000, locale45);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21908000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-86421980L) + "'", long15 == (-86421980L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 690692310403200000L + "'", long17 == 690692310403200000L);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022" + "'", str35, "2022");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "und" + "'", str41, "und");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "und" + "'", str42, "und");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "China" + "'", str43, "China");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test17296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17296");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("+40:00");
        java.util.TimeZone.setDefault(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = timeZone1.getOffset(8196178, 22016248, 22177295, 54122, 9, 54115116);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test17297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17297");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.Chronology chronology54 = chronology7.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfCentury();
        int int57 = dateTimeField55.getLeapAmount(4255558361L);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField55.getType();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
    }

    @Test
    public void test17298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17298");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.Interval interval46 = localDate27.toInterval(dateTimeZone40);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        java.util.Date date60 = dateTime59.toDate();
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.fromDateFields(date60);
        int int62 = localDate61.size();
        org.joda.time.LocalDate.Property property63 = localDate61.yearOfEra();
        org.joda.time.LocalDate localDate65 = property63.setCopy(7);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        long long71 = dateTimeZone67.adjustOffset((long) (byte) 0, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        int int74 = dateTimeZone67.getOffset((long) 53);
        int int76 = dateTimeZone67.getStandardOffset(100L);
        org.joda.time.Chronology chronology77 = chronology66.withZone(dateTimeZone67);
        org.joda.time.DurationField durationField78 = chronology66.weekyears();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Sat Jun 23 12:52:00 GMT 3");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 212880000 + "'", int74 == 212880000);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 212880000 + "'", int76 == 212880000);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
    }

    @Test
    public void test17299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17299");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getDurationType();
        mutableDateTime3.add(durationFieldType7, (-1));
        long long10 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.setMillis((long) 902);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime3.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField(21933332);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider18 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str22 = nameProvider18.getShortName(locale19, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.Chronology chronology31 = localDate25.getChronology();
        long long35 = chronology31.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean36 = dateTimeFieldType24.isSupported(chronology31);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology31, locale37);
        java.lang.String str39 = locale37.getLanguage();
        java.lang.String str42 = nameProvider18.getName(locale37, "zh", "2022-02-21T15:02:25.259Z");
        java.util.Locale locale43 = null;
        java.lang.String str46 = nameProvider18.getName(locale43, "0003-06-22T06:04:46.339+15:02:03.198", "23:59:59.999");
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate53 = localDate47.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property54 = localDate47.yearOfEra();
        org.joda.time.DateTime dateTime55 = localDate47.toDateTimeAtMidnight();
        boolean boolean57 = dateTime55.isEqual((long) 21);
        org.joda.time.DateTime.Property property58 = dateTime55.weekyear();
        org.joda.time.DateTime dateTime59 = property58.withMaximumValue();
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale61.getDisplayScript();
        org.joda.time.DateTime dateTime63 = property58.setCopy("197", locale61);
        java.lang.String str66 = nameProvider18.getShortName(locale61, "2022-02-22T06:06:21.247+15:02:03.198", "2022-02-21T15:01:52.229Z");
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology72 = localDate67.getChronology();
        org.joda.time.Chronology chronology73 = localDate67.getChronology();
        long long77 = chronology73.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField78 = chronology73.weekyearOfCentury();
        long long80 = dateTimeField78.roundHalfFloor((long) 47);
        java.lang.String str81 = dateTimeField78.toString();
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.lang.String str84 = dateTimeField78.getAsText(212880000, locale83);
        boolean boolean85 = locale83.hasExtensions();
        java.lang.String str88 = nameProvider18.getName(locale83, "2022-02-22T06:08:35.156+15:02:03.198", "52");
        java.util.Locale locale89 = locale83.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime90 = property16.set("2022-02-22T06:07:41.626+15:02:03.198", locale89);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:07:41.626+15:02:03.198\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2L + "'", long10 == 2L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(nameProvider18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 200L + "'", long35 == 200L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr" + "'", str39, "fr");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 200L + "'", long77 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str81, "DateTimeField[weekyearOfCentury]");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "212880000" + "'", str84, "212880000");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
    }

    @Test
    public void test17300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17300");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        boolean boolean18 = durationField17.isSupported();
        long long21 = durationField17.getValueAsLong((-48469999L), (long) 59);
        long long23 = durationField17.getMillis((long) 22134234);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-807L) + "'", long21 == (-807L));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1328054040000L + "'", long23 == 1328054040000L);
    }

    @Test
    public void test17301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17301");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate11 = localDate5.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property12 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property12.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        org.joda.time.LocalDate localDate17 = property12.setCopy((int) (byte) 1);
        java.util.Locale locale18 = java.util.Locale.UK;
        boolean boolean19 = locale18.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale18.getDisplayName(locale20);
        java.lang.String str22 = locale20.getDisplayScript();
        int int23 = property12.getMaximumTextLength(locale20);
        java.lang.String str24 = locale1.getDisplayName(locale20);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.Chronology chronology32 = localDate26.getChronology();
        long long36 = chronology32.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology44 = chronology42.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekOfWeekyear();
        long long48 = dateTimeField45.addWrapField((long) ' ', 0);
        boolean boolean49 = dateTimeField45.isSupported();
        long long52 = dateTimeField45.add(1L, (int) 'a');
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.lang.String str55 = locale54.getVariant();
        java.lang.String str56 = dateTimeField45.getAsShortText(100, locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(10L, chronology32, locale54, (java.lang.Integer) 490);
        java.lang.String str59 = locale1.getDisplayVariant(locale54);
        java.lang.String str60 = locale1.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = locale1.getUnicodeLocaleType("2022-02-22T06:05:52.758+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T06:05:52.758+15:02:03.198");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Englisch (Vereinigtes K\366nigreich)" + "'", str21, "Englisch (Vereinigtes K\366nigreich)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Deutsch" + "'", str24, "Deutsch");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 200L + "'", long36 == 200L);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 32L + "'", long48 == 32L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 58665600001L + "'", long52 == 58665600001L);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "100" + "'", str56, "100");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test17302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17302");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        mutableDateTime5.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.property(dateTimeFieldType10);
        int int12 = mutableDateTime0.get(dateTimeFieldType10);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = dateTimeField34.getAsText((long) (short) 1, locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(32L, chronology21, locale36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate54.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) dateTime46, dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone68);
        long long71 = dateTimeZone63.getMillisKeepLocal(dateTimeZone68, (long) (byte) -1);
        dateTimeParserBucket38.setZone(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone68);
        mutableDateTime0.setZone(dateTimeZone68);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime77 = property75.add((long) 21896);
        org.joda.time.MutableDateTime mutableDateTime78 = property75.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime79 = property75.roundFloor();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456256252,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=56,MILLISECOND=252,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
    }

    @Test
    public void test17303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17303");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.Chronology chronology21 = chronology15.withZone(dateTimeZone20);
        org.joda.time.DurationField durationField22 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test17304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17304");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        org.joda.time.LocalTime localTime10 = localTime6.withField(dateTimeFieldType7, 0);
        int int11 = localTime10.size();
        org.joda.time.Chronology chronology12 = localTime10.getChronology();
        int[] intArray13 = localTime10.getValues();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime10.withPeriodAdded(readablePeriod14, 21977916);
        int int17 = localTime16.getHourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.plusHours(23);
        org.joda.time.DateTime dateTime20 = localTime16.toDateTimeToday();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[11, 7, 59, 0]");
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test17305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17305");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.roundFloorCopy();
        java.util.Locale locale14 = new java.util.Locale("2022-02-21T15:02:30.295Z");
        java.lang.String str15 = locale14.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property7.setCopy("DurationField[months]", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[months]\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals(locale14.toString(), "2022-02-21t15:02:30.295z");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test17306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17306");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T06:04:55.041+15:02:03.198");
        java.util.TimeZone.setDefault(timeZone1);
        int int3 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test17307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17307");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.setCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime13 = null; // flaky: property5.addNoWrapToCopy(54143);
        org.joda.time.LocalTime localTime15 = property5.addCopy(173);
        org.joda.time.DurationField durationField16 = property5.getDurationField();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17308");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.getLocalDate();
        org.joda.time.LocalDate localDate13 = property7.setCopy(6);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate20 = localDate14.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property21 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate23 = property21.roundFloorCopy();
        org.joda.time.LocalDate localDate24 = property21.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField25 = property21.getField();
        org.joda.time.LocalDate localDate26 = property21.withMinimumValue();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate30 = localDate27.withField(dateTimeFieldType28, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDate30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime32.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property37 = dateTime35.property(dateTimeFieldType36);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.Chronology chronology48 = localDate42.getChronology();
        long long52 = chronology48.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean53 = dateTimeFieldType41.isSupported(chronology48);
        mutableDateTime38.setChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField55 = chronology48.dayOfYear();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType36.getField(chronology48);
        org.joda.time.LocalDate localDate58 = localDate26.withField(dateTimeFieldType36, (int) 'a');
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        long long70 = chronology64.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DurationField durationField71 = chronology64.seconds();
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType36.getField(chronology64);
        org.joda.time.LocalDate localDate74 = localDate13.withField(dateTimeFieldType36, 663);
        org.joda.time.LocalDate localDate76 = localDate74.minusDays(172);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 200L + "'", long52 == 200L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-48469999L) + "'", long70 == (-48469999L));
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
    }

    @Test
    public void test17309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17309");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) 4406400000L, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfDay();
        org.joda.time.Chronology chronology12 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test17310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17310");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology12);
        org.joda.time.DurationField durationField16 = chronology12.months();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        int int18 = localDate17.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.Chronology chronology22 = chronology12.withZone(dateTimeZone19);
        org.joda.time.DurationField durationField23 = chronology22.millis();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str29 = nameProvider25.getShortName(locale26, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.Chronology chronology38 = localDate32.getChronology();
        long long42 = chronology38.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean43 = dateTimeFieldType31.isSupported(chronology38);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology38, locale44);
        java.lang.String str46 = locale44.getLanguage();
        java.lang.String str49 = nameProvider25.getName(locale44, "zh", "2022-02-21T15:02:25.259Z");
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str54 = nameProvider25.getName(locale50, "2022-02-21T15:02:09.402Z", "2022-02-21T15:02:20.959Z");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket57 = new org.joda.time.format.DateTimeParserBucket((-21881489L), chronology22, locale50, (java.lang.Integer) 21961018, 54134677);
        java.lang.String str58 = locale50.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime59 = property4.setCopy("2022-02-21T15:10:20.739+00:00:00.035", locale50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:10:20.739+00:00:00.035\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8 + "'", int18 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(nameProvider25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 200L + "'", long42 == 200L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fr" + "'", str46, "fr");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test17311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17311");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        int int9 = mutableDateTime8.getYearOfCentury();
        int int10 = mutableDateTime8.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test17312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17312");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) 4406400000L, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology7.add(readablePeriod11, (long) 54156019, 2800);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DurationField durationField16 = chronology7.hours();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 54156019L + "'", long14 == 54156019L);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test17313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17313");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        int int11 = localDateTime0.getMillisOfSecond();
        int int12 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property13 = localDateTime0.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.minus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(54149188);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra(756);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withDayOfMonth(225);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 225 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 502 + "'", int11 == 502);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 56 + "'", int12 == 56);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test17314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17314");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMinimumValue();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8336517 + "'", int2 == 8336517);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime.Property property6 = localTime2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property6.setCopy(21914182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21914182 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test17316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17316");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfCentury();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.Chronology chronology12 = chronology7.withUTC();
        org.joda.time.DurationField durationField13 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.clockhourOfDay();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test17317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17317");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withDurationAdded(readableDuration8, 0);
        int[] intArray11 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay(54113391);
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.year();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[1984, 5, 26, 8936585]");
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test17318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17318");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths((int) '4');
        org.joda.time.DateTime dateTime12 = dateTime8.plusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.Chronology chronology19 = localDate13.getChronology();
        long long23 = chronology19.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.DateTime.Property property25 = dateTime24.millisOfSecond();
        boolean boolean26 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) dateTime24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime24.withDayOfMonth(22007);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22007 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test17319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17319");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        int int5 = property3.get();
        org.joda.time.LocalTime localTime6 = property3.roundCeilingCopy();
        org.joda.time.LocalTime localTime8 = null; // flaky: property3.addNoWrapToCopy(80);
        org.joda.time.LocalTime localTime9 = property3.getLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis(21894);
        org.joda.time.LocalTime.Property property12 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property12.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime16 = localTime13.withPeriodAdded(readablePeriod14, 54439);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.Chronology chronology23 = localDate17.getChronology();
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.centuryOfEra();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = localTime13.isBefore((org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40079999 + "'", int5 == 40079999);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test17320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17320");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.String str9 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList7);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream10 = languageRangeList3.stream();
        boolean boolean11 = strSet0.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((-1L), dateTimeZone13);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        java.lang.String str16 = property15.toString();
        java.lang.String str17 = property15.getAsShortText();
        org.joda.time.LocalTime localTime18 = property15.getLocalTime();
        org.joda.time.LocalTime localTime19 = property15.withMinimumValue();
        org.joda.time.LocalTime localTime20 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTimeField[] dateTimeFieldArray21 = localTime20.getFields();
        org.joda.time.DateTimeField[] dateTimeFieldArray22 = strSet0.toArray(dateTimeFieldArray21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream26 = languageRangeList24.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList30, strMap31);
        java.util.Collection<java.util.Locale> localeCollection33 = null;
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList35 = java.util.Locale.filter(languageRangeList30, localeCollection33, filteringMode34);
        boolean boolean36 = strSet0.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30);
        java.lang.Object[] objArray37 = strSet0.toArray();
        java.util.Iterator<java.lang.String> strItor38 = strSet0.iterator();
        java.util.Set<java.lang.String> strSet39 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray40 = strSet39.toArray();
        java.util.Iterator<java.lang.String> strItor41 = strSet39.iterator();
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream45 = languageRangeList43.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap46);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap48);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList49, strMap50);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream55 = languageRangeList53.stream();
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList61, filteringMode64);
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray67 = strSet66.toArray();
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strSet66, filteringMode68);
        java.util.Locale.FilteringMode filteringMode70 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags(languageRangeList51, (java.util.Collection<java.lang.String>) strSet66, filteringMode70);
        boolean boolean72 = strSet39.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51);
        org.joda.time.tz.Provider provider73 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider73);
        java.util.Set<java.lang.String> strSet75 = provider73.getAvailableIDs();
        java.lang.Object[] objArray76 = strSet75.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream80 = languageRangeList78.stream();
        java.util.Locale.LanguageRange[] languageRangeArray81 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList82 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList82, languageRangeArray81);
        java.lang.String[] strArray85 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        java.lang.String str88 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList82, (java.util.Collection<java.lang.String>) strList86);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.lang.String>) strList86, filteringMode89);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap91 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList92 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, strMap91);
        boolean boolean93 = strSet75.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList51, (java.util.Collection<java.lang.String>) strSet75);
        boolean boolean95 = strSet0.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51);
        int int96 = strSet0.size();
        boolean boolean97 = strSet0.isEmpty();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Property[millisOfDay]" + "'", str16, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "40079999" + "'", str17, "40079999");
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray21);
        org.junit.Assert.assertNotNull(dateTimeFieldArray22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeStream26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode34.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(languageRangeStream45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(languageRangeStream55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode64.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode68.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + filteringMode70 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode70.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(provider73);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(languageRangeStream80);
        org.junit.Assert.assertNotNull(languageRangeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode89.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(languageRangeList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test17321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17321");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DurationField durationField10 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = chronology8.days();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.Chronology chronology19 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("1969-12-31", "2022-02-22T06:06:16.373+15:02:03.198");
        int int25 = dateTimeField21.getMaximumShortTextLength(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 54506417, chronology8, locale24, (java.lang.Integer) 22169);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale24.toString(), "1969-12-31_2022-02-22T06:06:16.373+15:02:03.198");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test17322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17322");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfCentury(2);
        org.joda.time.LocalDate localDate8 = localDate6.minusYears(82);
        int int9 = localDate8.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate8.withDayOfMonth(831);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 831 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1920 + "'", int9 == 1920);
    }

    @Test
    public void test17323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        int int8 = localTime6.getValue((int) (byte) 0);
        org.joda.time.LocalTime.Property property9 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundHalfEvenCopy();
        int int11 = localTime10.getMillisOfDay();
        java.util.Locale locale13 = java.util.Locale.PRC;
        java.lang.String str14 = locale13.getCountry();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Calendar calendar23 = mutableDateTime19.toCalendar(locale22);
        java.lang.String str24 = property18.getAsText(locale22);
        java.lang.String str25 = locale13.getDisplayVariant(locale22);
        java.lang.String str26 = locale22.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = localTime10.toString("2022-02-24T02:16:44.411+59:08", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40080000 + "'", int11 == 40080000);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CN" + "'", str14, "CN");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645456256717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=56,MILLISECOND=717,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test17324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17324");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.LocalTime localTime8 = localTime6.plusMinutes((int) (short) -1);
        int int9 = localTime6.size();
        int int10 = localTime6.getMinuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime6.minusHours(22003894);
        org.joda.time.LocalTime localTime14 = localTime6.plusMinutes(21998);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test17325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17325");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        java.lang.String str5 = mutableDateTime0.toString();
        mutableDateTime0.addWeeks(901);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime0.copy();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekOfWeekyear();
        long long20 = dateTimeField17.addWrapField((long) ' ', 0);
        boolean boolean21 = dateTimeField17.isSupported();
        long long24 = dateTimeField17.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField17.getType();
        long long28 = dateTimeField17.getDifferenceAsLong((long) (short) 1, 200L);
        int int29 = dateTimeField17.getMaximumValue();
        mutableDateTime0.setRounding(dateTimeField17, (int) (byte) 0);
        long long33 = dateTimeField17.roundHalfEven((long) 100);
        org.joda.time.DurationField durationField34 = dateTimeField17.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = dateTimeField17.getType();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456256754,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=56,MILLISECOND=754,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-24T02:18:56.754+59:08" + "'", str5, "2022-02-24T02:18:56.754+59:08");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 32L + "'", long20 == 32L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 58665600001L + "'", long24 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-259200000L) + "'", long33 == (-259200000L));
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
    }

    @Test
    public void test17326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17326");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T06:06:04.795+15:02:03.198");
        org.joda.time.DateTime.Property property2 = dateTime1.era();
        boolean boolean3 = property2.isLeap();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test17327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17327");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.era();
        org.joda.time.DurationField durationField16 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.yearOfCentury();
        org.joda.time.Chronology chronology18 = chronology14.withUTC();
        org.joda.time.DurationField durationField19 = chronology14.years();
        org.joda.time.DurationField durationField20 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField21 = chronology14.yearOfCentury();
        org.joda.time.DurationField durationField22 = chronology14.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(22032570, 64, 22169, 54442278, 21963740, 670, 524, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54442278 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test17328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17328");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        long long23 = dateTimeField20.addWrapField((long) ' ', 0);
        boolean boolean24 = dateTimeField20.isSupported();
        long long27 = dateTimeField20.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField20.getType();
        long long31 = dateTimeField20.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate38 = localDate32.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate32.yearOfEra();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate40, locale41);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.Chronology chronology50 = localDate44.getChronology();
        long long54 = chronology50.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.weekOfWeekyear();
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = dateTimeField63.getAsText((long) (short) 1, locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket(32L, chronology50, locale65);
        java.lang.String str68 = locale41.getDisplayVariant(locale65);
        int int69 = property10.getMaximumShortTextLength(locale65);
        org.joda.time.DateTime dateTime70 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime71 = dateTime70.toDateTimeISO();
        java.lang.Class<?> wildcardClass72 = dateTime70.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32L + "'", long23 == 32L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 58665600001L + "'", long27 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "52" + "'", str42, "52");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 200L + "'", long54 == 200L);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 9 + "'", int69 == 9);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test17329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17329");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        boolean boolean5 = mutableDateTime0.isBeforeNow();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMillisOfDay((int) (short) 100);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str16 = mutableDateTime0.toString(dateTimeFormatter15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withPivotYear((int) (short) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter15.withPivotYear(2039);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate28 = localDate22.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate22.yearOfEra();
        org.joda.time.LocalDate localDate30 = property29.roundFloorCopy();
        org.joda.time.LocalDate localDate31 = property29.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths(54141456);
        java.lang.String str34 = dateTimeFormatter21.print((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        mutableDateTime35.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime35.property(dateTimeFieldType40);
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfEven();
        mutableDateTime42.setHourOfDay(2);
        java.lang.Object obj45 = mutableDateTime42.clone();
        mutableDateTime42.addMinutes(83);
        mutableDateTime42.setMillis((long) 21901192);
        mutableDateTime42.setMillisOfDay(21900690);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter52.withOffsetParsed();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate56 = localDate54.minusMonths((int) (short) -1);
        boolean boolean58 = localDate54.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology59 = localDate54.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology61 = chronology59.withZone(dateTimeZone60);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology59);
        org.joda.time.DurationField durationField63 = chronology59.months();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        int int65 = localDate64.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate64.toDateTimeAtStartOfDay(dateTimeZone66);
        org.joda.time.Chronology chronology69 = chronology59.withZone(dateTimeZone66);
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now(chronology69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter53.withChronology(chronology69);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.weekyearOfCentury();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((java.lang.Object) mutableDateTime42, chronology69);
        org.joda.time.DateTimeField dateTimeField74 = chronology69.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((java.lang.Object) dateTimeFormatter21, chronology69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.format.DateTimeFormatter");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456256824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=56,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e94" + "'", str16, "\u5e74\u6708\u65e5\u661f\u671f\u4e94");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u516d" + "'", str34, "\u5e74\u6708\u65e5\u661f\u671f\u516d");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "2022-11-01T02:00:00.000+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "2022-11-01T02:00:00.000+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "2022-11-01T02:00:00.000+59:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test17330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17330");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        int int7 = localDateTime5.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusWeeks(21968);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.era();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8337842 + "'", int7 == 8337842);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1601-02-15T02:18:57.842" + "'", str10, "1601-02-15T02:18:57.842");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test17331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17331");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime7 = property5.roundFloorCopy();
        boolean boolean9 = localTime7.equals((java.lang.Object) "23:59:59.999");
        int int10 = localTime7.getMinuteOfHour();
        org.joda.time.LocalTime.Property property11 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property11.addCopy((int) (byte) 0);
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime16 = localTime13.minusMillis(54145337);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = localTime16.withMinuteOfHour(117);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test17332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17332");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMonths((int) '4');
        org.joda.time.DateTime dateTime34 = dateTime32.plus((-48469999L));
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds(2);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate40.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime32, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone54);
        long long57 = dateTimeZone49.getMillisKeepLocal(dateTimeZone54, (long) (byte) -1);
        dateTimeParserBucket24.setZone(dateTimeZone54);
        java.util.Locale locale59 = dateTimeParserBucket24.getLocale();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket24.setZone(dateTimeZone60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        dateTimeParserBucket24.setZone(dateTimeZone62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleKeys();
        dateTimeParserBucket24.saveField(dateTimeFieldType64, "2022-02-22T06:05:08.192+15:02:03.198", locale66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = locale66.getUnicodeLocaleType("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: monthOfYear");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(strSet67);
    }

    @Test
    public void test17333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17333");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.DateTime dateTime13 = localDate11.toDateTime(readableInstant12);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime16 = dateTime13.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property18 = dateTime16.property(dateTimeFieldType17);
        org.joda.time.DateTime dateTime19 = property18.withMinimumValue();
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        boolean boolean21 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) dateTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime19.withDayOfMonth(54591070);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54591070 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:56.892+59:08" + "'", str1, "2022-02-24T02:18:56.892+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test17334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17334");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.Chronology chronology22 = localDate16.getChronology();
        long long26 = chronology22.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean27 = dateTimeFieldType15.isSupported(chronology22);
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology22, locale29, (java.lang.Integer) 54135101, 80);
        java.lang.String str34 = property13.getAsText(locale29);
        java.lang.String str35 = locale29.getISO3Language();
        java.util.Set<java.lang.String> strSet36 = locale29.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456256903,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=56,MILLISECOND=903,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 200L + "'", long26 == 200L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22" + "'", str34, "22");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test17335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17335");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        int int11 = localDateTime0.getMillisOfSecond();
        int int12 = localDateTime0.getSecondOfMinute();
        org.joda.time.Chronology chronology13 = localDateTime0.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 921 + "'", int11 == 921);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 56 + "'", int12 == 56);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test17336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17336");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.withMillisOfSecond(0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readablePeriod13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears(21928334);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test17337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17337");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 1);
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        boolean boolean4 = timeZone3.observesDaylightTime();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property15 = dateTime13.property(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.getDateTime();
        org.joda.time.DateTime dateTime19 = property15.addToCopy(11);
        org.joda.time.DateTime dateTime21 = property15.addToCopy(427);
        org.joda.time.DateTimeField dateTimeField22 = property15.getField();
        java.util.Locale locale24 = new java.util.Locale("0001-01-01T00:00:00.000Z");
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = locale24.stripExtensions();
        java.lang.String str27 = property15.getAsShortText(locale26);
        java.lang.String str28 = timeZone3.getDisplayName(locale26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 212880000 + "'", int2 == 212880000);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals(locale24.toString(), "0001-01-01t00:00:00.000z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "0001-01-01t00:00:00.000z");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Greenwich Mean Time" + "'", str28, "Greenwich Mean Time");
    }

    @Test
    public void test17338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17338");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long7 = dateTimeZone3.convertLocalToUTC((long) 524, false, (-62135596800000L));
        java.lang.String str9 = dateTimeZone3.getNameKey((long) 54119809);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 21886838, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        int int13 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths(54131);
        boolean boolean18 = dateTimeZone3.isLocalDateTimeGap(localDateTime15);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getEra();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withMillisOfDay(2);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra(560);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusHours(54130);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusSeconds(21938850);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMinutes(54);
        boolean boolean31 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        int int32 = localDateTime15.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-212879476L) + "'", long7 == (-212879476L));
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8336957 + "'", int13 == 8336957);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
    }

    @Test
    public void test17339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17339");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str2 = dateTimeFormatter0.print((-2208988800000L));
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withDefaultYear(21931872);
        java.util.Locale locale6 = dateTimeFormatter5.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withDefaultYear(407);
        java.lang.String str10 = dateTimeFormatter8.print((long) 22083);
        java.lang.Integer int11 = dateTimeFormatter8.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09" + "'", str2, "\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u516d" + "'", str10, "\u5e74\u6708\u65e5\u661f\u671f\u516d");
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test17340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17340");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(35);
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str13 = nameProvider9.getShortName(locale10, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMonths((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime27.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        mutableDateTime32.add(durationFieldType36, (-1));
        org.joda.time.DateTime dateTime40 = dateTime27.withFieldAdded(durationFieldType36, (int) (byte) 1);
        boolean boolean41 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.weekOfWeekyear();
        long long53 = dateTimeField50.addWrapField((long) ' ', 0);
        boolean boolean54 = dateTimeField50.isSupported();
        long long57 = dateTimeField50.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField50.getType();
        java.util.Locale locale60 = java.util.Locale.getDefault();
        java.lang.String str61 = dateTimeField50.getAsText((long) (byte) 1, locale60);
        java.lang.String str62 = locale60.getLanguage();
        java.util.Calendar calendar63 = dateTime40.toCalendar(locale60);
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str65 = locale60.getDisplayName(locale64);
        java.lang.String str68 = nameProvider9.getShortName(locale64, "2022-02-22T06:05:17.152+15:02:03.198", "2022-02-21T15:01:58.714Z");
        java.lang.String str69 = property6.getAsText(locale64);
        org.joda.time.LocalDate localDate70 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate72 = property6.addWrapFieldToCopy(21960141);
        org.joda.time.DateTime dateTime73 = localDate72.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = localDate72.getFieldType(0);
        org.joda.time.LocalDate localDate77 = localDate72.plusDays(898);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 32L + "'", long53 == 32L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 58665600001L + "'", long57 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=-62194294143006,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=56,MILLISECOND=994,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587" + "'", str65, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u4e8c\u6708" + "'", str69, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(localDate77);
    }

    @Test
    public void test17341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17341");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = localTime2.get(dateTimeFieldType7);
        int int9 = localTime2.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime12 = localTime2.withPeriodAdded(readablePeriod10, 21886805);
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = property13.setCopy("2022-02-21T15:09:53.159+00:00:00.035");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:09:53.159+00:00:00.035\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 40079999 + "'", int8 == 40079999);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40079999 + "'", int9 == 40079999);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17342");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.toMutableDateTimeISO();
        mutableDateTime9.setSecondOfDay(30);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekOfWeekyear();
        int int14 = mutableDateTime9.getRoundingMode();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test17343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17343");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay((int) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) 54115634);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime7.withMillisOfSecond(527);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test17344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17344");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        java.lang.String str2 = dateTimeZone1.getID();
        long long4 = dateTimeZone1.nextTransition(80L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths((int) '4');
        org.joda.time.DateTime dateTime14 = dateTime12.plus((-48469999L));
        org.joda.time.DateTime dateTime16 = dateTime12.plusSeconds(2);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate23.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology28 = localDate23.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology30 = chronology28.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = localDate20.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) dateTime12, dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime12.minusDays(8);
        org.joda.time.DateTime dateTime36 = dateTime12.withYearOfEra(902);
        int int37 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = dateTime36.withYear(1969);
        org.joda.time.DateTime.Property property40 = dateTime36.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+15:02:03.198" + "'", str2, "+15:02:03.198");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 80L + "'", long4 == 80L);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 54123198 + "'", int37 == 54123198);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test17345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17345");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime dateTime8 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime5.withMillisOfSecond(11);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.DurationField durationField21 = chronology17.months();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        int int23 = localDate22.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone24);
        org.joda.time.Chronology chronology27 = chronology17.withZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(1000L, chronology27);
        org.joda.time.Instant instant29 = mutableDateTime28.toInstant();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate36 = localDate30.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.era();
        mutableDateTime28.setChronology(chronology37);
        boolean boolean40 = dateTime10.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Chronology chronology41 = mutableDateTime28.getChronology();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime28.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test17346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17346");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDurationAdded(readableDuration12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.minusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plusSeconds(86399999);
        java.lang.String str19 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfWeek();
        java.lang.String str21 = property20.getName();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime24 = property20.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear(22078292);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMinutes(22127325);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minusHours((-21897));
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "87-2-20" + "'", str19, "87-2-20");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "dayOfWeek" + "'", str21, "dayOfWeek");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test17347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17347");
        java.util.Locale locale3 = new java.util.Locale("2022-02-24T02:18:55.855+59:08", "2022-02-22T06:08:21.961+15:02:03.198", "2022-02-22T06:07:30.053+15:02:03.198");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-24t02:18:55.855+59:08_2022-02-22T06:08:21.961+15:02:03.198_2022-02-22T06:07:30.053+15:02:03.198");
    }

    @Test
    public void test17348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17348");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtCurrentTime();
        int int4 = localDate0.getYear();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy(35);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDate8.getFieldTypes();
        org.joda.time.LocalDate localDate11 = localDate8.withYear(0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((-1L), dateTimeZone13);
        org.joda.time.LocalTime localTime16 = localTime14.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime18 = localTime14.minus(readablePeriod17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        org.joda.time.LocalTime localTime22 = localTime18.withField(dateTimeFieldType19, 0);
        org.joda.time.LocalTime localTime24 = localTime18.withMillisOfDay(83);
        org.joda.time.LocalTime localTime26 = localTime18.plusMinutes(292278993);
        int int27 = localTime18.getSecondOfMinute();
        org.joda.time.LocalTime.Property property28 = localTime18.minuteOfHour();
        org.joda.time.LocalTime localTime30 = localTime18.withMillisOfDay(0);
        org.joda.time.LocalTime localTime32 = localTime18.plusHours(21953991);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localDate11.compareTo((org.joda.time.ReadablePartial) localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59 + "'", int27 == 59);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
    }

    @Test
    public void test17349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17349");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime5.withDurationAdded(readableDuration10, (int) 'a');
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.plus((-48469999L));
        org.joda.time.DateTime dateTime52 = dateTime48.plusSeconds(2);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate56.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) dateTime48, dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone70);
        long long73 = dateTimeZone65.getMillisKeepLocal(dateTimeZone70, (long) (byte) -1);
        long long75 = dateTimeZone37.getMillisKeepLocal(dateTimeZone70, (long) 8);
        org.joda.time.DateTime dateTime76 = dateTime5.withZoneRetainFields(dateTimeZone37);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        java.lang.String str85 = chronology82.toString();
        org.joda.time.DateTime dateTime86 = dateTime5.toDateTime(chronology82);
        org.joda.time.DateTime dateTime88 = dateTime86.minusMinutes(54118820);
        org.joda.time.DateTime dateTime90 = dateTime86.minusYears(21994793);
        org.joda.time.DateTime.Property property91 = dateTime86.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 8L + "'", long75 == 8L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ISOChronology[UTC]" + "'", str85, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test17350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17350");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        java.lang.String str5 = mutableDateTime4.toString();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime4.add(readableDuration6);
        mutableDateTime4.setWeekyear((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        mutableDateTime4.setTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = mutableDateTime4.toDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime4.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime4.copy();
        java.lang.String str16 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter0.withDefaultYear(54123005);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter18.getParser();
        java.io.Writer writer20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        mutableDateTime21.add(durationFieldType25, (-1));
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime21.add(readablePeriod28, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.dayOfMonth();
        java.lang.String str32 = mutableDateTime21.toString();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter18.printTo(writer20, (org.joda.time.ReadableInstant) mutableDateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-24T02:18:57.275+59:08" + "'", str5, "2022-02-24T02:18:57.275+59:08");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e0a\u53482:18" + "'", str16, "\u4e0a\u53482:18");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-24T02:18:57.274+59:08" + "'", str32, "2022-02-24T02:18:57.274+59:08");
    }

    @Test
    public void test17351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17351");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime17.add(durationFieldType21, (-1));
        org.joda.time.DateTime dateTime25 = dateTime12.withFieldAdded(durationFieldType21, (int) (byte) 1);
        boolean boolean26 = dateTime5.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.minusMillis((int) (short) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.era();
        org.joda.time.DateTime dateTime30 = property29.roundCeilingCopy();
        java.lang.String str31 = property29.getAsString();
        org.joda.time.DateTime dateTime32 = property29.roundCeilingCopy();
        org.joda.time.DateTime dateTime33 = property29.roundHalfCeilingCopy();
        java.lang.String str34 = property29.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u516c\u5143\u524d" + "'", str34, "\u516c\u5143\u524d");
    }

    @Test
    public void test17352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17352");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy((-259200000L));
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minus(readablePeriod10);
        int int12 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withMillisOfDay(21928387);
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8337301 + "'", int2 == 8337301);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8337301 + "'", int12 == 8337301);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test17353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17353");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.Chronology chronology16 = localDate10.getChronology();
        long long20 = chronology16.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean21 = dateTimeFieldType9.isSupported(chronology16);
        java.lang.String str22 = dateTimeFieldType9.toString();
        boolean boolean23 = localDate7.isSupported(dateTimeFieldType9);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = localDate7.toString("52", locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.lang.String str28 = locale25.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 200L + "'", long20 == 200L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millisOfSecond" + "'", str22, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "52" + "'", str26, "52");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
    }

    @Test
    public void test17354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17354");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusSeconds((int) (byte) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime5.withDurationAdded(readableDuration10, (int) 'a');
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        org.joda.time.DateTime dateTime24 = dateTime20.plusSeconds(2);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology38 = chronology36.withZone(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate28.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateTime20, dateTimeZone37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate44 = localDate41.withField(dateTimeFieldType42, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.DateTime dateTime46 = localDate44.toDateTime(readableInstant45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMonths((int) '4');
        org.joda.time.DateTime dateTime50 = dateTime48.plus((-48469999L));
        org.joda.time.DateTime dateTime52 = dateTime48.plusSeconds(2);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate56.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((java.lang.Object) dateTime48, dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone70);
        long long73 = dateTimeZone65.getMillisKeepLocal(dateTimeZone70, (long) (byte) -1);
        long long75 = dateTimeZone37.getMillisKeepLocal(dateTimeZone70, (long) 8);
        org.joda.time.DateTime dateTime76 = dateTime5.withZoneRetainFields(dateTimeZone37);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate79 = localDate77.minusMonths((int) (short) -1);
        boolean boolean81 = localDate77.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology82 = localDate77.getChronology();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology84 = chronology82.withZone(dateTimeZone83);
        java.lang.String str85 = chronology82.toString();
        org.joda.time.DateTime dateTime86 = dateTime5.toDateTime(chronology82);
        java.lang.String str87 = dateTime86.toString();
        org.joda.time.DateTime.Property property88 = dateTime86.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-1L) + "'", long73 == (-1L));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 8L + "'", long75 == 8L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "ISOChronology[UTC]" + "'", str85, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime86);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "-0001-02-21T15:10:57.325Z" + "'", str87, "-0001-02-21T15:10:57.325Z");
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test17355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17355");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean13 = dateTimeFieldType1.isSupported(chronology8);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology8, locale15, (java.lang.Integer) 54135101, 80);
        long long20 = dateTimeParserBucket19.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket19.getZone();
        dateTimeParserBucket19.setOffset((java.lang.Integer) 185);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime32 = dateTime29.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        org.joda.time.DateTime dateTime35 = property34.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        java.lang.String str38 = dateTimeField36.getAsText((long) 54127672);
        java.util.Locale locale41 = new java.util.Locale("en", "52");
        java.util.Locale locale42 = locale41.stripExtensions();
        int int43 = dateTimeField36.getMaximumShortTextLength(locale41);
        dateTimeParserBucket19.saveField(dateTimeField36, 8202510);
        boolean boolean46 = dateTimeField36.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970" + "'", str38, "1970");
        org.junit.Assert.assertEquals(locale41.toString(), "en_52");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_52");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test17356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17356");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.weekyear();
        java.lang.Object obj14 = mutableDateTime1.clone();
        org.joda.time.Chronology chronology15 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfWeek();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Calendar calendar22 = mutableDateTime18.toCalendar(locale21);
        java.lang.String str23 = locale21.getDisplayScript();
        java.lang.String str24 = locale17.getDisplayScript(locale21);
        java.util.Locale locale25 = locale17.stripExtensions();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        long long37 = dateTimeField34.addWrapField((long) ' ', 0);
        boolean boolean38 = dateTimeField34.isSupported();
        long long41 = dateTimeField34.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField34.getType();
        long long45 = dateTimeField34.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate48 = localDate46.minusMonths((int) (short) -1);
        boolean boolean50 = localDate46.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate52 = localDate46.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property53 = localDate46.yearOfEra();
        org.joda.time.LocalDate localDate54 = property53.roundFloorCopy();
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.lang.String str56 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate54, locale55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = dateTimeField34.getType();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale58);
        int int60 = dateTimeField34.getMaximumTextLength(locale58);
        java.lang.String str61 = locale25.getDisplayLanguage(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 54487012, chronology15, locale58, (java.lang.Integer) 22167890);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456257402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=402,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "2022-02-24T02:18:57.402+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "2022-02-24T02:18:57.402+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "2022-02-24T02:18:57.402+59:08");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645456257402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=402,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 32L + "'", long37 == 32L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 58665600001L + "'", long41 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "52" + "'", str56, "52");
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e2d\u6587" + "'", str61, "\u4e2d\u6587");
    }

    @Test
    public void test17357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17357");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        long long21 = chronology17.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology29 = chronology27.withZone(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.weekOfWeekyear();
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.lang.String str33 = dateTimeField30.getAsText((long) (short) 1, locale32);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(32L, chronology17, locale32);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate38 = localDate35.withField(dateTimeFieldType36, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDate38.toDateTime(readableInstant39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMonths((int) '4');
        org.joda.time.DateTime dateTime44 = dateTime42.plus((-48469999L));
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds(2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate55 = localDate53.minusMonths((int) (short) -1);
        boolean boolean57 = localDate53.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology58 = localDate53.getChronology();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology60 = chronology58.withZone(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate50.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((java.lang.Object) dateTime42, dateTimeZone59);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone64);
        long long67 = dateTimeZone59.getMillisKeepLocal(dateTimeZone64, (long) (byte) -1);
        dateTimeParserBucket34.setZone(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone64);
        org.joda.time.Interval interval70 = localDate8.toInterval(dateTimeZone64);
        org.joda.time.LocalDate localDate71 = org.joda.time.LocalDate.now(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(dateTimeZone64);
        java.lang.String str73 = dateTimeZone64.toString();
        java.util.Locale locale75 = java.util.Locale.getDefault();
        java.lang.String str76 = locale75.getDisplayCountry();
        java.util.Locale locale80 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str81 = locale75.getDisplayCountry(locale80);
        java.lang.String str82 = dateTimeZone64.getName(3156159740309L, locale75);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 200L + "'", long21 == 200L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+59:08" + "'", str73, "+59:08");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals(locale80.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+59:08" + "'", str82, "+59:08");
    }

    @Test
    public void test17358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17358");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime16.plus((-48469999L));
        org.joda.time.DateTime dateTime20 = dateTime16.plusSeconds(2);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDate24.toDateTimeAtCurrentTime(dateTimeZone33);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) dateTime16, dateTimeZone33);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39);
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Calendar calendar42 = mutableDateTime38.toCalendar(locale41);
        boolean boolean43 = dateTime37.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        java.lang.String str45 = mutableDateTime44.toString();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        mutableDateTime46.add(durationFieldType50, (-1));
        mutableDateTime44.add(durationFieldType50, 10);
        org.joda.time.DateTime dateTime56 = dateTime37.withFieldAdded(durationFieldType50, 5);
        java.util.Date date57 = dateTime37.toDate();
        org.joda.time.DateTime dateTime59 = dateTime37.withYearOfEra(100);
        mutableDateTime7.setDate((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str61 = dateTime59.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645456257483,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=483,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-24T02:18:57.483+59:08" + "'", str45, "2022-02-24T02:18:57.483+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Mon Feb 21 15:10:57 GMT 2022");
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0100-02-24T02:18:57.483+59:08" + "'", str61, "0100-02-24T02:18:57.483+59:08");
    }

    @Test
    public void test17359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17359");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(226923198L);
    }

    @Test
    public void test17360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17360");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test17361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17361");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        java.lang.String str5 = property3.getAsShortText();
        org.joda.time.LocalTime localTime6 = property3.getLocalTime();
        org.joda.time.LocalTime localTime8 = property3.addWrapFieldToCopy(778);
        org.joda.time.DurationField durationField9 = property3.getRangeDurationField();
        int int10 = property3.getMinimumValue();
        org.joda.time.LocalTime localTime11 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property3.setCopy(54145125);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime14.add(readablePeriod17, 486);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.DateTime dateTime21 = localTime13.toDateTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        mutableDateTime24.add(durationFieldType28, (-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.withFieldAdded(durationFieldType28, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withDurationAdded(readableDuration41, 0);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withDurationAdded(readableDuration44, 10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime40.withWeekyear(5);
        int int49 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime40.minus(readableDuration50);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localTime13.compareTo((org.joda.time.ReadablePartial) localDateTime51);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "40079999" + "'", str5, "40079999");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-24T02:18:57.532+59:08" + "'", str15, "2022-02-24T02:18:57.532+59:08");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test17362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17362");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate0.withWeekOfWeekyear(23);
        org.joda.time.LocalDate.Property property8 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate16 = localDate10.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property17 = localDate10.yearOfEra();
        org.joda.time.LocalDate localDate18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.Chronology chronology27 = localDate21.getChronology();
        long long31 = chronology27.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate34 = localDate32.minusMonths((int) (short) -1);
        boolean boolean36 = localDate32.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology37 = localDate32.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology39 = chronology37.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = dateTimeField40.getAsText((long) (short) 1, locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket(32L, chronology27, locale42);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths((int) '4');
        org.joda.time.DateTime dateTime54 = dateTime52.plus((-48469999L));
        org.joda.time.DateTime dateTime56 = dateTime52.plusSeconds(2);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate60 = localDate57.withField(dateTimeFieldType58, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.DateTime dateTime62 = localDate60.toDateTime(readableInstant61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths((int) (short) -1);
        boolean boolean67 = localDate63.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology68 = localDate63.getChronology();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology70 = chronology68.withZone(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = localDate60.toDateTimeAtCurrentTime(dateTimeZone69);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((java.lang.Object) dateTime52, dateTimeZone69);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone74);
        long long77 = dateTimeZone69.getMillisKeepLocal(dateTimeZone74, (long) (byte) -1);
        dateTimeParserBucket44.setZone(dateTimeZone74);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone74);
        org.joda.time.Interval interval80 = localDate18.toInterval(dateTimeZone74);
        org.joda.time.ReadablePeriod readablePeriod81 = null;
        org.joda.time.LocalDate localDate82 = localDate18.minus(readablePeriod81);
        int int83 = localDate18.getYearOfEra();
        org.joda.time.DateTime dateTime84 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property85 = localDate18.era();
        int int86 = localDate18.size();
        boolean boolean87 = localDate9.isAfter((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray88 = localDate9.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 200L + "'", long31 == 200L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-1L) + "'", long77 == (-1L));
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2022 + "'", int83 == 2022);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray88);
    }

    @Test
    public void test17363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17363");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean13 = dateTimeFieldType1.isSupported(chronology8);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology8, locale15, (java.lang.Integer) 54135101, 80);
        org.joda.time.DurationField durationField20 = chronology8.seconds();
        org.joda.time.DurationField durationField21 = chronology8.months();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusMonths((int) (short) -1);
        boolean boolean27 = localDate25.equals((java.lang.Object) (byte) 10);
        int int28 = localDate25.getMonthOfYear();
        org.joda.time.LocalDate localDate30 = localDate25.plusYears(1);
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDate localDate33 = localDate30.minus(readablePeriod32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        long long45 = chronology39.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.DateTimeField dateTimeField46 = chronology39.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48);
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Calendar calendar51 = mutableDateTime47.toCalendar(locale50);
        java.lang.String str52 = mutableDateTime47.toString();
        mutableDateTime47.addWeeks(901);
        org.joda.time.Chronology chronology55 = mutableDateTime47.getChronology();
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(chronology55);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.Chronology chronology65 = localDate59.getChronology();
        long long69 = chronology65.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean70 = dateTimeFieldType58.isSupported(chronology65);
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType57.getField(chronology65);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DurationField durationField73 = chronology65.weeks();
        org.joda.time.DurationFieldType durationFieldType74 = durationField73.getType();
        org.joda.time.LocalDate localDate76 = localDate56.withFieldAdded(durationFieldType74, 18380031);
        int[] intArray78 = chronology39.get((org.joda.time.ReadablePartial) localDate56, (long) 3);
        chronology8.validate((org.joda.time.ReadablePartial) localDate30, intArray78);
        org.joda.time.LocalDate.Property property80 = localDate30.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-48469999L) + "'", long45 == (-48469999L));
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645456257608,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=608,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-24T02:18:57.608+59:08" + "'", str52, "2022-02-24T02:18:57.608+59:08");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 200L + "'", long69 == 200L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test17364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17364");
        java.lang.String[] strArray15 = new java.lang.String[] { "0001-01-01T00:00:00.000Z", "2022-02-21T15:02:10.158Z", "12:01 AM", "Property[millisOfDay]", "sunday, february 21, -0001", "2022-02-21T15:02:16.310Z", "1", "Englisch (Vereinigtes K\366nigreich)", "2022-02-21T15:02:18.366Z", "2022-02-21T15:01:59.136Z", "2022", "2022-02-21T15:02:05.418Z", "2022-02-21T15:01:55.945Z", "Greenwich Mean Time", "2022-03-21" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream21 = languageRangeList19.stream();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.FilteringMode filteringMode30 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList27, filteringMode30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, strMap32);
        boolean boolean34 = strSet16.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33);
        boolean boolean35 = strSet16.isEmpty();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate39 = localDate37.minusMonths((int) (short) -1);
        boolean boolean41 = localDate37.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology42 = localDate37.getChronology();
        org.joda.time.Chronology chronology43 = localDate37.getChronology();
        long long47 = chronology43.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        boolean boolean52 = localDate48.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology53 = localDate48.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology55 = chronology53.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.weekOfWeekyear();
        java.util.Locale locale58 = java.util.Locale.getDefault();
        java.lang.String str59 = dateTimeField56.getAsText((long) (short) 1, locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket(32L, chronology43, locale58);
        org.joda.time.DateTimeField dateTimeField61 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField62 = chronology43.year();
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology43);
        org.joda.time.LocalDate localDate65 = localDate63.minusMonths(54140309);
        java.lang.String str67 = localDate65.toString("15.02.22 00:00");
        boolean boolean68 = strSet16.contains((java.lang.Object) localDate65);
        org.joda.time.DateTime dateTime69 = localDate65.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeStream21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + filteringMode30 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode30.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 200L + "'", long47 == 200L);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "15.02.22 00:00" + "'", str67, "15.02.22 00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test17365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17365");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        java.lang.Object obj13 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.yearOfEra();
        mutableDateTime0.addWeeks(999);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime0.add(readablePeriod17, 54138295);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addMinutes(621);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456257676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=676,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "2022-02-24T02:18:57.676+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "2022-02-24T02:18:57.676+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "2022-02-24T02:18:57.676+59:08");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test17366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17366");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        java.util.Iterator<java.lang.String> strItor2 = strSet0.iterator();
        boolean boolean4 = strSet0.add("2022-02-21T15:01:56.563Z");
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        mutableDateTime7.add(durationFieldType11, (-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withFieldAdded(durationFieldType11, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(86399999);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfDay(427);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy(7200000L);
        boolean boolean23 = strSet0.equals((java.lang.Object) property20);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.Chronology chronology30 = localDate24.getChronology();
        long long34 = chronology30.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyearOfCentury();
        int int37 = dateTimeField35.getLeapAmount((long) 1970);
        int int39 = dateTimeField35.get((long) 80);
        long long41 = dateTimeField35.roundFloor((long) 901);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        int[] intArray45 = null;
        int int46 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDate44, intArray45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = strSet0.contains((java.lang.Object) dateTimeField35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 200L + "'", long34 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 70 + "'", int39 == 70);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 99 + "'", int46 == 99);
    }

    @Test
    public void test17367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17367");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Calendar calendar5 = mutableDateTime1.toCalendar(locale4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        mutableDateTime1.setMillis(readableInstant10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime1.getRoundingField();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate18 = localDate15.withField(dateTimeFieldType16, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTime(readableInstant19);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        org.joda.time.DateTime dateTime26 = property25.withMinimumValue();
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.DateTime dateTime29 = dateTime26.withYear(54119608);
        int int30 = dateTime29.getDayOfWeek();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 422);
        mutableDateTime33.addMonths(21916);
        int int36 = mutableDateTime33.getMillisOfDay();
        mutableDateTime33.addWeeks(21923);
        int int39 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime33.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withPivotYear((int) (short) -1);
        java.lang.String str45 = dateTimeFormatter41.print(60000L);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter41.withChronology(chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter41.withZoneUTC();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate52.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter48.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths((int) (short) -1);
        boolean boolean69 = localDate65.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology70 = localDate65.getChronology();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology72 = chronology70.withZone(dateTimeZone71);
        org.joda.time.DurationField durationField73 = chronology70.eras();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter48.withChronology(chronology70);
        mutableDateTime33.setChronology(chronology70);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) 219775, chronology70);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645456257708,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=708,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 40080422 + "'", int36 == 40080422);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e0a\u534811:09" + "'", str45, "\u4e0a\u534811:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
    }

    @Test
    public void test17368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17368");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.Interval interval46 = localDate27.toInterval(dateTimeZone40);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate50 = localDate47.withField(dateTimeFieldType48, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDate50.toDateTime(readableInstant51);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property57 = dateTime55.property(dateTimeFieldType56);
        org.joda.time.DateTime dateTime58 = property57.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime59 = localDate27.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        java.util.Date date60 = dateTime59.toDate();
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.fromDateFields(date60);
        int int62 = localDate61.size();
        org.joda.time.LocalDate.Property property63 = localDate61.yearOfEra();
        org.joda.time.LocalDate localDate65 = property63.setCopy(7);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime(chronology66);
        org.joda.time.DurationField durationField68 = chronology66.months();
        int int70 = durationField68.getValue(4201342734L);
        long long72 = durationField68.getMillis((long) 22108140);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(date60);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Sat Jun 23 12:52:00 GMT 3");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 58138792732440000L + "'", long72 == 58138792732440000L);
    }

    @Test
    public void test17369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17369");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        java.lang.String str10 = property4.getAsText(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale locale12 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setExtension('x', "0052-02-22T06:04:54.665+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 22T06:04:54.665+15:02:03.198 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456257796,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
    }

    @Test
    public void test17370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17370");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField10 = chronology6.months();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        int int12 = localDate11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.Chronology chronology16 = chronology6.withZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 22070358, chronology16);
        org.joda.time.DurationField durationField20 = chronology16.millis();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test17371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17371");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        mutableDateTime8.setMillis(readableInstant17);
        boolean boolean20 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime8.add(readablePeriod21, 0);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate27 = localDate24.withField(dateTimeFieldType25, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDate27.toDateTime(readableInstant28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMonths((int) '4');
        org.joda.time.DateTime dateTime33 = dateTime31.plus((-48469999L));
        org.joda.time.DateTime dateTime35 = dateTime31.plusSeconds(2);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate39 = localDate36.withField(dateTimeFieldType37, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDate39.toDateTime(readableInstant40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusMonths((int) (short) -1);
        boolean boolean46 = localDate42.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology47 = localDate42.getChronology();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology49 = chronology47.withZone(dateTimeZone48);
        org.joda.time.DateTime dateTime50 = localDate39.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) dateTime31, dateTimeZone48);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate55.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        long long69 = dateTimeZone64.getMillisKeepLocal(dateTimeZone67, (long) 2);
        org.joda.time.Interval interval70 = localDate51.toInterval(dateTimeZone64);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate74 = localDate71.withField(dateTimeFieldType72, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDate74.toDateTime(readableInstant75);
        org.joda.time.Chronology chronology77 = dateTime76.getChronology();
        org.joda.time.DateTime dateTime79 = dateTime76.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property81 = dateTime79.property(dateTimeFieldType80);
        org.joda.time.DateTime dateTime82 = property81.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime83 = localDate51.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        int int84 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime8.yearOfCentury();
        java.lang.String str86 = property85.getAsText();
        org.joda.time.MutableDateTime mutableDateTime87 = property85.roundFloor();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456257824,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=57,MILLISECOND=824,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 2L + "'", long69 == 2L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "22" + "'", str86, "22");
        org.junit.Assert.assertNotNull(mutableDateTime87);
    }

    @Test
    public void test17372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17372");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime9 = property3.addCopy((long) 54149738);
        int int10 = localTime9.getMillisOfSecond();
        org.joda.time.LocalTime.Property property11 = localTime9.hourOfDay();
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        int int13 = localTime9.getHourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 737 + "'", int10 == 737);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test17373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17373");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str2 = dateTimeFormatter0.print((-2208988800000L));
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate6 = localDate3.withField(dateTimeFieldType4, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTime(readableInstant7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology16 = chronology14.withZone(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = localDate6.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone15.getMillisKeepLocal(dateTimeZone18, (long) 2);
        long long22 = dateTimeZone15.nextTransition((long) 54130144);
        int int24 = dateTimeZone15.getOffset(2800L);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((java.lang.Object) (-2208988800000L), dateTimeZone15);
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfWeek();
        java.util.Date date27 = localDate25.toDate();
        int int28 = localDate25.getYear();
        org.joda.time.LocalDate localDate30 = localDate25.minusWeeks(837);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate33 = localDate31.minusMonths((int) (short) -1);
        boolean boolean35 = localDate31.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology36 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone37 = chronology36.getZone();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(chronology36);
        int int39 = localDate38.getDayOfWeek();
        org.joda.time.LocalDate localDate41 = localDate38.minusMonths(22068);
        boolean boolean42 = localDate25.isEqual((org.joda.time.ReadablePartial) localDate38);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09" + "'", str2, "\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 54130144L + "'", long22 == 54130144L);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 212880000 + "'", int24 == 212880000);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Wed Jan 03 00:00:00 GMT 1900");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1900 + "'", int28 == 1900);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test17374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17374");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField28.getAsText((long) (short) 1, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(32L, chronology15, locale30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((-48469999L));
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds(2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateTime40, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone62);
        long long65 = dateTimeZone57.getMillisKeepLocal(dateTimeZone62, (long) (byte) -1);
        dateTimeParserBucket32.setZone(dateTimeZone62);
        java.util.Locale locale67 = dateTimeParserBucket32.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter0.withLocale(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter68.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter69.withDefaultYear(21883);
        java.lang.Appendable appendable72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.dayOfYear();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusYears((-1));
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.withMillisOfDay((int) (short) 10);
        int int83 = localDateTime82.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.minusMonths(54140);
        int int86 = localDateTime85.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter71.printTo(appendable72, (org.joda.time.ReadablePartial) localDateTime85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e0a\u534811:09" + "'", str4, "\u4e0a\u534811:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 29 + "'", int86 == 29);
    }

    @Test
    public void test17375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17375");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.Chronology chronology12 = chronology5.withUTC();
        org.joda.time.DurationField durationField13 = chronology5.months();
        org.joda.time.DurationField durationField14 = chronology5.seconds();
        long long17 = durationField14.add((long) 54131261, 0);
        int int20 = durationField14.getDifference(21921078000L, (long) 149);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 54131261L + "'", long17 == 54131261L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21921077 + "'", int20 == 21921077);
    }

    @Test
    public void test17376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17376");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str2 = dateTimeFormatter0.print((-2208988800000L));
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter0.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withChronology(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u5e74\u6708\u65e5\u661f\u671f\u4e09" + "'", str2, "\u5e74\u6708\u65e5\u661f\u671f\u4e09");
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test17377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17377");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.LocalTime localTime5 = property3.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property3.withMaximumValue();
        long long7 = property3.remainder();
        org.joda.time.LocalTime localTime9 = property3.setCopy(129);
        org.joda.time.LocalTime localTime10 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime11 = property3.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property3.addWrapFieldToCopy(54123198);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test17378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17378");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology9 = chronology7.withZone(dateTimeZone8);
        boolean boolean10 = dateTimeZone1.equals((java.lang.Object) dateTimeZone8);
        int int12 = dateTimeZone8.getStandardOffset((long) 54119608);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(obj0, dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 212880000 + "'", int12 == 212880000);
    }

    @Test
    public void test17379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17379");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-21T15:02:24.490Z");
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        mutableDateTime1.add(readablePeriod2, 1969);
        mutableDateTime1.addSeconds(86399999);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.centuryOfEra();
        long long8 = property7.remainder();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.roundCeiling();
        int int11 = property7.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(21964416);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 22085773, dateTimeZone14);
        int int16 = property7.getDifference((org.joda.time.ReadableInstant) mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1423904256510L) + "'", long8 == (-1423904256510L));
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test17380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17380");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getMonthOfYear();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(1);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate7.minus(readablePeriod9);
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test17381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17381");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        mutableDateTime5.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.property(dateTimeFieldType10);
        int int12 = mutableDateTime0.get(dateTimeFieldType10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = dateTimeField34.getAsText((long) (short) 1, locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(32L, chronology21, locale36);
        dateTimeParserBucket38.setOffset(54111610);
        long long42 = dateTimeParserBucket38.computeMillis(true);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate45 = localDate43.minusMonths((int) (short) -1);
        boolean boolean47 = localDate43.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology48 = localDate43.getChronology();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology50 = chronology48.withZone(dateTimeZone49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.DurationField durationField52 = chronology48.months();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        int int54 = localDate53.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtStartOfDay(dateTimeZone55);
        org.joda.time.Chronology chronology58 = chronology48.withZone(dateTimeZone55);
        org.joda.time.DurationField durationField59 = chronology58.millis();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = dateTimeField60.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate66 = localDate64.minusMonths((int) (short) -1);
        boolean boolean68 = localDate64.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology69 = localDate64.getChronology();
        org.joda.time.Chronology chronology70 = localDate64.getChronology();
        long long74 = chronology70.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean75 = dateTimeFieldType63.isSupported(chronology70);
        org.joda.time.DateTimeField dateTimeField76 = chronology70.weekyearOfCentury();
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.lang.String str79 = dateTimeField76.getAsText((long) 54120, locale78);
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleAttributes();
        dateTimeParserBucket38.saveField(dateTimeFieldType61, "0052-02-22T06:04:48.456+15:02:03.198", locale78);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.set(dateTimeFieldType61, 54480498);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54480498 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456258032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=32,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-54111578L) + "'", long42 == (-54111578L));
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 200L + "'", long74 == 200L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "70" + "'", str79, "70");
        org.junit.Assert.assertNotNull(strSet80);
    }

    @Test
    public void test17382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17382");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-21T15:01:59.327Z");
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test17383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17383");
        java.io.IOException iOException1 = new java.io.IOException("0003-06-22T06:04:46.339+15:02:03.198");
        java.lang.Throwable[] throwableArray2 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test17384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17384");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long17 = dateTimeZone12.getMillisKeepLocal(dateTimeZone15, (long) 2);
        long long19 = dateTimeZone12.nextTransition((long) 54130144);
        java.util.Locale locale23 = new java.util.Locale("3", "");
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.minusMonths((int) (short) -1);
        boolean boolean29 = localDate25.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology30 = localDate25.getChronology();
        org.joda.time.Chronology chronology31 = localDate25.getChronology();
        long long35 = chronology31.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.minusMonths((int) (short) -1);
        boolean boolean40 = localDate36.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology41 = localDate36.getChronology();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology43 = chronology41.withZone(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.weekOfWeekyear();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = dateTimeField44.getAsText((long) (short) 1, locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(32L, chronology31, locale46);
        java.lang.String str49 = locale23.getDisplayCountry(locale46);
        java.lang.String str50 = dateTimeZone12.getShortName((long) 2000, locale23);
        java.lang.String str52 = locale23.getExtension('x');
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 54130144L + "'", long19 == 54130144L);
        org.junit.Assert.assertEquals(locale23.toString(), "3");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 200L + "'", long35 == 200L);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+59:08" + "'", str50, "+59:08");
        org.junit.Assert.assertNull(str52);
    }

    @Test
    public void test17385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17385");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusSeconds(1970);
        org.joda.time.LocalTime.Property property5 = localTime4.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property5.getLocalTime();
        int int8 = localTime7.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
    }

    @Test
    public void test17386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17386");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T15:02:26.506Z");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        int int6 = timeZone4.getOffset((long) 1);
        java.time.ZoneId zoneId7 = timeZone4.toZoneId();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("und");
        boolean boolean10 = timeZone4.hasSameRules(timeZone9);
        java.lang.String str11 = timeZone4.getID();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(54123198);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        boolean boolean15 = timeZone4.hasSameRules(timeZone14);
        boolean boolean16 = timeZone1.hasSameRules(timeZone4);
        int int18 = timeZone4.getOffset(447L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GMT" + "'", str11, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+15:02");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test17387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17387");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime5.plus(readableDuration6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfYear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime18 = dateTime15.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        boolean boolean21 = dateTime7.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property23 = dateTime7.property(dateTimeFieldType22);
        org.joda.time.DateTime dateTime24 = property23.withMinimumValue();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate28 = localDate25.withField(dateTimeFieldType26, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDate28.toDateTime(readableInstant29);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.minutes();
        long long33 = durationField32.getUnitMillis();
        int int35 = durationField32.getValue((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType36 = durationField32.getType();
        org.joda.time.DateTime dateTime38 = dateTime24.withFieldAdded(durationFieldType36, 33);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        java.util.Date date40 = dateTime38.toDate();
        int int41 = dateTime38.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 60000L + "'", long33 == 60000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Mon Feb 23 15:43:58 GMT 1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test17388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17388");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(54564192, 54594, 133, 22093888, 279, 0, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22093888 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test17389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17389");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMillisOfSecond(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(54134);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        java.lang.String str12 = dateTimeFieldType10.toString();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withField(dateTimeFieldType10, 286);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.plusMinutes(2644);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "year" + "'", str12, "year");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test17390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17390");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(919, 0, (-1828558), 54560515, 22139077);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54560515 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17391");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfEra(21);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withYearOfEra(54118820);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMillis(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plus(readableDuration13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths(760);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test17392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17392");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minus(readablePeriod2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusDays(54131261);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(54112);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.withFieldAdded(durationFieldType14, (int) (byte) 0);
        int int19 = localDateTime8.getMillisOfSecond();
        int int20 = localDateTime8.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusYears(2039);
        int int24 = localDateTime23.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withEra(21942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21942 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 194 + "'", int19 == 194);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 58 + "'", int20 == 58);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 55 + "'", int24 == 55);
    }

    @Test
    public void test17393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17393");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream3 = languageRangeList1.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream9 = languageRangeList7.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList13, strMap14);
        java.util.Collection<java.util.Locale> localeCollection16 = null;
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter(languageRangeList13, localeCollection16, filteringMode17);
        java.util.Locale locale19 = java.util.Locale.UK;
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String str21 = locale19.getDisplayName();
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode23 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strSet22, filteringMode23);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet22);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(1707724464566400001L);
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfDay();
        org.joda.time.LocalTime localTime30 = property28.setCopy(80);
        boolean boolean31 = strSet22.equals((java.lang.Object) property28);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeStream3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeStream9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u82f1\u6587\u82f1\u56fd)" + "'", str21, "\u82f1\u6587\u82f1\u56fd)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + filteringMode23 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode23.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test17394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17394");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate2.equals((java.lang.Object) (byte) 10);
        int int5 = localDate2.getDayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.withDayOfYear(8);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        java.util.TimeZone timeZone11 = dateTimeZone9.toTimeZone();
        timeZone11.setID("2022-02-22T06:08:55.681+15:02:03.198");
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test17395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17395");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusMonths((int) (short) -1);
        boolean boolean9 = localDate5.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology10 = localDate5.getChronology();
        org.joda.time.Chronology chronology11 = localDate5.getChronology();
        long long15 = chronology11.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean16 = dateTimeFieldType4.isSupported(chronology11);
        mutableDateTime1.setChronology(chronology11);
        org.joda.time.DurationField durationField18 = chronology11.minutes();
        org.joda.time.DateTimeZone dateTimeZone19 = chronology11.getZone();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.weekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 54595567, chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 200L + "'", long15 == 200L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test17396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17396");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "2022-02-21T15:02:20.959Z", "2022-02-21T15:02:24.434Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime18.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        mutableDateTime23.add(durationFieldType27, (-1));
        org.joda.time.DateTime dateTime31 = dateTime18.withFieldAdded(durationFieldType27, (int) (byte) 1);
        boolean boolean32 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusMonths((int) (short) -1);
        boolean boolean37 = localDate33.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology38 = localDate33.getChronology();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology40 = chronology38.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekOfWeekyear();
        long long44 = dateTimeField41.addWrapField((long) ' ', 0);
        boolean boolean45 = dateTimeField41.isSupported();
        long long48 = dateTimeField41.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField41.getType();
        java.util.Locale locale51 = java.util.Locale.getDefault();
        java.lang.String str52 = dateTimeField41.getAsText((long) (byte) 1, locale51);
        java.lang.String str53 = locale51.getLanguage();
        java.util.Calendar calendar54 = dateTime31.toCalendar(locale51);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str56 = locale51.getDisplayName(locale55);
        java.lang.String str59 = nameProvider0.getShortName(locale55, "2022-02-22T06:05:17.152+15:02:03.198", "2022-02-21T15:01:58.714Z");
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration62 = null;
        mutableDateTime61.add(readableDuration62);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Calendar calendar65 = mutableDateTime61.toCalendar(locale64);
        java.lang.String str66 = mutableDateTime61.toString();
        mutableDateTime61.addWeeks(901);
        org.joda.time.Chronology chronology69 = mutableDateTime61.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.halfdays();
        java.util.Locale locale72 = java.util.Locale.forLanguageTag("2022-02-22T06:04:43.393+15:02:03.198");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 22009337, chronology69, locale72);
        long long75 = dateTimeParserBucket73.computeMillis(false);
        java.util.Locale locale76 = dateTimeParserBucket73.getLocale();
        java.lang.String str79 = nameProvider0.getName(locale76, "2022-02-21T15:10:00.390Z", "1983");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 58665600001L + "'", long48 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh" + "'", str53, "zh");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=-62194294141746,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=254,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587" + "'", str56, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645456258253,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=253,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-24T02:18:58.253+59:08" + "'", str66, "2022-02-24T02:18:58.253+59:08");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-190870663L) + "'", long75 == (-190870663L));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test17397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17397");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setLanguageTag("2022-02-22T06:07:48.343+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test17398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17398");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField28.getAsText((long) (short) 1, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(32L, chronology15, locale30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((-48469999L));
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds(2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateTime40, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone62);
        long long65 = dateTimeZone57.getMillisKeepLocal(dateTimeZone62, (long) (byte) -1);
        dateTimeParserBucket32.setZone(dateTimeZone62);
        java.util.Locale locale67 = dateTimeParserBucket32.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter0.withLocale(locale67);
        java.util.Locale locale69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withLocale(locale69);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTimeFormatter68.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter68.withPivotYear(54131);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter73.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone75 = dateTimeFormatter74.getZone();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeFormatter74.getZone();
        org.joda.time.Chronology chronology77 = dateTimeFormatter74.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long79 = dateTimeFormatter74.parseMillis("2022-02-22T06:08:12.128+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T06:08:12.128+15:02:03...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e0a\u534811:09" + "'", str4, "\u4e0a\u534811:09");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNull(chronology77);
    }

    @Test
    public void test17399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17399");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromCalendarFields(calendar4);
        org.joda.time.LocalTime localTime7 = localTime5.plusHours(54130);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((-1L), dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime10.minus(readablePeriod13);
        int int16 = localTime14.getValue((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((-1L), dateTimeZone18);
        org.joda.time.LocalTime localTime21 = localTime19.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime23 = localTime19.minus(readablePeriod22);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType24.getDurationType();
        org.joda.time.LocalTime localTime27 = localTime23.withField(dateTimeFieldType24, 0);
        int int28 = localTime14.get(dateTimeFieldType24);
        org.joda.time.LocalTime localTime30 = localTime14.minusHours(54149188);
        java.lang.String str31 = localTime30.toString();
        int int32 = localTime5.compareTo((org.joda.time.ReadablePartial) localTime30);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456258322,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=322,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 999 + "'", int28 == 999);
        org.junit.Assert.assertNotNull(localTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "07:07:59.999" + "'", str31, "07:07:59.999");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test17400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17400");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.minus(readablePeriod10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Calendar calendar16 = mutableDateTime12.toCalendar(locale15);
        java.lang.String str17 = mutableDateTime12.toString();
        boolean boolean18 = dateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.addSeconds((int) 'u');
        long long21 = mutableDateTime12.getMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645456258339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=339,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-24T02:18:58.339+59:08" + "'", str17, "2022-02-24T02:18:58.339+59:08");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645456375339L + "'", long21 == 1645456375339L);
    }

    @Test
    public void test17401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17401");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.LocalDate localDate11 = localDate9.minusWeeks(0);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        int int13 = localDate12.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtStartOfDay(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDate9.toDateTimeAtCurrentTime(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test17402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17402");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime16 = property10.setCopy(54138295);
        int int17 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 292278993 + "'", int17 == 292278993);
    }

    @Test
    public void test17403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17403");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) '#');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100, dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        mutableDateTime4.setMillis((long) (byte) 1);
        mutableDateTime4.setWeekOfWeekyear(47);
        org.joda.time.DateTime dateTime9 = localTime3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.LocalTime localTime11 = localTime3.plusHours(669);
        java.lang.String str12 = localTime11.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "21:00:00.135" + "'", str12, "21:00:00.135");
    }

    @Test
    public void test17404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17404");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMinutes(22110984);
        int int11 = localDateTime10.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withWeekOfWeekyear(8264265);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8264265 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8338405 + "'", int2 == 8338405);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
    }

    @Test
    public void test17405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17405");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(2022);
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime9 = dateTime6.minusWeeks(1987);
        org.joda.time.DateTime.Property property10 = dateTime9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test17406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17406");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long11 = chronology5.getDateTimeMillis((long) (-1), (int) (short) 10, (int) ' ', (int) (byte) 10, 1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField13 = chronology5.clockhourOfDay();
        org.joda.time.DurationField durationField14 = chronology5.halfdays();
        java.lang.String str15 = durationField14.toString();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-48469999L) + "'", long11 == (-48469999L));
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DurationField[halfdays]" + "'", str15, "DurationField[halfdays]");
    }

    @Test
    public void test17407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17407");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.minusMinutes((int) (short) -1);
        org.joda.time.LocalTime localTime11 = localTime6.plusSeconds(54);
        org.joda.time.LocalTime localTime13 = localTime11.withMillisOfDay(874);
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime13.plus(readablePeriod15);
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.roundHalfEvenCopy();
        boolean boolean20 = localTime18.equals((java.lang.Object) "15:01:03.197");
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test17408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17408");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.mediumDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate7 = localDate1.withYear((int) (byte) 1);
        java.lang.String str8 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property9 = localDate7.weekOfWeekyear();
        java.util.Locale locale13 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(locale14);
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Locale locale18 = locale14.stripExtensions();
        int int19 = property9.getMaximumShortTextLength(locale18);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDate7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str8, "\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals(locale13.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "sunday, february 21, -0001" + "'", str15, "sunday, february 21, -0001");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test17409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17409");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withYear(54156019);
        org.joda.time.LocalDate localDate12 = localDate8.minusDays((int) '#');
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate8.plus(readablePeriod13);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test17410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17410");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.plus((-48469999L));
        int int23 = dateTime20.getSecondOfDay();
        boolean boolean24 = mutableDateTime0.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int26 = dateTime20.get(dateTimeFieldType25);
        java.lang.String str27 = dateTime20.toString();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime20.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.add((long) 86399995);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("2022-02-22T06:05:37.020+15:02:03.198");
        int int35 = dateTimeField32.getMaximumShortTextLength(locale34);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456258486,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=486,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8338 + "'", int23 == 8338);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 138 + "'", int26 == 138);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "0003-06-24T02:18:58.486+59:08" + "'", str27, "0003-06-24T02:18:58.486+59:08");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test17411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17411");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime();
        java.lang.String str5 = mutableDateTime4.toString();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime4.add(readableDuration6);
        mutableDateTime4.setWeekyear((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        mutableDateTime4.setTime(readableInstant10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = mutableDateTime4.toDateTime(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime4.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime4.copy();
        java.lang.String str16 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime4.add(readableDuration17, 22358);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-24T02:18:58.508+59:08" + "'", str5, "2022-02-24T02:18:58.508+59:08");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "02:18" + "'", str16, "02:18");
    }

    @Test
    public void test17412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17412");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DurationField durationField10 = chronology6.months();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        int int12 = localDate11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtStartOfDay(dateTimeZone13);
        org.joda.time.Chronology chronology16 = chronology6.withZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((-2371597068057L), chronology6);
        mutableDateTime17.add((long) 21919);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology26 = localDate21.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology28 = chronology26.withZone(dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 292278993, dateTimeZone27);
        mutableDateTime17.setZone(dateTimeZone27);
        mutableDateTime17.setDate((long) 348);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test17413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17413");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        long long18 = durationField16.getValueAsLong((long) 54135101);
        org.joda.time.DurationFieldType durationFieldType19 = durationField16.getType();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DurationField durationField29 = chronology25.seconds();
        org.joda.time.DurationField durationField30 = chronology25.days();
        long long32 = durationField30.getValueAsLong((long) (-292275054));
        int int33 = durationField16.compareTo(durationField30);
        int int36 = durationField16.getDifference((long) 567, (long) 99);
        org.joda.time.DurationFieldType durationFieldType37 = durationField16.getType();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 54135101L + "'", long18 == 54135101L);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3L) + "'", long32 == (-3L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 468 + "'", int36 == 468);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test17414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17414");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.DateTimeFormat.forPattern("\u5e74\u6708\u65e5");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate5 = localDate2.withField(dateTimeFieldType3, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.DateTime dateTime7 = localDate5.toDateTime(readableInstant6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMonths((int) '4');
        org.joda.time.DateTime dateTime11 = dateTime9.plus((-48469999L));
        org.joda.time.DateTime dateTime13 = dateTime9.plusSeconds(2);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime9, dateTimeZone26);
        org.joda.time.DateTime dateTime31 = dateTime9.minusDays(8);
        org.joda.time.DateTime dateTime33 = dateTime9.withYearOfEra(902);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime9.plus(readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusYears(286);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter1.withChronology(chronology38);
        java.lang.Integer int41 = dateTimeFormatter40.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(int41);
    }

    @Test
    public void test17415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17415");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.hourOfDay();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8338577 + "'", int2 == 8338577);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test17416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17416");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 576);
        org.joda.time.ReadableInstant readableInstant2 = null;
        boolean boolean3 = mutableDateTime1.isEqual(readableInstant2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.dayOfWeek();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test17417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17417");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusYears(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test17418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17418");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        java.lang.String str18 = mutableDateTime17.toString();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.secondOfDay();
        mutableDateTime17.addMillis(54124521);
        boolean boolean23 = mutableDateTime17.isAfter(0L);
        boolean boolean24 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime0.toMutableDateTime();
        boolean boolean27 = mutableDateTime0.isEqual((-62194294501482L));
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime0.millisOfSecond();
        mutableDateTime0.addMinutes(21903);
        int int31 = mutableDateTime0.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-24T02:18:58.603+59:08" + "'", str18, "2022-02-24T02:18:58.603+59:08");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
    }

    @Test
    public void test17419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17419");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property7.setCopy("2022-02-22T06:06:02.363+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T06:06:02.363+15:02:03.198\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test17420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17420");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate31 = localDate28.withField(dateTimeFieldType29, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime(readableInstant32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.minusMonths((int) (short) -1);
        boolean boolean38 = localDate34.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology39 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology41 = chronology39.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate31.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone40.getMillisKeepLocal(dateTimeZone43, (long) 2);
        org.joda.time.Interval interval46 = localDate27.toInterval(dateTimeZone40);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology52 = localDate47.getChronology();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology54 = chronology52.withZone(dateTimeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DurationField durationField56 = chronology52.months();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        int int58 = localDate57.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.Chronology chronology62 = chronology52.withZone(dateTimeZone59);
        org.joda.time.DurationField durationField63 = chronology62.millis();
        org.joda.time.DurationFieldType durationFieldType64 = durationField63.getType();
        boolean boolean65 = localDate27.isSupported(durationFieldType64);
        org.joda.time.LocalDate localDate67 = localDate27.minusMonths(21990770);
        int int68 = localDate27.getYear();
        int int69 = localDate27.getEra();
        org.joda.time.LocalDate.Property property70 = localDate27.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test17421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17421");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime0.add(readablePeriod7, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.year();
        mutableDateTime0.setMillisOfDay(22);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths((int) (short) -1);
        boolean boolean19 = localDate15.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology20 = localDate15.getChronology();
        org.joda.time.Chronology chronology21 = localDate15.getChronology();
        long long25 = chronology21.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.minusMonths((int) (short) -1);
        boolean boolean30 = localDate26.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology31 = localDate26.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology33 = chronology31.withZone(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.weekOfWeekyear();
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.lang.String str37 = dateTimeField34.getAsText((long) (short) 1, locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(32L, chronology21, locale36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.plus((-48469999L));
        org.joda.time.DateTime dateTime50 = dateTime46.plusSeconds(2);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate54 = localDate51.withField(dateTimeFieldType52, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.DateTime dateTime56 = localDate54.toDateTime(readableInstant55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate59 = localDate57.minusMonths((int) (short) -1);
        boolean boolean61 = localDate57.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology62 = localDate57.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology64 = chronology62.withZone(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = localDate54.toDateTimeAtCurrentTime(dateTimeZone63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((java.lang.Object) dateTime46, dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone68);
        long long71 = dateTimeZone63.getMillisKeepLocal(dateTimeZone68, (long) (byte) -1);
        dateTimeParserBucket38.setZone(dateTimeZone68);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now(dateTimeZone68);
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) mutableDateTime78);
        mutableDateTime78.setMillisOfDay(21928);
        boolean boolean82 = mutableDateTime78.isEqualNow();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 200L + "'", long25 == 200L);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test17422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17422");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T06:07:06.222+15:02:03.198");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test17423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17423");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone55);
        java.util.Date date63 = mutableDateTime62.toDate();
        org.joda.time.LocalDate localDate64 = org.joda.time.LocalDate.fromDateFields(date63);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Mon Feb 21 15:10:58 GMT 2022");
        org.junit.Assert.assertNotNull(localDate64);
    }

    @Test
    public void test17424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17424");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths((int) '4');
        org.joda.time.DateTime dateTime10 = dateTime6.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        mutableDateTime11.add(durationFieldType15, (-1));
        org.joda.time.DateTime dateTime19 = dateTime6.withFieldAdded(durationFieldType15, (int) (byte) 1);
        mutableDateTime0.add(durationFieldType15, 86399999);
        org.joda.time.Instant instant22 = mutableDateTime0.toInstant();
        mutableDateTime0.setDate(68531261L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(21919726);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 54312369, dateTimeZone27);
        org.joda.time.DateTime dateTime29 = mutableDateTime0.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property30 = dateTime29.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test17425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17425");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(142295824137600000L);
        int int2 = mutableDateTime1.getMillisOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 40080000 + "'", int2 == 40080000);
    }

    @Test
    public void test17426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17426");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withPeriodAdded(readablePeriod3, 2022);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.minuteOfHour();
        int int8 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property7.withMinimumValue();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8338788 + "'", int2 == 8338788);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test17427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17427");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.weekyear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        java.lang.String str15 = mutableDateTime14.toString();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.secondOfDay();
        mutableDateTime14.addMillis(54124521);
        long long19 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime14.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime14.add(readablePeriod22);
        int int24 = mutableDateTime14.getYearOfCentury();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456258801,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=801,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-24T02:18:58.801+59:08" + "'", str15, "2022-02-24T02:18:58.801+59:08");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
    }

    @Test
    public void test17428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17428");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology7.year();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((-1L), chronology28);
        int int30 = localDate29.getWeekyear();
        int int31 = dateTimeField26.getMinimumValue((org.joda.time.ReadablePartial) localDate29);
        int int32 = localDate29.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime33.add(readableDuration34);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Calendar calendar37 = mutableDateTime33.toCalendar(locale36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        mutableDateTime33.setMillis(readableInstant42);
        org.joda.time.DateTime dateTime45 = localDate29.toDateTime((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTime.Property property46 = dateTime45.monthOfYear();
        org.joda.time.DateTime dateTime48 = dateTime45.plusMinutes(957);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        org.joda.time.DateTime dateTime57 = dateTime54.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property59 = dateTime57.property(dateTimeFieldType58);
        org.joda.time.DateTime dateTime60 = property59.withMinimumValue();
        org.joda.time.DateTime dateTime61 = property59.getDateTime();
        java.lang.String str62 = property59.getAsString();
        org.joda.time.DateTime dateTime63 = property59.withMaximumValue();
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes((-428));
        int int66 = dateTime65.getEra();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate71 = localDate68.withField(dateTimeFieldType69, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.DateTime dateTime73 = localDate71.toDateTime(readableInstant72);
        org.joda.time.Chronology chronology74 = dateTime73.getChronology();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((java.lang.Object) 4406400000L, chronology74);
        org.joda.time.DateTimeField dateTimeField76 = chronology74.monthOfYear();
        org.joda.time.DurationField durationField77 = chronology74.hours();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology74.getZone();
        org.joda.time.DateTime dateTime79 = dateTime65.withZone(dateTimeZone78);
        org.joda.time.DateTime dateTime80 = dateTime45.withZoneRetainFields(dateTimeZone78);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 70 + "'", int32 == 70);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645456258818,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=818,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test17429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17429");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.seconds();
        java.lang.String str8 = chronology6.toString();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setDateTime(54542, 447, 21974820, 8320581, (-21947009), 8174332, 608);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8320581 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test17430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17430");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology7 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = localDate2.getChronology();
        long long12 = chronology8.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology20 = chronology18.withZone(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.weekOfWeekyear();
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.lang.String str24 = dateTimeField21.getAsText((long) (short) 1, locale23);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket(32L, chronology8, locale23);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate29 = localDate26.withField(dateTimeFieldType27, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.DateTime dateTime31 = localDate29.toDateTime(readableInstant30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths((int) '4');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((-48469999L));
        org.joda.time.DateTime dateTime37 = dateTime33.plusSeconds(2);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate41 = localDate38.withField(dateTimeFieldType39, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.DateTime dateTime43 = localDate41.toDateTime(readableInstant42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate46 = localDate44.minusMonths((int) (short) -1);
        boolean boolean48 = localDate44.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology49 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology51 = chronology49.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localDate41.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((java.lang.Object) dateTime33, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone55);
        long long58 = dateTimeZone50.getMillisKeepLocal(dateTimeZone55, (long) (byte) -1);
        dateTimeParserBucket25.setZone(dateTimeZone55);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) 0, dateTimeZone55);
        long long63 = dateTimeZone55.convertLocalToUTC((long) 80, false);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str66 = dateTimeZone55.getShortName((-53L));
        int int68 = dateTimeZone55.getOffsetFromLocal((-738520L));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 200L + "'", long12 == 200L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-212879920L) + "'", long63 == (-212879920L));
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+59:08" + "'", str66, "+59:08");
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 212880000 + "'", int68 == 212880000);
    }

    @Test
    public void test17431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17431");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.minutes();
        long long10 = durationField7.getValueAsLong((long) 80, (long) (short) 100);
        java.lang.String str11 = durationField7.toString();
        boolean boolean12 = durationField7.isSupported();
        long long14 = durationField7.getMillis((-54111578L));
        long long16 = durationField7.getMillis((long) 8251);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DurationField[minutes]" + "'", str11, "DurationField[minutes]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3246694680000L) + "'", long14 == (-3246694680000L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 495060000L + "'", long16 == 495060000L);
    }

    @Test
    public void test17432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17432");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths(21);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.minusSeconds(54149738);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.dayOfYear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test17433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17433");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.longDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter1.withDefaultYear(641);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test17434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17434");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Calendar calendar6 = mutableDateTime2.toCalendar(locale5);
        java.lang.String str7 = mutableDateTime2.toString();
        mutableDateTime2.addWeeks(901);
        org.joda.time.Chronology chronology10 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusMonths((int) (short) -1);
        boolean boolean18 = localDate14.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology19 = localDate14.getChronology();
        org.joda.time.Chronology chronology20 = localDate14.getChronology();
        long long24 = chronology20.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean25 = dateTimeFieldType13.isSupported(chronology20);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology20, locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate32 = localDate30.minusMonths((int) (short) -1);
        boolean boolean34 = localDate30.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology35 = localDate30.getChronology();
        org.joda.time.Chronology chronology36 = localDate30.getChronology();
        long long40 = chronology36.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean41 = dateTimeFieldType29.isSupported(chronology36);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology36, locale42);
        java.lang.String str44 = locale42.getScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 54140309, chronology20, locale42, (java.lang.Integer) 54145337);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 54145125, chronology10, locale42, (java.lang.Integer) 54152364, 21884813);
        java.util.Locale locale53 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale53.getDisplayLanguage(locale54);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((-1708655106041881749L), chronology10, locale54);
        org.joda.time.DateTimeZone dateTimeZone57 = dateTimeParserBucket56.getZone();
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        int int60 = dateTimeZone57.getStandardOffset((long) 22130221);
        int int62 = dateTimeZone57.getOffset(21887168L);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645456258933,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=58,MILLISECOND=933,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-24T02:18:58.933+59:08" + "'", str7, "2022-02-24T02:18:58.933+59:08");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 200L + "'", long24 == 200L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 200L + "'", long40 == 200L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(locale53.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "sunday, february 21, -0001" + "'", str55, "sunday, february 21, -0001");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 212880000 + "'", int60 == 212880000);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 212880000 + "'", int62 == 212880000);
    }

    @Test
    public void test17435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17435");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime2.minus(readablePeriod5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime6.withPeriodAdded(readablePeriod7, 54119809);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = org.joda.time.format.DateTimeFormat.mediumTime();
        java.lang.String str11 = localTime6.toString(dateTimeFormatter10);
        org.joda.time.LocalTime.Property property12 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property12.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11:07:59" + "'", str11, "11:07:59");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test17436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17436");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DurationField durationField17 = chronology10.minutes();
        int int20 = durationField17.getDifference((long) 21, (long) (byte) 1);
        long long23 = durationField17.add((long) 54115116, 427);
        long long26 = durationField17.subtract((long) ' ', 756);
        long long29 = durationField17.add((long) 86399999, 54130456);
        java.lang.String str30 = durationField17.getName();
        long long33 = durationField17.add((long) 8197392, (long) 927);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 79735116L + "'", long23 == 79735116L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-45359968L) + "'", long26 == (-45359968L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3247913759999L + "'", long29 == 3247913759999L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "minutes" + "'", str30, "minutes");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 63817392L + "'", long33 == 63817392L);
    }

    @Test
    public void test17437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17437");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setID("2022-02-21T15:02:04.418Z");
        int int4 = timeZone0.getOffset((long) (-53));
        boolean boolean5 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        timeZone6.setID("2022-02-21T15:02:04.418Z");
        boolean boolean9 = timeZone6.observesDaylightTime();
        int int10 = timeZone6.getRawOffset();
        boolean boolean11 = timeZone0.hasSameRules(timeZone6);
        java.lang.String str12 = timeZone6.getID();
        int int13 = timeZone6.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId14 = timeZone6.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2022-02-21T15:02:04.418Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-21T15:02:04.418Z" + "'", str12, "2022-02-21T15:02:04.418Z");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test17438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17438");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(54614635, 22032570, 22062, (-1581), 21886621, 54000000, 47629);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1581 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17439");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.Chronology chronology10 = localDate4.getChronology();
        long long14 = chronology10.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean15 = dateTimeFieldType3.isSupported(chronology10);
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        java.lang.String str18 = mutableDateTime17.toString();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.secondOfDay();
        mutableDateTime17.addMillis(54124521);
        boolean boolean23 = mutableDateTime17.isAfter(0L);
        boolean boolean24 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime0.toMutableDateTime();
        boolean boolean27 = mutableDateTime0.isEqual((-62194294501482L));
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime0.millisOfSecond();
        mutableDateTime0.addMillis(2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 200L + "'", long14 == 200L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-24T02:18:59.026+59:08" + "'", str18, "2022-02-24T02:18:59.026+59:08");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test17440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17440");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate4 = localDate2.minusMonths((int) (short) -1);
        boolean boolean6 = localDate2.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate2.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property9 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property9.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.Chronology chronology19 = localDate13.getChronology();
        long long23 = chronology19.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekOfWeekyear();
        java.util.Locale locale34 = java.util.Locale.getDefault();
        java.lang.String str35 = dateTimeField32.getAsText((long) (short) 1, locale34);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket(32L, chronology19, locale34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate40 = localDate37.withField(dateTimeFieldType38, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMonths((int) '4');
        org.joda.time.DateTime dateTime46 = dateTime44.plus((-48469999L));
        org.joda.time.DateTime dateTime48 = dateTime44.plusSeconds(2);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate52 = localDate49.withField(dateTimeFieldType50, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.DateTime dateTime54 = localDate52.toDateTime(readableInstant53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate57 = localDate55.minusMonths((int) (short) -1);
        boolean boolean59 = localDate55.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology60 = localDate55.getChronology();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology62 = chronology60.withZone(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate52.toDateTimeAtCurrentTime(dateTimeZone61);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((java.lang.Object) dateTime44, dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone66);
        long long69 = dateTimeZone61.getMillisKeepLocal(dateTimeZone66, (long) (byte) -1);
        dateTimeParserBucket36.setZone(dateTimeZone66);
        long long72 = dateTimeZone66.convertUTCToLocal((long) 100);
        org.joda.time.DateTime dateTime73 = localDate11.toDateTimeAtMidnight(dateTimeZone66);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter0.withZone(dateTimeZone66);
        org.joda.time.format.DateTimePrinter dateTimePrinter76 = dateTimeFormatter0.getPrinter();
        java.lang.String str78 = dateTimeFormatter0.print((-133144884L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter0.withDefaultYear(775);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime82 = dateTimeFormatter0.parseLocalDateTime("2022-02-24T02:17:34.147+59:08");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-24T02:17:34.147+59:08\" is malformed at \"22-02-24T02:17:34.147+59:08\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-1L) + "'", long69 == (-1L));
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 212880100L + "'", long72 == 212880100L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertNotNull(dateTimePrinter76);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "22:08" + "'", str78, "22:08");
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
    }

    @Test
    public void test17441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17441");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortDate();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withDurationAdded(readableDuration9, 0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDurationAdded(readableDuration12, 10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime8.minusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.plusSeconds(86399999);
        java.lang.String str19 = dateTimeFormatter0.print((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfWeek();
        java.lang.String str21 = property20.getName();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = property20.roundFloorCopy();
        int int24 = property20.get();
        org.joda.time.LocalDateTime localDateTime25 = property20.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(21968242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21968242 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "20.02.87" + "'", str19, "20.02.87");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "dayOfWeek" + "'", str21, "dayOfWeek");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test17442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17442");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths((int) (short) -1);
        boolean boolean10 = localDate6.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology11 = localDate6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology13 = chronology11.withZone(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate3.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(0);
        org.joda.time.DateTime.Property property17 = dateTime14.millisOfSecond();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(21997302);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        int int21 = localDate20.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.util.TimeZone timeZone26 = dateTimeZone22.toTimeZone();
        long long29 = dateTimeZone22.adjustOffset((-212879992L), false);
        org.joda.time.DateTime dateTime30 = dateTime19.withZoneRetainFields(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime30.withDate(10373, 22349427, 2516);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22349427 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-212879992L) + "'", long29 == (-212879992L));
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test17443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17443");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfCentury();
        int int16 = dateTimeField13.getDifference((long) 921, (long) 22179);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test17444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17444");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology7 = chronology5.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.months();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        int int11 = localDate10.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone12);
        org.joda.time.Chronology chronology15 = chronology5.withZone(dateTimeZone12);
        org.joda.time.DurationField durationField16 = chronology15.millis();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DurationField durationField18 = chronology15.centuries();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.monthOfYear();
        java.util.Locale locale23 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayLanguage(locale24);
        java.lang.String str26 = locale24.getVariant();
        int int27 = dateTimeField19.getMaximumTextLength(locale24);
        java.util.Set<java.lang.String> strSet28 = locale24.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("eng");
        double double31 = languageRange30.getWeight();
        java.lang.String str32 = languageRange30.getRange();
        double double33 = languageRange30.getWeight();
        java.lang.String str34 = languageRange30.getRange();
        boolean boolean35 = locale24.equals((java.lang.Object) str34);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale23.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "sunday, february 21, -0001" + "'", str25, "sunday, february 21, -0001");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "eng" + "'", str32, "eng");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test17445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17445");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        dateTimeParserBucket24.setOffset(54111610);
        long long29 = dateTimeParserBucket24.computeMillis(false, "Property[millisOfDay]");
        long long31 = dateTimeParserBucket24.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket24.getZone();
        long long34 = dateTimeParserBucket24.computeMillis(false);
        long long36 = dateTimeParserBucket24.computeMillis(false);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-54111578L) + "'", long29 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-54111578L) + "'", long31 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-54111578L) + "'", long34 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-54111578L) + "'", long36 == (-54111578L));
    }

    @Test
    public void test17446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17446");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        org.joda.time.Chronology chronology6 = localDate0.getChronology();
        long long10 = chronology6.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = chronology6.months();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.dayOfYear();
        java.lang.String str15 = chronology6.toString();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = chronology6.getDateTimeMillis(39256962, 22009337, 7997289, 54543904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22009337 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 200L + "'", long10 == 200L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
    }

    @Test
    public void test17447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17447");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields(calendar4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        int int9 = localDate6.indexOf(dateTimeFieldType7);
        int int10 = localDate6.getYearOfEra();
        int int11 = localDate6.getEra();
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456259173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test17448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17448");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.Object[] objArray1 = strSet0.toArray();
        java.util.Iterator<java.lang.String> strItor2 = strSet0.iterator();
        java.util.Iterator<java.lang.String> strItor3 = strSet0.iterator();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate10 = localDate4.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property11 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate12 = property11.roundFloorCopy();
        org.joda.time.LocalDate localDate13 = property11.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.joda.time.LocalDate localDate16 = property11.setCopy((int) (byte) 1);
        boolean boolean17 = strSet0.equals((java.lang.Object) property11);
        java.util.Spliterator<java.lang.String> strSpliterator18 = strSet0.spliterator();
        boolean boolean19 = strSet0.isEmpty();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray1);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSpliterator18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test17449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17449");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.withMillisOfDay(2);
        int int4 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        mutableDateTime7.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.property(dateTimeFieldType12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime7.add(readableDuration14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime7.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        mutableDateTime7.add(readablePeriod17);
        org.joda.time.DateTime dateTime19 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.LocalDateTime.Property property20 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = localDateTime21.toString("2086-12-26T06:57:09.142");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test17450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17450");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.year();
        long long50 = dateTimeField48.roundFloor((-2208988800000L));
        long long52 = dateTimeField48.remainder((long) 911);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeField48);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-2209201680000L) + "'", long50 == (-2209201680000L));
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 212880911L + "'", long52 == 212880911L);
    }

    @Test
    public void test17451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17451");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay((int) (short) 100);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime5.toGregorianCalendar();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test17452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17452");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Calendar calendar9 = mutableDateTime5.toCalendar(locale8);
        java.lang.String str10 = property4.getAsText(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder12 = builder0.clearExtensions();
        java.util.Locale.Builder builder14 = builder0.setLanguage("");
        java.util.Locale.Builder builder15 = builder14.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder15.setExtension('#', "2022-02-22T06:12:38.105+15:02:03.198");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645456259248,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=248,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test17453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17453");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.addWrapField(21887627);
        org.joda.time.MutableDateTime mutableDateTime11 = property6.addWrapField(21896);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        boolean boolean14 = locale13.hasExtensions();
        java.lang.String str15 = locale13.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = property6.set("0003-06-21T16:37:08.574+15:02:03.198", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0003-06-21T16:37:08.574+15:02:03.198\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:59.259+59:08" + "'", str1, "2022-02-24T02:18:59.259+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test17454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17454");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withYearOfEra(54134);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(54131961);
        int int13 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMillis(14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(54551861);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test17455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17455");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear((int) (byte) 1);
        int int14 = localDate6.compareTo((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate.Property property15 = localDate6.centuryOfEra();
        org.joda.time.LocalDate localDate17 = localDate6.plusMonths(21880901);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = localDate17.withDayOfYear(22064106);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22064106 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test17456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17456");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.withMinuteOfHour((int) (byte) 10);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime8 = property5.setCopy((int) ' ');
        org.joda.time.LocalTime localTime9 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime10 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime11 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime15 = property5.setCopy(22049188);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test17457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17457");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property10 = dateTime8.property(dateTimeFieldType9);
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime14 = property10.setCopy(11);
        org.joda.time.DateTime dateTime15 = property10.getDateTime();
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfEra();
        java.lang.String str17 = property16.getAsText();
        org.joda.time.DateTime dateTime18 = property16.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test17458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17458");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        mutableDateTime8.setMillis(readableInstant17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime8.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths((int) (short) -1);
        boolean boolean26 = localDate22.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology27 = localDate22.getChronology();
        org.joda.time.Chronology chronology28 = localDate22.getChronology();
        long long32 = chronology28.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean33 = dateTimeFieldType21.isSupported(chronology28);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.weekyearOfCentury();
        org.joda.time.DurationField durationField35 = chronology28.halfdays();
        mutableDateTime8.setChronology(chronology28);
        java.util.Locale locale37 = java.util.Locale.US;
        java.util.Locale.setDefault(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 21996907, chronology28, locale37);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(54115116, 70021, 0, (int) '4', 21946202, 21964416, 54123005, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456259338,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=338,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 200L + "'", long32 == 200L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertNotNull(mutableDateTime40);
    }

    @Test
    public void test17459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17459");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(21888676);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) '4');
        org.joda.time.DateTime dateTime15 = dateTime13.plus((-48469999L));
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds(2);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate21 = localDate18.withField(dateTimeFieldType19, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDate21.toDateTime(readableInstant22);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate26 = localDate24.minusMonths((int) (short) -1);
        boolean boolean28 = localDate24.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology29 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology31 = chronology29.withZone(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate21.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateTime13, dateTimeZone30);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.Chronology chronology47 = localDate41.getChronology();
        long long51 = chronology47.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean52 = dateTimeFieldType40.isSupported(chronology47);
        mutableDateTime37.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField54 = chronology47.secondOfDay();
        long long56 = dateTimeField54.roundFloor(1707724464566400001L);
        java.util.Locale locale61 = new java.util.Locale("hi!", "Property[millisOfDay]", "");
        java.lang.String str62 = dateTimeField54.getAsText((-62194316231679L), locale61);
        java.util.Set<java.lang.String> strSet63 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str64 = locale61.getDisplayName();
        java.lang.String str65 = dateTimeZone30.getName((long) 414, locale61);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 21888665);
        int int68 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter3.withZone(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 212880000 + "'", int35 == 212880000);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 200L + "'", long51 == 200L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1707724464566400000L + "'", long56 == 1707724464566400000L);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!_PROPERTY[MILLISOFDAY]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "32568" + "'", str62, "32568");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi! (PROPERTY[MILLISOFDAY])" + "'", str64, "hi! (PROPERTY[MILLISOFDAY])");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+59:08" + "'", str65, "+59:08");
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 212880000 + "'", int68 == 212880000);
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
    }

    @Test
    public void test17460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17460");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        int int12 = mutableDateTime0.getMinuteOfDay();
        mutableDateTime0.add((long) 20);
        mutableDateTime0.addWeeks(21);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime0.toMutableDateTimeISO();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(chronology23);
        org.joda.time.DateTimeField dateTimeField27 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = chronology23.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField31 = chronology23.millisOfSecond();
        mutableDateTime17.setRounding(dateTimeField31);
        long long34 = dateTimeField31.remainder((long) 979);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Calendar calendar39 = mutableDateTime35.toCalendar(locale38);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.fromCalendarFields(calendar39);
        org.joda.time.LocalDate.Property property41 = localDate40.weekOfWeekyear();
        org.joda.time.LocalDate localDate42 = property41.roundCeilingCopy();
        org.joda.time.LocalDate.Property property43 = localDate42.year();
        org.joda.time.LocalDate localDate44 = property43.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField45 = property43.getField();
        org.joda.time.LocalDate localDate47 = property43.addWrapFieldToCopy(46);
        int int48 = dateTimeField31.getMaximumValue((org.joda.time.ReadablePartial) localDate47);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456259401,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=401,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 138 + "'", int12 == 138);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645456259401,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=401,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 999 + "'", int48 == 999);
    }

    @Test
    public void test17461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17461");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        int int4 = property3.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime5 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8339505 + "'", int2 == 8339505);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test17462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17462");
        java.util.Locale locale1 = new java.util.Locale("2022-02-22T06:06:31.551+15:02:03.198");
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.getISO3Country();
        java.lang.String str5 = locale1.getDisplayCountry(locale2);
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-22t06:06:31.551+15:02:03.198");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test17463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17463");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusDays(14);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(54123277);
        int int6 = localDateTime3.size();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minus(readableDuration8);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test17464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17464");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long5 = dateTimeZone2.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate9 = localDate6.withField(dateTimeFieldType7, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.DateTime dateTime11 = localDate9.toDateTime(readableInstant10);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTime dateTime14 = dateTime11.minusSeconds(10);
        int int15 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((-53));
        int int18 = dateTime14.getMonthOfYear();
        org.joda.time.DateTime dateTime20 = dateTime14.withMillis(281183302L);
        org.joda.time.DateTime dateTime22 = dateTime20.withYearOfEra(21930279);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears(8317);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-133144884L) + "'", long5 == (-133144884L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 212880000 + "'", int15 == 212880000);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test17465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17465");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(22091780, 54487859, 21965053, 21983578, 21893067, 54589633, 8146661);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21983578 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test17466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17466");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator1 = strSet0.spliterator();
        boolean boolean2 = strSet0.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream6 = languageRangeList4.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap13 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList14 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList12, strMap13);
        boolean boolean15 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths((int) (short) -1);
        boolean boolean21 = localDate17.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology22 = localDate17.getChronology();
        org.joda.time.Chronology chronology23 = localDate17.getChronology();
        long long27 = chronology23.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean28 = dateTimeFieldType16.isSupported(chronology23);
        org.joda.time.DateTimeField dateTimeField29 = chronology23.weekyearOfCentury();
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.lang.String str32 = dateTimeField29.getAsText((long) 54120, locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream37 = languageRangeList35.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap38 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList39 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap40 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList41 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strMap40);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList41, strMap42);
        java.util.Collection<java.util.Locale> localeCollection44 = null;
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter(languageRangeList41, localeCollection44, filteringMode45);
        java.util.Set<java.lang.String> strSet47 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator48 = strSet47.spliterator();
        boolean boolean49 = strSet47.isEmpty();
        java.util.Locale.FilteringMode filteringMode50 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags(languageRangeList41, (java.util.Collection<java.lang.String>) strSet47, filteringMode50);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags(languageRangeList14, (java.util.Collection<java.lang.String>) strSet33, filteringMode50);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTime dateTime61 = dateTime58.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property63 = dateTime61.property(dateTimeFieldType62);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime64.add(readableDuration65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate70 = localDate68.minusMonths((int) (short) -1);
        boolean boolean72 = localDate68.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology73 = localDate68.getChronology();
        org.joda.time.Chronology chronology74 = localDate68.getChronology();
        long long78 = chronology74.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean79 = dateTimeFieldType67.isSupported(chronology74);
        mutableDateTime64.setChronology(chronology74);
        org.joda.time.DateTimeField dateTimeField81 = chronology74.dayOfYear();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType62.getField(chronology74);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((java.lang.Object) strList52, chronology74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSpliterator1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(languageRangeStream6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 200L + "'", long27 == 200L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "70" + "'", str32, "70");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeStream37);
        org.junit.Assert.assertNotNull(languageRangeList39);
        org.junit.Assert.assertNotNull(languageRangeList41);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSpliterator48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + filteringMode50 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode50.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 200L + "'", long78 == 200L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
    }

    @Test
    public void test17467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17467");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.lang.Object[] objArray3 = strSet2.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream7 = languageRangeList5.stream();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.lang.String str15 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList13);
        java.util.Locale.FilteringMode filteringMode16 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList13, filteringMode16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap18);
        boolean boolean20 = strSet2.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream24 = languageRangeList22.stream();
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.String str32 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList30);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList30, filteringMode33);
        boolean boolean35 = strSet2.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        mutableDateTime36.add(durationFieldType40, (-1));
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime36.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.addWrapField(21);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.toMutableDateTimeISO();
        mutableDateTime46.setTime((long) 538);
        java.lang.Object obj49 = mutableDateTime46.clone();
        boolean boolean50 = strSet2.remove(obj49);
        java.util.Iterator<java.lang.String> strItor51 = strSet2.iterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeStream7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + filteringMode16 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode16.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeStream24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode33.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "2022-02-17T00:00:00.538+59:08");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "2022-02-17T00:00:00.538+59:08");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "2022-02-17T00:00:00.538+59:08");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strItor51);
    }

    @Test
    public void test17468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17468");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Calendar calendar4 = mutableDateTime0.toCalendar(locale3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate8 = localDate5.withField(dateTimeFieldType6, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTime(readableInstant9);
        mutableDateTime0.setMillis(readableInstant9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = mutableDateTime0.getRoundingField();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate17 = localDate14.withField(dateTimeFieldType15, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.DateTime dateTime19 = localDate17.toDateTime(readableInstant18);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property24 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime25 = property24.withMinimumValue();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(54119608);
        int int29 = dateTime28.getDayOfWeek();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 422);
        mutableDateTime32.addMonths(21916);
        int int35 = mutableDateTime32.getMillisOfDay();
        mutableDateTime32.addWeeks(21923);
        int int38 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime32.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime32.setDayOfYear(54566);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54566 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645456259658,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=658,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40080422 + "'", int35 == 40080422);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test17469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17469");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withChronology(chronology5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter0.withZoneUTC();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths((int) (short) -1);
        boolean boolean13 = localDate9.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology14 = localDate9.getChronology();
        org.joda.time.Chronology chronology15 = localDate9.getChronology();
        long long19 = chronology15.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate22 = localDate20.minusMonths((int) (short) -1);
        boolean boolean24 = localDate20.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology25 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology27 = chronology25.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekOfWeekyear();
        java.util.Locale locale30 = java.util.Locale.getDefault();
        java.lang.String str31 = dateTimeField28.getAsText((long) (short) 1, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(32L, chronology15, locale30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate36 = localDate33.withField(dateTimeFieldType34, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.DateTime dateTime38 = localDate36.toDateTime(readableInstant37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMonths((int) '4');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((-48469999L));
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds(2);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate48 = localDate45.withField(dateTimeFieldType46, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.DateTime dateTime50 = localDate48.toDateTime(readableInstant49);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate53 = localDate51.minusMonths((int) (short) -1);
        boolean boolean55 = localDate51.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology56 = localDate51.getChronology();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology58 = chronology56.withZone(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = localDate48.toDateTimeAtCurrentTime(dateTimeZone57);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((java.lang.Object) dateTime40, dateTimeZone57);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone62);
        long long65 = dateTimeZone57.getMillisKeepLocal(dateTimeZone62, (long) (byte) -1);
        dateTimeParserBucket32.setZone(dateTimeZone62);
        java.util.Locale locale67 = dateTimeParserBucket32.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter0.withLocale(locale67);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter68.withPivotYear(524);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter68.withDefaultYear(54129);
        boolean boolean73 = dateTimeFormatter68.isPrinter();
        java.util.Locale locale74 = dateTimeFormatter68.getLocale();
        boolean boolean75 = dateTimeFormatter68.isPrinter();
        boolean boolean76 = dateTimeFormatter68.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter68.withDefaultYear(21903);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime();
        java.lang.String str80 = mutableDateTime79.toString();
        org.joda.time.ReadableDuration readableDuration81 = null;
        mutableDateTime79.add(readableDuration81);
        mutableDateTime79.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime79.year();
        org.joda.time.MutableDateTime mutableDateTime86 = property85.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime87 = property85.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime88 = property85.roundCeiling();
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime88.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime91 = property89.set(58);
        org.joda.time.ReadableDuration readableDuration92 = null;
        mutableDateTime91.add(readableDuration92);
        int int96 = dateTimeFormatter78.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime91, "2022-02-22T06:05:01.871+15:02:03.198", 8178077);
        mutableDateTime91.addMonths(8144703);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11:09 AM" + "'", str4, "11:09 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 200L + "'", long19 == 200L);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-1L) + "'", long65 == (-1L));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-24T02:18:59.673+59:08" + "'", str80, "2022-02-24T02:18:59.673+59:08");
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-8178078) + "'", int96 == (-8178078));
    }

    @Test
    public void test17470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17470");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfEvenCopy();
        int int5 = localDateTime4.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMonths(54123198);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(54744394);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = localDateTime14.getFields();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8339713 + "'", int2 == 8339713);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
    }

    @Test
    public void test17471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17471");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.String str1 = mutableDateTime0.toString();
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime0.add(readableDuration2);
        mutableDateTime0.setWeekyear((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.year();
        mutableDateTime0.addWeekyears(3);
        int int9 = mutableDateTime0.getYearOfCentury();
        mutableDateTime0.addWeekyears((int) 'x');
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime();
        mutableDateTime12.setMillis((long) (byte) 1);
        mutableDateTime12.setWeekOfWeekyear(47);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate20 = localDate17.withField(dateTimeFieldType18, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDate20.toDateTime(readableInstant21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) '4');
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        mutableDateTime12.setDate((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime12.hourOfDay();
        mutableDateTime12.addWeekyears(54122);
        mutableDateTime12.addHours(1984);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate42 = localDate39.withField(dateTimeFieldType40, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.DateTime dateTime44 = localDate42.toDateTime(readableInstant43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMonths((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime44.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime49.add(readableDuration50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        mutableDateTime49.add(durationFieldType53, (-1));
        org.joda.time.DateTime dateTime57 = dateTime44.withFieldAdded(durationFieldType53, (int) (byte) 1);
        boolean boolean58 = dateTime37.isAfter((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.weekOfWeekyear();
        long long70 = dateTimeField67.addWrapField((long) ' ', 0);
        boolean boolean71 = dateTimeField67.isSupported();
        long long74 = dateTimeField67.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = dateTimeField67.getType();
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.lang.String str78 = dateTimeField67.getAsText((long) (byte) 1, locale77);
        java.lang.String str79 = locale77.getLanguage();
        java.util.Calendar calendar80 = dateTime57.toCalendar(locale77);
        org.joda.time.DateTime dateTime82 = dateTime57.withHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime82.toMutableDateTime();
        boolean boolean85 = mutableDateTime83.isBefore(54135101L);
        mutableDateTime12.setTime((org.joda.time.ReadableInstant) mutableDateTime83);
        org.joda.time.ReadablePeriod readablePeriod87 = null;
        mutableDateTime12.add(readablePeriod87);
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime92 = property90.set(54112611);
        mutableDateTime92.addMinutes(390);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-24T02:18:59.722+59:08" + "'", str1, "2022-02-24T02:18:59.722+59:08");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 32L + "'", long70 == 32L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 58665600001L + "'", long74 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1" + "'", str78, "1");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "en" + "'", str79, "en");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-62194294140276,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=724,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(mutableDateTime92);
    }

    @Test
    public void test17472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17472");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = org.joda.time.format.DateTimeFormat.fullDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime7.add(readableDuration8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology16 = localDate11.getChronology();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        long long21 = chronology17.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean22 = dateTimeFieldType10.isSupported(chronology17);
        mutableDateTime7.setChronology(chronology17);
        org.joda.time.DurationField durationField24 = chronology17.minutes();
        org.joda.time.DateTimeZone dateTimeZone25 = chronology17.getZone();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(chronology17);
        long long30 = chronology17.add(4201328032L, 200L, 54130144);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter5.withChronology(chronology17);
        org.joda.time.DurationField durationField32 = chronology17.days();
        org.joda.time.DateTimeField dateTimeField33 = chronology17.hourOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((-1L), chronology35);
        org.joda.time.DateTime dateTime37 = localDate36.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate41 = localDate39.minusMonths((int) (short) -1);
        boolean boolean43 = localDate39.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology44 = localDate39.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology46 = chronology44.withZone(dateTimeZone45);
        boolean boolean47 = dateTimeZone38.equals((java.lang.Object) dateTimeZone45);
        org.joda.time.DateTime dateTime48 = localDate36.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.minusMonths((int) (short) -1);
        boolean boolean53 = localDate49.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate55 = localDate49.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property56 = localDate49.yearOfEra();
        org.joda.time.LocalDate localDate58 = property56.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.LocalDate localDate59 = property56.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate61 = property56.addWrapFieldToCopy(54147276);
        boolean boolean62 = localDate36.equals((java.lang.Object) localDate61);
        java.util.Locale.Category category63 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale64 = java.util.Locale.getDefault(category63);
        java.util.Locale locale65 = java.util.Locale.getDefault(category63);
        java.util.Locale locale66 = java.util.Locale.getDefault(category63);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.minusMonths((int) (short) -1);
        boolean boolean71 = localDate67.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate73 = localDate67.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property74 = localDate67.yearOfEra();
        org.joda.time.LocalDate localDate75 = property74.roundFloorCopy();
        org.joda.time.LocalDate localDate76 = property74.roundFloorCopy();
        org.joda.time.LocalDate localDate77 = property74.roundCeilingCopy();
        java.util.Locale locale78 = java.util.Locale.PRC;
        java.lang.String str79 = property74.getAsShortText(locale78);
        java.lang.String str80 = locale78.getDisplayVariant();
        java.util.Locale locale84 = new java.util.Locale("Sunday, February 21, -0001", "2022-02-21T15:01:56.023Z", "");
        java.lang.String str85 = locale84.toLanguageTag();
        java.lang.String str86 = locale84.toLanguageTag();
        java.lang.String str87 = locale78.getDisplayCountry(locale84);
        java.util.Locale.setDefault(category63, locale78);
        boolean boolean89 = localDate61.equals((java.lang.Object) category63);
        java.util.Locale locale90 = java.util.Locale.getDefault(category63);
        java.util.Locale locale92 = new java.util.Locale("22062");
        java.util.Locale.setDefault(category63, locale92);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket((long) 21925706, chronology17, locale92, (java.lang.Integer) 22121, 12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime97 = new org.joda.time.LocalTime(54541998, 458, 54541998, 21913732, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54541998 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 200L + "'", long21 == 200L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 15027356832L + "'", long30 == 15027356832L);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category63.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022" + "'", str79, "2022");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals(locale84.toString(), "sunday, february 21, -0001_2022-02-21T15:01:56.023Z");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "und" + "'", str85, "und");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "und" + "'", str86, "und");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "China" + "'", str87, "China");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale92.toString(), "22062");
    }

    @Test
    public void test17473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17473");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean12 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField15 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology7.millisOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology7.add(readablePeriod19, (long) 54441, 22105496);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 54441L + "'", long22 == 54441L);
    }

    @Test
    public void test17474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17474");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        long long13 = dateTimeField11.roundHalfEven((long) 47);
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.lang.String str16 = locale15.getDisplayCountry();
        java.lang.String str17 = dateTimeField11.getAsText(129, locale15);
        java.lang.String str18 = dateTimeField11.getName();
        long long21 = dateTimeField11.getDifferenceAsLong(54117L, 698486719351176000L);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "United States" + "'", str16, "United States");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "129" + "'", str17, "129");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-22134162L) + "'", long21 == (-22134162L));
    }

    @Test
    public void test17475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17475");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime0.add(durationFieldType4, (-1));
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate10 = localDate7.withField(dateTimeFieldType8, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDate10.toDateTime(readableInstant11);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        mutableDateTime0.setChronology(chronology13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfEven();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(0L);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDate18.getFields();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        org.joda.time.LocalDate localDate23 = localDate18.withFieldAdded(durationFieldType21, 8);
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight();
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.Instant instant26 = mutableDateTime16.toInstant();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(instant26);
    }

    @Test
    public void test17476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17476");
        java.util.Locale locale1 = new java.util.Locale("0003-06-24T02:17:35.067+59:08");
        org.junit.Assert.assertEquals(locale1.toString(), "0003-06-24t02:17:35.067+59:08");
    }

    @Test
    public void test17477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17477");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Calendar calendar12 = mutableDateTime8.toCalendar(locale11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate16 = localDate13.withField(dateTimeFieldType14, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDate16.toDateTime(readableInstant17);
        mutableDateTime8.setMillis(readableInstant17);
        boolean boolean20 = dateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime8.add(readablePeriod21, 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime8.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime25.add(readableDuration26);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Calendar calendar29 = mutableDateTime25.toCalendar(locale28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate33 = localDate30.withField(dateTimeFieldType31, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDate33.toDateTime(readableInstant34);
        mutableDateTime25.setMillis(readableInstant34);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime25.hourOfDay();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime25.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate43 = localDate41.minusMonths((int) (short) -1);
        boolean boolean45 = localDate41.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology46 = localDate41.getChronology();
        org.joda.time.Chronology chronology47 = localDate41.getChronology();
        long long51 = chronology47.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean52 = dateTimeFieldType40.isSupported(chronology47);
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("2022-02-21T15:01:59.080Z");
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) '4', chronology47, locale54, (java.lang.Integer) 54135101, 80);
        java.lang.String str59 = property38.getAsText(locale54);
        org.joda.time.MutableDateTime mutableDateTime60 = property38.roundFloor();
        mutableDateTime60.setWeekOfWeekyear(31);
        boolean boolean63 = mutableDateTime8.isEqual((org.joda.time.ReadableInstant) mutableDateTime60);
        mutableDateTime8.setMillis((long) 8213520);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setTime(22092, 54507688, 22070, 22010865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22092 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456259830,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=830,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645456259830,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=830,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 200L + "'", long51 == 200L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "22" + "'", str59, "22");
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test17478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17478");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundFloorCopy();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(2);
        org.joda.time.LocalDate localDate16 = localDate12.withYearOfEra(21887627);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate12.withWeekOfWeekyear(22173524);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22173524 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test17479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17479");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime5.plusMonths((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        mutableDateTime10.add(durationFieldType14, (-1));
        org.joda.time.DateTime dateTime18 = dateTime5.withFieldAdded(durationFieldType14, (int) (byte) 1);
        int int19 = dateTime5.getSecondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime5.minusHours(100);
        int int22 = dateTime21.getWeekOfWeekyear();
        int int23 = dateTime21.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8339 + "'", int19 == 8339);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
    }

    @Test
    public void test17480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17480");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        mutableDateTime0.add(readableDuration1);
        mutableDateTime0.setMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.property(dateTimeFieldType5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime0.add(readableDuration7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDate12.toDateTime(readableInstant13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime14.withWeekyear((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        org.joda.time.DateTime dateTime21 = property19.getDateTime();
        java.lang.String str22 = property19.getAsString();
        org.joda.time.DateTime dateTime23 = property19.withMaximumValue();
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfDay();
        int int25 = dateTime23.getSecondOfDay();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime27 = mutableDateTime0.toDateTimeISO();
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8339 + "'", int25 == 8339);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test17481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17481");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology5 = localDate0.getChronology();
        long long9 = chronology5.add((long) 54133701, 1000L, 54123198);
        org.joda.time.DateTimeField dateTimeField10 = chronology5.dayOfWeek();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology5);
        org.joda.time.DateTimeField dateTimeField12 = chronology5.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 54177331701L + "'", long9 == 54177331701L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test17482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17482");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusMonths((int) (short) -1);
        boolean boolean7 = localDate3.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology8 = localDate3.getChronology();
        org.joda.time.Chronology chronology9 = localDate3.getChronology();
        long long13 = chronology9.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean14 = dateTimeFieldType2.isSupported(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField16 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField17 = chronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.millisOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 21963740, chronology9);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 97, chronology9);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 200L + "'", long13 == 200L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test17483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17483");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusMonths((int) (short) -1);
        boolean boolean12 = localDate8.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology13 = localDate8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology15 = chronology13.withZone(dateTimeZone14);
        boolean boolean16 = dateTimeZone7.equals((java.lang.Object) dateTimeZone14);
        java.lang.String str18 = dateTimeZone14.getShortName((long) 54150261);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate23 = localDate21.minusMonths((int) (short) -1);
        boolean boolean25 = localDate21.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate27 = localDate21.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.era();
        org.joda.time.DurationField durationField30 = chronology28.days();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.yearOfCentury();
        org.joda.time.Chronology chronology32 = chronology28.withUTC();
        org.joda.time.Chronology chronology33 = chronology28.withUTC();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 21960141, chronology28, locale34, (java.lang.Integer) 21948010, 22028094);
        java.lang.String str39 = locale34.getISO3Country();
        java.lang.String str40 = dateTimeZone14.getShortName(1708708189474771190L, locale34);
        long long44 = dateTimeZone14.convertLocalToUTC((-32132428L), true, 22093164L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(129, 32264, 258, 54565565, 22109877, 510, 8169, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54565565 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+59:08" + "'", str18, "+59:08");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CAN" + "'", str39, "CAN");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+59:08" + "'", str40, "+59:08");
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-245012428L) + "'", long44 == (-245012428L));
    }

    @Test
    public void test17484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17484");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate13 = localDate10.withField(dateTimeFieldType11, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDate13.toDateTime(readableInstant14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths((int) '4');
        org.joda.time.DateTime dateTime19 = dateTime17.plus((-48469999L));
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(2);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate25 = localDate22.withField(dateTimeFieldType23, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.DateTime dateTime27 = localDate25.toDateTime(readableInstant26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.minusMonths((int) (short) -1);
        boolean boolean32 = localDate28.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology33 = localDate28.getChronology();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology35 = chronology33.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = localDate25.toDateTimeAtCurrentTime(dateTimeZone34);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((java.lang.Object) dateTime17, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone39);
        long long42 = dateTimeZone34.getMillisKeepLocal(dateTimeZone39, (long) (byte) -1);
        boolean boolean43 = dateTimeZone39.isFixed();
        org.joda.time.Chronology chronology44 = chronology6.withZone(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 1, chronology44);
        java.lang.String str46 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.clockhourOfHalfday();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(chronology44);
        org.joda.time.LocalDate.Property property52 = localDate51.era();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusWeeks(2022);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusYears((-1));
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withDurationAdded(readableDuration61, 0);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime66 = localDateTime60.withDurationAdded(readableDuration64, 10);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withDayOfYear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime66.plusMinutes(522);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime66.plusHours(167);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusDays(21933332);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = localDate51.isEqual((org.joda.time.ReadablePartial) localDateTime73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-1L) + "'", long42 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+59:08]" + "'", str46, "ISOChronology[+59:08]");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test17485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17485");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((-1L), dateTimeZone1);
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfDay();
        java.lang.String str4 = property3.toString();
        org.joda.time.DurationField durationField5 = property3.getLeapDurationField();
        org.joda.time.LocalTime localTime7 = property3.addCopy((long) 2022);
        org.joda.time.LocalTime localTime8 = property3.roundHalfFloorCopy();
        java.lang.String str9 = property3.getName();
        org.joda.time.LocalTime localTime10 = property3.getLocalTime();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate13 = localDate11.minusMonths((int) (short) -1);
        boolean boolean15 = localDate11.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate17 = localDate11.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getRangeDurationType();
        boolean boolean21 = localDate17.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate17.toDateTimeAtStartOfDay(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = localTime10.isBefore((org.joda.time.ReadablePartial) localDate17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[millisOfDay]" + "'", str4, "Property[millisOfDay]");
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "millisOfDay" + "'", str9, "millisOfDay");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test17486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17486");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 8);
        long long20 = dateTimeZone17.convertLocalToUTC(79735116L, false);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate24 = localDate21.withField(dateTimeFieldType22, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDate24.toDateTime(readableInstant25);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime26.minusSeconds(10);
        int int30 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((-53));
        int int33 = property14.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime34 = property14.roundFloorCopy();
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(22138476);
        int int37 = dateTime34.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-133144884L) + "'", long20 == (-133144884L));
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 212880000 + "'", int30 == 212880000);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test17487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17487");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.fullDate();
        java.lang.String str2 = dateTimeFormatter0.print((-2208988800000L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear(619);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Wednesday, January 3, 1900" + "'", str2, "Wednesday, January 3, 1900");
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
    }

    @Test
    public void test17488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17488");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.DateTimeFormat.shortTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((int) (short) -1);
        java.lang.String str4 = dateTimeFormatter0.print(60000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withPivotYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter6.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withDefaultYear(627);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(21880119);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withZone(dateTimeZone13);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter9.getPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11:09 AM" + "'", str4, "11:09 AM");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
    }

    @Test
    public void test17489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17489");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        dateTimeParserBucket24.setOffset(54111610);
        long long29 = dateTimeParserBucket24.computeMillis(false, "Property[millisOfDay]");
        long long31 = dateTimeParserBucket24.computeMillis(false);
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeParserBucket24.getZone();
        int int34 = dateTimeZone32.getOffsetFromLocal((long) 70);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Calendar calendar39 = mutableDateTime35.toCalendar(locale38);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        mutableDateTime35.setMillis(readableInstant44);
        int int47 = mutableDateTime35.getMinuteOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate50 = localDate48.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime51 = localDate48.toDateTimeAtCurrentTime();
        int int52 = localDate48.getYear();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate56 = localDate53.withField(dateTimeFieldType54, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDate56.toDateTime(readableInstant57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology66 = chronology64.withZone(dateTimeZone65);
        org.joda.time.DateTime dateTime67 = localDate56.toDateTimeAtCurrentTime(dateTimeZone65);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        long long70 = dateTimeZone65.getMillisKeepLocal(dateTimeZone68, (long) 2);
        long long72 = dateTimeZone65.nextTransition((long) 54130144);
        org.joda.time.DateTime dateTime73 = localDate48.toDateTimeAtStartOfDay(dateTimeZone65);
        mutableDateTime35.setZoneRetainFields(dateTimeZone65);
        long long76 = dateTimeZone32.getMillisKeepLocal(dateTimeZone65, (long) 54110102);
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.now(dateTimeZone32);
        long long79 = dateTimeZone32.nextTransition((long) 22704771);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-54111578L) + "'", long29 == (-54111578L));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-54111578L) + "'", long31 == (-54111578L));
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645456259994,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=10,SECOND=59,MILLISECOND=994,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 138 + "'", int47 == 138);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 2L + "'", long70 == 2L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 54130144L + "'", long72 == 54130144L);
        org.junit.Assert.assertNotNull(dateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-158769898L) + "'", long76 == (-158769898L));
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 22704771L + "'", long79 == 22704771L);
    }

    @Test
    public void test17490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17490");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.DateTimeFormat.longTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        int int4 = localDateTime3.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        mutableDateTime6.add(durationFieldType10, (-1));
        long long13 = property5.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime6.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withZone(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        long long20 = dateTimeZone16.adjustOffset((long) (byte) 0, false);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withZone(dateTimeZone16);
        int int22 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatter2.getPrinter();
        java.util.Locale locale26 = new java.util.Locale("en", "52");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withLocale(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket30 = new org.joda.time.format.DateTimeParserBucket((long) 21890, chronology1, locale26, (java.lang.Integer) 0, 6);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket30.getZone();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
        org.junit.Assert.assertNotNull(dateTimePrinter23);
        org.junit.Assert.assertEquals(locale26.toString(), "en_52");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test17491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17491");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths((int) '4');
        org.joda.time.DateTime dateTime9 = dateTime7.plus((-48469999L));
        org.joda.time.DateTime dateTime11 = dateTime7.plusSeconds(2);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate15 = localDate12.withField(dateTimeFieldType13, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDate15.toDateTime(readableInstant16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate20 = localDate18.minusMonths((int) (short) -1);
        boolean boolean22 = localDate18.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology23 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology25 = chronology23.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = localDate15.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime7, dateTimeZone24);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutableDateTime29.add(readableDuration30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Calendar calendar33 = mutableDateTime29.toCalendar(locale32);
        boolean boolean34 = dateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        java.lang.String str36 = mutableDateTime35.toString();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime37.add(readableDuration38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getDurationType();
        mutableDateTime37.add(durationFieldType41, (-1));
        mutableDateTime35.add(durationFieldType41, 10);
        org.joda.time.DateTime dateTime47 = dateTime28.withFieldAdded(durationFieldType41, 5);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate51 = localDate48.withField(dateTimeFieldType49, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.DateTime dateTime53 = localDate51.toDateTime(readableInstant52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMonths((int) '4');
        org.joda.time.DateTime dateTime57 = dateTime53.plusSeconds((int) (byte) 1);
        int int58 = dateTime28.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime60 = dateTime28.plusMinutes(54130456);
        org.joda.time.DateTime dateTime61 = dateTime28.toDateTimeISO();
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        int int63 = dateTime62.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645456260042,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=11,SECOND=0,MILLISECOND=42,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-24T02:19:00.042+59:08" + "'", str36, "2022-02-24T02:19:00.042+59:08");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 24 + "'", int63 == 24);
    }

    @Test
    public void test17492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17492");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate4 = localDate1.withField(dateTimeFieldType2, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.DateTime dateTime6 = localDate4.toDateTime(readableInstant5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate9 = localDate7.minusMonths((int) (short) -1);
        boolean boolean11 = localDate7.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology12 = localDate7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology14 = chronology12.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = localDate4.toDateTimeAtCurrentTime(dateTimeZone13);
        boolean boolean16 = dateTimeZone13.isFixed();
        int int18 = dateTimeZone13.getOffset((-768609154156284000L));
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(1316366460000L, dateTimeZone13);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate20.withField(dateTimeFieldType21, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDate23.toDateTime(readableInstant24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths((int) '4');
        org.joda.time.DateTime dateTime29 = dateTime27.plus((-48469999L));
        org.joda.time.DateTime dateTime31 = dateTime27.plusSeconds(2);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate35 = localDate32.withField(dateTimeFieldType33, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.DateTime dateTime37 = localDate35.toDateTime(readableInstant36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusMonths((int) (short) -1);
        boolean boolean42 = localDate38.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology43 = localDate38.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology45 = chronology43.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate35.toDateTimeAtCurrentTime(dateTimeZone44);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) dateTime27, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone49);
        long long52 = dateTimeZone44.getMillisKeepLocal(dateTimeZone49, (long) (byte) -1);
        java.lang.String str54 = dateTimeZone49.getShortName((long) (byte) 1);
        int int56 = dateTimeZone49.getOffset(378L);
        mutableDateTime19.setZone(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 212880000 + "'", int18 == 212880000);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-1L) + "'", long52 == (-1L));
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+59:08" + "'", str54, "+59:08");
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 212880000 + "'", int56 == 212880000);
    }

    @Test
    public void test17493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17493");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(40);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        java.lang.String str4 = dateTimeZone2.toString();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 21880901, dateTimeZone2);
        org.joda.time.DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+40:00" + "'", str4, "+40:00");
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test17494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17494");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate3 = localDate0.withField(dateTimeFieldType1, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.DateTime dateTime5 = localDate3.toDateTime(readableInstant4);
        org.joda.time.DateTime dateTime7 = dateTime5.withMillisOfDay((int) (short) 100);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMinutes(54123197);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.minusMonths((int) (short) -1);
        boolean boolean14 = localDate10.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology15 = localDate10.getChronology();
        org.joda.time.Chronology chronology16 = localDate10.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.seconds();
        java.lang.String str18 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DurationField durationField22 = chronology16.years();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime5.toMutableDateTime(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test17495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17495");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("+40:00");
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate6 = localDate4.minusMonths((int) (short) -1);
        boolean boolean8 = localDate4.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology9 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology11 = chronology9.withZone(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.weekyearOfCentury();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.minusMonths((int) (short) -1);
        boolean boolean20 = localDate16.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology21 = localDate16.getChronology();
        org.joda.time.Chronology chronology22 = localDate16.getChronology();
        long long26 = chronology22.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = dateTimeField35.getAsText((long) (short) 1, locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket(32L, chronology22, locale37);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate43 = localDate40.withField(dateTimeFieldType41, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDate43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMonths((int) '4');
        org.joda.time.DateTime dateTime49 = dateTime47.plus((-48469999L));
        org.joda.time.DateTime dateTime51 = dateTime47.plusSeconds(2);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate55 = localDate52.withField(dateTimeFieldType53, (int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDate55.toDateTime(readableInstant56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.minusMonths((int) (short) -1);
        boolean boolean62 = localDate58.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology63 = localDate58.getChronology();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology65 = chronology63.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = localDate55.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) dateTime47, dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) 54110102, dateTimeZone69);
        long long72 = dateTimeZone64.getMillisKeepLocal(dateTimeZone69, (long) (byte) -1);
        dateTimeParserBucket39.setZone(dateTimeZone69);
        java.util.Locale locale74 = dateTimeParserBucket39.getLocale();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        dateTimeParserBucket39.setZone(dateTimeZone75);
        dateTimeParserBucket39.setPivotYear((java.lang.Integer) 59);
        java.util.Locale locale79 = dateTimeParserBucket39.getLocale();
        java.util.Locale locale80 = locale79.stripExtensions();
        java.lang.String str81 = locale80.getDisplayVariant();
        boolean boolean82 = locale80.hasExtensions();
        java.lang.String str83 = locale80.toLanguageTag();
        java.lang.String str84 = dateTimeField13.getAsShortText(22083759, locale80);
        java.lang.String str85 = timeZone1.getDisplayName(locale80);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 200L + "'", long26 == 200L);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "en-US" + "'", str83, "en-US");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "22083759" + "'", str84, "22083759");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Greenwich Mean Time" + "'", str85, "Greenwich Mean Time");
    }

    @Test
    public void test17496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17496");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.minusMonths((int) (short) -1);
        boolean boolean4 = localDate0.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate6 = localDate0.withYear((int) (byte) 1);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DurationField durationField9 = chronology7.days();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((int) (short) -1);
        boolean boolean17 = localDate13.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology18 = localDate13.getChronology();
        org.joda.time.Chronology chronology19 = localDate13.getChronology();
        long long23 = chronology19.add((long) (byte) 100, (long) 1, (int) (short) 100);
        boolean boolean24 = dateTimeFieldType12.isSupported(chronology19);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket26 = new org.joda.time.format.DateTimeParserBucket((long) 8, chronology19, locale25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths((int) (short) -1);
        boolean boolean31 = localDate27.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology32 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology34 = chronology32.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        long long38 = dateTimeField35.addWrapField((long) ' ', 0);
        boolean boolean39 = dateTimeField35.isSupported();
        long long42 = dateTimeField35.add(1L, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField35.getType();
        long long46 = dateTimeField35.getDifferenceAsLong((long) (short) 1, 200L);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths((int) (short) -1);
        boolean boolean51 = localDate47.equals((java.lang.Object) (byte) 0);
        org.joda.time.LocalDate localDate53 = localDate47.withYear((int) (byte) 1);
        org.joda.time.LocalDate.Property property54 = localDate47.yearOfEra();
        org.joda.time.LocalDate localDate55 = property54.roundFloorCopy();
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.lang.String str57 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDate55, locale56);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate61 = localDate59.minusMonths((int) (short) -1);
        boolean boolean63 = localDate59.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology64 = localDate59.getChronology();
        org.joda.time.Chronology chronology65 = localDate59.getChronology();
        long long69 = chronology65.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths((int) (short) -1);
        boolean boolean74 = localDate70.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology75 = localDate70.getChronology();
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology77 = chronology75.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.weekOfWeekyear();
        java.util.Locale locale80 = java.util.Locale.getDefault();
        java.lang.String str81 = dateTimeField78.getAsText((long) (short) 1, locale80);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket82 = new org.joda.time.format.DateTimeParserBucket(32L, chronology65, locale80);
        java.lang.String str83 = locale56.getDisplayVariant(locale80);
        java.lang.String str84 = locale25.getDisplayScript(locale56);
        java.lang.String str85 = locale25.toLanguageTag();
        int int86 = dateTimeField10.getMaximumTextLength(locale25);
        long long89 = dateTimeField10.addWrapField(7200000L, 54459201);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 200L + "'", long23 == 200L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 32L + "'", long38 == 32L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 58665600001L + "'", long42 == 58665600001L);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "52" + "'", str57, "52");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 200L + "'", long69 == 200L);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1" + "'", str81, "1");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "fr-FR" + "'", str85, "fr-FR");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 3031200000L + "'", long89 == 3031200000L);
    }

    @Test
    public void test17497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17497");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.Chronology chronology7 = localDate1.getChronology();
        long long11 = chronology7.add((long) (byte) 100, (long) 1, (int) (short) 100);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (short) -1);
        boolean boolean16 = localDate12.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology17 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology19 = chronology17.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.lang.String str23 = dateTimeField20.getAsText((long) (short) 1, locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket(32L, chronology7, locale22);
        org.joda.time.DateTimeField dateTimeField25 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology7.year();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology7);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now(chronology7);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 200L + "'", long11 == 200L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1" + "'", str23, "1");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test17498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17498");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 54546628);
    }

    @Test
    public void test17499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17499");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths((int) (short) -1);
        boolean boolean5 = localDate1.equals((java.lang.Object) (byte) 0);
        org.joda.time.Chronology chronology6 = localDate1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.Chronology chronology8 = chronology6.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 2, chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(0);
        int int12 = dateTime11.getYearOfEra();
        java.lang.String str13 = dateTime11.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1970 + "'", int12 == 1970);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-03T11:08:00.002+59:08" + "'", str13, "1970-01-03T11:08:00.002+59:08");
    }

    @Test
    public void test17500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest34.test17500");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime();
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        mutableDateTime2.add(durationFieldType6, (-1));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withFieldAdded(durationFieldType6, (int) (byte) 0);
        int int11 = localDateTime0.getMillisOfSecond();
        int int12 = localDateTime0.getSecondOfMinute();
        org.joda.time.Chronology chronology13 = localDateTime0.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 275 + "'", int11 == 275);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }
}

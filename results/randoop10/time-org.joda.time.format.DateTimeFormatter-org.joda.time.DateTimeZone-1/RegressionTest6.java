import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test03001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03001");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis((-1));
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 35381388);
        int int21 = dateTime20.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 42 + "'", int21 == 42);
    }

    @Test
    public void test03002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03002");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        int int7 = localDateTime5.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMillis(2021);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withPeriodAdded(readablePeriod10, 35388348);
        int int13 = localDateTime12.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
    }

    @Test
    public void test03003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03003");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, (int) (byte) 10);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        int int27 = timeZone26.getRawOffset();
        int int29 = timeZone26.getOffset(899338161L);
        boolean boolean30 = timeZone26.useDaylightTime();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572476086L + "'", long14 == 1644572476086L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test03004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03004");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 2022);
        int int7 = dateTimeFormatter6.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter6.getZone();
        boolean boolean9 = dateTimeFormatter6.isPrinter();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime8 = localTime4.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime10 = localTime4.plusMillis(48);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime4.plus(readablePeriod11);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test03006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.minusWeeks((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime13.withEra(35350243);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35350243 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572476200L + "'", long14 == 1644572476200L);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test03007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03007");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        mutableDateTime2.addYears((int) (byte) 10);
        int int5 = mutableDateTime2.getRoundingMode();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setDayOfWeek(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test03008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03008");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        boolean boolean4 = dateTimeFormatter2.isParser();
        java.io.Writer writer5 = null;
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(dateTimeZone8);
        org.joda.time.LocalDate.Property property10 = localDate9.era();
        org.joda.time.LocalDate localDate12 = localDate9.withDayOfWeek(3);
        org.joda.time.LocalDate localDate14 = localDate12.withWeekyear(100);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate16 = localDate14.minus(readablePeriod15);
        java.lang.String str18 = localDate16.toString("0");
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight21 = localDate16.toDateMidnight(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(1644572365208L, dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer5, (org.joda.time.ReadablePartial) localDate22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0" + "'", str18, "0");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test03009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03009");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology15);
        java.lang.Object obj20 = mutableDateTime19.clone();
        int int21 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime19.add(readableDuration22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime19.toMutableDateTimeISO();
        mutableDateTime24.addHours((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = mutableDateTime24.getZone();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime24.add(readableDuration28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime localDateTime37 = property36.getLocalDateTime();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.monthOfYear();
        org.joda.time.LocalDateTime localDateTime42 = property40.addWrapFieldToCopy((int) (short) 100);
        int int43 = localDateTime42.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = localDateTime42.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime37.property(dateTimeFieldType45);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.set(dateTimeFieldType45, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572476299L + "'", long14 == 1644572476299L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-11T09:51:16.299Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-11T09:51:16.299Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-11T09:51:16.299Z");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 299 + "'", int21 == 299);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test03010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03010");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=property[millisofsecond]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03011");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(2022);
        int int8 = localDate2.getYear();
        org.joda.time.LocalDate localDate10 = localDate2.minusMonths(55);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.LocalDate localDate13 = property11.roundFloorCopy();
        org.joda.time.LocalDate localDate14 = property11.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(470);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 470 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test03012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03012");
        org.joda.time.tz.Provider provider0 = null;
        org.joda.time.DateTimeZone.setProvider(provider0);
    }

    @Test
    public void test03013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03013");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(2022);
        int int8 = localDate2.getYear();
        org.joda.time.LocalDate localDate10 = localDate2.minusMonths(55);
        org.joda.time.LocalDate.Property property11 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate13 = localDate2.plusMonths(3);
        org.joda.time.LocalDate.Property property14 = localDate2.yearOfEra();
        int int15 = localDate2.getYearOfEra();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.minusWeeks((int) (short) -1);
        int int21 = localDate20.getYearOfEra();
        org.joda.time.LocalDate.Property property22 = localDate20.era();
        org.joda.time.LocalDate localDate23 = property22.roundCeilingCopy();
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.lang.String str26 = property22.getAsText(locale25);
        org.joda.time.LocalDate localDate27 = property22.roundFloorCopy();
        boolean boolean28 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate27);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "AD" + "'", str26, "AD");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test03014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03014");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        long long22 = chronology15.getDateTimeMillis((int) (short) 0, 4, 9, 42);
        java.lang.String str23 = chronology15.toString();
        org.joda.time.Chronology chronology24 = chronology15.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = chronology24.getDateTimeMillis(1644572375798L, 718, 0, 35445572, 2089);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 718 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572476611L + "'", long14 == 1644572476611L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-62158665599958L) + "'", long22 == (-62158665599958L));
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test03015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03015");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime2.setDayOfYear((int) (short) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDateTime27.toDateTime(dateTimeZone32);
        boolean boolean37 = dateTime35.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes((int) (short) 10);
        long long40 = dateTime39.getMillis();
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime39.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47, (int) (byte) 10);
        boolean boolean50 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDateTime52.toDateTime(dateTimeZone57);
        boolean boolean62 = dateTime60.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property63 = dateTime60.secondOfDay();
        int int64 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime60);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime2.year();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.add(1644572449387L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572476667L + "'", long40 == 1644572476667L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test03016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03016");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.004Z");
        org.joda.time.DateTime.Property property2 = dateTime1.weekOfWeekyear();
        java.lang.Object obj3 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter6.withPivotYear((java.lang.Integer) 52);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj15 = null;
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(obj15, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDateTime12.toDateTime(dateTimeZone17);
        boolean boolean22 = dateTime20.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes((int) (short) 10);
        long long25 = dateTime24.getMillis();
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.minutes();
        org.joda.time.DurationField durationField28 = chronology26.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter6.withChronology(chronology26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(obj3, chronology26);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDate(241, 11, 12);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.withYear(19);
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.weekOfWeekyear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = dateTime53.minusMillis(9);
        org.joda.time.DateTime dateTime57 = dateTime56.toDateTimeISO();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj62 = null;
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(obj62, dateTimeZone64);
        org.joda.time.DateTime dateTime67 = localDateTime59.toDateTime(dateTimeZone64);
        boolean boolean69 = dateTime67.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime71 = dateTime67.minusMinutes((int) (short) 10);
        long long72 = dateTime71.getMillis();
        java.lang.String str73 = dateTime71.toString();
        org.joda.time.DateTime.Property property74 = dateTime71.hourOfDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.monthOfYear();
        org.joda.time.LocalDateTime localDateTime79 = property77.addWrapFieldToCopy((int) (short) 100);
        int int80 = localDateTime79.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = localDateTime79.getFieldType((int) (short) 1);
        boolean boolean83 = dateTime71.isSupported(dateTimeFieldType82);
        boolean boolean84 = dateTime56.isSupported(dateTimeFieldType82);
        int int85 = localDateTime30.get(dateTimeFieldType82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = dateTime1.withField(dateTimeFieldType82, 58040);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58040 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644572476723L + "'", long25 == 1644572476723L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1644572476723L + "'", long72 == 1644572476723L);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:41:16.723Z" + "'", str73, "2022-02-11T09:41:16.723Z");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 4 + "'", int80 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test03017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03017");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("English");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        boolean boolean5 = languageRange1.equals((java.lang.Object) "2022-02-11T09:39:52.153Z");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "english" + "'", str2, "english");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test03018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03018");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (short) 10);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        int int24 = dateTimeZone20.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone20);
        java.lang.Object obj27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj32 = null;
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(obj32, dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDateTime29.toDateTime(dateTimeZone34);
        boolean boolean39 = dateTime37.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime41 = dateTime37.minusMinutes((int) (short) 10);
        long long42 = dateTime41.getMillis();
        org.joda.time.Chronology chronology43 = dateTime41.getChronology();
        org.joda.time.DateTime dateTime45 = dateTime41.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49, (int) (byte) 10);
        boolean boolean52 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone53 = mutableDateTime48.getZone();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(obj27, dateTimeZone53);
        long long56 = dateTimeZone20.getMillisKeepLocal(dateTimeZone53, (long) 2022);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(dateTimeZone53);
        int int58 = mutableDateTime57.getSecondOfDay();
        org.joda.time.DurationFieldType durationFieldType59 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime57.add(durationFieldType59, 32400);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572476795L + "'", long14 == 1644572476795L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1644572476795L + "'", long42 == 1644572476795L);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 2022L + "'", long56 == 2022L);
        org.junit.Assert.assertNotNull(mutableDateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35476 + "'", int58 == 35476);
    }

    @Test
    public void test03019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03019");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        java.lang.String str5 = localDate2.toString();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.withMinimumValue();
        boolean boolean13 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property14 = localDate2.dayOfWeek();
        java.lang.String str15 = localDate2.toString();
        org.joda.time.Chronology chronology16 = localDate2.getChronology();
        int int17 = localDate2.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11" + "'", str5, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11" + "'", str15, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test03020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03020");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        int int13 = localDateTime12.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime7.property(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime19 = property16.addToCopy(4);
        int int20 = localDateTime19.getDayOfMonth();
        int int21 = localDateTime19.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 158 + "'", int21 == 158);
    }

    @Test
    public void test03021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.seconds();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 49, chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.weekyearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test03022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03022");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime20.withWeekyear(20);
        org.joda.time.ReadableInstant readableInstant23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = dateTime22.compareTo(readableInstant23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572476876L + "'", long14 == 1644572476876L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:16.876Z" + "'", str15, "2022-02-11T09:41:16.876Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03023");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setMillis((long) 2022);
        mutableDateTime7.setMillisOfDay(39);
        org.joda.time.ReadableInstant readableInstant12 = null;
        boolean boolean13 = mutableDateTime7.isAfter(readableInstant12);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime7.add(readablePeriod14);
        mutableDateTime7.addYears(94);
        mutableDateTime7.setMillis(1644572411522L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03024");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22, (int) (byte) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj29 = null;
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(obj29, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDateTime26.toDateTime(dateTimeZone31);
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateTime34);
        java.lang.Object obj36 = null;
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(obj36, dateTimeZone38);
        mutableDateTime21.setZone(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime16.withZone(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        mutableDateTime43.setMillisOfDay(35452028);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572476901L + "'", long14 == 1644572476901L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test03025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03025");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTime9.get(dateTimeField13);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj20 = null;
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj20, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDateTime17.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime25.plusDays((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime25.minusWeeks((int) (short) 1);
        boolean boolean30 = dateTime29.isAfterNow();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone37);
        boolean boolean42 = dateTime40.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime44 = dateTime40.minusMinutes((int) (short) 10);
        long long45 = dateTime44.getMillis();
        org.joda.time.Chronology chronology46 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.era();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime29.withChronology(chronology46);
        org.joda.time.DateTime dateTime50 = dateTime15.toDateTime(chronology46);
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.withPeriodAdded(readablePeriod51, 58);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572476920L + "'", long45 == 1644572476920L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test03026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03026");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate7 = localDate2.withPeriodAdded(readablePeriod5, 38);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property8.setCopy("2022-02-11T09:39:31.964Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:39:31.964Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test03027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03027");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(obj0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMonths((int) (short) -1);
        int int4 = localDateTime3.getSecondOfMinute();
        int int5 = localDateTime3.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withDate(35427191, 35398959, 4044);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35398959 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test03028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03028");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:38:53.244Z");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone9);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime18 = dateTime17.toLocalDateTime();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone25);
        boolean boolean30 = dateTime28.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes((int) (short) 10);
        long long33 = dateTime32.getMillis();
        java.lang.String str34 = dateTime32.toString();
        org.joda.time.DateTime.Property property35 = dateTime32.hourOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = property38.addWrapFieldToCopy((int) (short) 100);
        int int41 = localDateTime40.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = localDateTime40.getFieldType((int) (short) 1);
        boolean boolean44 = dateTime32.isSupported(dateTimeFieldType43);
        int int45 = dateTime17.get(dateTimeFieldType43);
        mutableDateTime13.set(dateTimeFieldType43, (int) (short) 10);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime1.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj54 = null;
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(obj54, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDateTime51.toDateTime(dateTimeZone56);
        boolean boolean61 = dateTime59.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime63 = dateTime59.minusMinutes((int) (short) 10);
        long long64 = dateTime63.getMillis();
        org.joda.time.Chronology chronology65 = dateTime63.getChronology();
        org.joda.time.DateTime dateTime67 = dateTime63.plusHours((int) (short) 10);
        java.lang.Object obj68 = null;
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone70);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(obj68, dateTimeZone70);
        int int74 = dateTimeZone70.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime75 = dateTime63.toDateTime(dateTimeZone70);
        java.util.Locale locale77 = java.util.Locale.TAIWAN;
        java.lang.String str78 = locale77.getDisplayScript();
        java.lang.String str79 = dateTimeZone70.getName(0L, locale77);
        java.lang.String str80 = locale77.getDisplayLanguage();
        java.lang.String str81 = locale77.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime82 = property48.set("2022-02-11T09:40:15.305Z", locale77);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:40:15.305Z\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572477037L + "'", long33 == 1644572477037L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:41:17.037Z" + "'", str34, "2022-02-11T09:41:17.037Z");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1644572477037L + "'", long64 == 1644572477037L);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinese" + "'", str80, "Chinese");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "zh" + "'", str81, "zh");
    }

    @Test
    public void test03029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03029");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra(41);
        int int4 = localDate1.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
    }

    @Test
    public void test03030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03030");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime();
        mutableDateTime13.setWeekyear(55);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = dateTimeFormatter9.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime13, "2022-02-07T09:49:22.906", 35411871);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test03031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03031");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-11T09:41:02.841Z");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test03032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03032");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2017");
        // The following exception was thrown during execution in test generation
        try {
            int int8 = timeZone1.getOffset((-2022), 0, (-21), 737, 409, 2027);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test03033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03033");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology15);
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime19.toMutableDateTimeISO();
        mutableDateTime21.setMillis(0L);
        java.lang.String str24 = mutableDateTime21.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572477239L + "'", long14 == 1644572477239L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-11T09:51:17.239Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-11T09:51:17.239Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-11T09:51:17.239Z");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str24, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test03034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03034");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:49:19.074Z");
        boolean boolean2 = timeZone1.observesDaylightTime();
        int int4 = timeZone1.getOffset(1644572465486L);
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.US;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.lang.String str10 = locale8.getLanguage();
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.year();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj26 = null;
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(obj26, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDateTime23.toDateTime(dateTimeZone28);
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime31);
        java.lang.Object obj33 = null;
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(obj33, dateTimeZone35);
        mutableDateTime18.setZone(dateTimeZone35);
        int int40 = dateTimeZone35.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime41 = localDateTime13.toDateTime(dateTimeZone35);
        java.util.Locale locale43 = java.util.Locale.US;
        java.util.Locale.setDefault(locale43);
        java.lang.String str45 = dateTimeZone35.getShortName(1L, locale43);
        java.lang.String str46 = locale8.getDisplayVariant(locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = timeZone1.getDisplayName(false, (int) (short) -1, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en" + "'", str10, "en");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test03035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03035");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTime9.get(dateTimeField13);
        long long15 = dateTime9.getMillis();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutableDateTime18.add(readableDuration19, (int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj26 = null;
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(obj26, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDateTime23.toDateTime(dateTimeZone28);
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime31.minusMillis(9);
        java.lang.String str35 = dateTime31.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj40 = null;
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(obj40, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDateTime37.toDateTime(dateTimeZone42);
        boolean boolean47 = dateTime45.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime49 = dateTime45.minusMinutes((int) (short) 10);
        long long50 = dateTime49.getMillis();
        org.joda.time.Chronology chronology51 = dateTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.era();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.yearOfCentury();
        org.joda.time.DurationField durationField54 = chronology51.days();
        org.joda.time.DurationField durationField55 = chronology51.hours();
        org.joda.time.DateTime dateTime56 = dateTime31.withChronology(chronology51);
        boolean boolean57 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime59 = dateTime56.plusMinutes(1);
        org.joda.time.DateTime dateTime61 = dateTime56.withWeekyear(2071);
        org.joda.time.DateTime dateTime63 = dateTime61.minusSeconds(35445087);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644573077308L + "'", long15 == 1644573077308L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-11T09:51:17.308Z" + "'", str35, "2022-02-11T09:51:17.308Z");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644572477308L + "'", long50 == 1644572477308L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test03036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03036");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray8 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.Object obj14 = null;
        boolean boolean15 = charSet13.remove(obj14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray24 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = charSet13.contains((java.lang.Object) strList25);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray38 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Collection<java.util.Locale> localeCollection45 = null;
        java.util.List<java.util.Locale> localeList46 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, localeCollection45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray55 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList56);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList56, filteringMode59);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList60);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList61);
        java.util.Locale locale65 = new java.util.Locale("2022-02-11T09:39:21.228Z", "2022-02-11T09:49:43.750Z");
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet66);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode59.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertEquals(locale65.toString(), "2022-02-11t09:39:21.228z_2022-02-11T09:49:43.750Z");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(strList67);
    }

    @Test
    public void test03037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03037");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears(9);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        int int22 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfDay(10);
        boolean boolean25 = dateTime15.equals((java.lang.Object) localDateTime20);
        org.joda.time.DateTime dateTime27 = dateTime15.withYearOfCentury(2);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj38 = null;
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(obj38, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDateTime35.toDateTime(dateTimeZone40);
        boolean boolean45 = dateTime43.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes((int) (short) 10);
        long long48 = dateTime47.getMillis();
        org.joda.time.Chronology chronology49 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime47.plusHours((int) (short) 10);
        java.lang.Object obj52 = null;
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(obj52, dateTimeZone54);
        int int58 = dateTimeZone54.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime59 = dateTime47.toDateTime(dateTimeZone54);
        mutableDateTime30.setZoneRetainFields(dateTimeZone54);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime30.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime30.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63, 625);
        java.lang.String str67 = mutableDateTime62.toString("zh");
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj72 = null;
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone74);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(obj72, dateTimeZone74);
        org.joda.time.DateTime dateTime77 = localDateTime69.toDateTime(dateTimeZone74);
        boolean boolean79 = dateTime77.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime81 = dateTime77.minusMinutes((int) (short) 10);
        long long82 = dateTime81.getMillis();
        org.joda.time.Chronology chronology83 = dateTime81.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.era();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology83.secondOfDay();
        org.joda.time.DurationField durationField87 = chronology83.centuries();
        org.joda.time.DurationField durationField88 = chronology83.halfdays();
        mutableDateTime62.setChronology(chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((java.lang.Object) 2, chronology83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644572477437L + "'", long48 == 1644572477437L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:0012" + "'", str67, "+00:0012");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1644572477437L + "'", long82 == 1644572477437L);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(durationField88);
    }

    @Test
    public void test03038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03038");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        int int7 = dateTimeFormatter6.getDefaultYear();
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(appendable8, (long) (-1161706));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
    }

    @Test
    public void test03039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03039");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, (int) (byte) 10);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime3.add(readableDuration18);
        mutableDateTime3.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime3.setDayOfYear((int) (short) 1);
        mutableDateTime3.addSeconds(4044);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj33 = null;
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(obj33, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDateTime30.toDateTime(dateTimeZone35);
        boolean boolean40 = dateTime38.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes((int) (short) 10);
        long long43 = dateTime42.getMillis();
        org.joda.time.Chronology chronology44 = dateTime42.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime42.plusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekyear((int) (short) 100);
        int int49 = dateTime46.getYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj54 = null;
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(obj54, dateTimeZone56);
        org.joda.time.DateTime dateTime59 = localDateTime51.toDateTime(dateTimeZone56);
        org.joda.time.DateTime.Property property60 = dateTime59.minuteOfHour();
        boolean boolean61 = dateTime46.equals((java.lang.Object) property60);
        java.lang.Object obj62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj67 = null;
        java.util.TimeZone timeZone68 = null;
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone68);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(obj67, dateTimeZone69);
        org.joda.time.DateTime dateTime72 = localDateTime64.toDateTime(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(obj62, dateTimeZone69);
        org.joda.time.DateTime dateTime74 = dateTime46.withZoneRetainFields(dateTimeZone69);
        org.joda.time.DateTime dateTime76 = dateTime74.plusMonths(13);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(chronology77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.monthOfYear();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(chronology80);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.plusSeconds((int) (byte) -1);
        boolean boolean86 = localDateTime78.isEqual((org.joda.time.ReadablePartial) localDateTime83);
        int int87 = localDateTime78.getHourOfDay();
        org.joda.time.Chronology chronology88 = localDateTime78.getChronology();
        org.joda.time.DateTime dateTime89 = dateTime76.withChronology(chronology88);
        org.joda.time.DateTime dateTime90 = mutableDateTime3.toDateTime(chronology88);
        org.joda.time.DateTimeField dateTimeField91 = chronology88.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField92 = chronology88.era();
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(1644572338694L, chronology88);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.withMillisOfDay((int) (short) 0);
        org.joda.time.LocalDateTime.Property property96 = localDateTime95.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644572477542L + "'", long43 == 1644572477542L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 9 + "'", int87 == 9);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(property96);
    }

    @Test
    public void test03040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03040");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = property4.setCopy(0);
        org.joda.time.LocalTime localTime9 = property4.roundHalfFloorCopy();
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("2022-02-11T09:38:57.549Z");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = property4.setCopy("2022-02-11T09:40:02.519Z", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:40:02.519Z\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
    }

    @Test
    public void test03041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03041");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj14 = null;
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj14, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDateTime11.toDateTime(dateTimeZone16);
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) dateTime19);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        mutableDateTime6.setZone(dateTimeZone23);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = localDateTime1.toDateTime(dateTimeZone23);
        int int30 = localDateTime1.getMonthOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDateTime1.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
    }

    @Test
    public void test03042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime2.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = property19.set("2022-02-11T09:49:29.050");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:49:29.050\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test03043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03043");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.lang.String str5 = nameProvider0.getName(locale2, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, (int) (byte) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDateTime18.toDateTime(dateTimeZone23);
        mutableDateTime13.setDate((org.joda.time.ReadableInstant) dateTime26);
        java.lang.Object obj28 = null;
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(obj28, dateTimeZone30);
        mutableDateTime13.setZone(dateTimeZone30);
        int int35 = dateTimeZone30.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime36 = localDateTime8.toDateTime(dateTimeZone30);
        java.util.Locale locale38 = java.util.Locale.US;
        java.util.Locale.setDefault(locale38);
        java.lang.String str40 = dateTimeZone30.getShortName(1L, locale38);
        org.joda.time.tz.NameProvider nameProvider41 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.getDefault(category42);
        java.lang.String str46 = nameProvider41.getName(locale43, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str47 = locale38.getDisplayCountry(locale43);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale43.getDisplayLanguage(locale48);
        java.lang.String str52 = nameProvider0.getName(locale48, "2022-02-11T09:38:59.502Z", "2022-02-11T09:49:11.324Z");
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayScript();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        java.lang.String str58 = nameProvider0.getShortName(locale53, "French", "2022-02-11T09:39:37.874Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider41);
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "United States" + "'", str47, "United States");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Englisch" + "'", str49, "Englisch");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNull(str58);
    }

    @Test
    public void test03044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology5 = localDateTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = chronology5.getZone();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        long long12 = chronology5.add(readablePeriod9, 1644572368163L, 25);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644572368163L + "'", long12 == 1644572368163L);
    }

    @Test
    public void test03045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03045");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 2022);
        org.joda.time.LocalDateTime localDateTime3 = localDate0.toLocalDateTime(localTime2);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localTime2.getValue(35474949);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35474949");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test03046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03046");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        int int6 = dateTimeZone2.getOffset((long) (byte) -1);
        boolean boolean7 = dateTimeZone2.isFixed();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test03047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03047");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withDurationAdded(readableDuration8, 366);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, 292278993);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03048");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withCenturyOfEra(49);
        boolean boolean25 = dateTimeZone15.isLocalDateTimeGap(localDateTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDateTime19.get(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test03049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03049");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-11T09:39:17.096Z");
    }

    @Test
    public void test03050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03050");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644572334267L);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(35433542, 35347060, 650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35347060 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test03051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03051");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category1);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(1644572333722L);
        org.joda.time.Chronology chronology6 = mutableDateTime5.getChronology();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime10.add(readableDuration11, (int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDateTime15.toDateTime(dateTimeZone20);
        boolean boolean25 = dateTime23.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMinutes((int) (short) 10);
        long long28 = dateTime27.getMillis();
        org.joda.time.Chronology chronology29 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime27.plusHours((int) (short) 10);
        java.lang.Object obj32 = null;
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(obj32, dateTimeZone34);
        int int38 = dateTimeZone34.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime39 = dateTime27.toDateTime(dateTimeZone34);
        mutableDateTime10.setZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime10.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfFloor();
        java.util.Locale locale46 = new java.util.Locale("en_US", "2022-02-11T09:48:50.448Z", "en");
        java.lang.String str47 = locale46.getDisplayVariant();
        java.lang.String str48 = property41.getAsText(locale46);
        java.util.Locale locale49 = locale46.stripExtensions();
        java.lang.String str50 = mutableDateTime5.toString("13:00:00.001", locale46);
        java.lang.String str51 = locale46.getCountry();
        java.util.Locale.setDefault(category1, locale46);
        java.util.Locale locale53 = java.util.Locale.getDefault(category1);
        java.lang.String str54 = locale0.getDisplayLanguage(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str55 = locale53.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 2022-02-11T09:48:50.448Z");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1644572478195L + "'", long28 == 1644572478195L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertEquals(locale46.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en" + "'", str47, "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "13:00:00.001" + "'", str50, "13:00:00.001");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:48:50.448Z" + "'", str51, "2022-02-11T09:48:50.448Z");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
    }

    @Test
    public void test03052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03052");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        org.joda.time.Chronology chronology11 = dateTimeFormatter9.getChronology();
        java.io.Writer writer12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj17 = null;
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj17, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime14.toDateTime(dateTimeZone19);
        boolean boolean24 = dateTime22.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes((int) (short) 10);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime26.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime31 = dateTime26.minusWeeks((int) (short) 100);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone33);
        long long37 = dateTimeZone33.convertUTCToLocal(1644572334850L);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime31.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone33);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(writer12, (org.joda.time.ReadableInstant) dateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572478271L + "'", long27 == 1644572478271L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572334850L + "'", long37 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test03053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03053");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear(6);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022-02-11T09:41:00.463Z", dateTimeFormatter5);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test03054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03054");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.US;
        java.util.Locale locale2 = java.util.Locale.US;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.lang.String str4 = locale2.getLanguage();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setVariant("2022-02-11T09:39:21.228Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:39:21.228Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03055");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        int int3 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime1.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMillisOfSecond(35383208);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35383208 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test03056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03056");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (short) 10);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        int int24 = dateTimeZone20.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone20);
        org.joda.time.DateTime.Property property26 = dateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572478437L + "'", long14 == 1644572478437L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test03057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minusMillis(9);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusMillis(11);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(13);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.withYear(48);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.DateTime dateTime29 = dateTime25.minus(readablePeriod28);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test03058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03058");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:49:13.795", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:49:13.795");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03059");
        java.lang.Object obj0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(obj0);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(209);
        org.joda.time.Chronology chronology4 = localTime1.getChronology();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test03060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03060");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology15);
        java.lang.Object obj20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj25 = null;
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(obj25, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDateTime22.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        int int35 = dateTime30.get(dateTimeField34);
        org.joda.time.DateTime dateTime37 = dateTime30.withDayOfYear((int) (byte) 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj42 = null;
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(obj42, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDateTime39.toDateTime(dateTimeZone44);
        boolean boolean49 = dateTime47.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes((int) (short) 10);
        long long52 = dateTime51.getMillis();
        org.joda.time.Chronology chronology53 = dateTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.era();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime37.toMutableDateTime(chronology53);
        org.joda.time.Chronology chronology57 = chronology53.withUTC();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(obj20, chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((java.lang.Object) chronology15, chronology53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572478723L + "'", long14 == 1644572478723L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1644572478723L + "'", long52 == 1644572478723L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(chronology57);
    }

    @Test
    public void test03061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03061");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime8 = localTime4.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime10 = localTime4.plusMinutes(48);
        org.joda.time.LocalTime localTime12 = localTime4.minusMillis(1970);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localTime12.toString("2022-02-11T09:39:18.573Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test03062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03062");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfMonth(12);
        int int6 = localDateTime5.getMonthOfYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withPeriodAdded(readablePeriod7, (int) (byte) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test03063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03063");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        boolean boolean17 = dateTime15.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((int) (short) 10);
        long long20 = dateTime19.getMillis();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (short) 10);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        int int30 = dateTimeZone26.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone26);
        mutableDateTime2.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime2.minuteOfDay();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime2.toCalendar(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.fromCalendarFields(calendar35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfDay(35341772);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readableDuration39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.millisOfDay();
        int int42 = localDateTime40.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withHourOfDay(2);
        org.joda.time.LocalDateTime.Property property45 = localDateTime40.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime40.withMonthOfYear(209);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 209 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572478773L + "'", long20 == 1644572478773L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test03064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03064");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear(236);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter8.withZoneUTC();
        java.lang.Appendable appendable10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = dateTime14.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfYear((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plus(readablePeriod18);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable10, (org.joda.time.ReadablePartial) localDateTime15);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test03065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03065");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalTime localTime2 = localTime0.plus(readablePeriod1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((java.lang.Object) readablePeriod1);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test03066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03066");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(1644572333722L);
        org.joda.time.Chronology chronology5 = mutableDateTime4.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj17 = null;
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj17, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime14.toDateTime(dateTimeZone19);
        boolean boolean24 = dateTime22.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes((int) (short) 10);
        long long27 = dateTime26.getMillis();
        org.joda.time.Chronology chronology28 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (short) 10);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        int int37 = dateTimeZone33.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(dateTimeZone33);
        mutableDateTime9.setZoneRetainFields(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime9.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfFloor();
        java.util.Locale locale45 = new java.util.Locale("en_US", "2022-02-11T09:48:50.448Z", "en");
        java.lang.String str46 = locale45.getDisplayVariant();
        java.lang.String str47 = property40.getAsText(locale45);
        java.util.Locale locale48 = locale45.stripExtensions();
        java.lang.String str49 = mutableDateTime4.toString("13:00:00.001", locale45);
        java.lang.String str50 = locale45.getCountry();
        java.util.Locale.setDefault(category0, locale45);
        java.lang.String str52 = locale45.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572478909L + "'", long27 == 1644572478909L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertEquals(locale45.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "en" + "'", str46, "en");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "13:00:00.001" + "'", str49, "13:00:00.001");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11T09:48:50.448Z" + "'", str50, "2022-02-11T09:48:50.448Z");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "en" + "'", str52, "en");
    }

    @Test
    public void test03067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03067");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        mutableDateTime1.setMillis(1644572329999L);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.DateTime dateTime5 = mutableDateTime4.toDateTimeISO();
        java.lang.Object obj7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj12 = null;
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(obj12, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDateTime9.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj7, dateTimeZone14);
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(1644572339488L, chronology19);
        mutableDateTime4.setChronology(chronology19);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutableDateTime4.add(readablePeriod22, 43);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setWeekOfWeekyear(579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test03068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03068");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj17 = null;
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj17, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime14.toDateTime(dateTimeZone19);
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) dateTime22);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        mutableDateTime9.setZone(dateTimeZone26);
        int int31 = dateTimeZone26.getOffsetFromLocal((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(2024, 725, 2022, 50, 802254, 88, 35466188, dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test03069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03069");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy((int) (short) 100);
        int int5 = property2.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property2.addToCopy((int) ' ');
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusWeeks(2022);
        int int12 = localDateTime11.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35478978 + "'", int12 == 35478978);
    }

    @Test
    public void test03070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03070");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        int int15 = dateTime13.getSecondOfMinute();
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime.Property property17 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime19 = dateTime13.plus((long) 6);
        org.joda.time.DateTime dateTime21 = dateTime13.minusMinutes(35354);
        org.joda.time.DateTime dateTime23 = dateTime13.minusYears(35364918);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572479076L + "'", long14 == 1644572479076L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 19 + "'", int15 == 19);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test03071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03071");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        java.lang.Appendable appendable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable13, 1644572407018L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test03072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime8 = localTime4.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime10 = localTime4.plusMinutes(48);
        org.joda.time.LocalTime localTime12 = localTime4.plusHours(55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localTime12.getFieldType(1920);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1920");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test03073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03073");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes((int) (short) 10);
        long long21 = dateTime20.getMillis();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology22.days();
        org.joda.time.DurationField durationField26 = chronology22.hours();
        org.joda.time.DurationField durationField27 = chronology22.halfdays();
        org.joda.time.DurationField durationField28 = chronology22.years();
        org.joda.time.DurationField durationField29 = chronology22.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(366, 2030, 35454863, 0, 35955742, 36, 936, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35955742 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572479353L + "'", long21 == 1644572479353L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
    }

    @Test
    public void test03074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03074");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(6);
        // The following exception was thrown during execution in test generation
        try {
            long long13 = dateTimeFormatter11.parseMillis("2022-02-11T09:40:06.199Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
    }

    @Test
    public void test03075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03075");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDate5.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDate5.isSupported(durationFieldType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate5.withDayOfMonth(51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 51 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.MutableDateTime mutableDateTime20 = property17.add(1644572340714L);
        org.joda.time.DateTimeField dateTimeField21 = property17.getField();
        org.joda.time.MutableDateTime mutableDateTime22 = property17.roundFloor();
        int int23 = property17.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 999 + "'", int23 == 999);
    }

    @Test
    public void test03077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03077");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime2.setDayOfYear((int) (short) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDateTime27.toDateTime(dateTimeZone32);
        boolean boolean37 = dateTime35.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes((int) (short) 10);
        long long40 = dateTime39.getMillis();
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime39.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47, (int) (byte) 10);
        boolean boolean50 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDateTime52.toDateTime(dateTimeZone57);
        boolean boolean62 = dateTime60.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property63 = dateTime60.secondOfDay();
        int int64 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime60);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime60);
        mutableDateTime2.addSeconds(35395);
        mutableDateTime2.setMinuteOfHour(0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572479544L + "'", long40 == 1644572479544L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test03078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03078");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears((int) 'a');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) 18);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj29 = null;
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(obj29, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDateTime26.toDateTime(dateTimeZone31);
        boolean boolean36 = dateTime34.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes((int) (short) 10);
        long long39 = dateTime38.getMillis();
        java.lang.String str40 = dateTime38.toString();
        org.joda.time.DateTime.Property property41 = dateTime38.hourOfDay();
        boolean boolean42 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime45.add(readableDuration46, (int) (byte) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj53 = null;
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(obj53, dateTimeZone55);
        org.joda.time.DateTime dateTime58 = localDateTime50.toDateTime(dateTimeZone55);
        mutableDateTime45.setDate((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime58.minusMillis(9);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        org.joda.time.DateTime.Property property63 = dateTime62.minuteOfHour();
        org.joda.time.DateTime dateTime64 = property63.roundCeilingCopy();
        boolean boolean65 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572479585L + "'", long14 == 1644572479585L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:19.585Z" + "'", str15, "2022-02-11T09:41:19.585Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1644572479585L + "'", long39 == 1644572479585L);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T09:41:19.585Z" + "'", str40, "2022-02-11T09:41:19.585Z");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test03079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime.Property property13 = localTime2.millisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime18 = localTime16.withMillisOfSecond((-17175888));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17175888 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test03080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03080");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minusMillis(9);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.minusMillis(11);
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(13);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTime();
        int int26 = dateTime25.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 42 + "'", int26 == 42);
    }

    @Test
    public void test03081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj9, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDateTime6.toDateTime(dateTimeZone11);
        boolean boolean16 = dateTime14.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes((int) (short) 10);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfSecond(10);
        boolean boolean24 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) dateTime23);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572479835L + "'", long19 == 1644572479835L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test03082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(5);
        int int11 = localDateTime10.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMillis(35371020);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = localDateTime13.getValue((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 18 + "'", int11 == 18);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test03083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03083");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:39:08.403Z");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clear();
        java.util.Locale locale6 = builder5.build();
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = timeZone1.getDisplayName(locale6);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Greenwich Mean Time" + "'", str8, "Greenwich Mean Time");
    }

    @Test
    public void test03084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) (short) 10);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime19 = dateTime17.withMillisOfSecond(10);
        org.joda.time.DateTime dateTime21 = dateTime17.withCenturyOfEra(59);
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(10);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMonths(580);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.monthOfYear();
        org.joda.time.LocalDateTime localDateTime30 = property28.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology31 = localDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.DateTime dateTime34 = dateTime25.withZone(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(1644572344430L, dateTimeZone33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39, (int) (byte) 10);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj46 = null;
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(obj46, dateTimeZone48);
        org.joda.time.DateTime dateTime51 = localDateTime43.toDateTime(dateTimeZone48);
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime54 = dateTime51.minusMillis(9);
        java.util.GregorianCalendar gregorianCalendar55 = dateTime51.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar55);
        boolean boolean57 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572479975L + "'", long15 == 1644572479975L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test03085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03085");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDate localDate6 = localDate2.minus(readablePeriod5);
        org.joda.time.LocalDate localDate8 = localDate6.minusMonths(1);
        org.joda.time.LocalDate localDate10 = localDate8.plusYears(35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = localDate8.getField(34);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 34");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test03086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03086");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(58);
        java.lang.String str4 = dateTimeZone2.getName(1644572340589L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(1644572347782L, dateTimeZone2);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+58:00" + "'", str4, "+58:00");
    }

    @Test
    public void test03087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03087");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0, 2084, 999, 582, 35389776, 1439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 582 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03088");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(35436485, 0, (-2), 48, 0, 92, 2006);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03089");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(20);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test03090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03090");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setRegion("2022-02-11T23:40:42.644Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T23:40:42.644Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03091");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.LocalDate localDate9 = property7.roundHalfFloorCopy();
        java.lang.String str10 = property7.getAsText();
        java.lang.String str11 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2" + "'", str8, "2");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2" + "'", str10, "2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2" + "'", str11, "2");
    }

    @Test
    public void test03092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03092");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1644572338801L);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime3.getRoundingField();
        mutableDateTime3.addMonths(35350603);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime3.copy();
        mutableDateTime8.setDayOfYear(28);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.hourOfDay();
        org.joda.time.DateTime dateTime12 = localTime1.toDateTime((org.joda.time.ReadableInstant) mutableDateTime8);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test03093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03093");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        int[] intArray6 = localDateTime3.getValues();
        int int7 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(22);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDateTime13.toDateTime(dateTimeZone18);
        boolean boolean23 = dateTime21.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes((int) (short) 10);
        long long26 = dateTime25.getMillis();
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime25.plusHours((int) (short) 10);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        int int36 = dateTimeZone32.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = dateTime25.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone32);
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = dateTimeZone32.getShortName(1644572330264L, locale40);
        java.lang.String str42 = dateTimeZone32.getID();
        org.joda.time.DateTime dateTime43 = localDateTime11.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime11.plusDays(292278993);
        int int46 = localDateTime45.getMinuteOfHour();
        org.joda.time.DurationFieldType durationFieldType47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withFieldAdded(durationFieldType47, 810);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2022, 2, 7, 71480470]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572480470L + "'", long26 == 1644572480470L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 208800000 + "'", int36 == 208800000);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+58:00" + "'", str41, "+58:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+58:00" + "'", str42, "+58:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
    }

    @Test
    public void test03094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03094");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime8 = localTime4.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) (short) -1);
        int int11 = localTime10.getMinuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime14 = property12.addWrapFieldToCopy(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone20);
        long long24 = dateTimeZone20.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter18.withZone(dateTimeZone20);
        boolean boolean26 = dateTimeFormatter25.isOffsetParsed();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter25.withLocale(locale27);
        java.util.Locale locale29 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str30 = locale29.getISO3Language();
        java.lang.String str31 = locale27.getDisplayName(locale29);
        java.util.Locale locale32 = locale27.stripExtensions();
        java.lang.String str33 = localTime14.toString("\u6708", locale32);
        org.joda.time.LocalTime localTime35 = localTime14.withMillisOfDay(35402493);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = localTime14.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1644781134850L + "'", long24 == 1644781134850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fra" + "'", str30, "fra");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "italien (Italie)" + "'", str31, "italien (Italie)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u6708" + "'", str33, "\u6708");
        org.junit.Assert.assertNotNull(localTime35);
    }

    @Test
    public void test03095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03095");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.roundFloor();
        mutableDateTime18.setYear(35371020);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setMonthOfYear(33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test03096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03096");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalDate localDate10 = property7.setCopy((int) 'a');
        org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra((int) (byte) 1);
        int int13 = localDate12.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = localDate12.withDayOfMonth(324);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 324 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test03097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03097");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate.Property property9 = localDate8.era();
        org.joda.time.LocalDate localDate11 = localDate8.withDayOfWeek(3);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate8.plus(readablePeriod12);
        org.joda.time.LocalDate localDate15 = localDate13.plusWeeks(108);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDate17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test03098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03098");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.Chronology chronology4 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = chronology4.add(0L, 1644572417300L, 35389776);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572417300 * 35389776");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test03099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(10);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = chronology19.getZone();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology19);
        boolean boolean23 = dateTime21.isBefore(1644572953413L);
        org.joda.time.DateTime dateTime25 = dateTime21.plus(1644572340439L);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(readableDuration26, 18);
        boolean boolean29 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime31 = dateTime25.plusMonths(46800001);
        java.lang.Object obj32 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = null;
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter33, dateTimeParser34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter35.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter35.withPivotYear((java.lang.Integer) 52);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(obj44, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDateTime41.toDateTime(dateTimeZone46);
        boolean boolean51 = dateTime49.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMinutes((int) (short) 10);
        long long54 = dateTime53.getMillis();
        org.joda.time.Chronology chronology55 = dateTime53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.minutes();
        org.joda.time.DurationField durationField57 = chronology55.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter35.withChronology(chronology55);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj32, chronology55);
        org.joda.time.DateTimeField dateTimeField60 = chronology55.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime25, chronology55);
        mutableDateTime61.addHours(35378621);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572480815L + "'", long14 == 1644572480815L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644572480815L + "'", long54 == 1644572480815L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test03100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03100");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime7 = property6.getLocalDateTime();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy((int) (short) 100);
        int int13 = localDateTime12.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime12.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime7.property(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = property16.withMaximumValue();
        int int19 = localDateTime18.getSecondOfMinute();
        int int20 = localDateTime18.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test03101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03101");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime2.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.set((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        int int23 = mutableDateTime21.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test03102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03102");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology4.millis();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.centuryOfEra();
        org.joda.time.DurationField durationField10 = chronology4.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology4.getDateTimeMillis(1644572437542L, 34826542, 359, 35439662, 34864368);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34826542 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test03103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03103");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear((int) (byte) -1);
        boolean boolean15 = localDate6.equals((java.lang.Object) localDate14);
        org.joda.time.LocalDate localDate17 = localDate14.withEra(1);
        int int18 = localDate17.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test03104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03104");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(obj0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMonths((int) (short) -1);
        int int4 = localDateTime1.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusSeconds((int) (short) 0);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readableDuration7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withDate((int) (byte) 0, 13, 27609967);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 13 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 42 + "'", int4 == 42);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test03105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03105");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj0, dateTimeZone7);
        int int12 = localDateTime11.getHourOfDay();
        int int13 = localDateTime11.size();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfMonth(12);
        int int20 = localDateTime19.getMonthOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone22);
        long long26 = dateTimeZone22.convertUTCToLocal(1644572334850L);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.monthOfYear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.centuryOfEra();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfFloor();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj45 = null;
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(obj45, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDateTime42.toDateTime(dateTimeZone47);
        boolean boolean52 = dateTime50.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property53 = dateTime50.secondOfDay();
        org.joda.time.DateTime dateTime54 = property53.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime54.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime57 = dateTime54.plusMillis((-1));
        org.joda.time.DateTime dateTime58 = dateTime57.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj63 = null;
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(obj63, dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDateTime60.toDateTime(dateTimeZone65);
        boolean boolean70 = dateTime68.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime72 = dateTime68.minusMinutes((int) (short) 10);
        long long73 = dateTime72.getMillis();
        java.lang.String str74 = dateTime72.toString();
        org.joda.time.DateTime.Property property75 = dateTime72.hourOfDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.monthOfYear();
        org.joda.time.LocalDateTime localDateTime80 = property78.addWrapFieldToCopy((int) (short) 100);
        int int81 = localDateTime80.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = localDateTime80.getFieldType((int) (short) 1);
        boolean boolean84 = dateTime72.isSupported(dateTimeFieldType83);
        org.joda.time.DateTime.Property property85 = dateTime57.property(dateTimeFieldType83);
        int int86 = mutableDateTime40.get(dateTimeFieldType83);
        boolean boolean87 = localDateTime33.isSupported(dateTimeFieldType83);
        boolean boolean88 = dateTime27.isSupported(dateTimeFieldType83);
        int int89 = localDateTime19.indexOf(dateTimeFieldType83);
        org.joda.time.LocalDateTime.Property property90 = localDateTime11.property(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572334850L + "'", long26 == 1644572334850L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572481007L + "'", long73 == 1644572481007L);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:41:21.007Z" + "'", str74, "2022-02-11T09:41:21.007Z");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test03106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.minusWeeks((int) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = dateTime18.toString("2022-02-11T09:40:37.354Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572481071L + "'", long14 == 1644572481071L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfMonth(12);
        int int7 = localDateTime6.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.weekyear();
        org.joda.time.Chronology chronology9 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(1644572349695L, chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property11.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = property11.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.DurationFieldType durationFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime15.withFieldAdded(durationFieldType16, 35376027);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test03108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03108");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology18.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((int) (short) 0, 58, (-35331906), chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572481227L + "'", long17 == 1644572481227L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test03109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03109");
        java.lang.Throwable throwable3 = null;
        java.io.IOException iOException4 = new java.io.IOException("2022-02-11T09:38:49.281Z", throwable3);
        java.io.IOException iOException5 = new java.io.IOException("Chinese (Taiwan)", (java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("2022-02-11T09:38:57.549Z", (java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.lang.Throwable throwable10 = null;
        java.io.IOException iOException11 = new java.io.IOException("2022-02-11T09:38:49.281Z", throwable10);
        java.io.IOException iOException12 = new java.io.IOException("Chinese (Taiwan)", (java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException11);
        iOException7.addSuppressed((java.lang.Throwable) iOException11);
        java.lang.String str15 = iOException11.toString();
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.io.IOException: 2022-02-11T09:38:49.281Z" + "'", str15, "java.io.IOException: 2022-02-11T09:38:49.281Z");
    }

    @Test
    public void test03110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03110");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.minusWeeks((int) (byte) -1);
        org.joda.time.LocalDate localDate8 = localDate2.withYear(932);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test03111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03111");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.Chronology chronology4 = localTime1.getChronology();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = localTime1.isSupported(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03112");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone5);
        long long9 = dateTimeZone5.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZone(dateTimeZone5);
        boolean boolean11 = dateTimeFormatter10.isOffsetParsed();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withLocale(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter10.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withDefaultYear(70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withPivotYear((int) (short) -1);
        boolean boolean19 = dateTimeFormatter14.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter14.withPivotYear(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.parse("2022-02-11T09:49:42.020Z", dateTimeFormatter21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572334850L + "'", long9 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test03113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03113");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds(6);
        int int5 = localDateTime1.getYearOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        boolean boolean17 = dateTime15.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((int) (short) 10);
        long long20 = dateTime19.getMillis();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime19.plusSeconds((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime19.minus(readableDuration24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMillis(59);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, (int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj38 = null;
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(obj38, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDateTime35.toDateTime(dateTimeZone40);
        boolean boolean45 = dateTime43.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime47 = dateTime43.minusMinutes((int) (short) 10);
        long long48 = dateTime47.getMillis();
        org.joda.time.Chronology chronology49 = dateTime47.getChronology();
        org.joda.time.DateTime dateTime51 = dateTime47.plusHours((int) (short) 10);
        java.lang.Object obj52 = null;
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(obj52, dateTimeZone54);
        int int58 = dateTimeZone54.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime59 = dateTime47.toDateTime(dateTimeZone54);
        mutableDateTime30.setZoneRetainFields(dateTimeZone54);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime30.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.roundHalfFloor();
        mutableDateTime62.setMinuteOfHour(0);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.monthOfYear();
        org.joda.time.LocalDateTime localDateTime72 = property71.getLocalDateTime();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.monthOfYear();
        org.joda.time.LocalDateTime localDateTime77 = property75.addWrapFieldToCopy((int) (short) 100);
        int int78 = localDateTime77.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = localDateTime77.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime.Property property81 = localDateTime72.property(dateTimeFieldType80);
        boolean boolean82 = mutableDateTime62.isSupported(dateTimeFieldType80);
        int int83 = dateTime27.get(dateTimeFieldType80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime85 = localDateTime1.withField(dateTimeFieldType80, 35427191);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35427191 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572481592L + "'", long20 == 1644572481592L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1644572481592L + "'", long48 == 1644572481592L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 4 + "'", int78 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test03114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03114");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 35351730);
        mutableDateTime1.addMinutes((int) '#');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test03115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03115");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(728, 0, 241, 579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 728 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03116");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology15);
        mutableDateTime19.addYears(9);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setDateTime(72000000, (-1161706), 35403380, 52, 35459167, 982, 35473246);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572481728L + "'", long14 == 1644572481728L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test03117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears((int) 'a');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readableDuration21);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.joda.time.DateTime dateTime25 = dateTime22.withCenturyOfEra(48);
        org.joda.time.Chronology chronology26 = dateTime22.getChronology();
        org.joda.time.DateTime.Property property27 = dateTime22.centuryOfEra();
        org.joda.time.DateTime dateTime29 = dateTime22.plusSeconds(608);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.parse("1970-01-01T00:00:00.004Z");
        boolean boolean32 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime31.withDate(36681878, 650, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 650 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572481757L + "'", long14 == 1644572481757L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:21.757Z" + "'", str15, "2022-02-11T09:41:21.757Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test03118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03118");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1644572343297L);
    }

    @Test
    public void test03119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime.Property property13 = localTime2.millisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.roundFloorCopy();
        org.joda.time.LocalTime.Property property17 = localTime16.secondOfMinute();
        org.joda.time.DurationFieldType durationFieldType18 = null;
        boolean boolean19 = localTime16.isSupported(durationFieldType18);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test03120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03120");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) (short) 10);
        long long15 = dateTime14.getMillis();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology16);
        java.lang.Object obj21 = mutableDateTime20.clone();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime20.toMutableDateTimeISO();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology27 = localDateTime24.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.seconds();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekyearOfCentury();
        mutableDateTime22.setChronology(chronology27);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime22.era();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime22.yearOfEra();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime22.hourOfDay();
        java.util.Locale locale36 = new java.util.Locale("en", "2022-02-11T09:38:53.742Z");
        int int37 = property33.getMaximumShortTextLength(locale36);
        java.lang.String str40 = nameProvider0.getShortName(locale36, "2022-02-11T09:40:08.992Z", "2074-03-24T19:28:40.107Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572481865L + "'", long15 == 1644572481865L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-11T09:51:21.865Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-11T09:51:21.865Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-11T09:51:21.865Z");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals(locale36.toString(), "en_2022-02-11T09:38:53.742Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test03121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03121");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isPrinter();
        boolean boolean7 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj12 = null;
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(obj12, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays((int) (short) 10);
        boolean boolean21 = dateTime19.isBefore((long) (short) 100);
        java.lang.Object obj22 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(obj22, dateTimeZone24);
        int int28 = dateTimeZone24.getOffset((long) (byte) -1);
        int int30 = dateTimeZone24.getOffset(1644572334551L);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        boolean boolean32 = dateTimeZone24.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter4.withZone(dateTimeZone24);
        java.lang.StringBuffer stringBuffer34 = null;
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.minusWeeks((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter33.printTo(stringBuffer34, (org.joda.time.ReadablePartial) localDate37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test03122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03122");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy((int) (short) 100);
        int int5 = property2.getMaximumValueOverall();
        long long6 = property2.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfYear(35436485);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35436485 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 899481955L + "'", long6 == 899481955L);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test03123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03123");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate.Property property6 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = localDate4.withYearOfCentury(70);
        org.joda.time.LocalDate localDate10 = localDate4.minusYears((int) '4');
        org.joda.time.Interval interval11 = localDate4.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test03124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03124");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        java.lang.String str3 = property2.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "19" + "'", str3, "19");
    }

    @Test
    public void test03125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03125");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj17 = null;
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj17, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime14.toDateTime(dateTimeZone19);
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime25 = dateTime22.minusMillis(9);
        java.lang.String str26 = dateTime22.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDateTime28.toDateTime(dateTimeZone33);
        boolean boolean38 = dateTime36.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes((int) (short) 10);
        long long41 = dateTime40.getMillis();
        org.joda.time.Chronology chronology42 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.yearOfCentury();
        org.joda.time.DurationField durationField45 = chronology42.days();
        org.joda.time.DurationField durationField46 = chronology42.hours();
        org.joda.time.DateTime dateTime47 = dateTime22.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.yearOfCentury();
        java.lang.Object obj50 = null;
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(obj50, dateTimeZone52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.monthOfYear();
        boolean boolean58 = dateTimeZone52.isLocalDateTimeGap(localDateTime56);
        org.joda.time.Chronology chronology59 = chronology42.withZone(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(18, 72000000, 799, 35383208, 18, 80, (int) 'a', chronology59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35383208 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:51:22.082Z" + "'", str26, "2022-02-11T09:51:22.082Z");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644572482082L + "'", long41 == 1644572482082L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(localDateTime60);
    }

    @Test
    public void test03126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03126");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setScript("2022-02-11T09:39:23.203Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:39:23.203Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test03127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03127");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(37, 1980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03128");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj6 = null;
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(obj6, dateTimeZone8);
        org.joda.time.DateTime dateTime11 = localDateTime3.toDateTime(dateTimeZone8);
        boolean boolean13 = dateTime11.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes((int) (short) 10);
        long long16 = dateTime15.getMillis();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfCentury();
        org.joda.time.DurationField durationField20 = chronology17.days();
        org.joda.time.DurationField durationField21 = chronology17.hours();
        org.joda.time.DurationField durationField22 = chronology17.halfdays();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(3764487297492L, chronology17);
        org.joda.time.DateTimeField dateTimeField24 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = chronology17.weekyears();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(1644572402519L, chronology17);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572482196L + "'", long16 == 1644572482196L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test03129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03129");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("2022-01-01T02:42:24.010Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-01-01T02:42:24.010Z\" is malformed at \"22-01-01T02:42:24.010Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03130");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone5);
        long long9 = dateTimeZone5.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZone(dateTimeZone5);
        boolean boolean11 = dateTimeFormatter10.isOffsetParsed();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter10.withLocale(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("Property[hourOfDay]", dateTimeFormatter13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572334850L + "'", long9 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test03131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03131");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.DateTime.Property property5 = dateTime3.secondOfMinute();
        org.joda.time.DateTime dateTime6 = dateTime3.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test03132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03132");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray8 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean15 = charSet13.equals((java.lang.Object) localTime14);
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.US;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale16, locale20, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        boolean boolean27 = charSet13.containsAll((java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25, filteringMode28);
        java.util.stream.Stream<java.util.Locale> localeStream30 = localeList25.stream();
        java.util.stream.Stream<java.util.Locale> localeStream31 = localeList25.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode28.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(localeStream30);
        org.junit.Assert.assertNotNull(localeStream31);
    }

    @Test
    public void test03133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03133");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTime9.get(dateTimeField13);
        org.joda.time.DateTime dateTime16 = dateTime9.withDayOfYear((int) (byte) 100);
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(1644572353831L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03134");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears((int) 'a');
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds(1);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        java.lang.String str24 = property23.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572482544L + "'", long14 == 1644572482544L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:22.544Z" + "'", str15, "2022-02-11T09:41:22.544Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfEra" + "'", str24, "yearOfEra");
    }

    @Test
    public void test03135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03135");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds((int) (byte) -1);
        boolean boolean9 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusYears(9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withSecondOfMinute(55);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusDays(370);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withEra((-27409541));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27409541 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test03136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.seconds();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 49, chronology5);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay(1644572350155L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test03137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03137");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(0, (int) 'u', 4, 35441383, 41, 47, 35406991);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35441383 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03138");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.weeks();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.Chronology chronology13 = chronology5.withZone(dateTimeZone10);
        java.lang.String str14 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03139");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        boolean boolean8 = property7.isLeap();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy(625);
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 2022);
        boolean boolean19 = dateTimeFormatter16.isPrinter();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDateTime21.toDateTime(dateTimeZone26);
        boolean boolean31 = dateTime29.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime33 = dateTime29.minusMinutes((int) (short) 10);
        long long34 = dateTime33.getMillis();
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField38 = chronology35.weekyear();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology35);
        mutableDateTime39.addYears(9);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.monthOfYear();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.year();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(obj56, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDateTime53.toDateTime(dateTimeZone58);
        mutableDateTime48.setDate((org.joda.time.ReadableInstant) dateTime61);
        java.lang.Object obj63 = null;
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(obj63, dateTimeZone65);
        mutableDateTime48.setZone(dateTimeZone65);
        int int70 = dateTimeZone65.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime71 = localDateTime43.toDateTime(dateTimeZone65);
        java.util.Locale locale73 = java.util.Locale.US;
        java.util.Locale.setDefault(locale73);
        java.lang.String str75 = dateTimeZone65.getShortName(1L, locale73);
        mutableDateTime39.setZoneRetainFields(dateTimeZone65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter16.withZone(dateTimeZone65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = localDate10.toString(dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644572482699L + "'", long34 == 1644572482699L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
    }

    @Test
    public void test03140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03140");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology6 = dateTimeFormatter5.getChronolgy();
        boolean boolean7 = dateTimeFormatter5.isPrinter();
        boolean boolean8 = dateTimeFormatter5.isOffsetParsed();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj13 = null;
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(obj13, dateTimeZone15);
        org.joda.time.DateTime dateTime18 = localDateTime10.toDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = dateTime18.plusDays((int) (short) 10);
        boolean boolean22 = dateTime20.isBefore((long) (short) 100);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        int int29 = dateTimeZone25.getOffset((long) (byte) -1);
        int int31 = dateTimeZone25.getOffset(1644572334551L);
        org.joda.time.DateTime dateTime32 = dateTime20.toDateTime(dateTimeZone25);
        boolean boolean33 = dateTimeZone25.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter5.withZone(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.parse("\u30d5\u30e9\u30f3\u30b9\u8a9e", dateTimeFormatter34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test03141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03141");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear(982);
        java.io.Writer writer9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate16 = localDate12.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate24 = localDate20.withWeekyear((int) (byte) -1);
        boolean boolean25 = localDate16.equals((java.lang.Object) localDate24);
        int int26 = localDate16.getYear();
        org.joda.time.LocalDate localDate28 = localDate16.minusYears(70);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(writer9, (org.joda.time.ReadablePartial) localDate16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localDate28);
    }

    @Test
    public void test03142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03142");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter4.getPrinter();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.minusHours((int) '#');
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(0);
        java.util.Locale locale16 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str17 = locale16.getISO3Language();
        boolean boolean18 = localTime15.equals((java.lang.Object) locale16);
        java.util.Locale.setDefault(locale16);
        java.lang.String str20 = locale16.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withLocale(locale16);
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter4.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNull(dateTimePrinter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CA" + "'", str20, "CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNull(dateTimeParser22);
    }

    @Test
    public void test03143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03143");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:49:19.074Z");
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:49:19.074z");
    }

    @Test
    public void test03144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03144");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:38:59.346Z");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getUnicodeLocaleType("2022-02-21T09:51:14.583Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-21T09:51:14.583Z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:38:59.346z");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test03145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        boolean boolean17 = dateTime15.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((int) (short) 10);
        long long20 = dateTime19.getMillis();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (short) 10);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        int int30 = dateTimeZone26.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone26);
        mutableDateTime2.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime2.minuteOfDay();
        java.util.Locale locale34 = null;
        java.util.Calendar calendar35 = mutableDateTime2.toCalendar(locale34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime2.minuteOfHour();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40);
        mutableDateTime39.setMillis(1644572333244L);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.secondOfMinute();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        mutableDateTime48.add(readableDuration49, (int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(obj56, dateTimeZone58);
        org.joda.time.DateTime dateTime61 = localDateTime53.toDateTime(dateTimeZone58);
        mutableDateTime48.setDate((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime48.add(readableDuration63);
        mutableDateTime48.setMillis((long) 4);
        java.lang.String str67 = mutableDateTime48.toString();
        mutableDateTime48.addSeconds(13);
        mutableDateTime48.setTime(1644572347332L);
        int int72 = mutableDateTime39.compareTo((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime75.add(readableDuration76, (int) (byte) 10);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(chronology79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj83 = null;
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(obj83, dateTimeZone85);
        org.joda.time.DateTime dateTime88 = localDateTime80.toDateTime(dateTimeZone85);
        mutableDateTime75.setDate((org.joda.time.ReadableInstant) dateTime88);
        java.lang.Object obj90 = null;
        java.util.TimeZone timeZone91 = null;
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forTimeZone(timeZone91);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone92);
        org.joda.time.LocalDateTime localDateTime94 = new org.joda.time.LocalDateTime(obj90, dateTimeZone92);
        mutableDateTime75.setZone(dateTimeZone92);
        int int97 = dateTimeZone92.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime48.setZone(dateTimeZone92);
        org.joda.time.MutableDateTime.Property property99 = mutableDateTime48.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572483019L + "'", long20 == 1644572483019L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.004Z" + "'", str67, "1970-01-01T00:00:00.004Z");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone92);
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test03146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03146");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute(9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDateTime18.toDateTime(dateTimeZone23);
        boolean boolean28 = dateTime26.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMinutes((int) (short) 10);
        long long31 = dateTime30.getMillis();
        org.joda.time.Chronology chronology32 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime30.plusSeconds((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime30.minus(readableDuration35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis(59);
        org.joda.time.DateTime dateTime40 = dateTime36.withEra(0);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTime();
        org.joda.time.DateTime.Property property42 = dateTime41.secondOfDay();
        boolean boolean43 = dateTime13.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        boolean boolean55 = dateTime53.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime57 = dateTime53.minusMinutes((int) (short) 10);
        long long58 = dateTime57.getMillis();
        org.joda.time.Chronology chronology59 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.era();
        org.joda.time.DateTimeField dateTimeField61 = chronology59.yearOfCentury();
        org.joda.time.DurationField durationField62 = chronology59.days();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime41.toMutableDateTime(chronology59);
        org.joda.time.DurationField durationField64 = chronology59.weekyears();
        org.joda.time.DurationField durationField65 = chronology59.hours();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572483168L + "'", long14 == 1644572483168L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572483168L + "'", long31 == 1644572483168L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644572483168L + "'", long58 == 1644572483168L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test03147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03147");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getVariant();
        java.lang.String str4 = locale0.getISO3Country();
        java.lang.Object obj5 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TWN" + "'", str2, "TWN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TWN" + "'", str4, "TWN");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "zh_TW");
    }

    @Test
    public void test03148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03148");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, (int) (byte) 10);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj29 = null;
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(obj29, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDateTime26.toDateTime(dateTimeZone31);
        boolean boolean36 = dateTime34.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property37 = dateTime34.secondOfDay();
        int int38 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime40 = dateTime34.withMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withPeriodAdded(readablePeriod41, 737);
        org.joda.time.DateMidnight dateMidnight44 = dateTime43.toDateMidnight();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572483215L + "'", long14 == 1644572483215L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
    }

    @Test
    public void test03149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03149");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime13.minus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis(59);
        org.joda.time.DateTime dateTime23 = dateTime19.withEra(0);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundCeilingCopy();
        org.joda.time.DateTime dateTime27 = property25.roundFloorCopy();
        int int28 = property25.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField32 = mutableDateTime30.getRoundingField();
        mutableDateTime30.addMonths(35350603);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime30.copy();
        long long36 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime35);
        mutableDateTime35.setMillisOfDay(43);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.setDayOfYear(35417460);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35417460 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572483242L + "'", long14 == 1644572483242L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-93089078547516L) + "'", long36 == (-93089078547516L));
    }

    @Test
    public void test03150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime9 = localTime6.minusSeconds(300);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds(35426717);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test03151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03151");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        org.joda.time.LocalDate localDate5 = localDate2.minusYears(0);
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtCurrentTime();
        int int7 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate9 = localDate2.minusDays(209);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test03152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03152");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(35392668);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = localDateTime7.getField((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -292275054");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test03153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03153");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime7 = dateTime5.plusYears(856);
        org.joda.time.DateTime dateTime9 = dateTime5.minusDays(35420);
        long long10 = dateTime5.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644570023332L + "'", long10 == 1644570023332L);
    }

    @Test
    public void test03154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03154");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj0, dateTimeZone7);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = property12.addWrapFieldToCopy(35331916);
        org.joda.time.LocalDateTime localDateTime15 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime17 = property12.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = property12.setCopy("French");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"French\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test03155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03155");
        java.io.IOException iOException1 = new java.io.IOException("2022-02-11T09:41:07.079Z");
    }

    @Test
    public void test03156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) (short) 10);
        long long15 = dateTime14.getMillis();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 'a', chronology16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.minuteOfHour();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone25);
        boolean boolean30 = dateTime28.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes((int) (short) 10);
        long long33 = dateTime32.getMillis();
        org.joda.time.Chronology chronology34 = dateTime32.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40, (int) (byte) 10);
        boolean boolean43 = dateTime32.isBefore((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime39.getZone();
        mutableDateTime39.addMonths((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime39.add(readablePeriod47);
        mutableDateTime17.setMillis((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Chronology chronology50 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572483504L + "'", long15 == 1644572483504L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572483504L + "'", long33 == 1644572483504L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test03157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime8 = localTime4.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime10 = localTime4.plusMinutes(48);
        org.joda.time.LocalTime localTime12 = localTime4.plusHours(55);
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime15 = property13.addWrapFieldToCopy((int) 'u');
        org.joda.time.LocalTime localTime16 = property13.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localTime16.toString("2022-02-11T09:40:36.942Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test03158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03158");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj0, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withDayOfYear((int) (short) 10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.centuryOfEra();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.minusWeeks(241);
        int int18 = localDateTime11.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
    }

    @Test
    public void test03159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03159");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj9, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDateTime6.toDateTime(dateTimeZone11);
        boolean boolean16 = dateTime14.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property17 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMillis((-1));
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDateTime24.toDateTime(dateTimeZone29);
        boolean boolean34 = dateTime32.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes((int) (short) 10);
        long long37 = dateTime36.getMillis();
        java.lang.String str38 = dateTime36.toString();
        org.joda.time.DateTime.Property property39 = dateTime36.hourOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime44 = property42.addWrapFieldToCopy((int) (short) 100);
        int int45 = localDateTime44.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime44.getFieldType((int) (short) 1);
        boolean boolean48 = dateTime36.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime.Property property49 = dateTime21.property(dateTimeFieldType47);
        int int50 = mutableDateTime4.get(dateTimeFieldType47);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime4.yearOfEra();
        java.lang.String str52 = property51.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572483567L + "'", long37 == 1644572483567L);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T09:41:23.567Z" + "'", str38, "2022-02-11T09:41:23.567Z");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970" + "'", str52, "1970");
    }

    @Test
    public void test03160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03160");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        int[] intArray6 = localDateTime3.getValues();
        int int7 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(22);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDateTime13.toDateTime(dateTimeZone18);
        boolean boolean23 = dateTime21.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes((int) (short) 10);
        long long26 = dateTime25.getMillis();
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime25.plusHours((int) (short) 10);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        int int36 = dateTimeZone32.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = dateTime25.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone32);
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = dateTimeZone32.getShortName(1644572330264L, locale40);
        java.lang.String str42 = dateTimeZone32.getID();
        org.joda.time.DateTime dateTime43 = localDateTime11.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime11.plusDays(292278993);
        int int46 = localDateTime45.getMinuteOfHour();
        int int47 = localDateTime45.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2022, 2, 7, 35483596]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572483596L + "'", long26 == 1644572483596L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
    }

    @Test
    public void test03161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03161");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 300);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.parse("2022-02-11T23:41:07.079Z", dateTimeFormatter8);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test03162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03162");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate4.withDayOfMonth(35403380);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35403380 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test03163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03163");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology15 = localDateTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.seconds();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.weekyearOfCentury();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology15);
        org.joda.time.Chronology chronology19 = chronology15.withUTC();
        org.joda.time.DateTime dateTime20 = dateTime9.withChronology(chronology15);
        org.joda.time.DurationField durationField21 = chronology15.weeks();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test03164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03164");
        java.util.Locale locale3 = new java.util.Locale("en_US", "2022-02-11T09:48:50.448Z", "en");
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj9, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDateTime6.toDateTime(dateTimeZone11);
        boolean boolean16 = dateTime14.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes((int) (short) 10);
        long long19 = dateTime18.getMillis();
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime18.plusHours((int) (short) 10);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        int int29 = dateTimeZone25.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = dateTime18.toDateTime(dateTimeZone25);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = dateTimeZone25.getName(0L, locale32);
        java.util.Set<java.lang.Character> charSet35 = locale32.getExtensionKeys();
        java.lang.String str36 = locale3.getDisplayVariant(locale32);
        java.util.Set<java.lang.Character> charSet37 = locale32.getExtensionKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en_us" + "'", str4, "en_us");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572483844L + "'", long19 == 1644572483844L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "en" + "'", str36, "en");
        org.junit.Assert.assertNotNull(charSet37);
    }

    @Test
    public void test03165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03165");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.dayOfWeek();
        java.lang.String str9 = property8.getName();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfWeek" + "'", str9, "dayOfWeek");
    }

    @Test
    public void test03166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03166");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear(6);
        org.joda.time.Chronology chronology12 = dateTimeFormatter11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTimeFormatter11.parseDateTime("Property[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
    }

    @Test
    public void test03167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03167");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = property3.get();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        mutableDateTime6.addHours(11);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfMonth(43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test03168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03168");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField3 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addMonths(35350603);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime1.copy();
        org.joda.time.Instant instant7 = mutableDateTime1.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(35402493);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35402493 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
    }

    @Test
    public void test03169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03169");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minusMillis(9);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone21);
        long long25 = dateTimeZone21.convertUTCToLocal(1644572334850L);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime19.toMutableDateTime(dateTimeZone21);
        mutableDateTime26.setMillisOfSecond((int) (byte) 1);
        mutableDateTime26.addMillis((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime26.add(readableDuration31, 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644572334850L + "'", long25 == 1644572334850L);
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test03170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03170");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        boolean boolean8 = property7.isLeap();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy(625);
        org.joda.time.LocalDate localDate11 = property7.roundHalfCeilingCopy();
        java.lang.String str12 = property7.getName();
        org.joda.time.LocalDate localDate13 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate15 = localDate13.plusYears(292278994);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "yearOfEra" + "'", str12, "yearOfEra");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test03171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03171");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(6);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withZoneUTC();
        java.util.Locale locale13 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter12.withLocale(locale13);
        java.lang.String str15 = locale5.getDisplayVariant(locale13);
        java.lang.String str16 = locale13.getLanguage();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ja" + "'", str16, "ja");
    }

    @Test
    public void test03172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03172");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setVariant("Property[monthOfYear]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Property[monthOfYear] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03173");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate.Property property6 = localDate4.weekOfWeekyear();
        int int7 = localDate4.getYearOfEra();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test03174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03174");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getDayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = localDate8.toDateMidnight();
        java.lang.String str10 = localDate8.toString();
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.LocalDate localDate13 = localDate8.plusYears(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate8.getFieldType(0);
        org.joda.time.LocalDate localDate17 = localDate4.withField(dateTimeFieldType15, 55);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.util.Locale locale25 = locale23.stripExtensions();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = dateTimeZone19.getShortName(1644572428220L, locale25);
        org.joda.time.DateTime dateTime28 = localDate17.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTime.Property property29 = dateTime28.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49 + "'", int5 == 49);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11" + "'", str10, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(charSet24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test03175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03175");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withChronology(chronology12);
        java.util.Locale locale16 = dateTimeFormatter15.getLocale();
        boolean boolean17 = dateTimeFormatter15.isPrinter();
        java.lang.StringBuffer stringBuffer18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate25 = localDate21.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property26 = localDate25.yearOfEra();
        java.lang.Object obj27 = null;
        boolean boolean28 = localDate25.equals(obj27);
        org.joda.time.Interval interval29 = localDate25.toInterval();
        int int30 = localDate25.size();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(stringBuffer18, (org.joda.time.ReadablePartial) localDate25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test03176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03176");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(2022);
        int int8 = localDate2.getYear();
        org.joda.time.LocalDate localDate10 = localDate2.minusMonths(55);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((int) (short) -1);
        int int16 = localDate15.getDayOfYear();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = localDate19.toDateMidnight();
        java.lang.String str21 = localDate19.toString();
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        org.joda.time.LocalDate localDate24 = localDate19.plusYears(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localDate19.getFieldType(0);
        org.joda.time.LocalDate localDate28 = localDate15.withField(dateTimeFieldType26, 55);
        org.joda.time.LocalDate.Property property29 = localDate10.property(dateTimeFieldType26);
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy(2022);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTime dateTime33 = localDate31.toDateTime((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(localDate15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 49 + "'", int16 == 49);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11" + "'", str21, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test03177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03177");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, (int) (byte) 10);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime20.addMonths((int) ' ');
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime20.hourOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj39 = null;
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(obj39, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDateTime36.toDateTime(dateTimeZone41);
        boolean boolean46 = dateTime44.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMinutes((int) (short) 10);
        long long49 = dateTime48.getMillis();
        org.joda.time.Chronology chronology50 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime48.plusHours((int) (short) 10);
        java.lang.Object obj53 = null;
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(obj53, dateTimeZone55);
        int int59 = dateTimeZone55.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime60 = dateTime48.toDateTime(dateTimeZone55);
        mutableDateTime31.setZoneRetainFields(dateTimeZone55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(chronology62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj66 = null;
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(obj66, dateTimeZone68);
        org.joda.time.DateTime dateTime71 = localDateTime63.toDateTime(dateTimeZone68);
        boolean boolean73 = dateTime71.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime75 = dateTime71.minusMinutes((int) (short) 10);
        long long76 = dateTime75.getMillis();
        org.joda.time.Chronology chronology77 = dateTime75.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.era();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.halfdayOfDay();
        int int80 = mutableDateTime31.get(dateTimeField79);
        mutableDateTime31.addSeconds(0);
        int int83 = property28.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime31.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime85 = property84.roundHalfFloor();
        int int86 = mutableDateTime85.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572484362L + "'", long14 == 1644572484362L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644572484362L + "'", long49 == 1644572484362L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1644572484362L + "'", long76 == 1644572484362L);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 70 + "'", int86 == 70);
    }

    @Test
    public void test03178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03178");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("zh");
        java.util.Locale.Builder builder5 = builder0.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("2022-12-11T09:50:38.250", "1");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-12-11T09:50:38.250 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03179");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        int int5 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj17 = null;
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj17, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime14.toDateTime(dateTimeZone19);
        boolean boolean24 = dateTime22.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMinutes((int) (short) 10);
        long long27 = dateTime26.getMillis();
        org.joda.time.Chronology chronology28 = dateTime26.getChronology();
        org.joda.time.DateTime dateTime30 = dateTime26.plusHours((int) (short) 10);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        int int37 = dateTimeZone33.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime38 = dateTime26.toDateTime(dateTimeZone33);
        mutableDateTime9.setZoneRetainFields(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime9.minuteOfDay();
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = mutableDateTime9.toCalendar(locale41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromCalendarFields(calendar42);
        int int44 = localDateTime43.size();
        int int45 = localDateTime43.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.monthOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology51 = localDateTime48.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.seconds();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField55 = chronology51.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField57 = chronology51.year();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime43, chronology51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = dateTimeFormatter2.print((org.joda.time.ReadablePartial) localDateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572484508L + "'", long27 == 1644572484508L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test03180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03180");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        int int8 = localDate6.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate6.withDayOfMonth(10022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10022 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test03181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime2.isSupported(dateTimeFieldType17);
        org.joda.time.DateTime dateTime19 = mutableDateTime2.toDateTime();
        mutableDateTime2.setYear(919);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03182");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.weeks();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.Chronology chronology13 = chronology5.withZone(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DurationField durationField15 = chronology13.halfdays();
        org.joda.time.DurationField durationField16 = chronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test03183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03183");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.year();
        int int4 = localDateTime1.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusWeeks(2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusYears((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(1644572404408L);
        java.lang.String str12 = property9.getAsString();
        boolean boolean13 = property9.isLeap();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 51 + "'", int4 == 51);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "35484809" + "'", str12, "35484809");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03184");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.Instant instant16 = dateTime14.toInstant();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test03185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03185");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTime9.get(dateTimeField13);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear(70);
        long long18 = dateTime15.getMillis();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime15.minus(readableDuration19);
        org.joda.time.DateTime.Property property21 = dateTime15.dayOfYear();
        org.joda.time.DurationField durationField22 = property21.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644573084842L + "'", long18 == 1644573084842L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test03186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03186");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        org.joda.time.LocalDate localDate9 = localDate6.plusMonths(8);
        int int10 = localDate6.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test03187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03187");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setExtension('x', "2022-02-11T09:40:10.201Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:40:10.201Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test03188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03188");
        java.io.IOException iOException2 = new java.io.IOException("2022-02-11T09:40:23.287Z");
        java.io.IOException iOException3 = new java.io.IOException("", (java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("2022-02-11T09:39:22.075Z");
        iOException3.addSuppressed((java.lang.Throwable) iOException5);
        java.lang.Throwable throwable9 = null;
        java.io.IOException iOException10 = new java.io.IOException("2022-02-11T09:38:49.281Z", throwable9);
        java.io.IOException iOException11 = new java.io.IOException("Chinese (Taiwan)", (java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException10);
        iOException3.addSuppressed((java.lang.Throwable) iOException10);
    }

    @Test
    public void test03189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03189");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isPrinter();
        boolean boolean7 = dateTimeFormatter4.isOffsetParsed();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj12 = null;
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(obj12, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDateTime9.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays((int) (short) 10);
        boolean boolean21 = dateTime19.isBefore((long) (short) 100);
        java.lang.Object obj22 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(obj22, dateTimeZone24);
        int int28 = dateTimeZone24.getOffset((long) (byte) -1);
        int int30 = dateTimeZone24.getOffset(1644572334551L);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone24);
        boolean boolean32 = dateTimeZone24.isFixed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter4.withZone(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(1644572333722L);
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutableDateTime35.add(readableDuration36, 2022);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.minuteOfDay();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.secondOfDay();
        mutableDateTime35.setDayOfMonth(3);
        mutableDateTime35.addHours(13);
        java.lang.Object obj45 = mutableDateTime35.clone();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime35.copy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = dateTimeFormatter4.print((org.joda.time.ReadableInstant) mutableDateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "2022-02-03T22:38:53.722Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "2022-02-03T22:38:53.722Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "2022-02-03T22:38:53.722Z");
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test03190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03190");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("2022-02-11T09:39:11.286Z");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
    }

    @Test
    public void test03191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03191");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundCeiling();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj22 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(obj22, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDateTime19.toDateTime(dateTimeZone24);
        boolean boolean29 = dateTime27.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property30 = dateTime27.secondOfDay();
        org.joda.time.DateTime dateTime31 = property30.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime31.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime34 = dateTime31.plusMillis((-1));
        org.joda.time.DateTime dateTime35 = dateTime34.withLaterOffsetAtOverlap();
        boolean boolean36 = dateTime35.isBeforeNow();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.plus(readablePeriod37);
        boolean boolean39 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) dateTime38);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test03192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03192");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withEra((int) (short) 0);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test03193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03193");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears(9);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        int int22 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfDay(10);
        boolean boolean25 = dateTime15.equals((java.lang.Object) localDateTime20);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withDayOfYear(49);
        java.lang.String str28 = localDateTime20.toString();
        org.joda.time.LocalDateTime.Property property29 = localDateTime20.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime31 = localDateTime20.withYearOfCentury(1972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:51:25.065" + "'", str28, "2022-02-11T09:51:25.065");
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test03194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03194");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = property3.get();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundCeiling();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.minuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test03195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03195");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("-0021-02-12");
        int int2 = dateTime1.getMinuteOfDay();
        org.joda.time.DateTime.Property property3 = dateTime1.secondOfMinute();
        long long4 = dateTime1.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime1.withWeekOfWeekyear(10022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10022 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-62826278400000L) + "'", long4 == (-62826278400000L));
    }

    @Test
    public void test03196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime2.setDayOfYear((int) (short) 1);
        mutableDateTime2.setMillis(1644572335842L);
        mutableDateTime2.setWeekOfWeekyear(20);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime2.minuteOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone37);
        boolean boolean42 = dateTime40.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime44 = dateTime40.minusMinutes((int) (short) 10);
        long long45 = dateTime44.getMillis();
        java.lang.String str46 = dateTime44.toString();
        int int47 = dateTime44.getHourOfDay();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime2.yearOfCentury();
        int int50 = property49.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572485153L + "'", long45 == 1644572485153L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:41:25.153Z" + "'", str46, "2022-02-11T09:41:25.153Z");
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 99 + "'", int50 == 99);
    }

    @Test
    public void test03197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03197");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(2080, 0, 2000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2080 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03198");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        boolean boolean7 = dateTimeFormatter4.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, (int) (byte) 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone25);
        mutableDateTime15.setDate((org.joda.time.ReadableInstant) dateTime28);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        mutableDateTime15.setZone(dateTimeZone32);
        int int37 = dateTimeZone32.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime38 = localDateTime10.toDateTime(dateTimeZone32);
        java.util.Locale locale40 = java.util.Locale.US;
        java.util.Locale.setDefault(locale40);
        java.lang.String str42 = dateTimeZone32.getShortName(1L, locale40);
        org.joda.time.tz.NameProvider nameProvider43 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.getDefault(category44);
        java.lang.String str48 = nameProvider43.getName(locale45, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str49 = locale40.getDisplayCountry(locale45);
        java.util.Locale.Category category50 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.lang.String str52 = locale40.getDisplayScript(locale51);
        java.lang.String str53 = locale40.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter4.withLocale(locale40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter4.withDefaultYear(32400);
        org.joda.time.Chronology chronology57 = dateTimeFormatter4.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider43);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "United States" + "'", str49, "United States");
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category50.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en" + "'", str53, "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(chronology57);
    }

    @Test
    public void test03199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03199");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType2 = localTime0.getFieldType(35445087);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35445087");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test03200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03200");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.era();
        org.joda.time.LocalDate localDate4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate5 = property3.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate5.withDayOfYear(35341772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35341772 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test03201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03201");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.weeks();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.Chronology chronology13 = chronology5.withZone(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test03202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03202");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("Feb");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setRegion("2022-02-11T09:39:04.035Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:39:04.035Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test03203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03203");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.monthOfYear();
        org.joda.time.LocalDateTime localDateTime6 = property4.addWrapFieldToCopy((int) (short) 100);
        int int7 = localDateTime6.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = localDateTime6.getFieldType((int) (short) 1);
        int int10 = localDateTime1.get(dateTimeFieldType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime1.plus(readableDuration11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localDateTime1.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDateTime1.toString("2022-02-11T09:38:59.488Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test03204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03204");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        boolean boolean6 = dateTimeFormatter4.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 35341772);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter4.getZone();
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable11, 899397354L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
    }

    @Test
    public void test03205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03205");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear((int) (byte) -1);
        boolean boolean15 = localDate6.equals((java.lang.Object) localDate14);
        org.joda.time.LocalDate localDate17 = localDate6.minusYears(20);
        int[] intArray18 = localDate17.getValues();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight21 = localDate17.toDateMidnight(dateTimeZone19);
        org.joda.time.LocalDate localDate23 = localDate17.minusYears(6);
        org.joda.time.LocalDate localDate25 = localDate23.withYear(456);
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime28 = localTime26.plusMinutes((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = localDate23.isBefore((org.joda.time.ReadablePartial) localTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-21, 2, 12]");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
    }

    @Test
    public void test03206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03206");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = property2.add((int) (byte) 10);
        int int7 = mutableDateTime6.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 29 + "'", int7 == 29);
    }

    @Test
    public void test03207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03207");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:40:51.660Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:40:51.660z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03208");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        timeZone0.setID("monthOfYear");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId5 = timeZone0.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: monthOfYear");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test03209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03209");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.plusMinutes(35331916);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime20.withYearOfCentury(152);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 152 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572485686L + "'", long14 == 1644572485686L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test03210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03210");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfMonth(12);
        int int6 = localDateTime5.getMonthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes((int) (short) 10);
        long long21 = dateTime20.getMillis();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = chronology22.add(readablePeriod26, 1644572335512L, 640);
        org.joda.time.DurationField durationField30 = chronology22.halfdays();
        org.joda.time.DurationField durationField31 = chronology22.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) int6, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572485700L + "'", long21 == 1644572485700L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644572335512L + "'", long29 == 1644572335512L);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test03211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03211");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:39:08.403Z");
        timeZone1.setID("");
        timeZone1.setID("en_us_2022-02-11T09:48:50.448Z_en");
        int int7 = timeZone1.getOffset(1644572343125L);
        timeZone1.setRawOffset(47160000);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = timeZone1.getOffset(35448260, 344, 1439, 435, 725, 725);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+13:06");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03212");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int3 = timeZone0.getRawOffset();
        timeZone0.setRawOffset(2);
        int int7 = timeZone0.getOffset(1644572382720L);
        // The following exception was thrown during execution in test generation
        try {
            int int14 = timeZone0.getOffset(945, 420, 640, 35441383, 30, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test03213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03213");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime2.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.set((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = property19.roundHalfEven();
        org.joda.time.DateTime dateTime23 = mutableDateTime22.toDateTime();
        boolean boolean24 = dateTime23.isEqualNow();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime27 = dateTime23.withPeriodAdded(readablePeriod25, 2);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Instant instant29 = dateTime27.toInstant();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.monthOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj37 = null;
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(obj37, dateTimeZone39);
        org.joda.time.DateTime dateTime42 = localDateTime34.toDateTime(dateTimeZone39);
        boolean boolean44 = dateTime42.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes((int) (short) 10);
        long long47 = dateTime46.getMillis();
        org.joda.time.Chronology chronology48 = dateTime46.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime46.plusHours((int) (short) 10);
        java.lang.Object obj51 = null;
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(obj51, dateTimeZone53);
        int int57 = dateTimeZone53.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime58 = dateTime46.toDateTime(dateTimeZone53);
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = dateTimeZone53.getName(0L, locale60);
        int int63 = property32.getMaximumTextLength(locale60);
        org.joda.time.LocalDateTime localDateTime64 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime66 = property32.addWrapFieldToCopy(12);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusHours((int) (short) 100);
        org.joda.time.DateTime dateTime69 = dateTime27.withFields((org.joda.time.ReadablePartial) localDateTime66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = dateTime27.withDate(35354, 0, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1644572485860L + "'", long47 == 1644572485860L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00" + "'", str62, "+00:00");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test03214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03214");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withDefaultYear(70);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter13.withPivotYear((int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter17.withDefaultYear(35383208);
        org.joda.time.Chronology chronology20 = dateTimeFormatter17.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeFormatter17.parseMillis("2089-04-16T10:55:47.353Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
    }

    @Test
    public void test03215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03215");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime2.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.set((int) (byte) 10);
        int int22 = property19.getLeapAmount();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = property19.add(1644572393955L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1644572393955 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test03216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03216");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("Feb");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("2022-02-11T09:39:45.050Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03217");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        mutableDateTime2.setMillis(1644572333244L);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property19 = dateTime16.secondOfDay();
        org.joda.time.DateTime dateTime20 = property19.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime20.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.DurationField durationField23 = property22.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundCeiling();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj29 = null;
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(obj29, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDateTime26.toDateTime(dateTimeZone31);
        boolean boolean36 = dateTime34.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property37 = dateTime34.secondOfDay();
        org.joda.time.DateTime dateTime38 = property37.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime38.plusMillis((-1));
        org.joda.time.DateTime dateTime42 = dateTime41.withLaterOffsetAtOverlap();
        boolean boolean43 = dateTime42.isBeforeNow();
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime42.plus(readablePeriod44);
        boolean boolean46 = mutableDateTime24.isBefore((org.joda.time.ReadableInstant) dateTime45);
        mutableDateTime24.setMinuteOfDay(70);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime24.secondOfDay();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime24.setMillisOfDay(6);
        mutableDateTime24.setMinuteOfDay(420);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test03218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03218");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj9, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDateTime6.toDateTime(dateTimeZone11);
        boolean boolean16 = dateTime14.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property17 = dateTime14.secondOfDay();
        org.joda.time.DateTime dateTime18 = property17.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime18.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime18.plusMillis((-1));
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDateTime24.toDateTime(dateTimeZone29);
        boolean boolean34 = dateTime32.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes((int) (short) 10);
        long long37 = dateTime36.getMillis();
        java.lang.String str38 = dateTime36.toString();
        org.joda.time.DateTime.Property property39 = dateTime36.hourOfDay();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime44 = property42.addWrapFieldToCopy((int) (short) 100);
        int int45 = localDateTime44.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = localDateTime44.getFieldType((int) (short) 1);
        boolean boolean48 = dateTime36.isSupported(dateTimeFieldType47);
        org.joda.time.DateTime.Property property49 = dateTime21.property(dateTimeFieldType47);
        int int50 = mutableDateTime4.get(dateTimeFieldType47);
        mutableDateTime4.setMillis(1644572356620L);
        java.lang.String str53 = mutableDateTime4.toString();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572486148L + "'", long37 == 1644572486148L);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T09:41:26.148Z" + "'", str38, "2022-02-11T09:41:26.148Z");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11T09:39:16.620Z" + "'", str53, "2022-02-11T09:39:16.620Z");
    }

    @Test
    public void test03219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03219");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:40:44.839Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:40:44.839z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03220");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setTime(1644572395419L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
    }

    @Test
    public void test03221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03221");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(48);
        org.joda.time.LocalDate localDate8 = localDate2.withYearOfEra(2000);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property10 = localDate2.yearOfEra();
        org.joda.time.LocalDate.Property property11 = localDate2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate2.withWeekOfWeekyear((-27403789));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27403789 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03222");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTime9.get(dateTimeField13);
        org.joda.time.DateTime dateTime15 = dateTime9.toDateTime();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj20 = null;
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj20, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDateTime17.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime25.plusDays((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateTime25.minusWeeks((int) (short) 1);
        boolean boolean30 = dateTime29.isAfterNow();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone37);
        boolean boolean42 = dateTime40.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime44 = dateTime40.minusMinutes((int) (short) 10);
        long long45 = dateTime44.getMillis();
        org.joda.time.Chronology chronology46 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.era();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.clockhourOfDay();
        org.joda.time.DateTime dateTime49 = dateTime29.withChronology(chronology46);
        org.joda.time.DateTime dateTime50 = dateTime15.toDateTime(chronology46);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        org.joda.time.DateTime dateTime53 = dateTime50.withHourOfDay(19);
        org.joda.time.DateTime dateTime55 = dateTime50.plusDays(35358724);
        int int56 = dateTime50.getMillisOfSecond();
        boolean boolean57 = dateTime50.isEqualNow();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572486409L + "'", long45 == 1644572486409L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 409 + "'", int56 == 409);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test03223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03223");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        int[] intArray6 = localDateTime3.getValues();
        int int7 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(22);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDateTime13.toDateTime(dateTimeZone18);
        boolean boolean23 = dateTime21.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes((int) (short) 10);
        long long26 = dateTime25.getMillis();
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime29 = dateTime25.plusHours((int) (short) 10);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        int int36 = dateTimeZone32.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime37 = dateTime25.toDateTime(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone32);
        java.util.Locale locale40 = java.util.Locale.US;
        java.lang.String str41 = dateTimeZone32.getShortName(1644572330264L, locale40);
        java.lang.String str42 = dateTimeZone32.getID();
        org.joda.time.DateTime dateTime43 = localDateTime11.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime45 = dateTime43.plusHours(2000);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime54.add(readableDuration55, (int) (byte) 10);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj62 = null;
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(obj62, dateTimeZone64);
        org.joda.time.DateTime dateTime67 = localDateTime59.toDateTime(dateTimeZone64);
        boolean boolean69 = dateTime67.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime71 = dateTime67.minusMinutes((int) (short) 10);
        long long72 = dateTime71.getMillis();
        org.joda.time.Chronology chronology73 = dateTime71.getChronology();
        org.joda.time.DateTime dateTime75 = dateTime71.plusHours((int) (short) 10);
        java.lang.Object obj76 = null;
        java.util.TimeZone timeZone77 = null;
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forTimeZone(timeZone77);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone78);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(obj76, dateTimeZone78);
        int int82 = dateTimeZone78.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime83 = dateTime71.toDateTime(dateTimeZone78);
        mutableDateTime54.setZoneRetainFields(dateTimeZone78);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((int) (byte) 0, 9, 1, 2, 12, 42, dateTimeZone78);
        org.joda.time.MutableDateTime mutableDateTime86 = org.joda.time.MutableDateTime.now(dateTimeZone78);
        org.joda.time.MutableDateTime mutableDateTime87 = dateTime45.toMutableDateTime(dateTimeZone78);
        int int88 = dateTime45.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2022, 2, 7, 35486564]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572486564L + "'", long26 == 1644572486564L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "UTC" + "'", str42, "UTC");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1644572486564L + "'", long72 == 1644572486564L);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(mutableDateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 7 + "'", int88 == 7);
    }

    @Test
    public void test03224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03224");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy((int) (short) 100);
        int int5 = property2.getMaximumValueOverall();
        long long6 = property2.remainder();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes((int) (short) 10);
        long long21 = dateTime20.getMillis();
        java.lang.String str22 = dateTime20.toString();
        org.joda.time.DateTime.Property property23 = dateTime20.hourOfDay();
        org.joda.time.DateTime dateTime24 = property23.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = property23.roundFloorCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.minusYears((int) 'a');
        org.joda.time.DateTime.Property property28 = dateTime25.dayOfYear();
        org.joda.time.DateTime.Property property29 = dateTime25.year();
        int int30 = property2.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone37);
        boolean boolean42 = dateTime40.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime44 = dateTime40.minusMinutes((int) (short) 10);
        long long45 = dateTime44.getMillis();
        org.joda.time.Chronology chronology46 = dateTime44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.era();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.secondOfDay();
        org.joda.time.DateTime dateTime50 = dateTime25.toDateTime(chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime52 = dateTime50.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 899486608L + "'", long6 == 899486608L);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572486608L + "'", long21 == 1644572486608L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:41:26.608Z" + "'", str22, "2022-02-11T09:41:26.608Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572486608L + "'", long45 == 1644572486608L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test03225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03225");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime2.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(49);
        org.joda.time.LocalTime.Property property17 = localTime14.millisOfDay();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.ReadableInstant readableInstant19 = null;
        long long20 = property17.getDifferenceAsLong(readableInstant19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime22 = property17.setCopy("2022-02-11T09:41:25.716Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:41:25.716Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1644573086654L) + "'", long20 == (-1644573086654L));
    }

    @Test
    public void test03226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03226");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond(36);
        org.joda.time.DateTime dateTime14 = dateTime9.plusDays(13);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology15.getDateTimeMillis((int) (byte) 1, 591, 35486335, (int) (byte) 10, 154, 640, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 154 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test03227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03227");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        int int3 = timeZone0.getOffset(1644572333371L);
        boolean boolean4 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test03228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03228");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test03229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03229");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear((int) (byte) -1);
        boolean boolean15 = localDate6.equals((java.lang.Object) localDate14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate14.minus(readablePeriod16);
        int int18 = localDate14.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property20 = localDate14.property(dateTimeFieldType19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 43 + "'", int18 == 43);
    }

    @Test
    public void test03230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03230");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("2089-04-16T10:55:37.925Z", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2089-04-16T10:55:37.925Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03231");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (short) 10);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        int int27 = dateTimeZone23.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone23);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone23.getName(0L, locale30);
        java.util.Locale.Builder builder33 = builder0.setLocale(locale30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime53);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        mutableDateTime40.setZone(dateTimeZone57);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDateTime35.toDateTime(dateTimeZone57);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = dateTimeZone57.getShortName(1L, locale65);
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.lang.String str73 = nameProvider68.getName(locale70, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str74 = locale65.getDisplayCountry(locale70);
        java.util.Locale.Category category75 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale76 = java.util.Locale.getDefault(category75);
        java.lang.String str77 = locale65.getDisplayScript(locale76);
        java.lang.String str78 = locale65.getLanguage();
        java.util.Locale.Builder builder79 = builder33.setLocale(locale65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder82 = builder33.setExtension('#', "2022-02-11T09:50:20.665");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572486900L + "'", long17 == 1644572486900L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "United States" + "'", str74, "United States");
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category75.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "en" + "'", str78, "en");
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test03232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03232");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withDefaultYear(70);
        java.io.Writer writer16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter13.printTo(writer16, 1644572479683L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test03233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03233");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((int) (short) 100);
        int int20 = dateTime17.getYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj25 = null;
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(obj25, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDateTime22.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property31 = dateTime30.minuteOfHour();
        boolean boolean32 = dateTime17.equals((java.lang.Object) property31);
        java.lang.Object obj33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj38 = null;
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(obj38, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = localDateTime35.toDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(obj33, dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime17.withZoneRetainFields(dateTimeZone40);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.Instant instant47 = dateTime45.toInstant();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572487005L + "'", long14 == 1644572487005L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(instant47);
    }

    @Test
    public void test03234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getISO3Language();
        int int19 = property15.getMaximumTextLength(locale17);
        int int20 = property15.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 86399999 + "'", int20 == 86399999);
    }

    @Test
    public void test03235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03235");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology22 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withCenturyOfEra(49);
        boolean boolean25 = dateTimeZone15.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalDateTime.Property property26 = localDateTime19.weekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test03236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03236");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (short) 10);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        int int27 = dateTimeZone23.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone23);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone23.getName(0L, locale30);
        int int33 = property2.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime36 = property2.addWrapFieldToCopy(12);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId38 = timeZone37.toZoneId();
        int int40 = timeZone37.getOffset(1644572333371L);
        boolean boolean41 = timeZone37.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.lang.String str49 = nameProvider44.getName(locale46, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getISO3Language();
        java.lang.String str54 = nameProvider44.getName(locale50, "2022-02-11T09:38:57.848Z", "2022-02-11T09:39:08.403Z");
        java.lang.String str55 = dateTimeZone42.getShortName(1644572342420L, locale50);
        int int56 = property2.getMaximumTextLength(locale50);
        java.lang.String str57 = locale50.getDisplayName();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.lang.String str59 = locale58.getDisplayScript();
        java.lang.String str60 = locale58.getISO3Country();
        java.lang.String str61 = locale50.getDisplayScript(locale58);
        java.util.Set<java.lang.String> strSet62 = locale58.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572487091L + "'", long17 == 1644572487091L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zho" + "'", str51, "zho");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese" + "'", str57, "Chinese");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "TWN" + "'", str60, "TWN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
    }

    @Test
    public void test03237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03237");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime8 = localTime4.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) (short) -1);
        int int11 = localTime10.getMinuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime10.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime15 = localTime10.withPeriodAdded(readablePeriod13, (-1161706));
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test03238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03238");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        int[] intArray6 = localDateTime3.getValues();
        int int7 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(22);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(48);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfDay();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate23 = localDate19.minusYears(48);
        org.joda.time.LocalDate localDate25 = localDate19.withYearOfEra(2000);
        org.joda.time.LocalDate.Property property26 = localDate19.dayOfWeek();
        org.joda.time.LocalDate.Property property27 = localDate19.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDate19);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2022, 2, 7, 35487231]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test03239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03239");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.monthOfYear();
        boolean boolean8 = dateTimeZone2.isLocalDateTimeGap(localDateTime6);
        long long10 = dateTimeZone2.nextTransition(1644572347205L);
        java.util.TimeZone timeZone11 = dateTimeZone2.toTimeZone();
        java.lang.String str12 = timeZone11.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572347205L + "'", long10 == 1644572347205L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Coordinated Universal Time" + "'", str12, "Coordinated Universal Time");
    }

    @Test
    public void test03240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03240");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) (short) 10);
        long long15 = dateTime14.getMillis();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology16.days();
        org.joda.time.DurationField durationField20 = chronology16.hours();
        org.joda.time.DurationField durationField21 = chronology16.halfdays();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(3764487297492L, chronology16);
        org.joda.time.DateTimeField dateTimeField23 = chronology16.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTimeZone dateTimeZone25 = chronology16.getZone();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime27.add(readablePeriod28);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572487417L + "'", long15 == 1644572487417L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test03241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03241");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        int[] intArray6 = localDateTime3.getValues();
        int int7 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(22);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readablePeriod10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withDate(35395, (-292275054), 35358724);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[2022, 2, 7, 35487441]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test03242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03242");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object obj2 = null;
        boolean boolean3 = charSet1.remove(obj2);
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale6 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str7 = locale6.getISO3Language();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getISO3Language();
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale4, locale5, locale6, locale8, locale9 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.stream.Stream<java.util.Locale> localeStream14 = localeList12.stream();
        boolean boolean15 = charSet1.containsAll((java.util.Collection<java.util.Locale>) localeList12);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj20 = null;
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj20, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDateTime17.toDateTime(dateTimeZone22);
        boolean boolean27 = dateTime25.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes((int) (short) 10);
        long long30 = dateTime29.getMillis();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours((int) (short) 10);
        java.lang.Object obj34 = null;
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(obj34, dateTimeZone36);
        int int40 = dateTimeZone36.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = dateTime29.toDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone36);
        java.lang.Object obj43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        boolean boolean55 = dateTime53.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime57 = dateTime53.minusMinutes((int) (short) 10);
        long long58 = dateTime57.getMillis();
        org.joda.time.Chronology chronology59 = dateTime57.getChronology();
        org.joda.time.DateTime dateTime61 = dateTime57.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime64.add(readableDuration65, (int) (byte) 10);
        boolean boolean68 = dateTime57.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.DateTimeZone dateTimeZone69 = mutableDateTime64.getZone();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj43, dateTimeZone69);
        long long72 = dateTimeZone36.getMillisKeepLocal(dateTimeZone69, (long) 2022);
        boolean boolean73 = charSet1.equals((java.lang.Object) dateTimeZone36);
        int int74 = charSet1.size();
        java.util.Spliterator<java.lang.Character> charSpliterator75 = charSet1.spliterator();
        java.util.Iterator<java.lang.Character> charItor76 = charSet1.iterator();
        java.util.HashSet<java.lang.Character>[] charSetArray77 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.HashSet<java.lang.Character>[] charSetArray78 = charSet1.toArray(charSetArray77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fra" + "'", str7, "fra");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localeStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572487457L + "'", long30 == 1644572487457L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644572487458L + "'", long58 == 1644572487458L);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 2022L + "'", long72 == 2022L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(charSpliterator75);
        org.junit.Assert.assertNotNull(charItor76);
    }

    @Test
    public void test03243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03243");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withDefaultYear((int) (byte) 0);
        java.lang.Appendable appendable9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = localDate12.toDateMidnight();
        org.joda.time.LocalDate localDate15 = localDate12.withWeekyear((int) (short) 1);
        java.util.Date date16 = localDate15.toDate();
        org.joda.time.LocalDate localDate18 = localDate15.minusDays((int) (byte) 0);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.LocalDate localDate21 = localDate15.withDayOfYear(11);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable9, (org.joda.time.ReadablePartial) localDate21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 09 00:00:00 GMT 1");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 40 + "'", int19 == 40);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test03244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03244");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(209);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03245");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(35433542, 35413423, 35436485, 35441383, 3525, 2080, 650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35441383 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03246");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("9");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test03247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03247");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withDefaultYear((int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatter12.getParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTimeFormatter12.parseDateTime("2022-02-11T09:39:25.738Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(dateTimeParser13);
    }

    @Test
    public void test03248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03248");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test03249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03249");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:39:21.228Z", "2022-02-11T09:49:43.750Z");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(1644572340629L, dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) "2022-02-11T09:39:21.228Z", dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:39:21.228Z\" is malformed at \"22-02-11T09:39:21.228Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:39:21.228z_2022-02-11T09:49:43.750Z");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test03250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03250");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withOffsetParsed();
        int int14 = dateTimeFormatter13.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeFormatter13.parseMillis("2089-04-16T10:56:49.660Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
    }

    @Test
    public void test03251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03251");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CA" + "'", str2, "CA");
    }

    @Test
    public void test03252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03252");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate.Property property6 = localDate4.weekOfWeekyear();
        int int7 = localDate4.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate4.plus(readablePeriod8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate4.minus(readablePeriod10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds((int) (byte) -1);
        int[] intArray18 = localDateTime15.getValues();
        int int19 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDateTime21.isSupported(dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = localDate11.isEqual((org.joda.time.ReadablePartial) localDateTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 7, 35487660]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test03253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03253");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime19 = property16.addToCopy(0);
        org.joda.time.DateTime dateTime20 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone26);
        long long30 = dateTimeZone26.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter24.withZone(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = dateTime20.withZone(dateTimeZone26);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.DateTime dateTime34 = dateTime32.minus(readablePeriod33);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572487676L + "'", long14 == 1644572487676L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:27.676Z" + "'", str15, "2022-02-11T09:41:27.676Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572334850L + "'", long30 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test03254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03254");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes((int) (short) 10);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property6.addCopy(0L);
        org.joda.time.LocalTime localTime9 = property6.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = localTime9.withMinuteOfHour(35366252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35366252 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test03255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withSecondOfMinute((int) (byte) 0);
        int int10 = localDateTime1.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 27 + "'", int10 == 27);
    }

    @Test
    public void test03256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03256");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDateTime21.toDateTime(dateTimeZone26);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime29);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        mutableDateTime16.setZone(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime38 = dateTime13.withZoneRetainFields(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property40.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime42 = property40.withMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test03257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03257");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withDefaultYear(476);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeFormatter7.parseMillis("2022-02-07T10:13:09.462");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test03258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03258");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.era();
        org.joda.time.LocalDate localDate4 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate5 = property3.withMinimumValue();
        int int6 = property3.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = property3.setCopy(4044);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4044 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test03259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03259");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear(6);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 936);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeFormatter4.parseMillis("2089-04-16T10:56:13.810Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test03260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03260");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes((int) (short) 10);
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds((int) 'a');
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test03261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03261");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime.Property property13 = localTime2.millisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.DurationField durationField16 = property14.getRangeDurationField();
        org.joda.time.LocalTime localTime17 = property14.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = property14.setCopy("2022-02-11T09:41:06.405Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:41:06.405Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test03262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03262");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = localDate5.getFieldType(0);
        org.joda.time.DurationFieldType durationFieldType8 = null;
        boolean boolean9 = localDate5.isSupported(durationFieldType8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate5.minus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.ReadablePartial readablePartial13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        int int17 = localDateTime15.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withSecondOfMinute(3);
        java.util.Date date20 = localDateTime15.toDate();
        int[] intArray21 = localDateTime15.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology12.validate(readablePartial13, intArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 35488116 + "'", int17 == 35488116);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Fri Feb 11 09:51:28 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 11, 35488116]");
    }

    @Test
    public void test03263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03263");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDateTime21.toDateTime(dateTimeZone26);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime29);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        mutableDateTime16.setZone(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime38 = dateTime13.withZoneRetainFields(dateTimeZone33);
        int int39 = dateTime13.getMinuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(obj44, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDateTime41.toDateTime(dateTimeZone46);
        boolean boolean51 = dateTime49.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMinutes((int) (short) 10);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillisOfSecond(10);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = dateTime13.toDateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField61 = chronology59.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 41 + "'", int39 == 41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644572488130L + "'", long54 == 1644572488130L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
    }

    @Test
    public void test03264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03264");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds((int) (byte) -1);
        boolean boolean9 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusYears(9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withCenturyOfEra((int) (short) 100);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDateTime15.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = localDateTime6.toDateTime(dateTimeZone20);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        boolean boolean26 = localDateTime6.isSupported(durationFieldType25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundCeilingCopy();
        org.joda.time.ReadableInstant readableInstant29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = property27.compareTo(readableInstant29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test03265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03265");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.hourOfDay();
        java.lang.String str8 = property7.getName();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy(1644572345240L);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj15 = null;
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(obj15, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = localDateTime12.toDateTime(dateTimeZone17);
        boolean boolean22 = dateTime20.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusMinutes((int) (short) 10);
        long long25 = dateTime24.getMillis();
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        org.joda.time.DateTime dateTime28 = dateTime24.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32, (int) (byte) 10);
        boolean boolean35 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime31.getZone();
        org.joda.time.DateTime dateTime37 = localDateTime10.toDateTime(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime10.withMinuteOfHour(114);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 114 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hourOfDay" + "'", str8, "hourOfDay");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644572488207L + "'", long25 == 1644572488207L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test03266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03266");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate localDate6 = localDate2.withDayOfWeek(6);
        int int7 = localDate6.size();
        int int8 = localDate6.getYear();
        org.joda.time.LocalDate localDate10 = localDate6.withWeekOfWeekyear(20);
        java.lang.Object obj11 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 52);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone25);
        boolean boolean30 = dateTime28.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes((int) (short) 10);
        long long33 = dateTime32.getMillis();
        org.joda.time.Chronology chronology34 = dateTime32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.minutes();
        org.joda.time.DurationField durationField36 = chronology34.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter14.withChronology(chronology34);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(obj11, chronology34);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withDate(241, 11, 12);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime38.withYear(19);
        int int45 = localDateTime44.getYear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.minusDays(600);
        // The following exception was thrown during execution in test generation
        try {
            int int48 = localDate10.compareTo((org.joda.time.ReadablePartial) localDateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572488223L + "'", long33 == 1644572488223L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(localDateTime47);
    }

    @Test
    public void test03267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03267");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-11T09:39:03.418Z");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("fr");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test03268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03268");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime6 = dateTime4.withMillis((long) (byte) -1);
        org.joda.time.DateMidnight dateMidnight7 = dateTime4.toDateMidnight();
        org.joda.time.DateTime.Property property8 = dateTime4.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test03269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime13.minus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis(59);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime24.minus(1644572413915L);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = dateTime26.isSupported(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572488318L + "'", long14 == 1644572488318L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test03270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03270");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.addNoWrapToCopy((int) (short) 10);
        org.joda.time.LocalTime localTime8 = property4.addCopy(86399);
        org.joda.time.LocalTime localTime9 = property4.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = property4.setCopy(94);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 94 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test03271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03271");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = property4.setCopy(0);
        int int9 = localTime8.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test03272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03272");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("38");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=38");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03273");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        boolean boolean7 = property6.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = property6.withMaximumValue();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        java.lang.String str17 = nameProvider12.getName(locale14, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str22 = nameProvider12.getName(locale18, "2022-02-11T09:38:57.848Z", "2022-02-11T09:39:08.403Z");
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = localDate30.toDateMidnight();
        java.lang.String str32 = localDate30.toString();
        org.joda.time.Chronology chronology33 = localDate30.getChronology();
        org.joda.time.LocalDate localDate35 = localDate30.plusYears(2022);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(640);
        org.joda.time.LocalDate.Property property38 = localDate35.dayOfWeek();
        java.util.Locale locale39 = java.util.Locale.US;
        int int40 = property38.getMaximumShortTextLength(locale39);
        java.lang.String str41 = dateTimeZone24.getName(1644572350774L, locale39);
        java.lang.String str44 = nameProvider12.getShortName(locale39, "", "2022-02-11T09:49:14.001Z");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = localDateTime10.toString("2022-02-11T09:39:58.896Z", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11" + "'", str32, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNull(str44);
    }

    @Test
    public void test03274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03274");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundFloorCopy();
        int int7 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDateTime8.getValue(32);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test03275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03275");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate.Property property6 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test03276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03276");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime2.millisOfSecond();
        org.joda.time.Interval interval18 = property17.toInterval();
        int int19 = property17.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime20 = property17.getMutableDateTime();
        mutableDateTime20.setSecondOfMinute(19);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight26 = localDate25.toDateMidnight();
        java.lang.String str27 = localDate25.toString();
        org.joda.time.Chronology chronology28 = localDate25.getChronology();
        org.joda.time.DateTimeZone dateTimeZone29 = chronology28.getZone();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setRounding(dateTimeField32, 35423861);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 35423861");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-11" + "'", str27, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test03277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime2.toMutableDateTimeISO();
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withPivotYear((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = mutableDateTime2.toString(dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test03278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        mutableDateTime2.setMillis(1644572333244L);
        long long7 = mutableDateTime2.getMillis();
        java.lang.String str8 = mutableDateTime2.toString();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572333244L + "'", long7 == 1644572333244L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:38:53.244Z" + "'", str8, "2022-02-11T09:38:53.244Z");
    }

    @Test
    public void test03279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03279");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:40:22.305Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:40:22.305Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03280");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.era();
        org.joda.time.LocalDate localDate5 = localDate2.withDayOfWeek(3);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear(100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate7.minus(readablePeriod8);
        org.joda.time.LocalDate.Property property10 = localDate7.dayOfYear();
        org.joda.time.LocalDate localDate12 = localDate7.withYearOfCentury(54);
        org.joda.time.LocalDate.Property property13 = localDate7.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test03281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03281");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:40:27.426Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:40:27.426Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03282");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes((int) (short) 10);
        long long21 = dateTime20.getMillis();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DurationField durationField25 = chronology22.days();
        org.joda.time.DurationField durationField26 = chronology22.hours();
        java.lang.Object obj27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(obj27, dateTimeZone29);
        int int33 = dateTimeZone29.getOffset((long) (byte) -1);
        boolean boolean34 = dateTimeZone29.isFixed();
        int int36 = dateTimeZone29.getStandardOffset(1644572334551L);
        org.joda.time.Chronology chronology37 = chronology22.withZone(dateTimeZone29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(474, 114, 35398959, 492, 35351730, 24, 22, chronology37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 492 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572488619L + "'", long21 == 1644572488619L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test03283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03283");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime.Property property13 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addWrapFieldToCopy(19);
        org.joda.time.LocalTime localTime16 = property13.roundFloorCopy();
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalTime localTime19 = localTime16.minus(readablePeriod18);
        java.lang.Object obj20 = null;
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj20, dateTimeZone22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        int int26 = localDateTime24.getDayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.monthOfYear();
        org.joda.time.LocalDateTime localDateTime31 = property29.addWrapFieldToCopy((int) (short) 100);
        int int32 = localDateTime31.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localDateTime31.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.property(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.withMillisOfSecond((int) 'u');
        java.util.Date date38 = localDateTime37.toDate();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = localTime19.compareTo((org.joda.time.ReadablePartial) localDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 42 + "'", int26 == 42);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 09:51:28 GMT+00:00 2022");
    }

    @Test
    public void test03284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03284");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone5);
        long long9 = dateTimeZone5.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZone(dateTimeZone5);
        boolean boolean11 = dateTimeFormatter10.isOffsetParsed();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDateTime13.toDateTime(dateTimeZone18);
        boolean boolean23 = dateTime21.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes((int) (short) 10);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime30 = dateTime28.withMillisOfSecond(10);
        org.joda.time.Chronology chronology31 = dateTime30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.millis();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter10.withChronology(chronology31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.parse("2022-02-11T09:39:50.958Z", dateTimeFormatter10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572334850L + "'", long9 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572488822L + "'", long26 == 1644572488822L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test03285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03285");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(2022);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears(640);
        int int10 = localDate7.getDayOfWeek();
        java.lang.String str11 = localDate7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate7.withDayOfMonth(35347060);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35347060 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4044-02-11" + "'", str11, "4044-02-11");
    }

    @Test
    public void test03286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03286");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.ReadableInstant readableInstant18 = null;
        mutableDateTime17.setMillis(readableInstant18);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test03287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03287");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setLanguage("\u82f1\u6587\u7f8e\u570b)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test03288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03288");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(899330198L);
        int int3 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.millisOfDay();
        org.joda.time.Chronology chronology5 = localDateTime2.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) "2089-04-16T10:55:23.768Z", chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2089-04-16T10:55:23.768Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 19 + "'", int3 == 19);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test03289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03289");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (short) 10);
        org.joda.time.DateTime.Property property18 = dateTime13.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime13.toMutableDateTime(chronology19);
        int int21 = dateTime13.getDayOfWeek();
        org.joda.time.DateTime.Property property22 = dateTime13.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = property22.setCopy("2022-02-11T09:41:13.526Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:41:13.526Z\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572488974L + "'", long14 == 1644572488974L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test03290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03290");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2089-04-16T10:55:06.288Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2089-04-16T10:55:06.288Z\" is malformed at \"T10:55:06.288Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03291");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2089-04-16T10:55:22.638Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2089-04-16T10:55:22.638Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03292");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u4e8c\u6708");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03293");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime2.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.era();
        java.lang.Object obj20 = mutableDateTime2.clone();
        mutableDateTime2.addMonths(37);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setMonthOfYear(25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "2022-02-11T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-11T00:00:00.100Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-11T00:00:00.100Z");
    }

    @Test
    public void test03294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03294");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(1644572400509L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = localTime1.withMinuteOfHour(35389776);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35389776 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03295");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj17 = null;
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj17, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime14.toDateTime(dateTimeZone19);
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime9.add(readableDuration24);
        mutableDateTime9.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime9.setDayOfYear((int) (short) 1);
        mutableDateTime9.addSeconds(4044);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj39 = null;
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(obj39, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDateTime36.toDateTime(dateTimeZone41);
        boolean boolean46 = dateTime44.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMinutes((int) (short) 10);
        long long49 = dateTime48.getMillis();
        org.joda.time.Chronology chronology50 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime48.plusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((int) (short) 100);
        int int55 = dateTime52.getYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj60 = null;
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(obj60, dateTimeZone62);
        org.joda.time.DateTime dateTime65 = localDateTime57.toDateTime(dateTimeZone62);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfHour();
        boolean boolean67 = dateTime52.equals((java.lang.Object) property66);
        java.lang.Object obj68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj73 = null;
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(obj73, dateTimeZone75);
        org.joda.time.DateTime dateTime78 = localDateTime70.toDateTime(dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(obj68, dateTimeZone75);
        org.joda.time.DateTime dateTime80 = dateTime52.withZoneRetainFields(dateTimeZone75);
        org.joda.time.DateTime dateTime82 = dateTime80.plusMonths(13);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(chronology83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.monthOfYear();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(chronology86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.plusSeconds((int) (byte) -1);
        boolean boolean92 = localDateTime84.isEqual((org.joda.time.ReadablePartial) localDateTime89);
        int int93 = localDateTime84.getHourOfDay();
        org.joda.time.Chronology chronology94 = localDateTime84.getChronology();
        org.joda.time.DateTime dateTime95 = dateTime82.withChronology(chronology94);
        org.joda.time.DateTime dateTime96 = mutableDateTime9.toDateTime(chronology94);
        org.joda.time.DateTimeField dateTimeField97 = chronology94.minuteOfHour();
        org.joda.time.Chronology chronology98 = chronology94.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime99 = new org.joda.time.MutableDateTime(35474949, 806, 35397469, (int) (byte) 0, 35485950, 600, 35351730, chronology94);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35485950 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644572489200L + "'", long49 == 1644572489200L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    public void test03296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03296");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03297");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter5.withLocale(locale6);
        java.lang.Integer int8 = dateTimeFormatter7.getPivotYear();
        java.lang.Integer int9 = dateTimeFormatter7.getPivotYear();
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = dateTimeFormatter7.print(readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(int8);
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test03298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03298");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        long long6 = dateTimeZone2.convertUTCToLocal(1644572334850L);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone2);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 10022, false, 1644572339243L);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(1644572341146L, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 42);
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime12.compareTo((org.joda.time.ReadablePartial) localDateTime14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572334850L + "'", long6 == 1644572334850L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10022L + "'", long11 == 10022L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test03299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime2.setDayOfYear((int) (short) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDateTime27.toDateTime(dateTimeZone32);
        boolean boolean37 = dateTime35.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes((int) (short) 10);
        long long40 = dateTime39.getMillis();
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime39.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47, (int) (byte) 10);
        boolean boolean50 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDateTime52.toDateTime(dateTimeZone57);
        boolean boolean62 = dateTime60.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property63 = dateTime60.secondOfDay();
        int int64 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime60);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime2.centuryOfEra();
        mutableDateTime2.setWeekyear(945);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572489366L + "'", long40 == 1644572489366L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test03300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03300");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getDayOfYear();
        org.joda.time.LocalDate.Property property6 = localDate4.dayOfWeek();
        org.joda.time.LocalDate localDate8 = property6.addWrapFieldToCopy((int) (short) 0);
        int int9 = localDate8.getDayOfMonth();
        org.joda.time.LocalDate.Property property10 = localDate8.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate8.withCenturyOfEra(35417460);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35417460 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49 + "'", int5 == 49);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 18 + "'", int9 == 18);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test03301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03301");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj9, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDateTime6.toDateTime(dateTimeZone11);
        boolean boolean16 = dateTime14.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes((int) (short) 10);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfSecond(10);
        boolean boolean24 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) dateTime23);
        mutableDateTime2.setMillisOfSecond(42);
        mutableDateTime2.setSecondOfMinute(52);
        mutableDateTime2.setTime(1644572338212L);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime2.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime33 = property31.set("2022-02-11T09:39:24.073Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:39:24.073Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572489481L + "'", long19 == 1644572489481L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test03302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03302");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set(40);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone7);
        mutableDateTime5.setDate((org.joda.time.ReadableInstant) dateTime9);
        int int11 = mutableDateTime5.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test03303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03303");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:39:37.925Z", "2089-04-16T10:55:27.081Z");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj8 = null;
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(obj8, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDateTime5.toDateTime(dateTimeZone10);
        boolean boolean15 = dateTime13.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property16 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime17.plusMillis((-1));
        org.joda.time.DateTime dateTime21 = dateTime20.withLaterOffsetAtOverlap();
        int int22 = dateTime21.getEra();
        boolean boolean23 = charSet3.equals((java.lang.Object) dateTime21);
        int int24 = charSet3.size();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:39:37.925z_2089-04-16T10:55:27.081Z");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test03304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03304");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.lang.Integer int3 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter8.getPrinter();
        boolean boolean11 = dateTimeFormatter8.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withZoneUTC();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.year();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDateTime24.toDateTime(dateTimeZone29);
        mutableDateTime19.setDate((org.joda.time.ReadableInstant) dateTime32);
        java.lang.Object obj34 = null;
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(obj34, dateTimeZone36);
        mutableDateTime19.setZone(dateTimeZone36);
        int int41 = dateTimeZone36.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime42 = localDateTime14.toDateTime(dateTimeZone36);
        java.util.Locale locale44 = java.util.Locale.US;
        java.util.Locale.setDefault(locale44);
        java.lang.String str46 = dateTimeZone36.getShortName(1L, locale44);
        org.joda.time.tz.NameProvider nameProvider47 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.lang.String str52 = nameProvider47.getName(locale49, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str53 = locale44.getDisplayCountry(locale49);
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.getDefault(category54);
        java.lang.String str56 = locale44.getDisplayScript(locale55);
        java.lang.String str57 = locale44.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter8.withLocale(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter2.withLocale(locale44);
        java.lang.StringBuffer stringBuffer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer60, (long) 35485841);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(int3);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertNull(dateTimePrinter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider47);
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "United States" + "'", str53, "United States");
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category54.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en" + "'", str57, "en");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test03305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03305");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = property4.setCopy("2");
        org.joda.time.LocalTime localTime10 = property4.addNoWrapToCopy(2000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property4.setCopy(92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 92 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test03306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DurationField durationField18 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = chronology15.get(readablePeriod20, 1644572391684L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572489642L + "'", long14 == 1644572489642L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test03307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03307");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (short) 10);
        org.joda.time.DateTime.Property property18 = dateTime13.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime13.toMutableDateTime(chronology19);
        long long21 = dateTime13.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime13.withMillisOfSecond(35454863);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35454863 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572489753L + "'", long14 == 1644572489753L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572489753L + "'", long21 == 1644572489753L);
    }

    @Test
    public void test03308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03308");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(35473246, 304, 80, 579, 227);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 579 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03309");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = dateTime3.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear(48);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(40);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone15);
        long long19 = dateTimeZone15.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter13.withZone(dateTimeZone15);
        boolean boolean21 = dateTimeFormatter20.isOffsetParsed();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj26 = null;
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(obj26, dateTimeZone28);
        org.joda.time.DateTime dateTime31 = localDateTime23.toDateTime(dateTimeZone28);
        boolean boolean33 = dateTime31.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime35 = dateTime31.minusMinutes((int) (short) 10);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond(10);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.millis();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.millisOfSecond();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter20.withChronology(chronology41);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.lang.String str46 = locale45.getDisplayLanguage();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime49.add(readableDuration50, (int) (byte) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj57 = null;
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(obj57, dateTimeZone59);
        org.joda.time.DateTime dateTime62 = localDateTime54.toDateTime(dateTimeZone59);
        boolean boolean64 = dateTime62.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime66 = dateTime62.minusMinutes((int) (short) 10);
        long long67 = dateTime66.getMillis();
        org.joda.time.Chronology chronology68 = dateTime66.getChronology();
        org.joda.time.DateTime dateTime70 = dateTime66.plusHours((int) (short) 10);
        java.lang.Object obj71 = null;
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone73);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(obj71, dateTimeZone73);
        int int77 = dateTimeZone73.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime78 = dateTime66.toDateTime(dateTimeZone73);
        mutableDateTime49.setZoneRetainFields(dateTimeZone73);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime49.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime81 = property80.roundHalfFloor();
        java.util.Locale locale85 = new java.util.Locale("en_US", "2022-02-11T09:48:50.448Z", "en");
        java.lang.String str86 = locale85.getDisplayVariant();
        java.lang.String str87 = property80.getAsText(locale85);
        java.util.Locale locale88 = locale85.stripExtensions();
        java.lang.String str89 = locale45.getDisplayLanguage(locale88);
        java.lang.String str90 = locale88.getScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter44.withLocale(locale88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime92 = property9.setCopy("2022-02-11T09:40:46.636Z", locale88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:40:46.636Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572334850L + "'", long19 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1644572489850L + "'", long36 == 1644572489850L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "French" + "'", str46, "French");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1644572489850L + "'", long67 == 1644572489850L);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertEquals(locale85.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "en" + "'", str86, "en");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "0" + "'", str87, "0");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "French" + "'", str89, "French");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter91);
    }

    @Test
    public void test03310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03310");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology15);
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj25 = null;
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(obj25, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDateTime22.toDateTime(dateTimeZone27);
        boolean boolean32 = dateTime30.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime34 = dateTime30.minusMinutes((int) (short) 10);
        long long35 = dateTime34.getMillis();
        org.joda.time.Chronology chronology36 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.era();
        org.joda.time.DateTimeField dateTimeField38 = chronology36.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.weekyear();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.DateTime dateTime41 = mutableDateTime19.toDateTime(chronology36);
        mutableDateTime19.addDays((-1));
        mutableDateTime19.setMillisOfDay((int) 'x');
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusSeconds((int) (byte) -1);
        int[] intArray52 = localDateTime49.getValues();
        int int53 = localDateTime49.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusMinutes(22);
        org.joda.time.Chronology chronology56 = localDateTime55.getChronology();
        mutableDateTime19.setChronology(chronology56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime19.secondOfDay();
        int int59 = mutableDateTime19.getMillisOfDay();
        mutableDateTime19.setMillis(1644572414160L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572489877L + "'", long14 == 1644572489877L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-11T09:51:29.877Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-11T09:51:29.877Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-11T09:51:29.877Z");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1644572489877L + "'", long35 == 1644572489877L);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 2, 7, 35489877]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 120 + "'", int59 == 120);
    }

    @Test
    public void test03311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03311");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test03312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03312");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear((int) (byte) -1);
        boolean boolean15 = localDate6.equals((java.lang.Object) localDate14);
        int int16 = localDate6.getYear();
        org.joda.time.LocalDate localDate18 = localDate6.minusYears(70);
        int int19 = localDate18.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) int19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test03313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03313");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:40:52.580Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:40:52.580Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03314");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate localDate6 = localDate2.withDayOfWeek(6);
        int int7 = localDate6.size();
        int int8 = localDate6.getYear();
        org.joda.time.LocalDate localDate10 = localDate6.withWeekOfWeekyear(20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate10.withEra(116);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 116 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test03315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime8 = localTime4.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime10 = localTime4.plusMinutes(48);
        org.joda.time.LocalTime localTime12 = localTime4.plusHours(55);
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property13.getLocalTime();
        int int15 = property13.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test03316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03316");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(579, 2922789, 918, 932, 35436485, 595, 35449272);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 932 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03317");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        java.lang.String str7 = chronology5.toString();
        org.joda.time.DurationField durationField8 = chronology5.weeks();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03318");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.LocalTime localTime2 = localTime0.plus(readablePeriod1);
        int int3 = localTime0.getMillisOfSecond();
        org.joda.time.LocalTime.Property property4 = localTime0.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalTime localTime6 = localTime0.plus(readablePeriod5);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 476 + "'", int3 == 476);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test03319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03319");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        int int3 = localDateTime1.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withSecondOfMinute(3);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withSecondOfMinute(17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(345, 35477010, 458);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35477010 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35490486 + "'", int3 == 35490486);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test03320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03320");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.era();
        org.joda.time.LocalDate localDate5 = localDate2.minusDays((int) (byte) 10);
        org.joda.time.LocalDate.Property property6 = localDate2.yearOfCentury();
        int int7 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03321");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(25, 35478978, 4, chronology18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35478978 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572490534L + "'", long17 == 1644572490534L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test03322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03322");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone5);
        long long9 = dateTimeZone5.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter3.withZone(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeFormatter10.getZone();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(0L, dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMinuteOfHour(781);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 781 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572334850L + "'", long9 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
    }

    @Test
    public void test03323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03323");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644572437858L);
    }

    @Test
    public void test03324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03324");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (short) 10);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        int int24 = dateTimeZone20.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone20);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = dateTimeZone20.getName(0L, locale27);
        java.lang.String str30 = locale27.getDisplayLanguage();
        boolean boolean31 = locale27.hasExtensions();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572490799L + "'", long14 == 1644572490799L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Chinese" + "'", str30, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test03325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03325");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minusMillis(9);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime15.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.year();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.minusSeconds(279);
        int int31 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withDayOfWeek(35365043);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35365043 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test03326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03326");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = dateTimeZone1.getID();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate4.plus(readablePeriod6);
        org.joda.time.DateTimeField dateTimeField9 = localDate4.getField(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate4.withDayOfWeek(100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03327");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears((int) 'a');
        org.joda.time.LocalDateTime localDateTime21 = dateTime18.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.hourOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime26.add(readableDuration27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj33 = null;
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(obj33, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = localDateTime30.toDateTime(dateTimeZone35);
        boolean boolean40 = dateTime38.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime42 = dateTime38.minusMinutes((int) (short) 10);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime47 = dateTime45.withMillisOfSecond(10);
        boolean boolean48 = mutableDateTime26.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) dateTime47);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.plusMillis(59);
        boolean boolean53 = localDateTime21.equals((java.lang.Object) 59);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572490904L + "'", long14 == 1644572490904L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:30.904Z" + "'", str15, "2022-02-11T09:41:30.904Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644572490905L + "'", long43 == 1644572490905L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11T09:41:09.010Z" + "'", str50, "2022-02-11T09:41:09.010Z");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test03328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03328");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) (short) 10);
        long long15 = dateTime14.getMillis();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.era();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.yearOfCentury();
        org.joda.time.DurationField durationField19 = chronology16.days();
        org.joda.time.DurationField durationField20 = chronology16.hours();
        org.joda.time.DurationField durationField21 = chronology16.halfdays();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(3764487297492L, chronology16);
        org.joda.time.DateTimeField dateTimeField23 = chronology16.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField25 = chronology16.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology16.dayOfMonth();
        org.joda.time.DurationField durationField27 = chronology16.seconds();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572490938L + "'", long15 == 1644572490938L);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test03329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03329");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate.Property property6 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) '#');
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate7.plus(readablePeriod11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate7.withMonthOfYear(728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 728 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test03330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03330");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(0, 20, 35473246, 856, 35420, 728, 58, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 856 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test03331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03331");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy((int) (short) 100);
        int int5 = localDateTime4.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property6.getFieldType();
        org.joda.time.Interval interval10 = property6.toInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    public void test03332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03332");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = chronology4.get(readablePeriod9, 1644572375182L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test03333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03333");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (short) 10);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        int int24 = dateTimeZone20.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone20);
        int int27 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy(35380029);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572491280L + "'", long14 == 1644572491280L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test03334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03334");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(10);
        org.joda.time.DateTime dateTime20 = dateTime16.withCenturyOfEra(59);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(10);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths(580);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone37);
        boolean boolean42 = dateTime40.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime44 = dateTime40.minusMinutes((int) (short) 10);
        long long45 = dateTime44.getMillis();
        org.joda.time.Chronology chronology46 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime44.plusHours((int) (short) 10);
        java.lang.Object obj49 = null;
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(obj49, dateTimeZone51);
        int int55 = dateTimeZone51.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = dateTime44.toDateTime(dateTimeZone51);
        mutableDateTime27.setZoneRetainFields(dateTimeZone51);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime27.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.roundCeiling();
        int int61 = dateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.DateTime.Property property62 = dateTime22.hourOfDay();
        int int63 = property62.getMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572491300L + "'", long14 == 1644572491300L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572491300L + "'", long45 == 1644572491300L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
    }

    @Test
    public void test03335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03335");
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        java.lang.String str10 = dateTimeZone8.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(27, (int) (byte) -1, 629, (int) 'x', 52, 44, 35427191, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "UTC" + "'", str10, "UTC");
    }

    @Test
    public void test03336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03336");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone5);
        boolean boolean8 = dateTimeZone5.equals((java.lang.Object) "2022-02-11T09:38:50.385Z");
        org.joda.time.DateMidnight dateMidnight9 = localDate2.toDateMidnight(dateTimeZone5);
        boolean boolean10 = dateTimeZone5.isFixed();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone5);
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfEra();
        org.joda.time.LocalDate.Property property13 = localDate11.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test03337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03337");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("2022-02-11T09:49:48.240Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:49:48.240Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test03338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03338");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1644572474029L, chronology1);
    }

    @Test
    public void test03339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03339");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(292278993);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology16 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.centuries();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.hourOfDay();
        org.joda.time.DateTime dateTime20 = dateTime9.withChronology(chronology16);
        org.joda.time.DurationField durationField21 = chronology16.years();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test03340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03340");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(48);
        org.joda.time.LocalDate localDate8 = localDate2.withYearOfEra(2000);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property10 = localDate2.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone16);
        long long20 = dateTimeZone16.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter14.withZone(dateTimeZone16);
        boolean boolean22 = dateTimeFormatter21.isOffsetParsed();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter21.withLocale(locale23);
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = locale25.getISO3Language();
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.util.Locale locale28 = locale23.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = property10.setCopy("2022-02-11T23:39:38.169Z", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T23:39:38.169Z\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572334850L + "'", long20 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fra" + "'", str26, "fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "italien (Italie)" + "'", str27, "italien (Italie)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
    }

    @Test
    public void test03341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03341");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray8 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList9);
        java.util.Locale locale12 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean15 = charSet13.equals((java.lang.Object) localTime14);
        java.util.Locale locale16 = java.util.Locale.US;
        java.util.Locale locale17 = java.util.Locale.US;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.US;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale16, locale20, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        boolean boolean27 = charSet13.containsAll((java.util.Collection<java.util.Locale>) localeList25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25, filteringMode28);
        java.util.Collection<java.util.Locale> localeCollection30 = null;
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray42 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList43);
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean49 = charSet47.equals((java.lang.Object) localTime48);
        java.util.Locale locale50 = java.util.Locale.US;
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.US;
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale50, locale54, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        boolean boolean61 = charSet47.containsAll((java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList59, filteringMode62);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.lang.String[] strArray72 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.lang.String str75 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale locale76 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet77 = locale76.getExtensionKeys();
        org.joda.time.LocalTime localTime78 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean79 = charSet77.equals((java.lang.Object) localTime78);
        java.util.Locale locale80 = java.util.Locale.US;
        java.util.Locale locale81 = java.util.Locale.US;
        java.lang.String str82 = locale80.getDisplayVariant(locale81);
        java.util.Locale locale83 = java.util.Locale.US;
        java.util.Locale locale84 = java.util.Locale.US;
        java.lang.String str85 = locale83.getDisplayVariant(locale84);
        java.util.Locale locale86 = java.util.Locale.TAIWAN;
        java.util.Locale locale87 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale80, locale84, locale86, locale87 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        boolean boolean91 = charSet77.containsAll((java.util.Collection<java.util.Locale>) localeList89);
        java.util.Locale.FilteringMode filteringMode92 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList89, filteringMode92);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList59, filteringMode92);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection30, filteringMode92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime((java.lang.Object) languageRangeList1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode28.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode62.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + filteringMode92 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode92.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeList95);
    }

    @Test
    public void test03342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03342");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-11T09:49:19.074Z");
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test03343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03343");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalDate localDate10 = property7.setCopy((int) 'a');
        org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra((int) (byte) 1);
        int int13 = localDate12.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDate12.getFieldType(44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 44");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
    }

    @Test
    public void test03344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03344");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (short) 10);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        int int27 = dateTimeZone23.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone23);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone23.getName(0L, locale30);
        java.util.Locale.Builder builder33 = builder0.setLocale(locale30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime53);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        mutableDateTime40.setZone(dateTimeZone57);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDateTime35.toDateTime(dateTimeZone57);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = dateTimeZone57.getShortName(1L, locale65);
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.lang.String str73 = nameProvider68.getName(locale70, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str74 = locale65.getDisplayCountry(locale70);
        java.util.Locale.Category category75 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale76 = java.util.Locale.getDefault(category75);
        java.lang.String str77 = locale65.getDisplayScript(locale76);
        java.lang.String str78 = locale65.getLanguage();
        java.util.Locale.Builder builder79 = builder33.setLocale(locale65);
        java.util.Locale locale80 = builder79.build();
        java.util.Locale.Builder builder82 = builder79.setLanguageTag("utc");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder84 = builder79.removeUnicodeLocaleAttribute("2022-02-11T09:51:18.323Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:51:18.323Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572491666L + "'", long17 == 1644572491666L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "United States" + "'", str74, "United States");
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category75.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "en" + "'", str78, "en");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder82);
    }

    @Test
    public void test03345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03345");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setMillis((long) 4);
        java.lang.String str21 = mutableDateTime2.toString();
        int int22 = mutableDateTime2.getYearOfCentury();
        mutableDateTime2.setTime(1644572375330L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.004Z" + "'", str21, "1970-01-01T00:00:00.004Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
    }

    @Test
    public void test03346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03346");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = chronology5.get(readablePeriod6, 1644572455256L, 1644572452461L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test03347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03347");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime.Property property13 = localTime2.millisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property14.roundCeilingCopy();
        int int18 = property14.get();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test03348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03348");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("Feb");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('#', "2022-02-11T09:40:49.988Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03349");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj8 = null;
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(obj8, dateTimeZone10);
        org.joda.time.DateTime dateTime13 = localDateTime5.toDateTime(dateTimeZone10);
        boolean boolean15 = dateTime13.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property16 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime17 = property16.withMaximumValue();
        boolean boolean18 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 86399867 + "'", int19 == 86399867);
    }

    @Test
    public void test03350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03350");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.minusYears(48);
        org.joda.time.LocalDate localDate8 = localDate2.minusMonths(23);
        org.joda.time.Chronology chronology9 = localDate2.getChronology();
        org.joda.time.LocalDate.Property property10 = localDate2.era();
        int int11 = localDate2.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test03351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03351");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 2022);
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withLocale(locale7);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter4.getPrinter();
        boolean boolean10 = dateTimeFormatter4.isOffsetParsed();
        java.lang.Appendable appendable11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime16 = localTime14.minusHours((int) '#');
        org.joda.time.LocalTime localTime18 = localTime16.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime20 = localTime16.withMinuteOfHour(6);
        org.joda.time.LocalTime localTime22 = localTime16.plusSeconds(48);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(appendable11, (org.joda.time.ReadablePartial) localTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test03352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03352");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj6 = null;
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(obj6, dateTimeZone8);
        org.joda.time.DateTime dateTime11 = localDateTime3.toDateTime(dateTimeZone8);
        boolean boolean13 = dateTime11.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMinutes((int) (short) 10);
        long long16 = dateTime15.getMillis();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime15.plusHours((int) (short) 10);
        java.lang.Object obj20 = null;
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj20, dateTimeZone22);
        int int26 = dateTimeZone22.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime27 = dateTime15.toDateTime(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(dateTimeZone22);
        java.lang.String str29 = dateTimeZone22.toString();
        long long33 = dateTimeZone22.convertLocalToUTC(1644572338473L, true, 1644572337093L);
        java.util.Locale locale35 = java.util.Locale.US;
        java.util.Locale.setDefault(locale35);
        java.lang.String str37 = dateTimeZone22.getName(1644572373749L, locale35);
        java.lang.String str38 = locale1.getDisplayVariant(locale35);
        java.lang.String str39 = locale35.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_US");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572492088L + "'", long16 == 1644572492088L);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTC" + "'", str29, "UTC");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572338473L + "'", long33 == 1644572338473L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test03353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03353");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property11.roundCeilingCopy();
        java.util.Locale locale13 = java.util.Locale.getDefault();
        int int14 = property11.getMaximumShortTextLength(locale13);
        java.lang.String str15 = locale0.getDisplayCountry(locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((java.lang.Object) locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test03354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDateTime21.toDateTime(dateTimeZone26);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime29);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        mutableDateTime16.setZone(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime38 = dateTime13.withZoneRetainFields(dateTimeZone33);
        int int39 = dateTime13.getMinuteOfHour();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(obj44, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDateTime41.toDateTime(dateTimeZone46);
        boolean boolean51 = dateTime49.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMinutes((int) (short) 10);
        long long54 = dateTime53.getMillis();
        org.joda.time.DateTime dateTime56 = dateTime53.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime58 = dateTime56.withMillisOfSecond(10);
        org.joda.time.Chronology chronology59 = dateTime58.getChronology();
        org.joda.time.DateTime dateTime60 = dateTime13.toDateTime(chronology59);
        org.joda.time.Chronology chronology61 = chronology59.withUTC();
        org.joda.time.DurationField durationField62 = chronology61.eras();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 41 + "'", int39 == 41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644572492196L + "'", long54 == 1644572492196L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
    }

    @Test
    public void test03355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03355");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(1644572968278L);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test03356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03356");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(obj9, dateTimeZone11);
        org.joda.time.DateTime dateTime14 = localDateTime6.toDateTime(dateTimeZone11);
        boolean boolean16 = dateTime14.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMinutes((int) (short) 10);
        long long19 = dateTime18.getMillis();
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        org.joda.time.DateTime dateTime22 = dateTime18.plusHours((int) (short) 10);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        int int29 = dateTimeZone25.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime30 = dateTime18.toDateTime(dateTimeZone25);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = locale32.getDisplayScript();
        java.lang.String str34 = dateTimeZone25.getName(0L, locale32);
        java.util.Locale.setDefault(category4, locale32);
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = null;
        org.joda.time.format.DateTimeParser dateTimeParser37 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter36, dateTimeParser37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter38.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter38.withZoneUTC();
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withLocale(locale42);
        java.util.Locale.setDefault(category4, locale42);
        java.util.Locale locale45 = java.util.Locale.getDefault(category4);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj50 = null;
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(obj50, dateTimeZone52);
        org.joda.time.DateTime dateTime55 = localDateTime47.toDateTime(dateTimeZone52);
        boolean boolean57 = dateTime55.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime59 = dateTime55.minusMinutes((int) (short) 10);
        long long60 = dateTime59.getMillis();
        org.joda.time.Chronology chronology61 = dateTime59.getChronology();
        org.joda.time.DateTime dateTime63 = dateTime59.plusHours((int) (short) 10);
        java.lang.Object obj64 = null;
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(obj64, dateTimeZone66);
        int int70 = dateTimeZone66.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime71 = dateTime59.toDateTime(dateTimeZone66);
        java.util.Locale locale73 = java.util.Locale.TAIWAN;
        java.lang.String str74 = locale73.getDisplayScript();
        java.lang.String str75 = dateTimeZone66.getName(0L, locale73);
        java.util.Set<java.lang.Character> charSet76 = locale73.getExtensionKeys();
        boolean boolean77 = locale73.hasExtensions();
        java.util.Locale.setDefault(category4, locale73);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(chronology79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.monthOfYear();
        org.joda.time.LocalDateTime localDateTime87 = property85.addToCopy((int) (byte) 1);
        java.util.Locale locale88 = java.util.Locale.ROOT;
        java.lang.String str89 = locale88.getISO3Language();
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("2089-04-16T10:54:56.847Z");
        java.lang.String str92 = locale91.getLanguage();
        java.lang.String str93 = locale88.getDisplayScript(locale91);
        java.lang.String str94 = locale91.toLanguageTag();
        int int95 = property85.getMaximumShortTextLength(locale91);
        boolean boolean96 = locale91.hasExtensions();
        java.util.Locale.setDefault(category4, locale91);
        java.util.Locale locale98 = java.util.Locale.getDefault(category4);
        java.util.Locale.Builder builder99 = builder0.setLocale(locale98);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572492261L + "'", long19 == 1644572492261L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644572492261L + "'", long60 == 1644572492261L);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00" + "'", str75, "+00:00");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "und" + "'", str94, "und");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(locale98);
        org.junit.Assert.assertEquals(locale98.toString(), "");
        org.junit.Assert.assertNotNull(builder99);
    }

    @Test
    public void test03357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03357");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime2.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime2.copy();
        java.lang.String str26 = mutableDateTime25.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.add(1644572413256L);
        org.joda.time.MutableDateTime mutableDateTime30 = property27.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime31 = property27.roundHalfEven();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T01:35:00.010Z" + "'", str26, "2022-02-11T01:35:00.010Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
    }

    @Test
    public void test03358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03358");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate localDate6 = localDate2.withDayOfWeek(6);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate6.dayOfYear();
        java.lang.String str9 = property8.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
    }

    @Test
    public void test03359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03359");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        int int3 = timeZone0.getOffset(1644572333371L);
        boolean boolean4 = timeZone0.observesDaylightTime();
        int int6 = timeZone0.getOffset(1644572342599L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean8 = timeZone0.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = timeZone0.getOffset(35381388, 34809, 435, 34772, 692, (-27403790));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test03360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03360");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays((int) (short) 10);
        org.joda.time.DateTime dateTime14 = dateTime10.minusWeeks((int) (short) 1);
        boolean boolean15 = dateTime14.isAfterNow();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj20 = null;
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj20, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDateTime17.toDateTime(dateTimeZone22);
        boolean boolean27 = dateTime25.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes((int) (short) 10);
        long long30 = dateTime29.getMillis();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.clockhourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime14.withChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfEra();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((java.lang.Object) 1644572345130L, chronology31);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusDays(2024);
        int int40 = localDateTime39.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572492426L + "'", long30 == 1644572492426L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
    }

    @Test
    public void test03361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03361");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:39:21.228Z", "2022-02-11T09:49:43.750Z");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.getScript();
        java.lang.String str5 = locale2.getVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:39:21.228z_2022-02-11T09:49:43.750Z");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test03362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = mutableDateTime2.isSupported(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfMonth(581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 581 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test03363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03363");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate.Property property6 = localDate4.weekOfWeekyear();
        int int7 = localDate4.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate4.plus(readablePeriod8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate4.withDayOfWeek(869);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 869 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test03364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03364");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.LocalTime.Property property13 = localTime2.millisOfSecond();
        org.joda.time.LocalTime.Property property14 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.roundCeilingCopy();
        org.joda.time.LocalTime localTime16 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime18 = property14.getLocalTime();
        org.joda.time.LocalTime localTime19 = property14.withMaximumValue();
        org.joda.time.LocalTime localTime20 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test03365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (short) 10);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        int int27 = dateTimeZone23.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone23);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone23.getName(0L, locale30);
        java.util.Locale.Builder builder33 = builder0.setLocale(locale30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime53);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        mutableDateTime40.setZone(dateTimeZone57);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDateTime35.toDateTime(dateTimeZone57);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = dateTimeZone57.getShortName(1L, locale65);
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.lang.String str73 = nameProvider68.getName(locale70, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str74 = locale65.getDisplayCountry(locale70);
        java.util.Locale.Category category75 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale76 = java.util.Locale.getDefault(category75);
        java.lang.String str77 = locale65.getDisplayScript(locale76);
        java.lang.String str78 = locale65.getLanguage();
        java.util.Locale.Builder builder79 = builder33.setLocale(locale65);
        java.util.Locale locale80 = builder79.build();
        java.util.Locale.Builder builder82 = builder79.setLanguageTag("utc");
        java.util.Locale.Builder builder83 = builder82.clear();
        java.util.Locale.Builder builder84 = builder82.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder87 = builder84.setExtension('a', "2022-02-11T09:39:40.820Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:39:40.820Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572492501L + "'", long17 == 1644572492501L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "United States" + "'", str74, "United States");
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category75.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "en" + "'", str78, "en");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test03366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03366");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.addWrapField(120);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.centuryOfEra();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.millisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj19 = null;
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(obj19, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDateTime16.toDateTime(dateTimeZone21);
        boolean boolean26 = dateTime24.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property27 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime28 = property27.withMaximumValue();
        boolean boolean29 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime28.getWeekyear();
        int int31 = dateTime28.getSecondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime28.plus(1644572342982L);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj40 = null;
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(obj40, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = localDateTime37.toDateTime(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = dateTime45.plusDays((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime45.minusWeeks((int) (short) 1);
        boolean boolean50 = dateTime49.isAfterNow();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDateTime52.toDateTime(dateTimeZone57);
        boolean boolean62 = dateTime60.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime64 = dateTime60.minusMinutes((int) (short) 10);
        long long65 = dateTime64.getMillis();
        org.joda.time.Chronology chronology66 = dateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.era();
        org.joda.time.DateTimeField dateTimeField68 = chronology66.clockhourOfDay();
        org.joda.time.DateTime dateTime69 = dateTime49.withChronology(chronology66);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(1644572330722L, chronology66);
        org.joda.time.DateTimeField dateTimeField71 = chronology66.halfdayOfDay();
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(1644572339746L, chronology66);
        org.joda.time.DateTime dateTime73 = dateTime28.withChronology(chronology66);
        org.joda.time.DateTimeField dateTimeField74 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField75 = chronology66.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setRounding(dateTimeField75, 35350243);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 35350243");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 59 + "'", int31 == 59);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1644572492581L + "'", long65 == 1644572492581L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test03367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03367");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        java.lang.String str3 = dateTimeZone1.getID();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        int int6 = localDate4.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate4.withDayOfYear(476);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 476 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "UTC" + "'", str3, "UTC");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
    }

    @Test
    public void test03368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03368");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("zh");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setLanguageTag("+58:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: +58:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03369");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644572981357L);
    }

    @Test
    public void test03370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03370");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(1644572355182L);
        java.lang.Object obj2 = mutableDateTime1.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfMonth(2017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2017 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "2022-02-11T09:39:15.182Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-11T09:39:15.182Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-11T09:39:15.182Z");
    }

    @Test
    public void test03371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03371");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.lang.Object obj2 = null;
        boolean boolean3 = charSet1.remove(obj2);
        java.util.Locale locale4 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean7 = charSet5.equals((java.lang.Object) localTime6);
        java.util.Locale locale8 = java.util.Locale.US;
        java.util.Locale locale9 = java.util.Locale.US;
        java.lang.String str10 = locale8.getDisplayVariant(locale9);
        java.util.Locale locale11 = java.util.Locale.US;
        java.util.Locale locale12 = java.util.Locale.US;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.util.Locale locale15 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale8, locale12, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        boolean boolean19 = charSet5.containsAll((java.util.Collection<java.util.Locale>) localeList17);
        boolean boolean20 = charSet1.retainAll((java.util.Collection<java.util.Locale>) localeList17);
        java.lang.Character[] charArray23 = new java.lang.Character[] { 'a', ' ' };
        java.util.LinkedHashSet<java.lang.Character> charSet24 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet24, charArray23);
        int int26 = charSet24.size();
        java.lang.Character[] charArray31 = new java.lang.Character[] { ' ', 'u', 'a', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet32 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet32, charArray31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray42 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.lang.String str45 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList43);
        java.util.Locale locale46 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean49 = charSet47.equals((java.lang.Object) localTime48);
        java.util.Locale locale50 = java.util.Locale.US;
        java.util.Locale locale51 = java.util.Locale.US;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.US;
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Locale locale57 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale50, locale54, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        boolean boolean61 = charSet47.containsAll((java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList59, filteringMode62);
        boolean boolean64 = charSet32.retainAll((java.util.Collection<java.util.Locale>) localeList63);
        java.lang.Character[] charArray67 = new java.lang.Character[] { 'a', ' ' };
        java.util.LinkedHashSet<java.lang.Character> charSet68 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet68, charArray67);
        int int70 = charSet68.size();
        java.util.Spliterator<java.lang.Character> charSpliterator71 = charSet68.spliterator();
        boolean boolean72 = charSet68.isEmpty();
        java.util.HashSet[] hashSetArray74 = new java.util.HashSet[3];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.Character>[] charSetArray75 = (java.util.HashSet<java.lang.Character>[]) hashSetArray74;
        charSetArray75[0] = charSet24;
        charSetArray75[1] = charSet32;
        charSetArray75[2] = charSet68;
        java.util.HashSet<java.lang.Character>[] charSetArray82 = charSet1.toArray(charSetArray75);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode62.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertNotNull(charSpliterator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(hashSetArray74);
        org.junit.Assert.assertNotNull(charSetArray75);
        org.junit.Assert.assertNotNull(charSetArray82);
    }

    @Test
    public void test03372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03372");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguage("2022-02-11T09:49:52.286Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:49:52.286Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test03373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03373");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.DateTimeZone dateTimeZone3 = dateTimeFormatter2.getZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.seconds();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekyearOfCentury();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology8);
        org.joda.time.Chronology chronology12 = chronology8.withUTC();
        org.joda.time.DurationField durationField13 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withChronology(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = dateTimeFormatter2.parseMutableDateTime("2022-02-11T09:41:25.904Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test03374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03374");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime18 = dateTime13.plusMinutes(35331916);
        java.lang.String str19 = dateTime18.toString();
        long long20 = dateTime18.getMillis();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("2022-02-11T09:38:49.811Z");
        mutableDateTime22.setMillis((long) 52);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj29 = null;
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(obj29, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDateTime26.toDateTime(dateTimeZone31);
        boolean boolean36 = dateTime34.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes((int) (short) 10);
        long long39 = dateTime38.getMillis();
        java.lang.String str40 = dateTime38.toString();
        org.joda.time.DateTime.Property property41 = dateTime38.hourOfDay();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.monthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = property44.addWrapFieldToCopy((int) (short) 100);
        int int47 = localDateTime46.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDateTime46.getFieldType((int) (short) 1);
        boolean boolean50 = dateTime38.isSupported(dateTimeFieldType49);
        int int51 = mutableDateTime22.get(dateTimeFieldType49);
        org.joda.time.DateTime.Property property52 = dateTime18.property(dateTimeFieldType49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj57 = null;
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(obj57, dateTimeZone59);
        org.joda.time.DateTime dateTime62 = localDateTime54.toDateTime(dateTimeZone59);
        boolean boolean64 = dateTime62.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime66 = dateTime62.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70, (int) (byte) 10);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj77 = null;
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone79);
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime(obj77, dateTimeZone79);
        org.joda.time.DateTime dateTime82 = localDateTime74.toDateTime(dateTimeZone79);
        mutableDateTime69.setDate((org.joda.time.ReadableInstant) dateTime82);
        java.lang.Object obj84 = null;
        java.util.TimeZone timeZone85 = null;
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.forTimeZone(timeZone85);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone86);
        org.joda.time.LocalDateTime localDateTime88 = new org.joda.time.LocalDateTime(obj84, dateTimeZone86);
        mutableDateTime69.setZone(dateTimeZone86);
        java.lang.String str90 = dateTimeZone86.getID();
        org.joda.time.DateTime dateTime91 = dateTime66.withZoneRetainFields(dateTimeZone86);
        org.joda.time.DateTime dateTime93 = dateTime66.plus(1644572350969L);
        long long94 = property52.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DurationFieldType durationFieldType95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime97 = dateTime66.withFieldAdded(durationFieldType95, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572492933L + "'", long14 == 1644572492933L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2089-04-16T10:57:32.933Z" + "'", str19, "2089-04-16T10:57:32.933Z");
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3764487452933L + "'", long20 == 3764487452933L);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1644572492933L + "'", long39 == 1644572492933L);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T09:41:32.933Z" + "'", str40, "2022-02-11T09:41:32.933Z");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "UTC" + "'", str90, "UTC");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 806L + "'", long94 == 806L);
    }

    @Test
    public void test03375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03375");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (short) 10);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        int int27 = dateTimeZone23.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone23);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone23.getName(0L, locale30);
        int int33 = property2.getMaximumTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime34 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime36 = property2.addWrapFieldToCopy(12);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId38 = timeZone37.toZoneId();
        int int40 = timeZone37.getOffset(1644572333371L);
        boolean boolean41 = timeZone37.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.getDefault(category45);
        java.lang.String str49 = nameProvider44.getName(locale46, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getISO3Language();
        java.lang.String str54 = nameProvider44.getName(locale50, "2022-02-11T09:38:57.848Z", "2022-02-11T09:39:08.403Z");
        java.lang.String str55 = dateTimeZone42.getShortName(1644572342420L, locale50);
        int int56 = property2.getMaximumTextLength(locale50);
        java.lang.String str57 = locale50.getDisplayName();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.lang.String str59 = locale58.getDisplayScript();
        java.lang.String str60 = locale58.getISO3Country();
        java.lang.String str61 = locale50.getDisplayScript(locale58);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId63 = timeZone62.toZoneId();
        int int65 = timeZone62.getOffset(1644572333371L);
        boolean boolean66 = timeZone62.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        org.joda.time.tz.NameProvider nameProvider69 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category70 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale71 = java.util.Locale.getDefault(category70);
        java.lang.String str74 = nameProvider69.getName(locale71, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.lang.String str76 = locale75.getISO3Language();
        java.lang.String str79 = nameProvider69.getName(locale75, "2022-02-11T09:38:57.848Z", "2022-02-11T09:39:08.403Z");
        java.lang.String str80 = dateTimeZone67.getShortName(1644572342420L, locale75);
        java.lang.String str81 = locale75.getISO3Country();
        java.lang.String str82 = locale58.getDisplayScript(locale75);
        java.util.Locale locale83 = locale75.stripExtensions();
        java.lang.String str84 = locale75.getVariant();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572492955L + "'", long17 == 1644572492955L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zho" + "'", str51, "zho");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese" + "'", str57, "Chinese");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "TWN" + "'", str60, "TWN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(nameProvider69);
        org.junit.Assert.assertTrue("'" + category70 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category70.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zho" + "'", str76, "zho");
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00" + "'", str80, "+00:00");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test03376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03376");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("Italy");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Italy\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03377");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("zh");
        java.util.Locale.Builder builder5 = builder0.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("italien (Italie)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: italien (Italie) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test03378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03378");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        boolean boolean4 = dateTimeZone1.equals((java.lang.Object) "2022-02-11T09:38:50.385Z");
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        int int7 = dateTimeZone1.getOffsetFromLocal(1644572340138L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test03379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03379");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        boolean boolean5 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withOffsetParsed();
        java.lang.Appendable appendable9 = null;
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate16 = localDate12.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate24 = localDate20.withWeekyear((int) (byte) -1);
        boolean boolean25 = localDate16.equals((java.lang.Object) localDate24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate24.minus(readablePeriod26);
        java.lang.String str28 = localDate27.toString();
        org.joda.time.DurationFieldType durationFieldType29 = null;
        boolean boolean30 = localDate27.isSupported(durationFieldType29);
        org.joda.time.LocalDate localDate32 = localDate27.withYear(35392668);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable9, (org.joda.time.ReadablePartial) localDate27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-0001-02-12" + "'", str28, "-0001-02-12");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test03380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03380");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (short) 10);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        int int27 = dateTimeZone23.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone23);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone23.getName(0L, locale30);
        java.util.Locale.Builder builder33 = builder0.setLocale(locale30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime53);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        mutableDateTime40.setZone(dateTimeZone57);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDateTime35.toDateTime(dateTimeZone57);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = dateTimeZone57.getShortName(1L, locale65);
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.lang.String str73 = nameProvider68.getName(locale70, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str74 = locale65.getDisplayCountry(locale70);
        java.util.Locale.Category category75 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale76 = java.util.Locale.getDefault(category75);
        java.lang.String str77 = locale65.getDisplayScript(locale76);
        java.lang.String str78 = locale65.getLanguage();
        java.util.Locale.Builder builder79 = builder33.setLocale(locale65);
        java.util.Locale locale80 = builder79.build();
        java.util.Locale.Builder builder82 = builder79.setLanguageTag("utc");
        java.util.Locale.Builder builder83 = builder82.clear();
        java.util.Locale.Builder builder84 = builder83.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder86 = builder84.setScript("2089-04-16T10:57:12.341Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2089-04-16T10:57:12.341Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572493284L + "'", long17 == 1644572493284L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "United States" + "'", str74, "United States");
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category75.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "en" + "'", str78, "en");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test03381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03381");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime5 = property4.roundHalfEvenCopy();
        int int6 = localTime5.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localTime5.toString("2022-02-11T07:42:33.456Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test03382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03382");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone(zoneId1);
        int int3 = timeZone2.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        int int6 = timeZone2.getOffset(1644572376779L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
    }

    @Test
    public void test03383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03383");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.dayOfWeek();
        int int11 = localDateTime1.getDayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDateTime13.toDateTime(dateTimeZone18);
        boolean boolean23 = dateTime21.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime25 = dateTime21.minusMinutes((int) (short) 10);
        long long26 = dateTime25.getMillis();
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.era();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology27.days();
        org.joda.time.DurationField durationField31 = chronology27.hours();
        java.lang.Object obj32 = null;
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(obj32, dateTimeZone34);
        int int38 = dateTimeZone34.getOffset((long) (byte) -1);
        boolean boolean39 = dateTimeZone34.isFixed();
        int int41 = dateTimeZone34.getStandardOffset(1644572334551L);
        org.joda.time.Chronology chronology42 = chronology27.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime43 = localDateTime1.toDateTime(dateTimeZone34);
        int int45 = dateTimeZone34.getStandardOffset(1644572369242L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 42 + "'", int11 == 42);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644572493362L + "'", long26 == 1644572493362L);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test03384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03384");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        java.lang.String str5 = localDate2.toString();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = localDate2.withDayOfYear(35461571);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35461571 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11" + "'", str5, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test03385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03385");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(chronology0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = localDate1.withWeekOfWeekyear(158);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 158 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis((-1));
        org.joda.time.DateTime dateTime18 = dateTime16.withMinuteOfHour(59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime18.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test03387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03387");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(2022);
        int int8 = localDate2.getYear();
        org.joda.time.LocalDate localDate10 = localDate2.withYear(35331916);
        org.joda.time.LocalDate.Property property11 = localDate2.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("2022-02-11T09:38:49.811Z");
        mutableDateTime13.setMillis((long) 52);
        int int16 = property11.getDifference((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = property17.addWrapField(35462905);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 625 + "'", int16 == 625);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test03388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03388");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj0, dateTimeZone7);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekyear();
        java.lang.Object obj14 = null;
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj14, dateTimeZone16);
        int int20 = dateTimeZone16.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime21 = localDateTime11.toDateTime(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime21.withDate(35430380, 640, 34864368);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 640 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test03389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03389");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj7 = null;
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj7, dateTimeZone9);
        org.joda.time.DateTime dateTime12 = localDateTime4.toDateTime(dateTimeZone9);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMinutes((int) (short) 10);
        long long17 = dateTime16.getMillis();
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime16.plusHours((int) (short) 10);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        int int27 = dateTimeZone23.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime28 = dateTime16.toDateTime(dateTimeZone23);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.getDisplayScript();
        java.lang.String str32 = dateTimeZone23.getName(0L, locale30);
        java.util.Locale.Builder builder33 = builder0.setLocale(locale30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.monthOfYear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.year();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime53);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        mutableDateTime40.setZone(dateTimeZone57);
        int int62 = dateTimeZone57.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = localDateTime35.toDateTime(dateTimeZone57);
        java.util.Locale locale65 = java.util.Locale.US;
        java.util.Locale.setDefault(locale65);
        java.lang.String str67 = dateTimeZone57.getShortName(1L, locale65);
        org.joda.time.tz.NameProvider nameProvider68 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.getDefault(category69);
        java.lang.String str73 = nameProvider68.getName(locale70, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.lang.String str74 = locale65.getDisplayCountry(locale70);
        java.util.Locale.Category category75 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale76 = java.util.Locale.getDefault(category75);
        java.lang.String str77 = locale65.getDisplayScript(locale76);
        java.lang.String str78 = locale65.getLanguage();
        java.util.Locale.Builder builder79 = builder33.setLocale(locale65);
        java.util.Locale locale80 = builder79.build();
        java.util.Locale.Builder builder82 = builder79.setLanguageTag("utc");
        java.util.Locale.Builder builder83 = builder82.clear();
        java.util.Locale.Builder builder84 = builder83.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder86 = builder83.addUnicodeLocaleAttribute("2022-02-11T09:41:24.166Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:41:24.166Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572493746L + "'", long17 == 1644572493746L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(nameProvider68);
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "United States" + "'", str74, "United States");
        org.junit.Assert.assertTrue("'" + category75 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category75.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "en" + "'", str78, "en");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_US");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test03390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03390");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate14 = localDate10.withWeekyear((int) (byte) -1);
        boolean boolean15 = localDate6.equals((java.lang.Object) localDate14);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalDate localDate17 = localDate14.minus(readablePeriod16);
        int int18 = localDate14.getDayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.monthOfYear();
        org.joda.time.LocalDateTime localDateTime23 = property21.addWrapFieldToCopy((int) (short) 100);
        int int24 = property21.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime27 = property21.addToCopy((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMinutes((int) (byte) -1);
        int int30 = localDateTime27.getCenturyOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.monthOfYear();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.year();
        int int35 = localDateTime32.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusWeeks(2);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withYear(55);
        int int40 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime39.year();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusWeeks(409);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = localDate14.isEqual((org.joda.time.ReadablePartial) localDateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 43 + "'", int18 == 43);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 12 + "'", int24 == 12);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 51 + "'", int35 == 51);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test03391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03391");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfMonth(12);
        int int6 = localDateTime5.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.weekyear();
        java.util.Date date8 = localDateTime5.toDate();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate15 = localDate11.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalDate localDate18 = property16.roundHalfEvenCopy();
        boolean boolean20 = localDate18.equals((java.lang.Object) 1644572333865L);
        org.joda.time.LocalDate localDate22 = localDate18.minusMonths(18);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate29 = localDate25.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property30 = localDate29.yearOfEra();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate37 = localDate33.withWeekyear((int) (byte) -1);
        boolean boolean38 = localDate29.equals((java.lang.Object) localDate37);
        org.joda.time.LocalDate localDate40 = localDate29.minusYears(20);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate47 = localDate43.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property48 = localDate47.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property48.getFieldType();
        org.joda.time.LocalDate.Property property51 = localDate40.property(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate22.property(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = localDateTime5.withField(dateTimeFieldType50, (-27403791));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27403791 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Sat Feb 12 09:51:33 GMT 2022");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test03392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03392");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        int int3 = timeZone0.getOffset(1644572333371L);
        java.util.TimeZone.setDefault(timeZone0);
        int int5 = timeZone0.getRawOffset();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        boolean boolean9 = timeZone7.observesDaylightTime();
        int int11 = timeZone7.getOffset(1644572352863L);
        timeZone7.setRawOffset(35381388);
        boolean boolean14 = timeZone0.hasSameRules(timeZone7);
        java.util.TimeZone.setDefault(timeZone0);
        java.util.TimeZone.setDefault(timeZone0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20, (int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDateTime24.toDateTime(dateTimeZone29);
        mutableDateTime19.setDate((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime35 = dateTime32.minusMillis(9);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.joda.time.DateTime.Property property37 = dateTime36.minuteOfHour();
        org.joda.time.DateTime dateTime39 = property37.setCopy(10);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withPeriodAdded(readablePeriod40, 4044);
        int int43 = dateTime39.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTimeISO();
        mutableDateTime44.setDayOfYear(181);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime44.copy();
        java.util.Date date48 = mutableDateTime44.toDate();
        boolean boolean49 = timeZone0.inDaylightTime(date48);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Thu Jun 30 09:10:33 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test03393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03393");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((-27403789));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test03394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03394");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays((int) (short) 10);
        org.joda.time.DateTime dateTime13 = dateTime9.minusWeeks((int) (short) 1);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime9.toGregorianCalendar();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.monthOfYear();
        org.joda.time.LocalDateTime localDateTime19 = property17.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.Chronology chronology20 = localDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyearOfCentury();
        int int22 = dateTime9.get(dateTimeField21);
        org.joda.time.DateTime dateTime24 = dateTime9.withMillis(1644572346288L);
        java.lang.Object obj25 = null;
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(obj25, dateTimeZone27);
        int int31 = dateTimeZone27.getOffset((long) (byte) -1);
        java.util.Locale locale36 = new java.util.Locale("en_US", "2022-02-11T09:48:50.448Z", "en");
        java.lang.String str37 = locale36.getDisplayLanguage();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj42 = null;
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(obj42, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDateTime39.toDateTime(dateTimeZone44);
        boolean boolean49 = dateTime47.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime51 = dateTime47.minusMinutes((int) (short) 10);
        long long52 = dateTime51.getMillis();
        org.joda.time.Chronology chronology53 = dateTime51.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime51.plusHours((int) (short) 10);
        java.lang.Object obj56 = null;
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(obj56, dateTimeZone58);
        int int62 = dateTimeZone58.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime63 = dateTime51.toDateTime(dateTimeZone58);
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.lang.String str66 = locale65.getDisplayScript();
        java.lang.String str67 = dateTimeZone58.getName(0L, locale65);
        java.util.Set<java.lang.Character> charSet68 = locale65.getExtensionKeys();
        java.lang.String str69 = locale36.getDisplayVariant(locale65);
        java.lang.String str70 = locale36.getDisplayLanguage();
        java.lang.String str71 = dateTimeZone27.getName(1644572343297L, locale36);
        long long74 = dateTimeZone27.convertLocalToUTC(1644572336326L, true);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime76 = dateTime24.withZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology82 = localDateTime79.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.seconds();
        org.joda.time.DurationField durationField84 = chronology82.weeks();
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(1644572377613L, chronology82);
        org.joda.time.DurationField durationField86 = chronology82.hours();
        org.joda.time.DateTime dateTime87 = dateTime76.withChronology(chronology82);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(locale36.toString(), "en_us_2022-02-11T09:48:50.448Z_en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "en_us" + "'", str37, "en_us");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1644572493927L + "'", long52 == 1644572493927L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "en" + "'", str69, "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "en_us" + "'", str70, "en_us");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1644572336326L + "'", long74 == 1644572336326L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test03395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03395");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj5 = null;
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(obj5, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = localDateTime2.toDateTime(dateTimeZone7);
        boolean boolean12 = dateTime10.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes((int) (short) 10);
        long long15 = dateTime14.getMillis();
        java.lang.String str16 = dateTime14.toString();
        org.joda.time.DateTime.Property property17 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime18 = property17.roundCeilingCopy();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.minusYears((int) 'a');
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.plus(readableDuration22);
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime26 = dateTime23.withCenturyOfEra(48);
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(1644572329831L, chronology27);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = chronology27.get(readablePeriod30, 1644572337064L, 1644572368773L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572493974L + "'", long15 == 1644572493974L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:41:33.974Z" + "'", str16, "2022-02-11T09:41:33.974Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test03396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03396");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2089-04-16T10:56:04.739Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2089-04-16t10:56:04.739z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03397");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology5 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 300);
        java.io.Writer writer8 = null;
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime12 = localTime10.minus(readablePeriod11);
        org.joda.time.LocalTime.Property property13 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime15 = property13.setCopy(0);
        org.joda.time.LocalTime localTime16 = property13.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property13.getFieldType();
        org.joda.time.LocalTime localTime18 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = localTime18.minusHours(35350243);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime18.plus(readablePeriod21);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer8, (org.joda.time.ReadablePartial) localTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test03398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03398");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfSecond(10);
        org.joda.time.DateTime dateTime20 = dateTime16.withCenturyOfEra(59);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(10);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMonths(580);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime27.add(readableDuration28, (int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone37);
        boolean boolean42 = dateTime40.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime44 = dateTime40.minusMinutes((int) (short) 10);
        long long45 = dateTime44.getMillis();
        org.joda.time.Chronology chronology46 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime44.plusHours((int) (short) 10);
        java.lang.Object obj49 = null;
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(obj49, dateTimeZone51);
        int int55 = dateTimeZone51.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime56 = dateTime44.toDateTime(dateTimeZone51);
        mutableDateTime27.setZoneRetainFields(dateTimeZone51);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime27.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.roundCeiling();
        int int61 = dateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.DateTime.Property property62 = dateTime22.hourOfDay();
        org.joda.time.DateTime dateTime63 = property62.withMaximumValue();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572494258L + "'", long14 == 1644572494258L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572494258L + "'", long45 == 1644572494258L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test03399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03399");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, (int) (byte) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj14 = null;
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(obj14, dateTimeZone16);
        org.joda.time.DateTime dateTime19 = localDateTime11.toDateTime(dateTimeZone16);
        mutableDateTime6.setDate((org.joda.time.ReadableInstant) dateTime19);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        mutableDateTime6.setZone(dateTimeZone23);
        int int28 = dateTimeZone23.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = localDateTime1.toDateTime(dateTimeZone23);
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = dateTimeZone23.getShortName(1L, locale31);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology40 = localDateTime37.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.seconds();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 49, chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.clockhourOfHalfday();
        org.joda.time.DateTime dateTime45 = dateTime34.withChronology(chronology40);
        org.joda.time.DateTime dateTime47 = dateTime45.minusSeconds(35470347);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test03400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03400");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.LocalDate localDate9 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = localDate13.toDateMidnight();
        org.joda.time.LocalDate localDate16 = localDate13.minusYears(0);
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate19 = localDate13.withWeekyear(279);
        org.joda.time.LocalDate localDate20 = localDate10.withFields((org.joda.time.ReadablePartial) localDate19);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology21.getDateTimeMillis((int) ' ', 589, 35445572, (-27403789), 35389776, 38, 918);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27403789 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2" + "'", str8, "2");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test03401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03401");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.withSecondOfMinute(9);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMinutes(10);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime18.getZone();
        java.lang.String str22 = dateTime18.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572494335L + "'", long14 == 1644572494335L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:31:34.335Z" + "'", str22, "2022-02-11T09:31:34.335Z");
    }

    @Test
    public void test03402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03402");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = property3.get();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, (int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj17 = null;
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(obj17, dateTimeZone19);
        org.joda.time.DateTime dateTime22 = localDateTime14.toDateTime(dateTimeZone19);
        mutableDateTime9.setDate((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime9.add(readableDuration24);
        mutableDateTime9.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime9.setDayOfYear((int) (short) 1);
        mutableDateTime9.addSeconds(4044);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj39 = null;
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(obj39, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDateTime36.toDateTime(dateTimeZone41);
        boolean boolean46 = dateTime44.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMinutes((int) (short) 10);
        long long49 = dateTime48.getMillis();
        org.joda.time.Chronology chronology50 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime48.plusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((int) (short) 100);
        int int55 = dateTime52.getYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj60 = null;
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone62);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(obj60, dateTimeZone62);
        org.joda.time.DateTime dateTime65 = localDateTime57.toDateTime(dateTimeZone62);
        org.joda.time.DateTime.Property property66 = dateTime65.minuteOfHour();
        boolean boolean67 = dateTime52.equals((java.lang.Object) property66);
        java.lang.Object obj68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj73 = null;
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(obj73, dateTimeZone75);
        org.joda.time.DateTime dateTime78 = localDateTime70.toDateTime(dateTimeZone75);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(obj68, dateTimeZone75);
        org.joda.time.DateTime dateTime80 = dateTime52.withZoneRetainFields(dateTimeZone75);
        org.joda.time.DateTime dateTime82 = dateTime80.plusMonths(13);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(chronology83);
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.monthOfYear();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(chronology86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.plusSeconds((int) (byte) -1);
        boolean boolean92 = localDateTime84.isEqual((org.joda.time.ReadablePartial) localDateTime89);
        int int93 = localDateTime84.getHourOfDay();
        org.joda.time.Chronology chronology94 = localDateTime84.getChronology();
        org.joda.time.DateTime dateTime95 = dateTime82.withChronology(chronology94);
        org.joda.time.DateTime dateTime96 = mutableDateTime9.toDateTime(chronology94);
        org.joda.time.DateTimeField dateTimeField97 = chronology94.minuteOfHour();
        org.joda.time.Chronology chronology98 = chronology94.withUTC();
        mutableDateTime6.setChronology(chronology98);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644572494396L + "'", long49 == 1644572494396L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 9 + "'", int93 == 9);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTimeField97);
        org.junit.Assert.assertNotNull(chronology98);
    }

    @Test
    public void test03403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03403");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((java.lang.Object) "2022-02-11T09:49:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-11T09:49:00.000\" is malformed at \"T09:49:00.000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03404");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        boolean boolean7 = dateTimeFormatter4.isParser();
        java.lang.StringBuffer stringBuffer8 = null;
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(stringBuffer8, readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03405");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate localDate3 = localDate1.withYearOfEra(41);
        org.joda.time.LocalDate localDate5 = localDate3.withWeekyear(8022);
        boolean boolean7 = localDate3.equals((java.lang.Object) 1644572385990L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test03406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03406");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter9.withZoneUTC();
        boolean boolean15 = dateTimeFormatter9.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter9.withDefaultYear(49);
        java.lang.StringBuffer stringBuffer18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj23 = null;
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj23, dateTimeZone25);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone25);
        boolean boolean30 = dateTime28.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime32 = dateTime28.minusMinutes((int) (short) 10);
        long long33 = dateTime32.getMillis();
        org.joda.time.Chronology chronology34 = dateTime32.getChronology();
        org.joda.time.DateTime dateTime36 = dateTime32.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutableDateTime39.add(readableDuration40, (int) (byte) 10);
        boolean boolean43 = dateTime32.isBefore((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        boolean boolean55 = dateTime53.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property56 = dateTime53.secondOfDay();
        int int57 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime59 = dateTime53.withMillis(0L);
        org.joda.time.ReadablePeriod readablePeriod60 = null;
        org.joda.time.DateTime dateTime62 = dateTime59.withPeriodAdded(readablePeriod60, 737);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(stringBuffer18, (org.joda.time.ReadableInstant) dateTime62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644572494553L + "'", long33 == 1644572494553L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test03407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03407");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField19 = chronology15.centuries();
        org.joda.time.DurationField durationField20 = chronology15.halfdays();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology15);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        long long25 = chronology15.add(readablePeriod22, 1644572462502L, (-27403791));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572494578L + "'", long14 == 1644572494578L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644572462502L + "'", long25 == 1644572462502L);
    }

    @Test
    public void test03408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03408");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(35347015, 869, 6, 2080);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35347015 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03409");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology15);
        java.lang.Object obj20 = mutableDateTime19.clone();
        int int21 = mutableDateTime19.getMillisOfSecond();
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime19.add(readableDuration22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime19.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime19.era();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDateTime28.toDateTime(dateTimeZone33);
        boolean boolean38 = dateTime36.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes((int) (short) 10);
        long long41 = dateTime40.getMillis();
        org.joda.time.Chronology chronology42 = dateTime40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 'a', chronology42);
        long long49 = chronology42.getDateTimeMillis(1644572332644L, 6, 3, 4, (int) '4');
        org.joda.time.DurationField durationField50 = chronology42.weekyears();
        org.joda.time.DateTimeField dateTimeField51 = chronology42.weekyear();
        int int52 = mutableDateTime19.get(dateTimeField51);
        mutableDateTime19.setMillis(1644572419252L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572494619L + "'", long14 == 1644572494619L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-11T09:51:34.619Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-11T09:51:34.619Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-11T09:51:34.619Z");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 619 + "'", int21 == 619);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644572494619L + "'", long41 == 1644572494619L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644559384052L + "'", long49 == 1644559384052L);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
    }

    @Test
    public void test03410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03410");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTime9.get(dateTimeField13);
        org.joda.time.DateTime dateTime16 = dateTime9.withDayOfYear((int) (byte) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDateTime18.toDateTime(dateTimeZone23);
        boolean boolean28 = dateTime26.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMinutes((int) (short) 10);
        long long31 = dateTime30.getMillis();
        org.joda.time.Chronology chronology32 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.era();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime16.toMutableDateTime(chronology32);
        mutableDateTime35.add(1644572348384L);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.add(durationFieldType38, 35433);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572494643L + "'", long31 == 1644572494643L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test03411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03411");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField3 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addMonths(35350603);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime1.copy();
        mutableDateTime6.setWeekyear(41);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNull(dateTimeField3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test03412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03412");
        java.lang.Character[] charArray2 = new java.lang.Character[] { 'a', ' ' };
        java.util.LinkedHashSet<java.lang.Character> charSet3 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet3, charArray2);
        int int5 = charSet3.size();
        java.util.Spliterator<java.lang.Character> charSpliterator6 = charSet3.spliterator();
        charSet3.clear();
        java.lang.Object[] objArray8 = charSet3.toArray();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate15 = localDate11.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property16 = localDate15.yearOfEra();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate23 = localDate19.withWeekyear((int) (byte) -1);
        boolean boolean24 = localDate15.equals((java.lang.Object) localDate23);
        org.joda.time.LocalDate localDate26 = localDate15.minusYears(20);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = localDate26.toInterval(dateTimeZone27);
        java.lang.String str29 = localDate26.toString();
        boolean boolean30 = charSet3.remove((java.lang.Object) str29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.lang.String[] strArray39 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.lang.String str42 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.LanguageRange languageRange44 = new java.util.Locale.LanguageRange("UTC");
        double double45 = languageRange44.getWeight();
        java.lang.String str46 = languageRange44.getRange();
        double double47 = languageRange44.getWeight();
        java.util.Locale.LanguageRange languageRange49 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange languageRange51 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange languageRange53 = new java.util.Locale.LanguageRange("UTC");
        java.util.Locale.LanguageRange languageRange55 = new java.util.Locale.LanguageRange("UTC");
        double double56 = languageRange55.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] { languageRange44, languageRange49, languageRange51, languageRange53, languageRange55 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.lang.Object obj62 = null;
        boolean boolean63 = charSet61.remove(obj62);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.lang.String[] strArray72 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.lang.String str75 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.lang.String>) strList73);
        boolean boolean76 = charSet61.contains((java.lang.Object) strList73);
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.lang.String>) strList73);
        java.util.Locale.LanguageRange[] languageRangeArray78 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList79 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList79, languageRangeArray78);
        java.lang.String[] strArray86 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList87 = new java.util.ArrayList<java.lang.String>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList87, strArray86);
        java.lang.String str89 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, (java.util.Collection<java.lang.String>) strList87);
        java.util.Collection<java.util.Locale> localeCollection90 = null;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList79, localeCollection90);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList91);
        boolean boolean94 = charSet3.removeAll((java.util.Collection<java.util.Locale>) localeList91);
        java.util.stream.Stream<java.util.Locale> localeStream95 = localeList91.stream();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(charSpliterator6);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-0021-02-12" + "'", str29, "-0021-02-12");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0d + "'", double45 == 1.0d);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "utc" + "'", str46, "utc");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(languageRangeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(localeStream95);
    }

    @Test
    public void test03413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03413");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        int int8 = mutableDateTime7.getYear();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        mutableDateTime7.add(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test03414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03414");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((int) (short) 100);
        int int20 = dateTime17.getYear();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime17.getZone();
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj28 = null;
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(obj28, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localDateTime25.toDateTime(dateTimeZone30);
        boolean boolean35 = dateTime33.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime37 = dateTime33.minusMinutes((int) (short) 10);
        long long38 = dateTime37.getMillis();
        org.joda.time.Chronology chronology39 = dateTime37.getChronology();
        org.joda.time.DateTime dateTime41 = dateTime37.plusHours((int) (short) 10);
        java.lang.Object obj42 = null;
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(obj42, dateTimeZone44);
        int int48 = dateTimeZone44.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime49 = dateTime37.toDateTime(dateTimeZone44);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale51.getDisplayScript();
        java.lang.String str53 = dateTimeZone44.getName(0L, locale51);
        java.util.Locale.setDefault(category23, locale51);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = null;
        org.joda.time.format.DateTimeParser dateTimeParser56 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter55, dateTimeParser56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter57.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter57.withZoneUTC();
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter60.withLocale(locale61);
        java.util.Locale.setDefault(category23, locale61);
        java.util.Locale locale64 = java.util.Locale.getDefault(category23);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj69 = null;
        java.util.TimeZone timeZone70 = null;
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forTimeZone(timeZone70);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone71);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(obj69, dateTimeZone71);
        org.joda.time.DateTime dateTime74 = localDateTime66.toDateTime(dateTimeZone71);
        boolean boolean76 = dateTime74.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime78 = dateTime74.minusMinutes((int) (short) 10);
        long long79 = dateTime78.getMillis();
        org.joda.time.Chronology chronology80 = dateTime78.getChronology();
        org.joda.time.DateTime dateTime82 = dateTime78.plusHours((int) (short) 10);
        java.lang.Object obj83 = null;
        java.util.TimeZone timeZone84 = null;
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forTimeZone(timeZone84);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone85);
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(obj83, dateTimeZone85);
        int int89 = dateTimeZone85.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime90 = dateTime78.toDateTime(dateTimeZone85);
        java.util.Locale locale92 = java.util.Locale.TAIWAN;
        java.lang.String str93 = locale92.getDisplayScript();
        java.lang.String str94 = dateTimeZone85.getName(0L, locale92);
        java.util.Set<java.lang.Character> charSet95 = locale92.getExtensionKeys();
        boolean boolean96 = locale92.hasExtensions();
        java.util.Locale.setDefault(category23, locale92);
        java.lang.String str98 = dateTimeZone21.getShortName(1644572432486L, locale92);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572494860L + "'", long14 == 1644572494860L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1644572494860L + "'", long38 == 1644572494860L);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1644572494860L + "'", long79 == 1644572494860L);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+00:00" + "'", str94, "+00:00");
        org.junit.Assert.assertNotNull(charSet95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "+00:00" + "'", str98, "+00:00");
    }

    @Test
    public void test03415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03415");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime2.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(49);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime19 = localTime16.withPeriodAdded(readablePeriod17, 19);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalTime localTime22 = localTime16.withPeriodAdded(readablePeriod20, 227);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj27 = null;
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(obj27, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localDateTime24.toDateTime(dateTimeZone29);
        boolean boolean34 = dateTime32.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime36 = dateTime32.minusMinutes((int) (short) 10);
        long long37 = dateTime36.getMillis();
        org.joda.time.Chronology chronology38 = dateTime36.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime36.plusHours((int) (short) 10);
        java.lang.Object obj41 = null;
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(obj41, dateTimeZone43);
        int int47 = dateTimeZone43.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime48 = dateTime36.toDateTime(dateTimeZone43);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime55 = property53.addWrapFieldToCopy((int) (short) 100);
        int int56 = localDateTime55.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = localDateTime55.getFieldType((int) (short) 1);
        int int59 = localDateTime50.get(dateTimeFieldType58);
        boolean boolean60 = dateTime36.isSupported(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = localTime22.get(dateTimeFieldType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572494898L + "'", long37 == 1644572494898L);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 4 + "'", int56 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test03416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03416");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
    }

    @Test
    public void test03417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutableDateTime20.add(readablePeriod21, 728);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572494920L + "'", long14 == 1644572494920L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test03418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03418");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test03419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03419");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy((int) (short) 100);
        int int5 = property2.getMaximumValueOverall();
        java.lang.String str6 = property2.toString();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury(35408262);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35408262 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Property[monthOfYear]" + "'", str6, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test03420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03420");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        int int3 = mutableDateTime1.getRoundingMode();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.era();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.hourOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        boolean boolean17 = dateTime15.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((int) (short) 10);
        long long20 = dateTime19.getMillis();
        java.lang.String str21 = dateTime19.toString();
        org.joda.time.DateTime dateTime23 = dateTime19.withDayOfYear((int) (short) 1);
        int int24 = dateTime19.getYearOfCentury();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj29 = null;
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(obj29, dateTimeZone31);
        org.joda.time.DateTime dateTime34 = localDateTime26.toDateTime(dateTimeZone31);
        boolean boolean36 = dateTime34.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime38 = dateTime34.minusMinutes((int) (short) 10);
        long long39 = dateTime38.getMillis();
        org.joda.time.Chronology chronology40 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.yearOfCentury();
        org.joda.time.DurationField durationField43 = chronology40.days();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime19.toMutableDateTime(chronology40);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property47 = dateTime19.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = property47.addToCopy(1644572477600L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1644572477600");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572494996L + "'", long20 == 1644572494996L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11T09:41:34.996Z" + "'", str21, "2022-02-11T09:41:34.996Z");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1644572494997L + "'", long39 == 1644572494997L);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test03421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03421");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.lang.Character[] charArray5 = new java.lang.Character[] { ' ', 'u', 'a', '4' };
        java.util.LinkedHashSet<java.lang.Character> charSet6 = new java.util.LinkedHashSet<java.lang.Character>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.Character>) charSet6, charArray5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray16 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList17);
        java.util.Locale locale20 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean23 = charSet21.equals((java.lang.Object) localTime22);
        java.util.Locale locale24 = java.util.Locale.US;
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale24.getDisplayVariant(locale25);
        java.util.Locale locale27 = java.util.Locale.US;
        java.util.Locale locale28 = java.util.Locale.US;
        java.lang.String str29 = locale27.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray32 = new java.util.Locale[] { locale24, locale28, locale30, locale31 };
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        boolean boolean35 = charSet21.containsAll((java.util.Collection<java.util.Locale>) localeList33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList37 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList33, filteringMode36);
        boolean boolean38 = charSet6.retainAll((java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList37, filteringMode39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode36.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode39.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
    }

    @Test
    public void test03422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03422");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        boolean boolean2 = timeZone0.observesDaylightTime();
        boolean boolean3 = timeZone0.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03423");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfMonth(12);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, (int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.DateTime dateTime21 = localDateTime13.toDateTime(dateTimeZone18);
        mutableDateTime8.setDate((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime8.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfCeiling();
        org.joda.time.DateTime dateTime25 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime24.add(readableDuration26);
        mutableDateTime24.addWeekyears((int) 'x');
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test03424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03424");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays((int) (short) 10);
        boolean boolean13 = dateTime11.isBefore((long) (short) 100);
        org.joda.time.DateTime.Property property14 = dateTime11.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test03425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03425");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime13.minus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis(59);
        org.joda.time.DateTime dateTime23 = dateTime19.withEra(0);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.plus(readableDuration26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = dateTime24.withTime(0, 35372214, (-27403789), 47160000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35372214 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572495168L + "'", long14 == 1644572495168L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test03426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03426");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        mutableDateTime1.setMillis(1644572329999L);
        mutableDateTime1.setMillis(0L);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.era();
        org.joda.time.DurationField durationField7 = property6.getRangeDurationField();
        java.lang.Class<?> wildcardClass8 = property6.getClass();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test03427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03427");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes((int) (short) 10);
        long long21 = dateTime20.getMillis();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.DurationField durationField25 = chronology22.months();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime6.toMutableDateTime(chronology22);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfDay();
        java.util.Locale locale29 = null;
        java.lang.String str30 = property28.getAsShortText(locale29);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572495249L + "'", long21 == 1644572495249L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "591" + "'", str30, "591");
    }

    @Test
    public void test03428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03428");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray11 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.lang.String str14 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList12);
        java.util.Locale locale15 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet16 = locale15.getExtensionKeys();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean18 = charSet16.equals((java.lang.Object) localTime17);
        java.util.Locale locale19 = java.util.Locale.US;
        java.util.Locale locale20 = java.util.Locale.US;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.US;
        java.util.Locale locale23 = java.util.Locale.US;
        java.lang.String str24 = locale22.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale19, locale23, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        boolean boolean30 = charSet16.containsAll((java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale.FilteringMode filteringMode31 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList28, filteringMode31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray41 = new java.lang.String[] { "2022-02-11", "en", "hi!", "en", "" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.lang.String str44 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList42);
        java.util.Locale locale45 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean48 = charSet46.equals((java.lang.Object) localTime47);
        java.util.Locale locale49 = java.util.Locale.US;
        java.util.Locale locale50 = java.util.Locale.US;
        java.lang.String str51 = locale49.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.US;
        java.util.Locale locale53 = java.util.Locale.US;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale49, locale53, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        boolean boolean60 = charSet46.containsAll((java.util.Collection<java.util.Locale>) localeList58);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList58, filteringMode61);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList28, filteringMode61);
        java.util.Locale locale64 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        boolean boolean66 = charSet65.isEmpty();
        java.util.Locale locale67 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet68 = locale67.getExtensionKeys();
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean70 = charSet68.equals((java.lang.Object) localTime69);
        java.util.Locale locale71 = java.util.Locale.US;
        java.util.Locale locale72 = java.util.Locale.US;
        java.lang.String str73 = locale71.getDisplayVariant(locale72);
        java.util.Locale locale74 = java.util.Locale.US;
        java.util.Locale locale75 = java.util.Locale.US;
        java.lang.String str76 = locale74.getDisplayVariant(locale75);
        java.util.Locale locale77 = java.util.Locale.TAIWAN;
        java.util.Locale locale78 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale71, locale75, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        boolean boolean82 = charSet68.containsAll((java.util.Collection<java.util.Locale>) localeList80);
        boolean boolean83 = charSet65.removeAll((java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale84 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap85 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList86 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap85);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + filteringMode31 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode31.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode61.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(locale84);
        org.junit.Assert.assertNotNull(languageRangeList86);
    }

    @Test
    public void test03429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03429");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        int int15 = dateTime13.getSecondOfMinute();
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime.Property property17 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime19 = dateTime13.plus((long) 6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime13.withEra(35455188);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35455188 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572495348L + "'", long14 == 1644572495348L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test03430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03430");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDateTime21.toDateTime(dateTimeZone26);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime29);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        mutableDateTime16.setZone(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime38 = dateTime13.withZoneRetainFields(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime38.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property40 = dateTime38.yearOfEra();
        org.joda.time.DateTime dateTime41 = property40.roundHalfCeilingCopy();
        int int42 = dateTime41.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test03431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03431");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate.Property property4 = localDate3.era();
        org.joda.time.LocalDate localDate6 = localDate3.withDayOfWeek(3);
        org.joda.time.LocalDate localDate8 = localDate6.withWeekyear(100);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate8.minus(readablePeriod9);
        java.lang.String str12 = localDate10.toString("0");
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight15 = localDate10.toDateMidnight(dateTimeZone14);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(1644572365208L, dateTimeZone14);
        org.joda.time.LocalDate localDate18 = localDate16.minusYears(35381388);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = localDate16.toString("2022-02-11T09:40:37.354Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test03432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03432");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology4 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.seconds();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test03433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03433");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone6);
        mutableDateTime7.setMillis((long) 2022);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.dayOfYear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setDateTime((-2051186389), 435, 43, 2006, 353662, (-2022), 28218);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2006 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test03434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03434");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addToCopy(12);
        org.joda.time.LocalDateTime localDateTime6 = property2.addWrapFieldToCopy(10022);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test03435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03435");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate6 = localDate2.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfEra();
        java.lang.Object obj8 = null;
        boolean boolean9 = localDate6.equals(obj8);
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj20 = null;
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj20, dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDateTime17.toDateTime(dateTimeZone22);
        boolean boolean27 = dateTime25.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime29 = dateTime25.minusMinutes((int) (short) 10);
        long long30 = dateTime29.getMillis();
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime29.plusHours((int) (short) 10);
        java.lang.Object obj34 = null;
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(obj34, dateTimeZone36);
        int int40 = dateTimeZone36.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime41 = dateTime29.toDateTime(dateTimeZone36);
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale43.getDisplayScript();
        java.lang.String str45 = dateTimeZone36.getName(0L, locale43);
        int int46 = property15.getMaximumTextLength(locale43);
        org.joda.time.LocalDateTime localDateTime47 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime49 = property15.addWrapFieldToCopy(12);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId51 = timeZone50.toZoneId();
        int int53 = timeZone50.getOffset(1644572333371L);
        boolean boolean54 = timeZone50.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.tz.NameProvider nameProvider57 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale59 = java.util.Locale.getDefault(category58);
        java.lang.String str62 = nameProvider57.getName(locale59, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.lang.String str64 = locale63.getISO3Language();
        java.lang.String str67 = nameProvider57.getName(locale63, "2022-02-11T09:38:57.848Z", "2022-02-11T09:39:08.403Z");
        java.lang.String str68 = dateTimeZone55.getShortName(1644572342420L, locale63);
        int int69 = property15.getMaximumTextLength(locale63);
        java.lang.String str70 = locale63.getDisplayName();
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.lang.String str72 = locale71.getDisplayScript();
        java.lang.String str73 = locale71.getISO3Country();
        java.lang.String str74 = locale63.getDisplayScript(locale71);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId76 = timeZone75.toZoneId();
        int int78 = timeZone75.getOffset(1644572333371L);
        boolean boolean79 = timeZone75.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.tz.NameProvider nameProvider82 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale.Category category83 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale84 = java.util.Locale.getDefault(category83);
        java.lang.String str87 = nameProvider82.getName(locale84, "2022-02-11T09:38:54.738Z", "2022-02-11T09:39:08.384Z");
        java.util.Locale locale88 = java.util.Locale.CHINESE;
        java.lang.String str89 = locale88.getISO3Language();
        java.lang.String str92 = nameProvider82.getName(locale88, "2022-02-11T09:38:57.848Z", "2022-02-11T09:39:08.403Z");
        java.lang.String str93 = dateTimeZone80.getShortName(1644572342420L, locale88);
        java.lang.String str94 = locale88.getISO3Country();
        java.lang.String str95 = locale71.getDisplayScript(locale88);
        java.util.Locale locale96 = locale88.stripExtensions();
        java.lang.String str97 = locale96.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = localDate6.toString("Property[monthOfYear]", locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572495548L + "'", long30 == 1644572495548L);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00" + "'", str45, "+00:00");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(zoneId51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(nameProvider57);
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zho" + "'", str64, "zho");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u4e2d\u6587" + "'", str70, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "TWN" + "'", str73, "TWN");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(zoneId76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(nameProvider82);
        org.junit.Assert.assertTrue("'" + category83 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category83.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "zho" + "'", str89, "zho");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00" + "'", str93, "+00:00");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "zho" + "'", str97, "zho");
    }

    @Test
    public void test03436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03436");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 52);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes((int) (short) 10);
        long long21 = dateTime20.getMillis();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.minutes();
        org.joda.time.DurationField durationField24 = chronology22.weeks();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withChronology(chronology22);
        java.lang.Appendable appendable26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfWeek((int) (byte) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = localDateTime30.getFields();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter25.printTo(appendable26, (org.joda.time.ReadablePartial) localDateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572495580L + "'", long21 == 1644572495580L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test03437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03437");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology10 = localDateTime7.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.seconds();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyearOfCentury();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(35397, 7, 35436485, 13, 1920, 4, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1920 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test03438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03438");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1644572460999L);
    }

    @Test
    public void test03439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03439");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1644572445179L);
    }

    @Test
    public void test03440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minusMillis(9);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = property20.setCopy(10);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 4044);
        int int26 = dateTime22.getYearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime22.minus(1644572366746L);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test03441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03441");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.DateTime dateTime15 = dateTime13.plusYears(9);
        java.lang.Object obj16 = null;
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj16, dateTimeZone18);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.minuteOfHour();
        int int22 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfDay(10);
        boolean boolean25 = dateTime15.equals((java.lang.Object) localDateTime20);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.withDayOfYear(49);
        java.lang.String str28 = localDateTime20.toString();
        org.joda.time.Chronology chronology29 = localDateTime20.getChronology();
        int int30 = localDateTime20.getYear();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localDateTime20.getValue(47160000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 47160000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 42 + "'", int22 == 42);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:51:35.782" + "'", str28, "2022-02-11T09:51:35.782");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
    }

    @Test
    public void test03442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03442");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusYears(35354);
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekOfWeekyear(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime16.withDate(35477639, 35445572, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35445572 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572495831L + "'", long14 == 1644572495831L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test03443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03443");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths(35411);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter9.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDateTime6.toString(dateTimeFormatter13);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
    }

    @Test
    public void test03444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = property16.addToCopy((int) (short) 1);
        int int21 = property16.getMinimumValueOverall();
        org.joda.time.DateTime dateTime22 = property16.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572495901L + "'", long14 == 1644572495901L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:35.901Z" + "'", str15, "2022-02-11T09:41:35.901Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test03445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03445");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(100, 20, 737, 72000000, (int) 'x', 114, 0, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 72000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03446");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis((-1));
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.withPeriodAdded(readablePeriod18, 35381388);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj25 = null;
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(obj25, dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDateTime22.toDateTime(dateTimeZone27);
        boolean boolean32 = dateTime30.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property33 = dateTime30.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfEvenCopy();
        int int35 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = property38.addWrapFieldToCopy((int) (short) 100);
        int int41 = property38.getMaximumValueOverall();
        long long42 = property38.remainder();
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = locale43.getISO3Language();
        int int45 = property38.getMaximumShortTextLength(locale43);
        boolean boolean46 = dateTime20.equals((java.lang.Object) int45);
        org.joda.time.DateTime dateTime47 = dateTime20.toDateTime();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 12 + "'", int41 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 899495948L + "'", long42 == 899495948L);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fra" + "'", str44, "fra");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test03447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03447");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) ' ');
        org.joda.time.ReadablePeriod readablePeriod2 = null;
        org.joda.time.LocalTime localTime3 = localTime1.minus(readablePeriod2);
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes((int) (short) 10);
        org.joda.time.LocalTime.Property property6 = localTime5.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property6.addCopy(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = localTime8.toString("2022-02-11T09:40:27.787Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test03448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03448");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds((int) (byte) -1);
        boolean boolean9 = localDateTime1.isEqual((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusYears(9);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withCenturyOfEra((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withSecondOfMinute(55);
        int int16 = localDateTime15.getYearOfEra();
        int int17 = localDateTime15.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfDay();
        org.joda.time.DurationField durationField19 = property18.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10022 + "'", int16 == 10022);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10022 + "'", int17 == 10022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test03449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03449");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundCeilingCopy();
        org.joda.time.DateTime dateTime18 = property16.roundFloorCopy();
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears((int) 'a');
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((long) 18);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes((int) (short) 10);
        org.joda.time.DateTime.Property property27 = dateTime24.minuteOfHour();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.monthOfYear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.centuryOfEra();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime37.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfFloor();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj45 = null;
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(obj45, dateTimeZone47);
        org.joda.time.DateTime dateTime50 = localDateTime42.toDateTime(dateTimeZone47);
        boolean boolean52 = dateTime50.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property53 = dateTime50.secondOfDay();
        org.joda.time.DateTime dateTime54 = property53.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime54.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime57 = dateTime54.plusMillis((-1));
        org.joda.time.DateTime dateTime58 = dateTime57.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj63 = null;
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone65);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(obj63, dateTimeZone65);
        org.joda.time.DateTime dateTime68 = localDateTime60.toDateTime(dateTimeZone65);
        boolean boolean70 = dateTime68.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime72 = dateTime68.minusMinutes((int) (short) 10);
        long long73 = dateTime72.getMillis();
        java.lang.String str74 = dateTime72.toString();
        org.joda.time.DateTime.Property property75 = dateTime72.hourOfDay();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.monthOfYear();
        org.joda.time.LocalDateTime localDateTime80 = property78.addWrapFieldToCopy((int) (short) 100);
        int int81 = localDateTime80.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = localDateTime80.getFieldType((int) (short) 1);
        boolean boolean84 = dateTime72.isSupported(dateTimeFieldType83);
        org.joda.time.DateTime.Property property85 = dateTime57.property(dateTimeFieldType83);
        int int86 = mutableDateTime40.get(dateTimeFieldType83);
        boolean boolean87 = localDateTime33.isSupported(dateTimeFieldType83);
        org.joda.time.DateTime.Property property88 = dateTime24.property(dateTimeFieldType83);
        org.joda.time.DateTime dateTime90 = dateTime24.minusDays((-2));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572496202L + "'", long14 == 1644572496202L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:36.202Z" + "'", str15, "2022-02-11T09:41:36.202Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1644572496202L + "'", long73 == 1644572496202L);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:41:36.202Z" + "'", str74, "2022-02-11T09:41:36.202Z");
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test03450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03450");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfFloor();
        int int5 = property3.get();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        int int7 = mutableDateTime6.getDayOfYear();
        java.lang.String str8 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfYear();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str8, "1970-01-01T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test03451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03451");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy((int) (short) 100);
        int int5 = property2.getMaximumValueOverall();
        long long6 = property2.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.monthOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds((int) (byte) -1);
        boolean boolean17 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        boolean boolean18 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime9);
        int int19 = localDateTime7.getEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 12 + "'", int5 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 899496287L + "'", long6 == 899496287L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test03452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03452");
        java.util.Locale locale2 = new java.util.Locale("TWN", "6");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "twn_6");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test03453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03453");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, (int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDateTime21.toDateTime(dateTimeZone26);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime29);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        mutableDateTime16.setZone(dateTimeZone33);
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime38 = dateTime13.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = dateTime38.minus(1644572336341L);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime38.withDurationAdded(readableDuration41, 13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTime38.withMinuteOfHour(35398959);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35398959 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test03454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03454");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        boolean boolean15 = property12.isLeap();
        org.joda.time.DurationField durationField16 = property12.getLeapDurationField();
        boolean boolean17 = property12.isLeap();
        org.joda.time.DateTime dateTime19 = property12.addToCopy(1644572342982L);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(12);
        org.joda.time.DateTime dateTime24 = dateTime20.plusMinutes(35421575);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test03455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03455");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime8 = localTime6.plus(readablePeriod7);
        org.joda.time.LocalTime.Property property9 = localTime6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test03456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03456");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime2.setDayOfYear((int) (short) 1);
        mutableDateTime2.setMillis(1644572335842L);
        mutableDateTime2.setWeekOfWeekyear(20);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime2.minuteOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj35 = null;
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj35, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDateTime32.toDateTime(dateTimeZone37);
        boolean boolean42 = dateTime40.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime44 = dateTime40.minusMinutes((int) (short) 10);
        long long45 = dateTime44.getMillis();
        java.lang.String str46 = dateTime44.toString();
        int int47 = dateTime44.getHourOfDay();
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime44.withDayOfWeek(26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1644572496371L + "'", long45 == 1644572496371L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:41:36.371Z" + "'", str46, "2022-02-11T09:41:36.371Z");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
    }

    @Test
    public void test03457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03457");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.removeUnicodeLocaleAttribute("2022-02-11T00:00:00.100Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T00:00:00.100Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03458");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        int int7 = localDateTime5.size();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMillis(2021);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withPeriodAdded(readablePeriod10, 35388348);
        int int13 = localDateTime12.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 51 + "'", int13 == 51);
    }

    @Test
    public void test03459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03459");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.withMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime13.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.roundFloor();
        mutableDateTime18.setYear(35371020);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime23 = property21.add(35378621);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test03460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03460");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.LocalDate localDate7 = localDate2.plusYears(2022);
        int int8 = localDate2.getYear();
        org.joda.time.LocalDate localDate10 = localDate2.minusMonths(55);
        boolean boolean12 = localDate10.equals((java.lang.Object) 1644572387008L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test03461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03461");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        int int4 = localDate2.getYear();
        org.joda.time.LocalDate.Property property5 = localDate2.yearOfCentury();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate localDate12 = localDate8.withWeekyear((int) (byte) -1);
        org.joda.time.LocalDate.Property property13 = localDate12.yearOfEra();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = property13.getFieldType();
        org.joda.time.LocalDate localDate17 = localDate2.withField(dateTimeFieldType15, 59);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property19 = dateTime18.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test03462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03462");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        int int3 = timeZone0.getOffset(1644572333371L);
        boolean boolean4 = timeZone0.observesDaylightTime();
        java.lang.String str5 = timeZone0.getID();
        boolean boolean6 = timeZone0.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test03463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03463");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime2.add(readableDuration17);
        mutableDateTime2.setTime(1, (int) '#', (int) (short) 0, 10);
        mutableDateTime2.setDayOfYear((int) (short) 1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj30 = null;
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(obj30, dateTimeZone32);
        org.joda.time.DateTime dateTime35 = localDateTime27.toDateTime(dateTimeZone32);
        boolean boolean37 = dateTime35.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime39 = dateTime35.minusMinutes((int) (short) 10);
        long long40 = dateTime39.getMillis();
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime39.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47, (int) (byte) 10);
        boolean boolean50 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj55 = null;
        java.util.TimeZone timeZone56 = null;
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone56);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(obj55, dateTimeZone57);
        org.joda.time.DateTime dateTime60 = localDateTime52.toDateTime(dateTimeZone57);
        boolean boolean62 = dateTime60.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property63 = dateTime60.secondOfDay();
        int int64 = dateTime39.compareTo((org.joda.time.ReadableInstant) dateTime60);
        mutableDateTime2.setMillis((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime2.year();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime2.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration69 = null;
        mutableDateTime2.add(readableDuration69, 35366252);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfWeek(35448);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35448 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572496717L + "'", long40 == 1644572496717L);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test03464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusHours((int) (short) 10);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        int int24 = dateTimeZone20.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime25 = dateTime13.toDateTime(dateTimeZone20);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = dateTimeZone20.getName(0L, locale27);
        java.util.Set<java.lang.Character> charSet30 = locale27.getExtensionKeys();
        boolean boolean31 = locale27.hasExtensions();
        java.lang.String str32 = locale27.getLanguage();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572496766L + "'", long14 == 1644572496766L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00" + "'", str29, "+00:00");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
    }

    @Test
    public void test03465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03465");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate localDate6 = localDate2.withDayOfWeek(6);
        int int7 = localDate6.size();
        org.joda.time.LocalDate localDate9 = localDate6.withDayOfMonth(1);
        org.joda.time.LocalDate localDate11 = localDate6.minusWeeks(2020);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate6.withMonthOfYear(35423861);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35423861 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test03466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        int int14 = dateTime9.get(dateTimeField13);
        org.joda.time.DateTime dateTime16 = dateTime9.withDayOfYear((int) (byte) 100);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj21 = null;
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(obj21, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDateTime18.toDateTime(dateTimeZone23);
        boolean boolean28 = dateTime26.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMinutes((int) (short) 10);
        long long31 = dateTime30.getMillis();
        org.joda.time.Chronology chronology32 = dateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.era();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime16.toMutableDateTime(chronology32);
        mutableDateTime35.add(1644572348384L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.setDayOfYear(385);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 385 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572496807L + "'", long31 == 1644572496807L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test03467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03467");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int3 = timeZone0.getRawOffset();
        timeZone0.setRawOffset(11);
        timeZone0.setID("2022-02-11T09:39:27.360Z");
        java.lang.String str8 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "GMT+00:00" + "'", str8, "GMT+00:00");
    }

    @Test
    public void test03468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03468");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(10022, 95, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 95 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03469");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        java.lang.String str15 = dateTime13.toString();
        org.joda.time.DateTime.Property property16 = dateTime13.hourOfDay();
        long long17 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime13.minusMinutes((int) 'u');
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.minusWeeks(88);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        int int25 = dateTime22.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572497032L + "'", long14 == 1644572497032L);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:41:37.032Z" + "'", str15, "2022-02-11T09:41:37.032Z");
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572497032L + "'", long17 == 1644572497032L);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T07:44:37.032Z" + "'", str20, "2022-02-11T07:44:37.032Z");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 44 + "'", int25 == 44);
    }

    @Test
    public void test03470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03470");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime13.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, (int) (byte) 10);
        boolean boolean24 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime20.getZone();
        mutableDateTime20.addMonths((int) ' ');
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime20.hourOfDay();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime31.add(readableDuration32, (int) (byte) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj39 = null;
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(obj39, dateTimeZone41);
        org.joda.time.DateTime dateTime44 = localDateTime36.toDateTime(dateTimeZone41);
        boolean boolean46 = dateTime44.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMinutes((int) (short) 10);
        long long49 = dateTime48.getMillis();
        org.joda.time.Chronology chronology50 = dateTime48.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime48.plusHours((int) (short) 10);
        java.lang.Object obj53 = null;
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(obj53, dateTimeZone55);
        int int59 = dateTimeZone55.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime60 = dateTime48.toDateTime(dateTimeZone55);
        mutableDateTime31.setZoneRetainFields(dateTimeZone55);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(chronology62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj66 = null;
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone68);
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(obj66, dateTimeZone68);
        org.joda.time.DateTime dateTime71 = localDateTime63.toDateTime(dateTimeZone68);
        boolean boolean73 = dateTime71.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime75 = dateTime71.minusMinutes((int) (short) 10);
        long long76 = dateTime75.getMillis();
        org.joda.time.Chronology chronology77 = dateTime75.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.era();
        org.joda.time.DateTimeField dateTimeField79 = chronology77.halfdayOfDay();
        int int80 = mutableDateTime31.get(dateTimeField79);
        mutableDateTime31.addSeconds(0);
        int int83 = property28.compareTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime31.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime85 = property84.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime85.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime85.setDayOfWeek(35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572497092L + "'", long14 == 1644572497092L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644572497093L + "'", long49 == 1644572497093L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1644572497093L + "'", long76 == 1644572497093L);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test03471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03471");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        int int5 = timeZone1.getOffset(1644572352863L);
        timeZone1.setRawOffset(35381388);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = timeZone1.getDisplayName(true, 2080);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 2080");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03472");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) '#');
        org.joda.time.LocalTime localTime6 = localTime4.withMinuteOfHour(0);
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale7.getISO3Language();
        boolean boolean9 = localTime6.equals((java.lang.Object) locale7);
        org.joda.time.LocalTime localTime11 = localTime6.plusMinutes(6);
        org.joda.time.LocalTime localTime13 = localTime11.minusHours(9);
        org.joda.time.DurationFieldType durationFieldType14 = null;
        boolean boolean15 = localTime11.isSupported(durationFieldType14);
        org.joda.time.LocalTime.Property property16 = localTime11.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fra" + "'", str8, "fra");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test03473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03473");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatter4.getPrinter();
        boolean boolean7 = dateTimeFormatter4.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter4.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeFormatter4.parseMillis("ja");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNull(dateTimePrinter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test03474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03474");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.minusMillis(9);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime dateTime22 = property20.setCopy(10);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.plus(readableDuration23);
        int int25 = dateTime22.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 269 + "'", int25 == 269);
    }

    @Test
    public void test03475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03475");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMinutes((int) (short) 10);
        long long14 = dateTime13.getMillis();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMonthOfYear(23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572497372L + "'", long14 == 1644572497372L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test03476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03476");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        timeZone1.setID("2022-02-11T09:40:23.045Z");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("2022-02-11T09:38:54.440Z");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        boolean boolean9 = timeZone1.hasSameRules(timeZone7);
        boolean boolean10 = timeZone7.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test03477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03477");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3, (int) (byte) 10);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localDateTime7.toDateTime(dateTimeZone12);
        boolean boolean17 = dateTime15.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((int) (short) 10);
        long long20 = dateTime19.getMillis();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime19.plusHours((int) (short) 10);
        java.lang.Object obj24 = null;
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(obj24, dateTimeZone26);
        int int30 = dateTimeZone26.getOffset((long) (byte) -1);
        org.joda.time.DateTime dateTime31 = dateTime19.toDateTime(dateTimeZone26);
        mutableDateTime2.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime2.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35, 625);
        java.lang.String str39 = mutableDateTime34.toString("zh");
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj44 = null;
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(obj44, dateTimeZone46);
        org.joda.time.DateTime dateTime49 = localDateTime41.toDateTime(dateTimeZone46);
        boolean boolean51 = dateTime49.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMinutes((int) (short) 10);
        long long54 = dateTime53.getMillis();
        org.joda.time.Chronology chronology55 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.era();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.secondOfDay();
        org.joda.time.DurationField durationField59 = chronology55.centuries();
        org.joda.time.DurationField durationField60 = chronology55.halfdays();
        mutableDateTime34.setChronology(chronology55);
        mutableDateTime34.addDays(35341772);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572497407L + "'", long20 == 1644572497407L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:0012" + "'", str39, "+00:0012");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1644572497407L + "'", long54 == 1644572497407L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test03478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03478");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        boolean boolean11 = dateTime9.equals((java.lang.Object) 10L);
        org.joda.time.DateTime.Property property12 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.DateTime.Property property16 = dateTime14.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime19 = dateTime14.withPeriodAdded(readablePeriod17, (int) 'u');
        org.joda.time.DateTime.Property property20 = dateTime14.yearOfEra();
        java.lang.String str21 = property20.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[yearOfEra]" + "'", str21, "Property[yearOfEra]");
    }

    @Test
    public void test03479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03479");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        boolean boolean3 = timeZone1.observesDaylightTime();
        int int5 = timeZone1.getOffset(1644572352863L);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = timeZone1.getOffset(35437204, (-35331906), 35377170, 1925, 14, 292278994);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 35437204");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test03480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03480");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        int int6 = localDateTime4.getDayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = property9.addWrapFieldToCopy((int) (short) 100);
        int int12 = localDateTime11.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime11.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime4.property(dateTimeFieldType14);
        int int16 = localDateTime4.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime4.minusMonths(0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime4.yearOfEra();
        int int20 = localDateTime4.getYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withEra(35388348);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35388348 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test03481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03481");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        long long8 = dateTimeZone4.convertUTCToLocal(1644572334850L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone4);
        boolean boolean10 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withLocale(locale11);
        int int13 = dateTimeFormatter12.getDefaultYear();
        org.joda.time.Chronology chronology14 = dateTimeFormatter12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime16 = dateTimeFormatter12.parseMutableDateTime("2022-02-11T09:39:45.667Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572334850L + "'", long8 == 1644572334850L);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertNull(chronology14);
    }

    @Test
    public void test03482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03482");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.hourOfDay();
        java.lang.String str8 = property7.getName();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy(1644572345240L);
        org.joda.time.DurationField durationField11 = property7.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hourOfDay" + "'", str8, "hourOfDay");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNull(durationField11);
    }

    @Test
    public void test03483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03483");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        boolean boolean4 = charSet1.contains((java.lang.Object) chronology2);
        java.util.Iterator<java.lang.Character> charItor5 = charSet1.iterator();
        boolean boolean7 = charSet1.remove((java.lang.Object) 1644572339502L);
        boolean boolean9 = charSet1.contains((java.lang.Object) 1644572467485L);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charItor5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test03484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03484");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.monthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusMinutes(35354);
        java.lang.Object obj10 = null;
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj10, dateTimeZone12);
        int int16 = dateTimeZone12.getOffset((long) (byte) -1);
        boolean boolean17 = dateTimeZone12.isFixed();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone12);
        int int19 = mutableDateTime18.getYearOfCentury();
        boolean boolean20 = localDateTime1.equals((java.lang.Object) int19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime1.withDayOfWeek(456);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test03485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03485");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean3 = charSet1.equals((java.lang.Object) localTime2);
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfDay();
        org.joda.time.LocalTime.Property property5 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property5.addCopy(35377170);
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy(3525);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = localTime10.getField(640);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 640");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test03486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03486");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minusYears(48);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime14.add(readableDuration15, (int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj22 = null;
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(obj22, dateTimeZone24);
        org.joda.time.DateTime dateTime27 = localDateTime19.toDateTime(dateTimeZone24);
        mutableDateTime14.setDate((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime14.millisOfSecond();
        org.joda.time.Interval interval30 = property29.toInterval();
        int int31 = property29.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime32 = property29.getMutableDateTime();
        long long33 = mutableDateTime32.getMillis();
        org.joda.time.DateTime dateTime34 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) mutableDateTime32);
        int int35 = localDateTime1.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644537600100L + "'", long33 == 1644537600100L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
    }

    @Test
    public void test03487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03487");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(37, 32, 42, (int) (short) 1, 35407542, 27, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35407542 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03488");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withDayOfWeek((int) (byte) 1);
        org.joda.time.Chronology chronology12 = localDateTime9.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.seconds();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 49, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(35365043, 86399, 35430380, 10022, 181, 2071, 94, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test03489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03489");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(595, (-27403789), 1980, 35437204, 876, 370, 35462905);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35437204 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03490");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay(1L, chronology4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) '#');
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour(0);
        org.joda.time.LocalTime localTime10 = localTime2.withFields((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime2.withHourOfDay((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime2.minus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(49);
        org.joda.time.LocalTime localTime18 = localTime14.plusMinutes(0);
        org.joda.time.LocalTime.Property property19 = localTime18.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = property19.setCopy("2022-02-11T09:39:34.086Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:39:34.086Z\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test03491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03491");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        java.lang.String str5 = localDate2.toString();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks((int) (short) -1);
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.withMinimumValue();
        boolean boolean13 = localDate2.isEqual((org.joda.time.ReadablePartial) localDate12);
        org.joda.time.LocalDate.Property property14 = localDate2.dayOfWeek();
        org.joda.time.LocalDate localDate15 = property14.roundFloorCopy();
        org.joda.time.LocalDate localDate16 = property14.withMinimumValue();
        int int17 = localDate16.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11" + "'", str5, "2022-02-11");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
    }

    @Test
    public void test03492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03492");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withZoneUTC();
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        boolean boolean5 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology9);
        mutableDateTime10.addYears((int) (byte) 10);
        int int13 = mutableDateTime10.getRoundingMode();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj18 = null;
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(obj18, dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDateTime15.toDateTime(dateTimeZone20);
        boolean boolean25 = dateTime23.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime27 = dateTime23.minusMinutes((int) (short) 10);
        long long28 = dateTime27.getMillis();
        org.joda.time.Chronology chronology29 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.era();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology29);
        java.lang.Object obj34 = mutableDateTime33.clone();
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime33.toMutableDateTimeISO();
        mutableDateTime33.add(1644572332644L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutableDateTime40.add(readableDuration41, (int) (byte) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj48 = null;
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(obj48, dateTimeZone50);
        org.joda.time.DateTime dateTime53 = localDateTime45.toDateTime(dateTimeZone50);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = null;
        boolean boolean56 = mutableDateTime40.isSupported(dateTimeFieldType55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime40.weekOfWeekyear();
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime33.year();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime33.monthOfYear();
        mutableDateTime10.setDate((org.joda.time.ReadableInstant) mutableDateTime33);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = dateTimeFormatter7.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime33, "java.io.IOException: 2022-02-11T09:38:54.738Z", 34732078);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1644572497906L + "'", long28 == 1644572497906L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "2022-02-11T09:51:37.906Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2022-02-11T09:51:37.906Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2022-02-11T09:51:37.906Z");
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test03493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03493");
        java.lang.Object obj0 = null;
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(obj0, dateTimeZone2);
        java.util.TimeZone timeZone5 = dateTimeZone2.toTimeZone();
        java.time.ZoneId zoneId6 = timeZone5.toZoneId();
        java.util.TimeZone.setDefault(timeZone5);
        int int8 = timeZone5.getRawOffset();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test03494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03494");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutableDateTime2.add(readableDuration3);
        mutableDateTime2.addDays((int) (short) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj11 = null;
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj11, dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(dateTimeZone13);
        boolean boolean18 = dateTime16.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMinutes((int) (short) 10);
        long long21 = dateTime20.getMillis();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj31 = null;
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(obj31, dateTimeZone33);
        org.joda.time.DateTime dateTime36 = localDateTime28.toDateTime(dateTimeZone33);
        boolean boolean38 = dateTime36.equals((java.lang.Object) 10L);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes((int) (short) 10);
        long long41 = dateTime40.getMillis();
        org.joda.time.Chronology chronology42 = dateTime40.getChronology();
        org.joda.time.DateTime dateTime44 = dateTime40.plusSeconds((int) (short) 100);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (byte) 100, chronology46);
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48, (int) (byte) 10);
        boolean boolean51 = dateTime40.isBefore((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime47.getZone();
        int int53 = mutableDateTime26.compareTo((org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime47.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572497962L + "'", long21 == 1644572497962L);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1644572497962L + "'", long41 == 1644572497962L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test03495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03495");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 1644572386561L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644572386561E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test03496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03496");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguage("zh");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setScript("2022-02-11T09:39:05.982Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:39:05.982Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test03497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03497");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguageTag("Feb");
        java.util.Locale.Builder builder7 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setExtension('u', "2022-02-11T09:39:24.649Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:39:24.649Z [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test03498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03498");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks((int) (short) -1);
        int int5 = localDate4.getCenturyOfEra();
        org.joda.time.LocalDate.Property property6 = localDate4.weekOfWeekyear();
        int int7 = localDate4.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
    }

    @Test
    public void test03499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03499");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek((int) (byte) 1);
        java.lang.Object obj4 = null;
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj4, dateTimeZone6);
        org.joda.time.DateTime dateTime9 = localDateTime1.toDateTime(dateTimeZone6);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays((int) (short) 10);
        boolean boolean13 = dateTime11.isBefore((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime11.withTime((-21), 456, 35403380, 35462905);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -21 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test03500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test03500");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = localDate2.toDateMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate localDate6 = localDate2.withDayOfWeek(6);
        int int7 = localDate6.size();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded(readableDuration9, 3525);
        org.joda.time.DateTime.Property property12 = dateTime8.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11" + "'", str4, "2022-02-11");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }
}

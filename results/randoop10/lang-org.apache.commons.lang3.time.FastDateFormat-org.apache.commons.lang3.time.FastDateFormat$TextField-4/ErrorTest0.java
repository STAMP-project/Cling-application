import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.util.Date date20 = new java.util.Date();
        int int21 = date20.getTimezoneOffset();
        long long22 = date20.getTime();
        boolean boolean23 = timeZone3.inDaylightTime(date20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        int int21 = timeZone3.getOffset(1642835268871L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder19.setLenient(true);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        int int31 = timeZone27.getOffset(1645513657024L);
        timeZone27.setID("fra");
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone27.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone27, locale36);
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone27);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48, locale50);
        calendar51.clear(7);
        calendar51.set(16, (int) (byte) 0);
        java.time.Instant instant57 = calendar51.toInstant();
        boolean boolean59 = calendar51.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str60 = fastDateFormat44.format(calendar51);
        java.lang.Object obj61 = fastDateFormat44.clone();
        java.util.Locale locale62 = fastDateFormat44.getLocale();
        java.lang.String str63 = locale62.getLanguage();
        java.util.Calendar.Builder builder64 = builder41.setLocale(locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar51", (calendar40.compareTo(calendar51) == 0) == calendar40.equals(calendar51));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale22.getDisplayVariant(locale26);
        java.lang.String str28 = locale20.getDisplayVariant(locale22);
        java.lang.String str29 = locale20.getScript();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone3, locale20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.time.ZoneId zoneId20 = timeZone3.toZoneId();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.lang.String str20 = locale16.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        int int39 = calendar33.getFirstDayOfWeek();
        java.lang.String str40 = fastDateFormat26.format(calendar33);
        calendar33.set((int) (short) 100, 37, 2);
        java.lang.String str45 = fastDateFormat22.format(calendar33);
        java.util.Locale locale46 = fastDateFormat22.getLocale();
        boolean boolean47 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.String str48 = fastDateFormat22.getPattern();
        boolean boolean49 = languageRangeList1.remove((java.lang.Object) fastDateFormat22);
        boolean boolean50 = languageRangeList1.isEmpty();
        java.util.Locale locale54 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str55 = locale54.getDisplayCountry();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale54);
        int int57 = calendar56.getFirstDayOfWeek();
        boolean boolean58 = languageRangeList1.remove((java.lang.Object) calendar56);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        int int63 = timeZone59.getOffset(1645513657024L);
        timeZone59.setID("fra");
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone59.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        boolean boolean70 = locale68.hasExtensions();
        java.lang.String str71 = locale68.getDisplayCountry();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone59, locale68);
        java.lang.String str73 = locale68.getDisplayCountry();
        java.lang.String str75 = locale68.getExtension('a');
        java.util.Set<java.lang.String> strSet76 = locale68.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar72", (calendar56.compareTo(calendar72) == 0) == calendar56.equals(calendar72));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        timeZone3.setRawOffset((int) (byte) 1);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone3);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayVariant();
        java.util.Locale.Builder builder23 = builder11.setLocale(locale19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:07:44", timeZone3, locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar20", (calendar9.compareTo(calendar20) == 0) == calendar9.equals(calendar20));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder14 = builder12.setLocale(locale13);
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        timeZone19.setRawOffset((int) (byte) 1);
        boolean boolean24 = timeZone19.observesDaylightTime();
        java.util.Calendar.Builder builder25 = builder14.setTimeZone(timeZone19);
        java.util.Date date29 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date29.setMonth(4);
        java.util.Calendar.Builder builder32 = builder14.setInstant(date29);
        java.util.Calendar.Builder builder34 = builder14.setInstant(1645513674789L);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        int int42 = timeZone38.getOffset(1645513656868L);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        boolean boolean48 = timeZone38.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder49 = builder14.setTimeZone(timeZone38);
        java.util.Locale locale53 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder56 = new java.util.Calendar.Builder();
        java.util.Date date57 = new java.util.Date();
        int int58 = date57.getSeconds();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getTimezoneOffset();
        date59.setMinutes(6);
        boolean boolean63 = date57.after(date59);
        java.util.Calendar.Builder builder64 = builder56.setInstant(date59);
        java.util.Calendar.Builder builder66 = builder64.setInstant((long) 36);
        java.util.Calendar.Builder builder70 = builder66.setWeekDate(17, 37, 6);
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.lang.String str72 = locale71.getLanguage();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone76, locale78);
        java.lang.String str80 = locale71.getDisplayName(locale78);
        java.lang.String str81 = locale78.getDisplayCountry();
        java.util.Calendar.Builder builder82 = builder66.setLocale(locale78);
        java.util.Set<java.lang.String> strSet83 = locale78.getUnicodeLocaleKeys();
        java.lang.String str84 = locale53.getDisplayLanguage(locale78);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone38, locale78);
        boolean boolean86 = attribute0.equals((java.lang.Object) timeZone38);
        timeZone38.setID("chinese (china) (JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0])");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar79", (calendar40.compareTo(calendar79) == 0) == calendar40.equals(calendar79));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        calendar15.clear(7);
        calendar15.set(16, (int) (byte) 0);
        int int21 = calendar15.getFirstDayOfWeek();
        java.lang.String str22 = fastDateFormat8.format(calendar15);
        java.util.TimeZone timeZone23 = calendar15.getTimeZone();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getTimezoneOffset();
        java.util.Date date26 = new java.util.Date();
        java.lang.String str27 = date26.toGMTString();
        boolean boolean28 = date24.before(date26);
        boolean boolean29 = calendar15.after((java.lang.Object) date26);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        calendar36.clear(7);
        calendar36.set(16, (int) (byte) 0);
        java.time.Instant instant42 = calendar36.toInstant();
        java.util.Date date43 = java.util.Date.from(instant42);
        boolean boolean44 = date26.before(date43);
        java.lang.String str45 = fastDateFormat2.format(date26);
        java.util.TimeZone timeZone46 = fastDateFormat2.getTimeZone();
        java.util.Calendar.Builder builder47 = new java.util.Calendar.Builder();
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getSeconds();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getTimezoneOffset();
        date50.setMinutes(6);
        boolean boolean54 = date48.after(date50);
        java.util.Calendar.Builder builder55 = builder47.setInstant(date50);
        java.util.Calendar.Builder builder57 = builder55.setInstant((long) 36);
        java.util.Calendar.Builder builder61 = builder57.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder66 = builder61.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder71 = builder66.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder73 = builder66.setLenient(true);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        int int78 = timeZone74.getOffset(1645513657024L);
        timeZone74.setID("fra");
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone74.hasSameRules(timeZone81);
        java.util.Locale locale83 = java.util.Locale.CHINESE;
        java.lang.String str84 = locale83.getLanguage();
        boolean boolean85 = locale83.hasExtensions();
        java.lang.String str86 = locale83.getDisplayCountry();
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone74, locale83);
        java.util.Calendar.Builder builder88 = builder73.setTimeZone(timeZone74);
        boolean boolean89 = fastDateFormat2.equals((java.lang.Object) builder73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar36 and calendar87", (calendar36.compareTo(calendar87) == 0) == calendar36.equals(calendar87));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayVariant(locale6);
        java.lang.String str8 = locale0.getDisplayVariant(locale2);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale2);
        boolean boolean10 = calendar9.isWeekDateSupported();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone19.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        calendar24.clear(7);
        calendar24.set(16, (int) (byte) 0);
        int int30 = calendar24.getFirstDayOfWeek();
        java.lang.String str31 = fastDateFormat17.format(calendar24);
        calendar24.set((int) (short) 100, 37, 2);
        java.lang.String str36 = fastDateFormat13.format(calendar24);
        java.util.TimeZone timeZone37 = fastDateFormat13.getTimeZone();
        calendar9.setTimeZone(timeZone37);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45, locale47);
        calendar48.clear(7);
        calendar48.set(16, (int) (byte) 0);
        java.time.Instant instant54 = calendar48.toInstant();
        boolean boolean56 = calendar48.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str57 = fastDateFormat41.format(calendar48);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale61, locale62, locale63, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale73, locale74, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList79);
        int int82 = languageRangeList59.lastIndexOf((java.lang.Object) languageRangeList71);
        boolean boolean83 = languageRangeList59.isEmpty();
        java.util.Date date84 = new java.util.Date();
        int int85 = date84.getTimezoneOffset();
        java.util.Date date86 = new java.util.Date();
        java.lang.String str87 = date86.toGMTString();
        boolean boolean88 = date84.before(date86);
        int int89 = languageRangeList59.lastIndexOf((java.lang.Object) date86);
        date86.setMinutes(36);
        java.lang.String str92 = fastDateFormat41.format(date86);
        boolean boolean93 = timeZone37.inDaylightTime(date86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar48", (calendar9.compareTo(calendar48) == 0) == calendar9.equals(calendar48));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.format((-838185410000L));
        java.lang.Object obj6 = fastDateFormat2.clone();
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.Locale locale10 = new java.util.Locale("Nov 1, 34768 12:00:00 AM", "2022-02-22 07:07:55");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone7, locale10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.lang.String str17 = locale12.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getISO3Language();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        calendar28.clear(7);
        calendar28.set(16, (int) (byte) 0);
        java.time.Instant instant34 = calendar28.toInstant();
        boolean boolean36 = calendar28.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str37 = fastDateFormat21.format(calendar28);
        java.lang.Object obj38 = fastDateFormat21.clone();
        java.util.Locale locale39 = fastDateFormat21.getLocale();
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale39.getDisplayName();
        java.lang.String str42 = locale12.getDisplayCountry(locale39);
        java.lang.String str43 = locale12.getDisplayName();
        java.lang.String str44 = locale10.getDisplayCountry(locale12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar28", (calendar11.compareTo(calendar28) == 0) == calendar11.equals(calendar28));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale15.getDisplayName(locale22);
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder10.setLocale(locale22);
        java.util.Set<java.lang.String> strSet27 = locale22.getUnicodeLocaleKeys();
        java.util.Locale locale28 = locale22.stripExtensions();
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = locale29.getDisplayVariant();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale29);
        java.lang.String str32 = locale29.getCountry();
        java.lang.String str33 = locale28.getDisplayName(locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar31", (calendar23.compareTo(calendar31) == 0) == calendar23.equals(calendar31));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset(10);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale10 = builder6.build();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale10);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getSeconds();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        date16.setMinutes(6);
        boolean boolean20 = date14.after(date16);
        java.util.Calendar.Builder builder21 = builder13.setInstant(date16);
        java.util.Calendar.Builder builder23 = builder21.setInstant((long) 36);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder25 = builder23.setLocale(locale24);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        timeZone30.setRawOffset((int) (byte) 1);
        boolean boolean35 = timeZone30.observesDaylightTime();
        java.util.Calendar.Builder builder36 = builder25.setTimeZone(timeZone30);
        java.util.Date date40 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date40.setMonth(4);
        java.util.Calendar.Builder builder43 = builder25.setInstant(date40);
        java.util.Calendar.Builder builder45 = builder25.setInstant(1645513674789L);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone49);
        int int53 = timeZone49.getOffset(1645513656868L);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        boolean boolean59 = timeZone49.hasSameRules(timeZone55);
        java.util.Calendar.Builder builder60 = builder25.setTimeZone(timeZone49);
        java.util.Locale locale64 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str65 = locale64.getDisplayScript();
        java.lang.String str66 = locale64.getDisplayCountry();
        java.util.Calendar.Builder builder67 = new java.util.Calendar.Builder();
        java.util.Date date68 = new java.util.Date();
        int int69 = date68.getSeconds();
        java.util.Date date70 = new java.util.Date();
        int int71 = date70.getTimezoneOffset();
        date70.setMinutes(6);
        boolean boolean74 = date68.after(date70);
        java.util.Calendar.Builder builder75 = builder67.setInstant(date70);
        java.util.Calendar.Builder builder77 = builder75.setInstant((long) 36);
        java.util.Calendar.Builder builder81 = builder77.setWeekDate(17, 37, 6);
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        java.lang.String str83 = locale82.getLanguage();
        java.util.TimeZone timeZone84 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone85 = java.util.TimeZone.getDefault();
        boolean boolean86 = timeZone84.hasSameRules(timeZone85);
        java.util.TimeZone timeZone87 = java.util.TimeZone.getDefault();
        boolean boolean88 = timeZone85.hasSameRules(timeZone87);
        java.util.Locale locale89 = java.util.Locale.CHINA;
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(timeZone87, locale89);
        java.lang.String str91 = locale82.getDisplayName(locale89);
        java.lang.String str92 = locale89.getDisplayCountry();
        java.util.Calendar.Builder builder93 = builder77.setLocale(locale89);
        java.util.Set<java.lang.String> strSet94 = locale89.getUnicodeLocaleKeys();
        java.lang.String str95 = locale64.getDisplayLanguage(locale89);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat96 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone49, locale89);
        boolean boolean97 = timeZone1.hasSameRules(timeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar90", (calendar51.compareTo(calendar90) == 0) == calendar51.equals(calendar90));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(2, 0, 2022);
        java.util.Calendar.Builder builder19 = builder10.setTimeOfDay(0, 7, 0, 32769);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone23);
        int int27 = timeZone23.getOffset(1645513656868L);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        boolean boolean33 = timeZone23.hasSameRules(timeZone29);
        java.lang.String str34 = timeZone23.getID();
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.lang.String str37 = locale36.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale36);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone23, locale36);
        java.util.Calendar.Builder builder40 = builder19.setLocale(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar39", (calendar25.compareTo(calendar39) == 0) == calendar25.equals(calendar39));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset(10);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale10 = builder6.build();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale10);
        java.lang.String str12 = timeZone1.getID();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getSeconds();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        date16.setMinutes(6);
        boolean boolean20 = date14.after(date16);
        java.util.Calendar.Builder builder21 = builder13.setInstant(date16);
        java.util.Calendar.Builder builder23 = builder21.setInstant((long) 36);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone27);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        java.util.Locale locale34 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale34);
        java.util.Calendar.Builder builder36 = builder21.setTimeZone(timeZone30);
        boolean boolean37 = timeZone1.hasSameRules(timeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar29", (calendar11.compareTo(calendar29) == 0) == calendar11.equals(calendar29));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.setMinimalDaysInFirstWeek(15);
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale15);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale22.getDisplayName(locale29);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        java.lang.String str35 = locale29.getISO3Language();
        boolean boolean36 = fastDateFormat21.equals((java.lang.Object) locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str39 = fastDateFormat37.format((long) ' ');
        java.lang.String str41 = fastDateFormat37.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj42 = fastDateFormat37.clone();
        java.util.Locale locale43 = fastDateFormat37.getLocale();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.lang.String str45 = fastDateFormat21.format(calendar44);
        calendar44.clear();
        calendar44.setTimeInMillis((long) 3);
        calendar44.setFirstDayOfWeek(0);
        calendar44.set(58, 50, 45);
        boolean boolean55 = calendar6.after((java.lang.Object) calendar44);
        java.lang.String str56 = calendar44.getCalendarType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar30", (calendar6.compareTo(calendar30) == 0) == calendar6.equals(calendar30));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        calendar7.set(16, (int) (byte) 0);
        int int13 = calendar7.getFirstDayOfWeek();
        int int14 = calendar7.getWeekYear();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        java.util.TimeZone timeZone21 = calendar20.getTimeZone();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        int int26 = timeZone22.getOffset(1645513657024L);
        timeZone22.setID("fra");
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone22.hasSameRules(timeZone29);
        boolean boolean31 = timeZone21.hasSameRules(timeZone29);
        calendar7.setTimeZone(timeZone29);
        java.util.TimeZone.setDefault(timeZone29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone29);
        int int35 = fastDateFormat34.getMaxLengthEstimate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar20", (calendar7.compareTo(calendar20) == 0) == calendar7.equals(calendar20));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone4, locale9);
        java.util.Locale locale11 = java.util.Locale.US;
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        java.lang.String str23 = locale14.getDisplayName(locale21);
        java.lang.String str24 = locale21.getDisplayCountry();
        java.lang.String str25 = locale21.getDisplayScript();
        java.lang.String str26 = timeZone4.getDisplayName(locale21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar22", (calendar13.compareTo(calendar22) == 0) == calendar13.equals(calendar22));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category0, locale2);
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getTimezoneOffset();
        date7.setMinutes(6);
        boolean boolean11 = date5.after(date7);
        java.util.Calendar.Builder builder12 = builder4.setInstant(date7);
        java.util.Calendar.Builder builder14 = builder12.setInstant((long) 36);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder16 = builder14.setLocale(locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        java.lang.String str18 = locale15.getScript();
        java.lang.String str19 = locale15.getISO3Language();
        java.lang.String str20 = locale15.getLanguage();
        java.util.Locale.setDefault(category0, locale15);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.lang.String str33 = locale31.getDisplayVariant();
        boolean boolean34 = locale31.hasExtensions();
        java.lang.String str35 = locale22.getDisplayLanguage(locale31);
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale37 = java.util.Locale.ENGLISH;
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale38.getDisplayCountry();
        java.lang.String str42 = locale38.getDisplayLanguage();
        java.lang.String str43 = locale38.getDisplayLanguage();
        java.lang.String str44 = locale38.toLanguageTag();
        java.lang.String str45 = locale37.getDisplayCountry(locale38);
        java.util.Locale.setDefault(category0, locale38);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.lang.String str49 = locale48.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale48);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale48.getDisplayName(locale51);
        java.lang.String str53 = locale48.getDisplayCountry();
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale48);
        java.util.Locale.setDefault(category0, locale48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar32 and calendar54", (calendar32.compareTo(calendar54) == 0) == calendar32.equals(calendar54));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        calendar7.set(16, (int) (byte) 0);
        int int13 = calendar7.getWeeksInWeekYear();
        calendar7.setFirstDayOfWeek(14);
        calendar7.setFirstDayOfWeek(50);
        java.util.TimeZone timeZone18 = calendar7.getTimeZone();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category19);
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.lang.String str28 = locale23.getDisplayVariant(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale23);
        java.lang.String str30 = locale23.getDisplayVariant();
        java.util.Locale.setDefault(category19, locale23);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getSeconds();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        date35.setMinutes(6);
        boolean boolean39 = date33.after(date35);
        java.util.Calendar.Builder builder40 = builder32.setInstant(date35);
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 36);
        java.util.Calendar.Builder builder46 = builder42.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder50 = builder42.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder54 = builder50.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60, locale62);
        java.lang.String str64 = locale55.getDisplayName(locale62);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = locale62.getDisplayName(locale65);
        java.lang.String str68 = locale62.getISO3Language();
        java.lang.String str69 = locale62.getVariant();
        java.util.Calendar.Builder builder70 = builder54.setLocale(locale62);
        java.util.Locale.setDefault(category19, locale62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale62);
        java.util.Date date78 = new java.util.Date(16, 5, (int) ' ', 40, 1969);
        boolean boolean79 = timeZone18.inDaylightTime(date78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar29", (calendar7.compareTo(calendar29) == 0) == calendar7.equals(calendar29));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange11 = null;
        languageRangeList1.add(0, languageRange11);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        java.lang.StringBuffer stringBuffer18 = null;
        java.lang.StringBuffer stringBuffer19 = fastDateFormat15.format(date16, stringBuffer18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        calendar26.clear(7);
        boolean boolean29 = calendar26.isWeekDateSupported();
        java.util.TimeZone timeZone30 = calendar26.getTimeZone();
        int int32 = calendar26.getMaximum(3);
        java.lang.StringBuffer stringBuffer33 = null;
        java.lang.StringBuffer stringBuffer34 = fastDateFormat15.format(calendar26, stringBuffer33);
        calendar26.clear();
        java.time.Instant instant36 = calendar26.toInstant();
        java.util.Date date43 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date43.setMonth(50400000);
        date43.setMonth(32769);
        java.time.Instant instant48 = date43.toInstant();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.lang.String str56 = locale51.getDisplayCountry(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale51);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone61.hasSameRules(timeZone63);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone63, locale65);
        java.lang.String str67 = locale58.getDisplayName(locale65);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getDisplayName(locale68);
        java.lang.String str71 = locale65.getISO3Language();
        boolean boolean72 = fastDateFormat57.equals((java.lang.Object) locale65);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str75 = fastDateFormat73.format((long) ' ');
        java.lang.String str77 = fastDateFormat73.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj78 = fastDateFormat73.clone();
        java.util.Locale locale79 = fastDateFormat73.getLocale();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = fastDateFormat57.format(calendar80);
        java.time.Instant instant82 = calendar80.toInstant();
        java.util.Calendar.Builder builder83 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder87 = builder83.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar88 = builder83.build();
        int int89 = calendar88.getMinimalDaysInFirstWeek();
        java.time.Instant instant90 = calendar88.toInstant();
        java.time.Instant[] instantArray91 = new java.time.Instant[] { instant36, instant48, instant82, instant90 };
        java.time.Instant[] instantArray92 = languageRangeList1.toArray(instantArray91);
        int int93 = languageRangeList1.size();
        int int94 = languageRangeList1.size();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor95 = languageRangeList1.listIterator();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar66 and calendar80", (calendar66.compareTo(calendar80) == 0) == calendar66.equals(calendar80));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getSeconds();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        boolean boolean8 = date2.after(date4);
        java.util.Calendar.Builder builder9 = builder1.setInstant(date4);
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 36);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder15 = builder13.setLenient(false);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        timeZone18.setRawOffset((int) (byte) 1);
        boolean boolean23 = timeZone18.observesDaylightTime();
        java.util.Calendar.Builder builder24 = builder13.setTimeZone(timeZone18);
        java.util.Date date28 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date28.setMonth(4);
        java.util.Calendar.Builder builder31 = builder13.setInstant(date28);
        java.util.Calendar.Builder builder33 = builder13.setInstant(1645513674789L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        int int41 = timeZone37.getOffset(1645513656868L);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder48 = builder13.setTimeZone(timeZone37);
        java.util.Locale locale52 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getDisplayCountry();
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getSeconds();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        date58.setMinutes(6);
        boolean boolean62 = date56.after(date58);
        java.util.Calendar.Builder builder63 = builder55.setInstant(date58);
        java.util.Calendar.Builder builder65 = builder63.setInstant((long) 36);
        java.util.Calendar.Builder builder69 = builder65.setWeekDate(17, 37, 6);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.lang.String str79 = locale70.getDisplayName(locale77);
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar.Builder builder81 = builder65.setLocale(locale77);
        java.util.Set<java.lang.String> strSet82 = locale77.getUnicodeLocaleKeys();
        java.lang.String str83 = locale52.getDisplayLanguage(locale77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone37, locale77);
        java.util.TimeZone.setDefault(timeZone37);
        java.util.Locale locale87 = java.util.Locale.forLanguageTag("7:08:05 AM UTC");
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(timeZone37, locale87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar78", (calendar39.compareTo(calendar78) == 0) == calendar39.equals(calendar78));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.util.Date date21 = new java.util.Date();
        long long22 = date21.getTime();
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getTimezoneOffset();
        int int25 = date23.getSeconds();
        int int26 = date23.getMinutes();
        long long27 = date23.getTime();
        java.lang.String str28 = date23.toLocaleString();
        boolean boolean29 = date21.before(date23);
        java.time.Instant instant30 = date21.toInstant();
        java.lang.String str31 = fastDateFormat2.format(date21);
        java.lang.String str33 = fastDateFormat2.format((long) 18);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        calendar40.clear(7);
        calendar40.set(16, (int) (byte) 0);
        java.time.Instant instant46 = calendar40.toInstant();
        int int47 = calendar40.getMinimalDaysInFirstWeek();
        java.lang.String str48 = fastDateFormat2.format(calendar40);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone50.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone52, locale54);
        calendar55.clear(7);
        calendar55.set(16, (int) (byte) 0);
        java.time.Instant instant61 = calendar55.toInstant();
        java.util.TimeZone timeZone62 = calendar55.getTimeZone();
        java.util.TimeZone timeZone63 = calendar55.getTimeZone();
        calendar55.setMinimalDaysInFirstWeek((int) (short) 1);
        java.lang.String str66 = fastDateFormat2.format(calendar55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        int int73 = timeZone69.getOffset(1645513657024L);
        timeZone69.setID("fra");
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone69.hasSameRules(timeZone76);
        java.util.Locale locale78 = java.util.Locale.CHINESE;
        java.lang.String str79 = locale78.getLanguage();
        boolean boolean80 = locale78.hasExtensions();
        java.lang.String str81 = locale78.getDisplayCountry();
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone69, locale78);
        boolean boolean83 = fastDateFormat68.equals((java.lang.Object) locale78);
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition(1970);
        java.lang.Object obj87 = fastDateFormat68.parseObject("Italia", parsePosition86);
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition((int) '4');
        parsePosition90.setErrorIndex(0);
        int int93 = parsePosition90.getIndex();
        java.lang.String str94 = parsePosition90.toString();
        int int95 = parsePosition90.getErrorIndex();
        java.lang.Object obj96 = fastDateFormat68.parseObject("7:08:14 AM GMT+00:00", parsePosition90);
        java.lang.Object obj97 = fastDateFormat2.parseObject("22 Feb 2022 07:08:55 GMT", parsePosition90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar82", (calendar9.compareTo(calendar82) == 0) == calendar9.equals(calendar82));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.set(16, (int) (byte) 0);
        int int14 = calendar8.getFirstDayOfWeek();
        int int15 = calendar8.getWeekYear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        int int27 = timeZone23.getOffset(1645513657024L);
        timeZone23.setID("fra");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone23.hasSameRules(timeZone30);
        boolean boolean32 = timeZone22.hasSameRules(timeZone30);
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone30);
        java.util.Locale locale39 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayVariant();
        java.lang.String str44 = locale40.getDisplayLanguage(locale42);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:08:12", timeZone30, locale42);
        int int47 = timeZone30.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar21", (calendar8.compareTo(calendar21) == 0) == calendar8.equals(calendar21));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        java.util.Locale locale11 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1970-01-01 00:00:00", timeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar12", (calendar6.compareTo(calendar12) == 0) == calendar6.equals(calendar12));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.lang.String str14 = locale9.getDisplayCountry();
        java.lang.String str16 = locale9.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale9);
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        calendar28.clear(7);
        calendar28.set(16, (int) (byte) 0);
        java.time.Instant instant34 = calendar28.toInstant();
        boolean boolean36 = calendar28.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str37 = fastDateFormat21.format(calendar28);
        java.lang.Object obj38 = fastDateFormat21.clone();
        java.util.Locale locale39 = fastDateFormat21.getLocale();
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayCountry();
        java.lang.String str47 = locale43.getDisplayLanguage();
        java.lang.String str48 = locale43.getDisplayLanguage();
        java.lang.String str49 = locale39.getDisplayLanguage(locale43);
        boolean boolean50 = calendar18.before((java.lang.Object) locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar28", (calendar13.compareTo(calendar28) == 0) == calendar13.equals(calendar28));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        java.util.TimeZone.setDefault(timeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar34", (calendar10.compareTo(calendar34) == 0) == calendar10.equals(calendar34));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        int int6 = fastDateFormat5.getMaxLengthEstimate();
        java.lang.String str7 = fastDateFormat5.getPattern();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        calendar14.clear(7);
        calendar14.set(16, (int) (byte) 0);
        java.time.Instant instant20 = calendar14.toInstant();
        int int21 = calendar14.getMinimalDaysInFirstWeek();
        int int22 = calendar14.getMinimalDaysInFirstWeek();
        calendar14.add((int) (short) 0, 100);
        calendar14.setMinimalDaysInFirstWeek(38);
        long long28 = calendar14.getTimeInMillis();
        java.lang.String str29 = fastDateFormat5.format(calendar14);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getSeconds();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getTimezoneOffset();
        date33.setMinutes(6);
        boolean boolean37 = date31.after(date33);
        java.util.Calendar.Builder builder38 = builder30.setInstant(date33);
        java.util.Calendar.Builder builder40 = builder38.setInstant((long) 36);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder42 = builder40.setLocale(locale41);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45);
        java.util.Calendar.Builder builder48 = builder40.setTimeZone(timeZone45);
        calendar14.setTimeZone(timeZone45);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        boolean boolean52 = locale50.hasExtensions();
        java.lang.String str53 = locale50.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet54 = locale50.getUnicodeLocaleKeys();
        java.lang.String str55 = locale50.getDisplayLanguage();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone45, locale50);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:09:00", timeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar56", (calendar14.compareTo(calendar56) == 0) == calendar14.equals(calendar56));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        java.time.ZoneId zoneId5 = timeZone0.toZoneId();
        java.util.Locale locale7 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale7);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        int int21 = fastDateFormat20.getMaxLengthEstimate();
        java.lang.String str22 = fastDateFormat20.getPattern();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        calendar29.clear(7);
        calendar29.set(16, (int) (byte) 0);
        java.time.Instant instant35 = calendar29.toInstant();
        int int36 = calendar29.getMinimalDaysInFirstWeek();
        int int37 = calendar29.getMinimalDaysInFirstWeek();
        calendar29.add((int) (short) 0, 100);
        calendar29.setMinimalDaysInFirstWeek(38);
        long long43 = calendar29.getTimeInMillis();
        java.lang.String str44 = fastDateFormat20.format(calendar29);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone48.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.lang.String str54 = locale45.getDisplayName(locale52);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone57.hasSameRules(timeZone59);
        java.util.Locale locale62 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale63 = locale62.stripExtensions();
        java.lang.String str64 = locale62.getScript();
        java.util.Locale locale68 = new java.util.Locale("", "hi!", "");
        java.lang.String str69 = locale62.getDisplayVariant(locale68);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone57, locale68);
        java.lang.String str71 = locale68.getDisplayCountry();
        java.lang.String str72 = locale68.getVariant();
        java.lang.String str73 = locale52.getDisplayCountry(locale68);
        boolean boolean74 = calendar29.after((java.lang.Object) locale52);
        java.lang.String str75 = locale7.getDisplayLanguage(locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar29", (calendar15.compareTo(calendar29) == 0) == calendar15.equals(calendar29));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        java.util.Locale locale3 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale5.getDisplayCountry(locale7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1, locale7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        timeZone12.setRawOffset((int) (byte) 1);
        boolean boolean17 = timeZone12.observesDaylightTime();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone12);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        boolean boolean21 = locale19.hasExtensions();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone12, locale19);
        boolean boolean23 = locale19.hasExtensions();
        java.lang.String str24 = locale7.getDisplayScript(locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar18", (calendar9.compareTo(calendar18) == 0) == calendar9.equals(calendar18));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getSeconds();
        int int9 = date6.getMinutes();
        long long10 = date6.getTime();
        java.lang.String str11 = date6.toLocaleString();
        boolean boolean12 = date4.before(date6);
        java.lang.String str13 = fastDateFormat2.format(date4);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        boolean boolean27 = fastDateFormat2.equals((java.lang.Object) builder24);
        java.util.Calendar calendar28 = builder24.build();
        calendar28.set(292278994, 0, (-46800000), 0, 32772);
        calendar28.setLenient(false);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone40);
        int int44 = timeZone40.getOffset(1645513656868L);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        boolean boolean50 = timeZone40.hasSameRules(timeZone46);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        boolean boolean56 = timeZone46.hasSameRules(timeZone54);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone59);
        boolean boolean62 = timeZone54.hasSameRules(timeZone59);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder63.clear();
        java.util.Locale locale65 = builder64.build();
        java.util.Locale.Builder builder66 = builder64.clearExtensions();
        java.util.Locale locale67 = builder66.build();
        java.util.Set<java.lang.Character> charSet68 = locale67.getExtensionKeys();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone70);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        calendar78.clear(7);
        calendar78.set(16, (int) (byte) 0);
        java.time.Instant instant84 = calendar78.toInstant();
        boolean boolean86 = calendar78.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str87 = fastDateFormat71.format(calendar78);
        java.lang.Object obj88 = fastDateFormat71.clone();
        java.util.Locale locale89 = fastDateFormat71.getLocale();
        java.lang.String str90 = locale89.getLanguage();
        java.lang.String str91 = locale89.getVariant();
        java.lang.String str92 = locale67.getDisplayVariant(locale89);
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone59, locale67);
        calendar28.setTimeZone(timeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar78", (calendar42.compareTo(calendar78) == 0) == calendar42.equals(calendar78));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        java.util.TimeZone timeZone12 = calendar6.getTimeZone();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        boolean boolean20 = timeZone12.hasSameRules(timeZone19);
        boolean boolean21 = timeZone12.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar18", (calendar6.compareTo(calendar18) == 0) == calendar6.equals(calendar18));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.util.TimeZone.setDefault(timeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar12", (calendar8.compareTo(calendar12) == 0) == calendar8.equals(calendar12));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange11 = null;
        languageRangeList1.add(0, languageRange11);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        java.lang.StringBuffer stringBuffer18 = null;
        java.lang.StringBuffer stringBuffer19 = fastDateFormat15.format(date16, stringBuffer18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        calendar26.clear(7);
        boolean boolean29 = calendar26.isWeekDateSupported();
        java.util.TimeZone timeZone30 = calendar26.getTimeZone();
        int int32 = calendar26.getMaximum(3);
        java.lang.StringBuffer stringBuffer33 = null;
        java.lang.StringBuffer stringBuffer34 = fastDateFormat15.format(calendar26, stringBuffer33);
        calendar26.clear();
        java.time.Instant instant36 = calendar26.toInstant();
        java.util.Date date43 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date43.setMonth(50400000);
        date43.setMonth(32769);
        java.time.Instant instant48 = date43.toInstant();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.lang.String str56 = locale51.getDisplayCountry(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale51);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone61.hasSameRules(timeZone63);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone63, locale65);
        java.lang.String str67 = locale58.getDisplayName(locale65);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getDisplayName(locale68);
        java.lang.String str71 = locale65.getISO3Language();
        boolean boolean72 = fastDateFormat57.equals((java.lang.Object) locale65);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str75 = fastDateFormat73.format((long) ' ');
        java.lang.String str77 = fastDateFormat73.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj78 = fastDateFormat73.clone();
        java.util.Locale locale79 = fastDateFormat73.getLocale();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = fastDateFormat57.format(calendar80);
        java.time.Instant instant82 = calendar80.toInstant();
        java.util.Calendar.Builder builder83 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder87 = builder83.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar88 = builder83.build();
        int int89 = calendar88.getMinimalDaysInFirstWeek();
        java.time.Instant instant90 = calendar88.toInstant();
        java.time.Instant[] instantArray91 = new java.time.Instant[] { instant36, instant48, instant82, instant90 };
        java.time.Instant[] instantArray92 = languageRangeList1.toArray(instantArray91);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator93 = languageRangeList1.spliterator();
        boolean boolean94 = languageRangeList1.isEmpty();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar66 and calendar80", (calendar66.compareTo(calendar80) == 0) == calendar66.equals(calendar80));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone.setDefault(timeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar13", (calendar7.compareTo(calendar13) == 0) == calendar7.equals(calendar13));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        calendar19.setMinimalDaysInFirstWeek(44);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        calendar31.clear(7);
        calendar31.set(16, (int) (byte) 0);
        int int37 = calendar31.getFirstDayOfWeek();
        java.lang.String str38 = fastDateFormat24.format(calendar31);
        java.util.TimeZone timeZone39 = calendar31.getTimeZone();
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getTimezoneOffset();
        java.util.Date date42 = new java.util.Date();
        java.lang.String str43 = date42.toGMTString();
        boolean boolean44 = date40.before(date42);
        boolean boolean45 = calendar31.after((java.lang.Object) date42);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49, locale51);
        calendar52.clear(7);
        calendar52.set(16, (int) (byte) 0);
        java.time.Instant instant58 = calendar52.toInstant();
        java.util.Date date59 = java.util.Date.from(instant58);
        boolean boolean60 = date42.before(date59);
        int int61 = date42.getMinutes();
        int int62 = date42.getDay();
        java.time.Instant instant63 = date42.toInstant();
        calendar19.setTime(date42);
        java.lang.String str65 = date42.toGMTString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        calendar7.set(16, (int) (byte) 0);
        int int13 = calendar7.getWeeksInWeekYear();
        calendar7.setFirstDayOfWeek(14);
        calendar7.setFirstDayOfWeek(50);
        java.util.TimeZone timeZone18 = calendar7.getTimeZone();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category19);
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.lang.String str28 = locale23.getDisplayVariant(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale23);
        java.lang.String str30 = locale23.getDisplayVariant();
        java.util.Locale.setDefault(category19, locale23);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getSeconds();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        date35.setMinutes(6);
        boolean boolean39 = date33.after(date35);
        java.util.Calendar.Builder builder40 = builder32.setInstant(date35);
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 36);
        java.util.Calendar.Builder builder46 = builder42.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder50 = builder42.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder54 = builder50.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60, locale62);
        java.lang.String str64 = locale55.getDisplayName(locale62);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = locale62.getDisplayName(locale65);
        java.lang.String str68 = locale62.getISO3Language();
        java.lang.String str69 = locale62.getVariant();
        java.util.Calendar.Builder builder70 = builder54.setLocale(locale62);
        java.util.Locale.setDefault(category19, locale62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale62);
        java.util.Locale locale73 = fastDateFormat72.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar29", (calendar7.compareTo(calendar29) == 0) == calendar7.equals(calendar29));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        calendar7.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        int int20 = timeZone16.getOffset(1645513656868L);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        boolean boolean26 = timeZone16.hasSameRules(timeZone22);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        boolean boolean32 = timeZone22.hasSameRules(timeZone30);
        java.util.Calendar.Builder builder33 = new java.util.Calendar.Builder();
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getSeconds();
        java.util.Date date36 = new java.util.Date();
        int int37 = date36.getTimezoneOffset();
        date36.setMinutes(6);
        boolean boolean40 = date34.after(date36);
        java.util.Calendar.Builder builder41 = builder33.setInstant(date36);
        java.util.Calendar.Builder builder43 = builder41.setInstant((long) 36);
        java.util.Calendar.Builder builder45 = builder43.setLenient(true);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.lang.String str48 = locale47.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale47);
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale47.getDisplayName(locale50);
        java.lang.String str52 = locale47.getDisplayCountry();
        java.lang.String str53 = locale47.getDisplayScript();
        java.util.Calendar.Builder builder54 = builder43.setLocale(locale47);
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale47.getDisplayVariant(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone22, locale47);
        calendar7.setTimeZone(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u53f0\u6e7e\u5730\u533a", timeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar18", (calendar7.compareTo(calendar18) == 0) == calendar7.equals(calendar18));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        java.util.Locale locale3 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale12 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.lang.String str19 = locale12.getDisplayVariant(locale18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone7, locale18);
        boolean boolean21 = timeZone7.observesDaylightTime();
        java.util.Locale locale23 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone7, locale25);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone33);
        int int37 = timeZone33.getOffset(1645513656868L);
        boolean boolean38 = timeZone33.observesDaylightTime();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone33, locale39);
        java.lang.String str41 = locale25.getDisplayLanguage(locale39);
        boolean boolean42 = locale25.hasExtensions();
        java.lang.String str43 = locale3.getDisplayCountry(locale25);
        java.lang.String str44 = locale25.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar40", (calendar35.compareTo(calendar40) == 0) == calendar35.equals(calendar40));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.util.Locale locale16 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str17 = locale9.getDisplayScript(locale16);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale9.getDisplayCountry(locale18);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        calendar32.clear(7);
        calendar32.set(16, (int) (byte) 0);
        java.time.Instant instant38 = calendar32.toInstant();
        boolean boolean40 = calendar32.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str41 = fastDateFormat25.format(calendar32);
        java.lang.String str42 = calendar32.getCalendarType();
        boolean boolean43 = calendar32.isWeekDateSupported();
        java.time.Instant instant44 = calendar32.toInstant();
        int int45 = calendar32.getWeeksInWeekYear();
        java.util.Date date46 = calendar32.getTime();
        calendar32.setFirstDayOfWeek(10);
        boolean boolean49 = calendar32.isWeekDateSupported();
        boolean boolean50 = locale9.equals((java.lang.Object) boolean49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar32", (calendar8.compareTo(calendar32) == 0) == calendar8.equals(calendar32));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = attribute0.toString();
        java.lang.String str4 = attribute0.toString();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone7);
        int int10 = fastDateFormat9.getMaxLengthEstimate();
        java.lang.String str11 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        calendar18.clear(7);
        calendar18.set(16, (int) (byte) 0);
        java.time.Instant instant24 = calendar18.toInstant();
        int int25 = calendar18.getMinimalDaysInFirstWeek();
        int int26 = calendar18.getMinimalDaysInFirstWeek();
        calendar18.add((int) (short) 0, 100);
        calendar18.setMinimalDaysInFirstWeek(38);
        long long32 = calendar18.getTimeInMillis();
        java.lang.String str33 = fastDateFormat9.format(calendar18);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39, locale41);
        java.lang.String str43 = locale34.getDisplayName(locale41);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.Locale locale51 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale51.getScript();
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.lang.String str58 = locale51.getDisplayVariant(locale57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone46, locale57);
        java.lang.String str60 = locale57.getDisplayCountry();
        java.lang.String str61 = locale57.getVariant();
        java.lang.String str62 = locale41.getDisplayCountry(locale57);
        boolean boolean63 = calendar18.after((java.lang.Object) locale41);
        boolean boolean64 = attribute0.equals((java.lang.Object) boolean63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar42", (calendar18.compareTo(calendar42) == 0) == calendar18.equals(calendar42));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        timeZone7.setRawOffset(9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone7);
        java.util.Locale locale13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale13);
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone15);
        java.util.Date date17 = calendar16.getTime();
        date17.setMonth(18);
        java.util.Date date23 = new java.util.Date((int) (short) -1, 0, 16);
        int int24 = date23.getDate();
        java.lang.String str25 = date23.toGMTString();
        boolean boolean26 = date17.after(date23);
        boolean boolean27 = timeZone7.inDaylightTime(date23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar16", (calendar11.compareTo(calendar16) == 0) == calendar11.equals(calendar16));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        calendar6.clear();
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        timeZone9.setID("22 Feb 2022 07:07:46 GMT");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Locale locale22 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale22);
        boolean boolean24 = timeZone9.hasSameRules(timeZone18);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.lang.String str30 = locale25.getDisplayCountry(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder34 = builder32.clear();
        java.util.Locale locale35 = builder32.build();
        java.util.Locale.Builder builder36 = builder32.clear();
        java.util.Locale locale37 = builder36.build();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        java.lang.String str47 = locale38.getDisplayName(locale45);
        java.util.Locale.Builder builder48 = builder36.setLocale(locale38);
        java.util.Locale locale49 = builder36.build();
        java.lang.String str50 = locale29.getDisplayCountry(locale49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone18, locale29);
        int int52 = calendar51.getFirstDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar23", (calendar17.compareTo(calendar23) == 0) == calendar17.equals(calendar23));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        java.util.Locale locale3 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.TAIWAN;
        java.lang.String str6 = locale4.getDisplayLanguage(locale5);
        java.util.Locale locale7 = java.util.Locale.US;
        java.lang.String str8 = locale5.getDisplayCountry(locale7);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1, locale7);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        int int18 = timeZone14.getOffset(1645513656868L);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        boolean boolean24 = timeZone14.hasSameRules(timeZone20);
        java.lang.String str25 = timeZone14.getID();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale27);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone14, locale27);
        boolean boolean31 = timeZone1.hasSameRules(timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar16", (calendar9.compareTo(calendar16) == 0) == calendar9.equals(calendar16));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        java.lang.String str11 = locale9.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        int int21 = calendar9.getWeeksInWeekYear();
        calendar9.set((int) (short) 10, 17);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        calendar31.clear(7);
        boolean boolean34 = calendar31.isWeekDateSupported();
        int int36 = calendar31.getMinimum(4);
        java.util.TimeZone timeZone37 = calendar31.getTimeZone();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone41);
        java.util.TimeZone timeZone44 = calendar43.getTimeZone();
        boolean boolean45 = timeZone37.hasSameRules(timeZone44);
        boolean boolean46 = timeZone37.observesDaylightTime();
        java.lang.String str47 = timeZone37.getID();
        boolean boolean48 = calendar9.equals((java.lang.Object) str47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar43", (calendar31.compareTo(calendar43) == 0) == calendar31.equals(calendar43));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        java.time.Instant instant19 = calendar13.toInstant();
        int int20 = calendar13.getMinimalDaysInFirstWeek();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        calendar13.add((int) (short) 0, 100);
        calendar13.setMinimalDaysInFirstWeek(38);
        long long27 = calendar13.getTimeInMillis();
        java.lang.String str28 = fastDateFormat4.format(calendar13);
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getSeconds();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        date32.setMinutes(6);
        boolean boolean36 = date30.after(date32);
        java.util.Calendar.Builder builder37 = builder29.setInstant(date32);
        java.util.Calendar.Builder builder39 = builder37.setInstant((long) 36);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder41 = builder39.setLocale(locale40);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.util.Calendar.Builder builder47 = builder39.setTimeZone(timeZone44);
        calendar13.setTimeZone(timeZone44);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleKeys();
        java.lang.String str54 = locale49.getDisplayLanguage();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone44, locale49);
        java.util.Locale.Category category56 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category56, locale58);
        java.util.Locale locale60 = locale58.stripExtensions();
        java.lang.String str61 = locale49.getDisplayName(locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar55", (calendar13.compareTo(calendar55) == 0) == calendar13.equals(calendar55));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        int int6 = fastDateFormat4.getMaxLengthEstimate();
        boolean boolean7 = fastDateFormat4.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        calendar18.clear(7);
        calendar18.set(16, (int) (byte) 0);
        java.time.Instant instant24 = calendar18.toInstant();
        boolean boolean26 = calendar18.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str27 = fastDateFormat11.format(calendar18);
        java.lang.Object obj28 = fastDateFormat11.clone();
        java.lang.String str29 = fastDateFormat11.toString();
        java.util.Locale locale30 = fastDateFormat11.getLocale();
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getTimezoneOffset();
        java.util.Date date33 = new java.util.Date();
        java.lang.String str34 = date33.toGMTString();
        boolean boolean35 = date31.before(date33);
        java.lang.String str36 = date33.toLocaleString();
        int int37 = date33.getTimezoneOffset();
        date33.setDate(292278994);
        java.lang.StringBuffer stringBuffer40 = null;
        java.lang.StringBuffer stringBuffer41 = fastDateFormat11.format(date33, stringBuffer40);
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getTimezoneOffset();
        java.util.Date date44 = new java.util.Date();
        java.lang.String str45 = date44.toGMTString();
        boolean boolean46 = date42.before(date44);
        long long47 = date44.getTime();
        java.lang.String str48 = date44.toGMTString();
        java.util.Date date49 = new java.util.Date();
        int int50 = date49.getTimezoneOffset();
        int int51 = date49.getSeconds();
        java.time.Instant instant52 = date49.toInstant();
        int int53 = date49.getDate();
        boolean boolean54 = date44.before(date49);
        java.lang.StringBuffer stringBuffer55 = null;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((int) (byte) 0);
        int int58 = fieldPosition57.getEndIndex();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = locale59.getDisplayCountry();
        boolean boolean63 = fieldPosition57.equals((java.lang.Object) locale59);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone64.hasSameRules(timeZone65);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone65.hasSameRules(timeZone67);
        java.util.Locale locale69 = java.util.Locale.CHINA;
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone67, locale69);
        calendar70.clear(7);
        boolean boolean73 = calendar70.isWeekDateSupported();
        int int74 = calendar70.getMinimalDaysInFirstWeek();
        int int76 = calendar70.getActualMaximum((int) (byte) 1);
        boolean boolean77 = fieldPosition57.equals((java.lang.Object) (byte) 1);
        java.lang.StringBuffer stringBuffer78 = fastDateFormat11.format((java.lang.Object) date44, stringBuffer55, fieldPosition57);
        java.util.TimeZone timeZone79 = fastDateFormat11.getTimeZone();
        boolean boolean80 = timeZone8.hasSameRules(timeZone79);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        boolean boolean83 = timeZone81.hasSameRules(timeZone82);
        java.util.TimeZone timeZone84 = java.util.TimeZone.getDefault();
        boolean boolean85 = timeZone82.hasSameRules(timeZone84);
        java.util.Locale locale86 = java.util.Locale.CHINA;
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone84, locale86);
        calendar87.clear(7);
        calendar87.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone92 = calendar87.getTimeZone();
        boolean boolean93 = timeZone79.hasSameRules(timeZone92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar87", (calendar18.compareTo(calendar87) == 0) == calendar18.equals(calendar87));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        boolean boolean14 = calendar6.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar6.set(17, 9, (int) '#', 0, 10, 17);
        int int22 = calendar6.getWeekYear();
        long long23 = calendar6.getTimeInMillis();
        java.util.Date date24 = calendar6.getTime();
        boolean boolean25 = calendar6.isWeekDateSupported();
        java.lang.String str26 = calendar6.getCalendarType();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone29);
        timeZone29.setRawOffset((int) (byte) 1);
        boolean boolean34 = timeZone29.observesDaylightTime();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone29);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        boolean boolean38 = locale36.hasExtensions();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone29, locale36);
        java.util.Date date40 = calendar39.getTime();
        int int41 = date40.getDate();
        int int42 = date40.getYear();
        calendar6.setTime(date40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar39", (calendar35.compareTo(calendar39) == 0) == calendar35.equals(calendar39));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.toString();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        calendar20.set(16, (int) (byte) 0);
        int int26 = calendar20.getFirstDayOfWeek();
        java.lang.String str27 = fastDateFormat13.format(calendar20);
        calendar20.set((int) (short) 100, 37, 2);
        java.lang.String str32 = fastDateFormat9.format(calendar20);
        java.util.Locale locale33 = fastDateFormat9.getLocale();
        boolean boolean34 = fastDateFormat9.getTimeZoneOverridesCalendar();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition(16);
        parsePosition37.setErrorIndex(5);
        int int40 = parsePosition37.getErrorIndex();
        int int41 = parsePosition37.getErrorIndex();
        java.lang.Object obj42 = fastDateFormat9.parseObject("7:07:43 AM UTC", parsePosition37);
        java.lang.Object obj43 = fastDateFormat2.parseObject("22 Feb 2022 07:07:50 GMT", parsePosition37);
        java.util.TimeZone timeZone44 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone45 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        int int51 = timeZone47.getOffset(1645513657024L);
        timeZone47.setID("fra");
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone47.hasSameRules(timeZone54);
        timeZone54.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone54);
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = locale59.getDisplayCountry();
        java.lang.String str63 = locale59.getDisplayLanguage();
        java.lang.String str64 = locale59.getDisplayLanguage();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone54, locale59);
        timeZone54.setRawOffset((int) (byte) -1);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        boolean boolean71 = locale69.hasExtensions();
        java.lang.String str72 = locale69.getScript();
        java.lang.String str73 = locale68.getDisplayName(locale69);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone54, locale68);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone45, locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar65 and calendar74", (calendar65.compareTo(calendar74) == 0) == calendar65.equals(calendar74));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Set<java.lang.String> strSet25 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet25.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet25.parallelStream();
        boolean boolean28 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray29 = languageRangeList13.toArray();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        languageRangeList33.clear();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor35 = languageRangeList33.listIterator();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39, locale41);
        calendar42.clear(7);
        calendar42.set(16, (int) (byte) 0);
        int int48 = calendar42.getFirstDayOfWeek();
        int int49 = calendar42.getWeekYear();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone51.hasSameRules(timeZone53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone53);
        java.util.TimeZone timeZone56 = calendar55.getTimeZone();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        int int61 = timeZone57.getOffset(1645513657024L);
        timeZone57.setID("fra");
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone57.hasSameRules(timeZone64);
        boolean boolean66 = timeZone56.hasSameRules(timeZone64);
        calendar42.setTimeZone(timeZone64);
        java.util.TimeZone.setDefault(timeZone64);
        java.util.TimeZone[] timeZoneArray69 = new java.util.TimeZone[] { timeZone64 };
        java.util.TimeZone[][] timeZoneArray70 = new java.util.TimeZone[][] { timeZoneArray69 };
        java.util.TimeZone[][] timeZoneArray71 = languageRangeList33.toArray(timeZoneArray70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar55", (calendar42.compareTo(calendar55) == 0) == calendar42.equals(calendar55));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        int int20 = timeZone16.getOffset(1645513656868L);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        boolean boolean26 = timeZone16.hasSameRules(timeZone22);
        timeZone22.setRawOffset(6);
        timeZone22.setRawOffset((int) '#');
        java.util.Calendar.Builder builder31 = builder12.setTimeZone(timeZone22);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        calendar38.clear(7);
        boolean boolean41 = calendar38.isWeekDateSupported();
        int int43 = calendar38.getMinimum(4);
        java.util.TimeZone timeZone44 = calendar38.getTimeZone();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone47);
        timeZone47.setRawOffset((int) (byte) 1);
        boolean boolean52 = timeZone47.observesDaylightTime();
        boolean boolean53 = timeZone47.observesDaylightTime();
        boolean boolean54 = timeZone44.hasSameRules(timeZone47);
        boolean boolean55 = timeZone22.hasSameRules(timeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar38", (calendar18.compareTo(calendar38) == 0) == calendar18.equals(calendar38));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getSeconds();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        boolean boolean8 = date2.after(date4);
        java.util.Calendar.Builder builder9 = builder1.setInstant(date4);
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 36);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder15 = builder13.setLenient(false);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        timeZone18.setRawOffset((int) (byte) 1);
        boolean boolean23 = timeZone18.observesDaylightTime();
        java.util.Calendar.Builder builder24 = builder13.setTimeZone(timeZone18);
        java.util.Date date28 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date28.setMonth(4);
        java.util.Calendar.Builder builder31 = builder13.setInstant(date28);
        java.util.Calendar.Builder builder33 = builder13.setInstant(1645513674789L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        int int41 = timeZone37.getOffset(1645513656868L);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder48 = builder13.setTimeZone(timeZone37);
        java.util.Locale locale52 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getDisplayCountry();
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getSeconds();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        date58.setMinutes(6);
        boolean boolean62 = date56.after(date58);
        java.util.Calendar.Builder builder63 = builder55.setInstant(date58);
        java.util.Calendar.Builder builder65 = builder63.setInstant((long) 36);
        java.util.Calendar.Builder builder69 = builder65.setWeekDate(17, 37, 6);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.lang.String str79 = locale70.getDisplayName(locale77);
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar.Builder builder81 = builder65.setLocale(locale77);
        java.util.Set<java.lang.String> strSet82 = locale77.getUnicodeLocaleKeys();
        java.lang.String str83 = locale52.getDisplayLanguage(locale77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone37, locale77);
        java.util.Locale locale85 = fastDateFormat84.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar78", (calendar39.compareTo(calendar78) == 0) == calendar39.equals(calendar78));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone25);
        java.util.TimeZone.setDefault(timeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar34", (calendar10.compareTo(calendar34) == 0) == calendar10.equals(calendar34));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        int int19 = timeZone15.getOffset(1645513656868L);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        boolean boolean25 = timeZone15.hasSameRules(timeZone21);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        boolean boolean31 = timeZone21.hasSameRules(timeZone29);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getSeconds();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        date35.setMinutes(6);
        boolean boolean39 = date33.after(date35);
        java.util.Calendar.Builder builder40 = builder32.setInstant(date35);
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 36);
        java.util.Calendar.Builder builder44 = builder42.setLenient(true);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = locale46.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.lang.String str50 = locale46.getDisplayName(locale49);
        java.lang.String str51 = locale46.getDisplayCountry();
        java.lang.String str52 = locale46.getDisplayScript();
        java.util.Calendar.Builder builder53 = builder42.setLocale(locale46);
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale46.getDisplayVariant(locale54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21, locale46);
        calendar6.setTimeZone(timeZone21);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Locale locale64 = new java.util.Locale("", "hi!", "");
        java.lang.String str65 = locale60.getDisplayVariant(locale64);
        java.lang.String str66 = locale58.getDisplayVariant(locale60);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale60);
        boolean boolean68 = calendar67.isWeekDateSupported();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone70);
        java.lang.String str72 = fastDateFormat71.toString();
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone77.hasSameRules(timeZone79);
        java.util.Locale locale81 = java.util.Locale.CHINA;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone79, locale81);
        calendar82.clear(7);
        calendar82.set(16, (int) (byte) 0);
        int int88 = calendar82.getFirstDayOfWeek();
        java.lang.String str89 = fastDateFormat75.format(calendar82);
        calendar82.set((int) (short) 100, 37, 2);
        java.lang.String str94 = fastDateFormat71.format(calendar82);
        java.util.TimeZone timeZone95 = fastDateFormat71.getTimeZone();
        calendar67.setTimeZone(timeZone95);
        java.util.TimeZone timeZone97 = calendar67.getTimeZone();
        boolean boolean98 = timeZone21.hasSameRules(timeZone97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar17", (calendar6.compareTo(calendar17) == 0) == calendar6.equals(calendar17));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        boolean boolean29 = timeZone17.hasSameRules(timeZone25);
        java.util.Locale locale31 = new java.util.Locale("Chinese (China)");
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Set<java.lang.Character> charSet33 = locale31.getExtensionKeys();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone17, locale31);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("2022-2-22 7:07:59");
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone36);
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getTimezoneOffset();
        java.util.Date date40 = new java.util.Date();
        java.lang.String str41 = date40.toGMTString();
        boolean boolean42 = date38.before(date40);
        long long43 = date40.getTime();
        java.lang.String str44 = date40.toGMTString();
        java.util.Date date45 = new java.util.Date();
        int int46 = date45.getTimezoneOffset();
        int int47 = date45.getSeconds();
        java.time.Instant instant48 = date45.toInstant();
        int int49 = date45.getDate();
        boolean boolean50 = date40.before(date45);
        calendar37.setTime(date45);
        boolean boolean52 = timeZone17.inDaylightTime(date45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar37", (calendar34.compareTo(calendar37) == 0) == calendar34.equals(calendar37));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        java.time.Instant instant19 = calendar13.toInstant();
        int int20 = calendar13.getMinimalDaysInFirstWeek();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        calendar13.add((int) (short) 0, 100);
        calendar13.setMinimalDaysInFirstWeek(38);
        long long27 = calendar13.getTimeInMillis();
        java.lang.String str28 = fastDateFormat4.format(calendar13);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.lang.String str38 = locale29.getDisplayName(locale36);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale46 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale46.getScript();
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "");
        java.lang.String str53 = locale46.getDisplayVariant(locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone41, locale52);
        java.lang.String str55 = locale52.getDisplayCountry();
        java.lang.String str56 = locale52.getVariant();
        java.lang.String str57 = locale36.getDisplayCountry(locale52);
        boolean boolean58 = calendar13.after((java.lang.Object) locale36);
        java.lang.String str60 = locale36.getExtension('a');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar37", (calendar13.compareTo(calendar37) == 0) == calendar13.equals(calendar37));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        java.util.Date date1 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMinutes();
        date15.setHours(43);
        date15.setSeconds(130);
        boolean boolean21 = date1.after(date15);
        int int22 = date1.getTimezoneOffset();
        date1.setDate(16);
        int int25 = date1.getYear();
        date1.setDate(6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar14", (calendar10.compareTo(calendar14) == 0) == calendar10.equals(calendar14));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.util.Date date13 = calendar12.getTime();
        calendar12.setLenient(true);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.lang.String str24 = locale19.getDisplayVariant(locale23);
        java.lang.String str25 = locale17.getDisplayVariant(locale19);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale19);
        java.util.Set<java.lang.Character> charSet27 = locale19.getExtensionKeys();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale19);
        java.lang.Object obj29 = fastDateFormat28.clone();
        boolean boolean30 = calendar12.equals((java.lang.Object) fastDateFormat28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar26", (calendar8.compareTo(calendar26) == 0) == calendar8.equals(calendar26));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder9.clear();
        java.util.Locale locale12 = builder9.build();
        java.lang.String str13 = locale12.getLanguage();
        java.lang.String str14 = locale2.getDisplayName(locale12);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        int int19 = timeZone15.getOffset(1645513657024L);
        timeZone15.setID("fra");
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone15.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone15, locale24);
        java.lang.String str29 = locale24.getDisplayCountry();
        java.lang.String str31 = locale24.getExtension('a');
        java.util.Set<java.lang.String> strSet32 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str33 = locale12.getDisplayScript(locale24);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition((int) (byte) 10);
        java.lang.String str36 = parsePosition35.toString();
        java.util.Calendar.Builder builder37 = new java.util.Calendar.Builder();
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getSeconds();
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getTimezoneOffset();
        date40.setMinutes(6);
        boolean boolean44 = date38.after(date40);
        java.util.Calendar.Builder builder45 = builder37.setInstant(date40);
        java.util.Calendar.Builder builder47 = builder45.setInstant((long) 36);
        java.util.Calendar.Builder builder51 = builder47.setWeekDate(17, 37, 6);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57, locale59);
        java.lang.String str61 = locale52.getDisplayName(locale59);
        java.lang.String str62 = locale59.getDisplayCountry();
        java.util.Calendar.Builder builder63 = builder47.setLocale(locale59);
        boolean boolean64 = parsePosition35.equals((java.lang.Object) locale59);
        java.lang.String str65 = locale24.getDisplayVariant(locale59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar60", (calendar28.compareTo(calendar60) == 0) == calendar28.equals(calendar60));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale9.getDisplayName(locale16);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayName(locale19);
        java.lang.String str22 = locale16.getISO3Language();
        boolean boolean23 = fastDateFormat8.equals((java.lang.Object) locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str26 = fastDateFormat24.format((long) ' ');
        java.lang.String str28 = fastDateFormat24.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj29 = fastDateFormat24.clone();
        java.util.Locale locale30 = fastDateFormat24.getLocale();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        java.lang.String str32 = fastDateFormat8.format(calendar31);
        java.util.Locale locale36 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str37 = locale36.getDisplayCountry();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale36);
        java.lang.String str39 = locale36.getDisplayLanguage();
        java.lang.String str40 = locale36.getScript();
        java.lang.String str41 = locale36.getDisplayCountry();
        boolean boolean42 = fastDateFormat8.equals((java.lang.Object) str41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar31", (calendar17.compareTo(calendar31) == 0) == calendar17.equals(calendar31));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor13 = languageRangeList1.listIterator(0);
        boolean boolean14 = languageRangeList1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Set<java.lang.String> strSet18 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet18.parallelStream();
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet18);
        boolean boolean21 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strList20);
        int int22 = languageRangeList1.size();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor23 = languageRangeList1.listIterator();
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, strMap27);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale32, locale33, locale34, locale35, locale36 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.Locale locale40 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList38, filteringMode41);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList38, filteringMode43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48, locale50);
        boolean boolean52 = locale50.hasExtensions();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale50);
        java.util.Date date54 = calendar53.getTime();
        java.lang.Object obj55 = calendar53.clone();
        int int56 = languageRangeList1.lastIndexOf(obj55);
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone59);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone62.hasSameRules(timeZone64);
        java.util.Locale locale66 = java.util.Locale.CHINA;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone64, locale66);
        calendar67.clear(7);
        calendar67.set(16, (int) (byte) 0);
        java.time.Instant instant73 = calendar67.toInstant();
        boolean boolean75 = calendar67.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str76 = fastDateFormat60.format(calendar67);
        java.lang.String str77 = calendar67.getCalendarType();
        boolean boolean78 = calendar67.isWeekDateSupported();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        int int83 = timeZone79.getOffset(1645513657024L);
        timeZone79.setID("fra");
        calendar67.setTimeZone(timeZone79);
        int int88 = timeZone79.getOffset(1645513660313L);
        java.util.Locale locale90 = java.util.Locale.CHINESE;
        java.lang.String str91 = locale90.getLanguage();
        boolean boolean92 = locale90.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat93 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale90);
        java.lang.String str94 = locale90.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat95 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone79, locale90);
        boolean boolean96 = languageRangeList1.equals((java.lang.Object) locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar67", (calendar51.compareTo(calendar67) == 0) == calendar51.equals(calendar67));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.util.Date date13 = calendar12.getTime();
        calendar12.setLenient(true);
        int int16 = calendar12.getFirstDayOfWeek();
        boolean boolean17 = calendar12.isWeekDateSupported();
        java.util.TimeZone timeZone18 = calendar12.getTimeZone();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone22);
        int int26 = timeZone22.getOffset(1645513656868L);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        boolean boolean32 = timeZone22.hasSameRules(timeZone28);
        java.lang.String str33 = timeZone22.getID();
        calendar12.setTimeZone(timeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar24", (calendar8.compareTo(calendar24) == 0) == calendar8.equals(calendar24));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar10.clear(7);
        calendar10.set(16, (int) (byte) 0);
        java.time.Instant instant16 = calendar10.toInstant();
        boolean boolean18 = calendar10.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str19 = fastDateFormat3.format(calendar10);
        java.lang.String str20 = calendar10.getCalendarType();
        boolean boolean21 = calendar10.isWeekDateSupported();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        int int26 = timeZone22.getOffset(1645513657024L);
        timeZone22.setID("fra");
        calendar10.setTimeZone(timeZone22);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayLanguage();
        java.lang.String str34 = locale30.getISO3Country();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone22, locale30);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        boolean boolean46 = timeZone36.hasSameRules(timeZone42);
        timeZone42.setRawOffset(21);
        boolean boolean49 = timeZone42.observesDaylightTime();
        timeZone42.setRawOffset(16);
        boolean boolean52 = timeZone22.hasSameRules(timeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar45", (calendar10.compareTo(calendar45) == 0) == calendar10.equals(calendar45));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.set(16, (int) (byte) 0);
        int int14 = calendar8.getFirstDayOfWeek();
        int int15 = calendar8.getWeekYear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        int int27 = timeZone23.getOffset(1645513657024L);
        timeZone23.setID("fra");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone23.hasSameRules(timeZone30);
        boolean boolean32 = timeZone22.hasSameRules(timeZone30);
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone30);
        java.util.Locale locale39 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayVariant();
        java.lang.String str44 = locale40.getDisplayLanguage(locale42);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:08:12", timeZone30, locale42);
        java.util.Locale locale47 = fastDateFormat46.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar21", (calendar8.compareTo(calendar21) == 0) == calendar8.equals(calendar21));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        java.text.AttributedCharacterIterator.Attribute attribute1 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = attribute1.equals((java.lang.Object) timeZone2);
        java.lang.String str4 = timeZone2.getID();
        timeZone2.setRawOffset(10);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale11 = builder7.build();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale11);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.lang.String str18 = locale13.getDisplayVariant(locale17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale13);
        java.lang.String str20 = locale13.getDisplayVariant();
        java.lang.String str21 = locale13.getDisplayVariant();
        java.util.Locale locale22 = locale13.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone2, locale22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar19", (calendar12.compareTo(calendar19) == 0) == calendar12.equals(calendar19));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        calendar35.clear(7);
        calendar35.set(16, (int) (byte) 0);
        java.time.Instant instant41 = calendar35.toInstant();
        java.util.TimeZone timeZone42 = calendar35.getTimeZone();
        java.util.TimeZone timeZone43 = calendar35.getTimeZone();
        java.lang.String str44 = timeZone43.getID();
        java.util.Calendar.Builder builder45 = builder28.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder49 = builder28.setWeekDate(50, 59, 2022);
        java.util.Calendar.Builder builder51 = builder49.setLenient(false);
        java.util.Calendar.Builder builder53 = builder49.setLenient(false);
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Locale locale58 = new java.util.Locale("", "hi!", "");
        java.lang.String str59 = locale54.getDisplayVariant(locale58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale54);
        java.util.Date date61 = calendar60.getTime();
        calendar60.clear();
        java.util.TimeZone timeZone63 = calendar60.getTimeZone();
        timeZone63.setID("22 Feb 2022 07:07:46 GMT");
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone69);
        java.util.TimeZone timeZone72 = calendar71.getTimeZone();
        java.util.Locale locale76 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone72, locale76);
        boolean boolean78 = timeZone63.hasSameRules(timeZone72);
        java.util.Calendar.Builder builder79 = builder49.setTimeZone(timeZone72);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645513781805,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=41,MILLISECOND=806,ZONE_OFFSET=1,DST_OFFSET=0]");
        java.util.Calendar.Builder builder82 = builder79.setTimeZone(timeZone81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar71 and calendar77", (calendar71.compareTo(calendar77) == 0) == calendar71.equals(calendar77));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.lang.String str20 = timeZone3.getID();
        timeZone3.setRawOffset(124);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = timeZone3.getDisplayName(locale28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        boolean boolean6 = languageRangeList1.isEmpty();
        boolean boolean7 = languageRangeList1.isEmpty();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor8 = languageRangeList1.listIterator();
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getSeconds();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        date12.setMinutes(6);
        boolean boolean16 = date10.after(date12);
        java.util.Calendar.Builder builder17 = builder9.setInstant(date12);
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 36);
        java.util.Calendar.Builder builder23 = builder19.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder27 = builder19.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder31 = builder27.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.lang.String str41 = locale32.getDisplayName(locale39);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale39.getDisplayName(locale42);
        java.lang.String str45 = locale39.getISO3Language();
        java.lang.String str46 = locale39.getVariant();
        java.util.Calendar.Builder builder47 = builder31.setLocale(locale39);
        int int48 = languageRangeList1.indexOf((java.lang.Object) builder31);
        java.util.Calendar.Builder builder49 = new java.util.Calendar.Builder();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        date52.setMinutes(6);
        boolean boolean56 = date50.after(date52);
        java.util.Calendar.Builder builder57 = builder49.setInstant(date52);
        java.util.Calendar.Builder builder59 = builder57.setInstant((long) 36);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder61 = builder59.setLocale(locale60);
        java.util.Calendar.Builder builder63 = builder61.setLenient(false);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66);
        timeZone66.setRawOffset((int) (byte) 1);
        boolean boolean71 = timeZone66.observesDaylightTime();
        java.util.Calendar.Builder builder72 = builder61.setTimeZone(timeZone66);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        boolean boolean78 = timeZone66.hasSameRules(timeZone74);
        java.util.Locale locale80 = new java.util.Locale("Chinese (China)");
        java.util.Locale locale81 = locale80.stripExtensions();
        java.util.Set<java.lang.Character> charSet82 = locale80.getExtensionKeys();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone66, locale80);
        java.util.Calendar.Builder builder84 = builder31.setTimeZone(timeZone66);
        java.util.Locale locale85 = java.util.Locale.CHINA;
        java.util.Locale locale89 = new java.util.Locale("", "hi!", "");
        java.lang.String str90 = locale85.getDisplayVariant(locale89);
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(locale85);
        java.util.Date date92 = calendar91.getTime();
        calendar91.clear();
        java.util.TimeZone timeZone94 = calendar91.getTimeZone();
        timeZone94.setID("22 Feb 2022 07:07:46 GMT");
        java.util.Calendar calendar97 = java.util.Calendar.getInstance(timeZone94);
        java.util.Calendar.Builder builder98 = builder31.setTimeZone(timeZone94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar83", (calendar40.compareTo(calendar83) == 0) == calendar40.equals(calendar83));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder19.setLenient(true);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        int int31 = timeZone27.getOffset(1645513657024L);
        timeZone27.setID("fra");
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone27.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone27, locale36);
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone27);
        timeZone27.setRawOffset(0);
        int int45 = timeZone27.getOffset((long) 100);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49, locale51);
        calendar52.clear(7);
        boolean boolean55 = calendar52.isWeekDateSupported();
        int int57 = calendar52.getMinimum(4);
        java.util.TimeZone timeZone58 = calendar52.getTimeZone();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone60.hasSameRules(timeZone62);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone62);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        boolean boolean66 = timeZone58.hasSameRules(timeZone65);
        boolean boolean67 = timeZone58.observesDaylightTime();
        java.lang.String str68 = timeZone58.getID();
        int int69 = timeZone58.getRawOffset();
        boolean boolean70 = timeZone27.hasSameRules(timeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar52", (calendar40.compareTo(calendar52) == 0) == calendar40.equals(calendar52));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        calendar9.setMinimalDaysInFirstWeek((int) ' ');
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale31, locale32, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList49);
        int int52 = languageRangeList29.lastIndexOf((java.lang.Object) languageRangeList41);
        java.lang.String[] strArray71 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        boolean boolean74 = languageRangeList41.retainAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean75 = languageRangeList27.removeAll((java.util.Collection<java.lang.String>) strList72);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone77.hasSameRules(timeZone79);
        java.util.Locale locale81 = java.util.Locale.CHINA;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone79, locale81);
        boolean boolean83 = languageRangeList27.remove((java.lang.Object) timeZone79);
        int int84 = timeZone79.getRawOffset();
        timeZone79.setRawOffset(1970);
        calendar9.setTimeZone(timeZone79);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.lang.String str90 = locale89.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale89);
        java.util.Locale locale92 = java.util.Locale.TAIWAN;
        java.lang.String str93 = locale89.getDisplayName(locale92);
        java.lang.String str94 = locale89.getDisplayCountry();
        java.lang.String str95 = locale89.getDisplayScript();
        java.lang.String str96 = locale89.getLanguage();
        java.util.Calendar calendar97 = java.util.Calendar.getInstance(timeZone79, locale89);
        int int99 = timeZone79.getOffset(1645513687831L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar82 and calendar97", (calendar82.compareTo(calendar97) == 0) == calendar82.equals(calendar97));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.lang.String str14 = locale9.getDisplayCountry();
        java.lang.String str16 = locale9.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale9);
        java.util.Date date19 = calendar18.getTime();
        int int20 = date19.getTimezoneOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar18", (calendar13.compareTo(calendar18) == 0) == calendar13.equals(calendar18));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.lang.Object obj27 = null;
        boolean boolean28 = languageRangeList13.remove(obj27);
        java.util.Locale.LanguageRange languageRange30 = new java.util.Locale.LanguageRange("France");
        java.lang.String str31 = languageRange30.getRange();
        java.lang.String str32 = languageRange30.getRange();
        java.lang.String str33 = languageRange30.getRange();
        boolean boolean34 = languageRangeList13.add(languageRange30);
        java.lang.String str35 = languageRange30.getRange();
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.lang.String str43 = locale38.getDisplayCountry(locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale38);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone48.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.lang.String str54 = locale45.getDisplayName(locale52);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleKeys();
        java.lang.String str57 = locale52.getDisplayName(locale55);
        java.lang.String str58 = locale52.getISO3Language();
        boolean boolean59 = fastDateFormat44.equals((java.lang.Object) locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str62 = fastDateFormat60.format((long) ' ');
        java.lang.String str64 = fastDateFormat60.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj65 = fastDateFormat60.clone();
        java.util.Locale locale66 = fastDateFormat60.getLocale();
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale66);
        java.lang.String str68 = fastDateFormat44.format(calendar67);
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone71);
        java.lang.String str73 = fastDateFormat72.toString();
        boolean boolean74 = fastDateFormat72.getTimeZoneOverridesCalendar();
        java.lang.String str75 = fastDateFormat72.getPattern();
        java.lang.String str77 = fastDateFormat72.format(1645513657001L);
        java.text.ParsePosition parsePosition80 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        boolean boolean83 = timeZone81.hasSameRules(timeZone82);
        java.util.TimeZone timeZone84 = java.util.TimeZone.getDefault();
        boolean boolean85 = timeZone82.hasSameRules(timeZone84);
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone84);
        java.util.TimeZone timeZone87 = calendar86.getTimeZone();
        calendar86.set(5, 16);
        boolean boolean91 = parsePosition80.equals((java.lang.Object) 5);
        java.lang.Object obj92 = fastDateFormat72.parseObject("2022-02-22 08:37:55", parsePosition80);
        parsePosition80.setIndex(9);
        java.lang.Object obj95 = fastDateFormat44.parseObject("7:08:27 AM GMT+00:00", parsePosition80);
        boolean boolean96 = languageRange30.equals((java.lang.Object) fastDateFormat44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar67", (calendar53.compareTo(calendar67) == 0) == calendar53.equals(calendar67));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Set<java.lang.String> strSet4 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet4);
        boolean boolean7 = languageRangeList2.isEmpty();
        boolean boolean8 = languageRangeList2.isEmpty();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor9 = languageRangeList2.listIterator();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Date date11 = new java.util.Date();
        int int12 = date11.getSeconds();
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        date13.setMinutes(6);
        boolean boolean17 = date11.after(date13);
        java.util.Calendar.Builder builder18 = builder10.setInstant(date13);
        java.util.Calendar.Builder builder20 = builder18.setInstant((long) 36);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder28 = builder20.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder32 = builder28.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.lang.String str42 = locale33.getDisplayName(locale40);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.lang.String str45 = locale40.getDisplayName(locale43);
        java.lang.String str46 = locale40.getISO3Language();
        java.lang.String str47 = locale40.getVariant();
        java.util.Calendar.Builder builder48 = builder32.setLocale(locale40);
        int int49 = languageRangeList2.indexOf((java.lang.Object) builder32);
        java.util.Calendar.Builder builder50 = new java.util.Calendar.Builder();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getSeconds();
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getTimezoneOffset();
        date53.setMinutes(6);
        boolean boolean57 = date51.after(date53);
        java.util.Calendar.Builder builder58 = builder50.setInstant(date53);
        java.util.Calendar.Builder builder60 = builder58.setInstant((long) 36);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder62 = builder60.setLocale(locale61);
        java.util.Calendar.Builder builder64 = builder62.setLenient(false);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone67);
        timeZone67.setRawOffset((int) (byte) 1);
        boolean boolean72 = timeZone67.observesDaylightTime();
        java.util.Calendar.Builder builder73 = builder62.setTimeZone(timeZone67);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone75.hasSameRules(timeZone77);
        boolean boolean79 = timeZone67.hasSameRules(timeZone75);
        java.util.Locale locale81 = new java.util.Locale("Chinese (China)");
        java.util.Locale locale82 = locale81.stripExtensions();
        java.util.Set<java.lang.Character> charSet83 = locale81.getExtensionKeys();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone67, locale81);
        java.util.Calendar.Builder builder85 = builder32.setTimeZone(timeZone67);
        java.util.Locale locale86 = java.util.Locale.CHINESE;
        java.lang.String str87 = locale86.getLanguage();
        boolean boolean88 = locale86.hasExtensions();
        java.lang.String str89 = locale86.getDisplayCountry();
        java.lang.String str90 = locale86.getDisplayLanguage();
        java.lang.String str91 = locale86.getDisplayLanguage();
        java.util.Locale.Category category92 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale93 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category92, locale93);
        java.util.Locale locale95 = java.util.Locale.getDefault(category92);
        java.util.Locale locale96 = java.util.Locale.getDefault(category92);
        java.util.Locale locale97 = java.util.Locale.getDefault(category92);
        java.lang.String str98 = locale86.getDisplayCountry(locale97);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat99 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:09:34", timeZone67, locale86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar41 and calendar84", (calendar41.compareTo(calendar84) == 0) == calendar41.equals(calendar84));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        java.util.Date date1 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMinutes();
        date15.setHours(43);
        date15.setSeconds(130);
        boolean boolean21 = date1.after(date15);
        date1.setMinutes(15);
        date1.setMonth(57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar14", (calendar10.compareTo(calendar14) == 0) == calendar10.equals(calendar14));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        java.util.Locale locale3 = new java.util.Locale("7:07:54 AM UTC", "7:08:03 AM GMT+00:00", "02 h 07 UTC");
        java.lang.String str4 = locale3.getVariant();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone9);
        int int13 = timeZone9.getOffset(1645513656868L);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        boolean boolean19 = timeZone9.hasSameRules(timeZone15);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        boolean boolean25 = timeZone15.hasSameRules(timeZone23);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28);
        boolean boolean31 = timeZone23.hasSameRules(timeZone28);
        timeZone23.setID("22 Feb 2022 07:07:53 GMT");
        java.util.Locale locale35 = new java.util.Locale("February 22, 2022");
        java.lang.String str36 = locale35.getScript();
        java.util.Locale locale40 = new java.util.Locale("7:07:38 AM UTC", "java.text.ParsePosition[index=52,errorIndex=0]", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str41 = locale35.getDisplayLanguage(locale40);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone23, locale35);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale35);
        java.lang.String str44 = locale3.getDisplayLanguage(locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar43", (calendar11.compareTo(calendar43) == 0) == calendar11.equals(calendar43));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getFirstDayOfWeek();
        calendar6.set(48, 44, 31, 16, (int) (short) 0);
        calendar6.setMinimalDaysInFirstWeek(23);
        int int21 = calendar6.getWeeksInWeekYear();
        java.text.Format.Field field22 = null;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition(field22);
        java.lang.String str24 = fieldPosition23.toString();
        boolean boolean25 = calendar6.after((java.lang.Object) str24);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition(7);
        fieldPosition27.setEndIndex(8);
        int int30 = fieldPosition27.getEndIndex();
        fieldPosition27.setEndIndex(12);
        int int33 = fieldPosition27.getEndIndex();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        java.util.TimeZone.setDefault(timeZone37);
        boolean boolean41 = fieldPosition27.equals((java.lang.Object) timeZone37);
        boolean boolean42 = timeZone37.observesDaylightTime();
        calendar6.setTimeZone(timeZone37);
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.lang.String str51 = locale46.getDisplayCountry(locale50);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale46);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder53.clear();
        java.util.Locale.Builder builder55 = builder53.clear();
        java.util.Locale locale56 = builder53.build();
        java.lang.String str57 = locale56.getLanguage();
        java.lang.String str58 = locale46.getDisplayName(locale56);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        int int63 = timeZone59.getOffset(1645513657024L);
        timeZone59.setID("fra");
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone59.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        boolean boolean70 = locale68.hasExtensions();
        java.lang.String str71 = locale68.getDisplayCountry();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone59, locale68);
        java.lang.String str73 = locale68.getDisplayCountry();
        java.lang.String str75 = locale68.getExtension('a');
        java.util.Set<java.lang.String> strSet76 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str77 = locale56.getDisplayScript(locale68);
        java.lang.String str78 = locale68.getDisplayLanguage();
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone37, locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar72", (calendar39.compareTo(calendar72) == 0) == calendar39.equals(calendar72));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645513671992L);
        java.util.Calendar.Builder builder5 = builder0.setWeekDefinition(7, (int) (short) 1);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getSeconds();
        long long8 = date6.getTime();
        date6.setTime((long) 37);
        date6.setDate((int) (short) 0);
        int int13 = date6.getYear();
        int int14 = date6.getYear();
        date6.setMinutes(100);
        java.time.Instant instant17 = date6.toInstant();
        int int18 = date6.getYear();
        java.util.Calendar.Builder builder19 = builder5.setInstant(date6);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale28 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getScript();
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale28.getDisplayVariant(locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone23, locale34);
        boolean boolean37 = timeZone23.observesDaylightTime();
        java.util.Locale locale39 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale41.getDisplayCountry(locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone23, locale41);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone49);
        int int53 = timeZone49.getOffset(1645513656868L);
        boolean boolean54 = timeZone49.observesDaylightTime();
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone49, locale55);
        java.lang.String str57 = locale41.getDisplayLanguage(locale55);
        boolean boolean58 = locale41.hasExtensions();
        java.util.Calendar.Builder builder59 = builder5.setLocale(locale41);
        java.text.AttributedCharacterIterator.Attribute attribute60 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = attribute60.equals((java.lang.Object) timeZone61);
        java.lang.String str63 = attribute60.toString();
        java.lang.String str64 = attribute60.toString();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        int int69 = timeZone65.getOffset(1645513657024L);
        timeZone65.setID("fra");
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone65.hasSameRules(timeZone72);
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.lang.String str75 = locale74.getLanguage();
        boolean boolean76 = locale74.hasExtensions();
        java.lang.String str77 = locale74.getDisplayCountry();
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone65, locale74);
        boolean boolean79 = attribute60.equals((java.lang.Object) calendar78);
        java.util.Date date80 = calendar78.getTime();
        java.util.Calendar.Builder builder81 = builder5.setInstant(date80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar56", (calendar51.compareTo(calendar56) == 0) == calendar51.equals(calendar56));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.util.Date date13 = calendar12.getTime();
        calendar12.setLenient(true);
        int int16 = calendar12.getFirstDayOfWeek();
        boolean boolean17 = calendar12.isWeekDateSupported();
        java.util.TimeZone timeZone18 = calendar12.getTimeZone();
        int int20 = timeZone18.getOffset(1645513787889L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar12", (calendar8.compareTo(calendar12) == 0) == calendar8.equals(calendar12));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = attribute0.toString();
        java.lang.String str4 = attribute0.toString();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        int int9 = timeZone5.getOffset(1645513657024L);
        timeZone5.setID("fra");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone5.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone5, locale14);
        boolean boolean19 = attribute0.equals((java.lang.Object) calendar18);
        java.lang.String str20 = attribute0.toString();
        java.lang.String str21 = attribute0.toString();
        java.lang.String str22 = attribute0.toString();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.lang.String str30 = locale25.getDisplayCountry(locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale25);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.lang.String str41 = locale32.getDisplayName(locale39);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale39.getDisplayName(locale42);
        java.lang.String str45 = locale39.getISO3Language();
        boolean boolean46 = fastDateFormat31.equals((java.lang.Object) locale39);
        java.lang.String str47 = fastDateFormat31.getPattern();
        java.lang.String str48 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.lang.String str54 = fastDateFormat52.toString();
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition(16);
        parsePosition57.setErrorIndex(5);
        parsePosition57.setErrorIndex(1);
        java.lang.Object obj62 = fastDateFormat52.parseObject("22 Feb 2022 07:07:39 GMT", parsePosition57);
        java.lang.Object obj63 = fastDateFormat31.parseObject("java.text.ParsePosition[index=52,errorIndex=0]", parsePosition57);
        boolean boolean65 = parsePosition57.equals((java.lang.Object) "Feb 22, 2022 7:07:57 AM");
        parsePosition57.setIndex(48);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone70);
        int int73 = fastDateFormat72.getMaxLengthEstimate();
        int int74 = fastDateFormat72.getMaxLengthEstimate();
        java.util.Date date76 = new java.util.Date(1645513662388L);
        date76.setYear(11);
        java.text.AttributedCharacterIterator attributedCharacterIterator79 = fastDateFormat72.formatToCharacterIterator((java.lang.Object) date76);
        boolean boolean80 = parsePosition57.equals((java.lang.Object) attributedCharacterIterator79);
        boolean boolean81 = attribute0.equals((java.lang.Object) boolean80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar40", (calendar18.compareTo(calendar40) == 0) == calendar18.equals(calendar40));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.util.Locale locale44 = fastDateFormat26.getLocale();
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = locale44.getDisplayLanguage(locale48);
        java.lang.String str55 = locale20.getDisplayCountry(locale48);
        java.lang.String str56 = locale20.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str61 = locale20.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone8, locale20);
        java.text.AttributedCharacterIterator.Attribute attribute63 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = attribute63.equals((java.lang.Object) timeZone64);
        java.lang.String str66 = attribute63.toString();
        java.lang.String str67 = attribute63.toString();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        int int72 = timeZone68.getOffset(1645513657024L);
        timeZone68.setID("fra");
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone68.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        boolean boolean79 = locale77.hasExtensions();
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone68, locale77);
        boolean boolean82 = attribute63.equals((java.lang.Object) calendar81);
        java.util.Date date83 = calendar81.getTime();
        boolean boolean84 = calendar62.after((java.lang.Object) date83);
        calendar62.set(0, (int) ' ', 54, 45, 34, (int) (short) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar81", (calendar7.compareTo(calendar81) == 0) == calendar7.equals(calendar81));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.Locale locale21 = fastDateFormat2.getLocale();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        java.util.Date date24 = new java.util.Date();
        java.lang.String str25 = date24.toGMTString();
        boolean boolean26 = date22.before(date24);
        java.lang.String str27 = date24.toLocaleString();
        int int28 = date24.getTimezoneOffset();
        date24.setDate(292278994);
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDateFormat2.format(date24, stringBuffer31);
        date24.setSeconds(0);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        int int42 = timeZone38.getOffset(1645513656868L);
        boolean boolean43 = timeZone38.observesDaylightTime();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone38, locale44);
        calendar45.setFirstDayOfWeek(37);
        boolean boolean48 = date24.equals((java.lang.Object) 37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar45", (calendar9.compareTo(calendar45) == 0) == calendar9.equals(calendar45));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        boolean boolean10 = calendar7.isWeekDateSupported();
        int int12 = calendar7.getMinimum(4);
        java.util.TimeZone timeZone13 = calendar7.getTimeZone();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        boolean boolean21 = timeZone13.hasSameRules(timeZone20);
        boolean boolean22 = timeZone13.observesDaylightTime();
        java.lang.String str23 = timeZone13.getID();
        int int24 = timeZone13.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:08:24", timeZone13);
        timeZone13.setRawOffset((int) 'a');
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        timeZone32.setRawOffset((int) (byte) 1);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone32, locale37);
        int int40 = timeZone32.getOffset(1645513689942L);
        boolean boolean41 = timeZone32.observesDaylightTime();
        java.util.Locale locale45 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str46 = locale45.getDisplayScript();
        boolean boolean47 = locale45.hasExtensions();
        java.util.Locale locale48 = locale45.stripExtensions();
        java.lang.String str49 = locale45.getCountry();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone32, locale45);
        boolean boolean51 = timeZone13.hasSameRules(timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar50", (calendar19.compareTo(calendar50) == 0) == calendar19.equals(calendar50));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        timeZone7.setRawOffset(9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone7);
        java.lang.String str12 = calendar11.getCalendarType();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16, locale18);
        calendar19.clear(7);
        boolean boolean22 = calendar19.isWeekDateSupported();
        java.util.TimeZone timeZone23 = calendar19.getTimeZone();
        calendar19.setMinimalDaysInFirstWeek(15);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "");
        java.lang.String str33 = locale28.getDisplayCountry(locale32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale28);
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        java.lang.String str44 = locale35.getDisplayName(locale42);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale42.getDisplayName(locale45);
        java.lang.String str48 = locale42.getISO3Language();
        boolean boolean49 = fastDateFormat34.equals((java.lang.Object) locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str52 = fastDateFormat50.format((long) ' ');
        java.lang.String str54 = fastDateFormat50.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj55 = fastDateFormat50.clone();
        java.util.Locale locale56 = fastDateFormat50.getLocale();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = fastDateFormat34.format(calendar57);
        calendar57.clear();
        calendar57.setTimeInMillis((long) 3);
        calendar57.setFirstDayOfWeek(0);
        calendar57.set(58, 50, 45);
        boolean boolean68 = calendar19.after((java.lang.Object) calendar57);
        int int69 = calendar11.compareTo(calendar57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar43", (calendar19.compareTo(calendar43) == 0) == calendar19.equals(calendar43));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder14 = builder12.setLocale(locale13);
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        timeZone19.setRawOffset((int) (byte) 1);
        boolean boolean24 = timeZone19.observesDaylightTime();
        java.util.Calendar.Builder builder25 = builder14.setTimeZone(timeZone19);
        java.util.Date date29 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date29.setMonth(4);
        java.util.Calendar.Builder builder32 = builder14.setInstant(date29);
        java.util.Calendar.Builder builder34 = builder14.setInstant(1645513674789L);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        int int42 = timeZone38.getOffset(1645513656868L);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        boolean boolean48 = timeZone38.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder49 = builder14.setTimeZone(timeZone38);
        java.util.Locale locale53 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder56 = new java.util.Calendar.Builder();
        java.util.Date date57 = new java.util.Date();
        int int58 = date57.getSeconds();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getTimezoneOffset();
        date59.setMinutes(6);
        boolean boolean63 = date57.after(date59);
        java.util.Calendar.Builder builder64 = builder56.setInstant(date59);
        java.util.Calendar.Builder builder66 = builder64.setInstant((long) 36);
        java.util.Calendar.Builder builder70 = builder66.setWeekDate(17, 37, 6);
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.lang.String str72 = locale71.getLanguage();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone76, locale78);
        java.lang.String str80 = locale71.getDisplayName(locale78);
        java.lang.String str81 = locale78.getDisplayCountry();
        java.util.Calendar.Builder builder82 = builder66.setLocale(locale78);
        java.util.Set<java.lang.String> strSet83 = locale78.getUnicodeLocaleKeys();
        java.lang.String str84 = locale53.getDisplayLanguage(locale78);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone38, locale78);
        boolean boolean86 = attribute0.equals((java.lang.Object) timeZone38);
        timeZone38.setRawOffset(97);
        timeZone38.setRawOffset(50400000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar79", (calendar40.compareTo(calendar79) == 0) == calendar40.equals(calendar79));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        timeZone10.setRawOffset(54);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale14);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(7);
        calendar27.set(16, (int) (byte) 0);
        java.time.Instant instant33 = calendar27.toInstant();
        boolean boolean35 = calendar27.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str36 = fastDateFormat20.format(calendar27);
        java.lang.Object obj37 = fastDateFormat20.clone();
        java.util.Locale locale38 = fastDateFormat20.getLocale();
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        boolean boolean44 = locale42.hasExtensions();
        java.lang.String str45 = locale42.getDisplayCountry();
        java.lang.String str46 = locale42.getDisplayLanguage();
        java.lang.String str47 = locale42.getDisplayLanguage();
        java.lang.String str48 = locale38.getDisplayLanguage(locale42);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getVariant();
        java.lang.String str51 = locale38.getDisplayLanguage(locale49);
        java.lang.String str52 = locale14.getDisplayCountry(locale38);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.lang.String str58 = locale53.getDisplayVariant(locale57);
        java.lang.String str59 = locale38.getDisplayLanguage(locale57);
        java.util.Locale locale61 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale locale65 = java.util.Locale.US;
        java.lang.String str66 = locale63.getDisplayCountry(locale65);
        java.lang.String str67 = locale57.getDisplayLanguage(locale65);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone10, locale57);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar68", (calendar27.compareTo(calendar68) == 0) == calendar27.equals(calendar68));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale15.getDisplayName(locale22);
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder10.setLocale(locale22);
        java.util.Set<java.lang.String> strSet27 = locale22.getUnicodeLocaleKeys();
        java.lang.String str28 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder31 = builder29.setInstant(1645513671992L);
        java.util.Calendar.Builder builder34 = builder29.setWeekDefinition(7, (int) (short) 1);
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getSeconds();
        long long37 = date35.getTime();
        date35.setTime((long) 37);
        date35.setDate((int) (short) 0);
        int int42 = date35.getYear();
        int int43 = date35.getYear();
        date35.setMinutes(100);
        java.time.Instant instant46 = date35.toInstant();
        int int47 = date35.getYear();
        java.util.Calendar.Builder builder48 = builder34.setInstant(date35);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        java.util.Locale locale57 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale57.getScript();
        java.util.Locale locale63 = new java.util.Locale("", "hi!", "");
        java.lang.String str64 = locale57.getDisplayVariant(locale63);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone52, locale63);
        boolean boolean66 = timeZone52.observesDaylightTime();
        java.util.Locale locale68 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale69 = locale68.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = locale69.getDisplayLanguage(locale70);
        java.util.Locale locale72 = java.util.Locale.US;
        java.lang.String str73 = locale70.getDisplayCountry(locale72);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone52, locale70);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone75.hasSameRules(timeZone76);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone76.hasSameRules(timeZone78);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone78);
        int int82 = timeZone78.getOffset(1645513656868L);
        boolean boolean83 = timeZone78.observesDaylightTime();
        java.util.Locale locale84 = java.util.Locale.CANADA;
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone78, locale84);
        java.lang.String str86 = locale70.getDisplayLanguage(locale84);
        boolean boolean87 = locale70.hasExtensions();
        java.util.Calendar.Builder builder88 = builder34.setLocale(locale70);
        java.util.Locale locale91 = new java.util.Locale("hi!", "USA");
        java.util.Locale locale92 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str93 = locale91.getDisplayName(locale92);
        java.lang.String str94 = locale70.getDisplayScript(locale91);
        java.lang.String str95 = locale22.getDisplayVariant(locale91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar80", (calendar23.compareTo(calendar80) == 0) == calendar23.equals(calendar80));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.util.Locale locale13 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone9);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getDisplayVariant();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        calendar34.clear(7);
        calendar34.set(16, (int) (byte) 0);
        java.time.Instant instant40 = calendar34.toInstant();
        boolean boolean42 = calendar34.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str43 = fastDateFormat27.format(calendar34);
        java.lang.Object obj44 = fastDateFormat27.clone();
        java.util.Locale locale45 = fastDateFormat27.getLocale();
        java.lang.String str46 = locale45.getLanguage();
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.lang.String str53 = locale49.getDisplayLanguage();
        java.lang.String str54 = locale49.getDisplayLanguage();
        java.lang.String str55 = locale45.getDisplayLanguage(locale49);
        java.lang.String str56 = locale21.getDisplayCountry(locale49);
        java.lang.String str57 = locale21.getDisplayName();
        java.util.Set<java.lang.String> strSet58 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale61 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str62 = locale21.getDisplayCountry(locale61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone9, locale21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:09:08", timeZone9);
        java.lang.String str65 = timeZone9.getID();
        timeZone9.setID("java.util.GregorianCalendar[time=1645513772106,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=32,MILLISECOND=141,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar22", (calendar8.compareTo(calendar22) == 0) == calendar8.equals(calendar22));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone16);
        timeZone16.setRawOffset((int) (byte) 1);
        boolean boolean21 = timeZone16.observesDaylightTime();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone16);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        boolean boolean25 = locale23.hasExtensions();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone16, locale23);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone13, locale23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar22", (calendar6.compareTo(calendar22) == 0) == calendar6.equals(calendar22));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        int int9 = timeZone5.getOffset(1645513657024L);
        timeZone5.setID("fra");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone5.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone5, locale14);
        java.lang.String str19 = locale14.getDisplayCountry();
        java.lang.String str21 = locale14.getExtension('a');
        java.util.Locale.setDefault(category3, locale14);
        java.util.Locale.setDefault(locale14);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone1, locale14);
        java.util.Set<java.lang.String> strSet25 = locale14.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar24", (calendar18.compareTo(calendar24) == 0) == calendar18.equals(calendar24));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1921-01-24 05:10:00", timeZone1);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone1, locale7);
        java.lang.String str11 = locale7.getISO3Language();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale7);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder13.clear();
        java.util.Locale locale16 = builder13.build();
        java.util.Locale.Builder builder17 = builder13.clear();
        java.util.Locale locale18 = builder17.build();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.lang.String str20 = locale7.getDisplayName(locale18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar19", (calendar10.compareTo(calendar19) == 0) == calendar10.equals(calendar19));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.util.Locale locale44 = fastDateFormat26.getLocale();
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = locale44.getDisplayLanguage(locale48);
        java.lang.String str55 = locale20.getDisplayCountry(locale48);
        java.lang.String str56 = locale20.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str61 = locale20.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone8, locale20);
        java.text.AttributedCharacterIterator.Attribute attribute63 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = attribute63.equals((java.lang.Object) timeZone64);
        java.lang.String str66 = attribute63.toString();
        java.lang.String str67 = attribute63.toString();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        int int72 = timeZone68.getOffset(1645513657024L);
        timeZone68.setID("fra");
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone68.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        boolean boolean79 = locale77.hasExtensions();
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone68, locale77);
        boolean boolean82 = attribute63.equals((java.lang.Object) calendar81);
        java.util.Date date83 = calendar81.getTime();
        boolean boolean84 = calendar62.after((java.lang.Object) date83);
        int int85 = date83.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar81", (calendar21.compareTo(calendar81) == 0) == calendar21.equals(calendar81));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.setMinimalDaysInFirstWeek(24);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        calendar17.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone22 = calendar17.getTimeZone();
        calendar7.setTimeZone(timeZone22);
        java.util.Date date30 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date30.setYear(51);
        boolean boolean33 = timeZone22.inDaylightTime(date30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar17", (calendar7.compareTo(calendar17) == 0) == calendar7.equals(calendar17));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.lang.String str21 = locale12.getDisplayName(locale19);
        java.util.Locale.Builder builder22 = builder10.setLocale(locale12);
        java.util.Locale locale23 = builder10.build();
        java.util.Locale.Builder builder24 = builder4.setLocale(locale23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale23);
        calendar25.setFirstDayOfWeek(0);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "");
        java.lang.String str33 = locale28.getDisplayVariant(locale32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale28);
        java.lang.String str35 = locale28.getDisplayVariant();
        java.lang.String str36 = locale28.getDisplayVariant();
        java.util.Locale locale38 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.lang.String str41 = locale39.getDisplayLanguage(locale40);
        java.lang.String str42 = locale28.getDisplayLanguage(locale40);
        java.util.Locale.setDefault(locale28);
        boolean boolean44 = calendar25.before((java.lang.Object) locale28);
        java.util.Locale locale45 = locale28.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar25", (calendar20.compareTo(calendar25) == 0) == calendar20.equals(calendar25));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(7);
        fieldPosition1.setEndIndex(8);
        int int4 = fieldPosition1.getEndIndex();
        fieldPosition1.setEndIndex(12);
        int int7 = fieldPosition1.getEndIndex();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        boolean boolean15 = fieldPosition1.equals((java.lang.Object) timeZone11);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone16.observesDaylightTime();
        int int18 = timeZone16.getRawOffset();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale22.getDisplayVariant(locale26);
        java.lang.String str28 = locale20.getDisplayVariant(locale22);
        java.lang.String str29 = locale20.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale20);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        boolean boolean40 = calendar37.isWeekDateSupported();
        int int42 = calendar37.getMinimum(4);
        calendar37.setMinimalDaysInFirstWeek(15);
        int int45 = calendar37.getWeeksInWeekYear();
        java.lang.String str46 = fastDateFormat30.format(calendar37);
        java.util.Calendar.Builder builder47 = new java.util.Calendar.Builder();
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getSeconds();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getTimezoneOffset();
        date50.setMinutes(6);
        boolean boolean54 = date48.after(date50);
        java.util.Calendar.Builder builder55 = builder47.setInstant(date50);
        java.util.Calendar.Builder builder57 = builder55.setInstant((long) 36);
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder59 = builder57.setLocale(locale58);
        java.util.Calendar.Builder builder61 = builder59.setLenient(false);
        java.util.Calendar.Builder builder63 = builder59.setLenient(false);
        java.util.Calendar.Builder builder67 = builder59.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.lang.String str69 = locale68.toLanguageTag();
        java.util.Calendar.Builder builder70 = builder67.setLocale(locale68);
        java.lang.String str71 = locale68.getISO3Country();
        java.lang.String str72 = locale68.getDisplayName();
        java.util.Set<java.lang.Character> charSet73 = locale68.getExtensionKeys();
        boolean boolean74 = fastDateFormat30.equals((java.lang.Object) charSet73);
        java.lang.String str76 = fastDateFormat30.format(1645513677743L);
        java.util.TimeZone timeZone77 = fastDateFormat30.getTimeZone();
        java.lang.String str78 = fastDateFormat30.toString();
        java.util.TimeZone timeZone79 = fastDateFormat30.getTimeZone();
        java.lang.String str80 = timeZone79.getID();
        boolean boolean81 = timeZone16.hasSameRules(timeZone79);
        int int82 = timeZone79.getRawOffset();
        boolean boolean83 = timeZone11.hasSameRules(timeZone79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar37", (calendar13.compareTo(calendar37) == 0) == calendar13.equals(calendar37));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Date date27 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date27.setMonth(4);
        java.util.Calendar.Builder builder30 = builder12.setInstant(date27);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone35);
        java.util.TimeZone timeZone38 = calendar37.getTimeZone();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        int int43 = timeZone39.getOffset(1645513657024L);
        timeZone39.setID("fra");
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone39.hasSameRules(timeZone46);
        boolean boolean48 = timeZone38.hasSameRules(timeZone46);
        java.util.Locale locale50 = new java.util.Locale("February 22, 2022");
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5\u4e0a\u53487:09", timeZone46, locale50);
        java.util.Calendar.Builder builder53 = builder30.setLocale(locale50);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        timeZone58.setRawOffset((int) (byte) 1);
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone58, locale63);
        int int66 = timeZone58.getOffset(1645513689942L);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone58);
        timeZone58.setID("7:10:23 AM GMT+00:00");
        java.util.Calendar.Builder builder70 = builder53.setTimeZone(timeZone58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar67", (calendar37.compareTo(calendar67) == 0) == calendar37.equals(calendar67));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int2 = timeZone0.getRawOffset();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.lang.String str12 = locale4.getDisplayVariant(locale6);
        java.lang.String str13 = locale4.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale4);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        boolean boolean24 = calendar21.isWeekDateSupported();
        int int26 = calendar21.getMinimum(4);
        calendar21.setMinimalDaysInFirstWeek(15);
        int int29 = calendar21.getWeeksInWeekYear();
        java.lang.String str30 = fastDateFormat14.format(calendar21);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getSeconds();
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getTimezoneOffset();
        date34.setMinutes(6);
        boolean boolean38 = date32.after(date34);
        java.util.Calendar.Builder builder39 = builder31.setInstant(date34);
        java.util.Calendar.Builder builder41 = builder39.setInstant((long) 36);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder43 = builder41.setLocale(locale42);
        java.util.Calendar.Builder builder45 = builder43.setLenient(false);
        java.util.Calendar.Builder builder47 = builder43.setLenient(false);
        java.util.Calendar.Builder builder51 = builder43.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Calendar.Builder builder54 = builder51.setLocale(locale52);
        java.lang.String str55 = locale52.getISO3Country();
        java.lang.String str56 = locale52.getDisplayName();
        java.util.Set<java.lang.Character> charSet57 = locale52.getExtensionKeys();
        boolean boolean58 = fastDateFormat14.equals((java.lang.Object) charSet57);
        java.lang.String str60 = fastDateFormat14.format(1645513677743L);
        java.util.TimeZone timeZone61 = fastDateFormat14.getTimeZone();
        java.lang.String str62 = fastDateFormat14.toString();
        java.util.TimeZone timeZone63 = fastDateFormat14.getTimeZone();
        java.lang.String str64 = timeZone63.getID();
        boolean boolean65 = timeZone0.hasSameRules(timeZone63);
        int int66 = timeZone63.getRawOffset();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        java.util.Locale locale70 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale locale72 = java.util.Locale.TAIWAN;
        java.lang.String str73 = locale71.getDisplayLanguage(locale72);
        java.util.Locale locale74 = java.util.Locale.US;
        java.lang.String str75 = locale72.getDisplayCountry(locale74);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone68, locale74);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone68);
        boolean boolean78 = timeZone63.hasSameRules(timeZone68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar76", (calendar21.compareTo(calendar76) == 0) == calendar21.equals(calendar76));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        boolean boolean10 = timeZone0.hasSameRules(timeZone6);
        timeZone6.setRawOffset(21);
        boolean boolean13 = timeZone6.observesDaylightTime();
        timeZone6.setRawOffset(16);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20);
        int int24 = timeZone20.getOffset(1645513656868L);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        boolean boolean30 = timeZone20.hasSameRules(timeZone26);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        boolean boolean36 = timeZone26.hasSameRules(timeZone34);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone39);
        boolean boolean42 = timeZone34.hasSameRules(timeZone39);
        timeZone34.setID("22 Feb 2022 07:07:53 GMT");
        java.util.Locale locale46 = new java.util.Locale("February 22, 2022");
        java.lang.String str47 = locale46.getScript();
        java.util.Locale locale51 = new java.util.Locale("7:07:38 AM UTC", "java.text.ParsePosition[index=52,errorIndex=0]", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str52 = locale46.getDisplayLanguage(locale51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone34, locale46);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone6, locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar22", (calendar9.compareTo(calendar22) == 0) == calendar9.equals(calendar22));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        parsePosition1.setErrorIndex(5);
        int int4 = parsePosition1.getErrorIndex();
        int int5 = parsePosition1.getErrorIndex();
        int int6 = parsePosition1.getIndex();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        calendar16.set(16, (int) (byte) 0);
        java.time.Instant instant22 = calendar16.toInstant();
        boolean boolean24 = calendar16.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str25 = fastDateFormat9.format(calendar16);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale30, locale31, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale locale37 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale41, locale42, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList47);
        int int50 = languageRangeList27.lastIndexOf((java.lang.Object) languageRangeList39);
        boolean boolean51 = languageRangeList27.isEmpty();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        java.util.Date date54 = new java.util.Date();
        java.lang.String str55 = date54.toGMTString();
        boolean boolean56 = date52.before(date54);
        int int57 = languageRangeList27.lastIndexOf((java.lang.Object) date54);
        date54.setMinutes(36);
        java.lang.String str60 = fastDateFormat9.format(date54);
        java.text.AttributedCharacterIterator attributedCharacterIterator62 = fastDateFormat9.formatToCharacterIterator((java.lang.Object) 1645513673849L);
        boolean boolean63 = parsePosition1.equals((java.lang.Object) fastDateFormat9);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone64.hasSameRules(timeZone65);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone65.hasSameRules(timeZone67);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone67);
        int int71 = timeZone67.getOffset(1645513656868L);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        boolean boolean77 = timeZone67.hasSameRules(timeZone73);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone78.hasSameRules(timeZone79);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone79.hasSameRules(timeZone81);
        boolean boolean83 = timeZone73.hasSameRules(timeZone81);
        boolean boolean84 = parsePosition1.equals((java.lang.Object) timeZone81);
        java.lang.Object obj85 = timeZone81.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar69", (calendar16.compareTo(calendar69) == 0) == calendar16.equals(calendar69));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        boolean boolean11 = timeZone3.observesDaylightTime();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayVariant();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        java.time.Instant instant36 = calendar30.toInstant();
        boolean boolean38 = calendar30.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str39 = fastDateFormat23.format(calendar30);
        java.lang.Object obj40 = fastDateFormat23.clone();
        java.util.Locale locale41 = fastDateFormat23.getLocale();
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.lang.String str49 = locale45.getDisplayLanguage();
        java.lang.String str50 = locale45.getDisplayLanguage();
        java.lang.String str51 = locale41.getDisplayLanguage(locale45);
        java.lang.String str52 = locale17.getDisplayCountry(locale45);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone56);
        java.util.TimeZone timeZone59 = calendar58.getTimeZone();
        java.util.Locale locale63 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone59, locale63);
        java.lang.String str65 = locale45.getDisplayLanguage(locale63);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone3, locale63);
        java.lang.String str67 = locale63.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        java.util.TimeZone timeZone12 = calendar6.getTimeZone();
        timeZone12.setRawOffset(7);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12);
        java.util.Locale locale17 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale17.getScript();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone12, locale17);
        java.util.Locale locale24 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String str26 = locale24.getDisplayLanguage();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.lang.String str32 = locale27.getDisplayVariant(locale31);
        java.lang.String str33 = locale27.getISO3Language();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        calendar43.clear(7);
        calendar43.set(16, (int) (byte) 0);
        java.time.Instant instant49 = calendar43.toInstant();
        boolean boolean51 = calendar43.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str52 = fastDateFormat36.format(calendar43);
        java.lang.Object obj53 = fastDateFormat36.clone();
        java.util.Locale locale54 = fastDateFormat36.getLocale();
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale54.getDisplayName();
        java.lang.String str57 = locale27.getDisplayCountry(locale54);
        java.lang.String str59 = locale54.getExtension('x');
        java.lang.String str60 = locale24.getDisplayLanguage(locale54);
        java.lang.String str61 = timeZone12.getDisplayName(locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar20", (calendar15.compareTo(calendar20) == 0) == calendar15.equals(calendar20));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale9.getDisplayName(locale16);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayName(locale19);
        java.lang.String str22 = locale16.getISO3Language();
        boolean boolean23 = fastDateFormat8.equals((java.lang.Object) locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str26 = fastDateFormat24.format((long) ' ');
        java.lang.String str28 = fastDateFormat24.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj29 = fastDateFormat24.clone();
        java.util.Locale locale30 = fastDateFormat24.getLocale();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        java.lang.String str32 = fastDateFormat8.format(calendar31);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        java.lang.String str37 = fastDateFormat36.toString();
        boolean boolean38 = fastDateFormat36.getTimeZoneOverridesCalendar();
        java.lang.String str39 = fastDateFormat36.getPattern();
        java.lang.String str41 = fastDateFormat36.format(1645513657001L);
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone48);
        java.util.TimeZone timeZone51 = calendar50.getTimeZone();
        calendar50.set(5, 16);
        boolean boolean55 = parsePosition44.equals((java.lang.Object) 5);
        java.lang.Object obj56 = fastDateFormat36.parseObject("2022-02-22 08:37:55", parsePosition44);
        parsePosition44.setIndex(9);
        java.lang.Object obj59 = fastDateFormat8.parseObject("7:08:27 AM GMT+00:00", parsePosition44);
        java.lang.Object obj60 = fastDateFormat8.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar31", (calendar17.compareTo(calendar31) == 0) == calendar17.equals(calendar31));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str6 = locale5.getDisplayScript();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale locale8 = locale5.stripExtensions();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale11);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale11.getDisplayName(locale14);
        java.lang.String str16 = locale11.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale11);
        java.lang.String str18 = locale11.getISO3Country();
        java.lang.String str19 = locale5.getDisplayScript(locale11);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder20.clear();
        java.util.Locale.Builder builder22 = builder20.clear();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale.Builder builder28 = builder26.clear();
        java.util.Locale locale29 = builder26.build();
        java.util.Locale.Builder builder30 = builder26.clear();
        java.util.Locale locale31 = builder30.build();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.lang.String str41 = locale32.getDisplayName(locale39);
        java.util.Locale.Builder builder42 = builder30.setLocale(locale32);
        java.util.Locale locale43 = builder30.build();
        java.util.Locale.Builder builder44 = builder24.setLocale(locale43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale43);
        java.lang.String str46 = locale43.getVariant();
        java.lang.String str47 = locale5.getDisplayVariant(locale43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar40", (calendar17.compareTo(calendar40) == 0) == calendar17.equals(calendar40));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.util.Date date13 = calendar12.getTime();
        int int14 = date13.getMinutes();
        int int15 = date13.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar12", (calendar8.compareTo(calendar12) == 0) == calendar8.equals(calendar12));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        calendar7.set(16, (int) (byte) 0);
        int int13 = calendar7.getWeeksInWeekYear();
        calendar7.setFirstDayOfWeek(14);
        calendar7.setFirstDayOfWeek(50);
        java.util.TimeZone timeZone18 = calendar7.getTimeZone();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category19);
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.lang.String str28 = locale23.getDisplayVariant(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale23);
        java.lang.String str30 = locale23.getDisplayVariant();
        java.util.Locale.setDefault(category19, locale23);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getSeconds();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        date35.setMinutes(6);
        boolean boolean39 = date33.after(date35);
        java.util.Calendar.Builder builder40 = builder32.setInstant(date35);
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 36);
        java.util.Calendar.Builder builder46 = builder42.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder50 = builder42.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder54 = builder50.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60, locale62);
        java.lang.String str64 = locale55.getDisplayName(locale62);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = locale62.getDisplayName(locale65);
        java.lang.String str68 = locale62.getISO3Language();
        java.lang.String str69 = locale62.getVariant();
        java.util.Calendar.Builder builder70 = builder54.setLocale(locale62);
        java.util.Locale.setDefault(category19, locale62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone18, locale62);
        java.util.Date date76 = new java.util.Date(40, 15, 18);
        java.lang.String str77 = date76.toGMTString();
        int int78 = date76.getTimezoneOffset();
        int int79 = date76.getDay();
        date76.setDate(41);
        java.lang.String str82 = fastDateFormat72.format(date76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar29", (calendar7.compareTo(calendar29) == 0) == calendar7.equals(calendar29));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.util.Locale locale16 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str17 = locale9.getDisplayScript(locale16);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale9.getDisplayCountry(locale18);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayVariant(locale30);
        java.lang.String str32 = locale24.getDisplayVariant(locale26);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale26);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.lang.String str41 = fastDateFormat38.format((long) '#');
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition(53);
        java.lang.Object obj45 = fastDateFormat38.parseObject("", parsePosition44);
        int int46 = parsePosition44.getErrorIndex();
        java.lang.Object obj47 = fastDateFormat34.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition44);
        java.util.TimeZone timeZone48 = fastDateFormat34.getTimeZone();
        boolean boolean49 = timeZone48.observesDaylightTime();
        java.util.Locale locale53 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean54 = locale53.hasExtensions();
        java.lang.String str55 = locale53.getScript();
        java.lang.String str56 = locale53.getLanguage();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone48, locale53);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone48);
        boolean boolean59 = locale9.equals((java.lang.Object) calendar58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar33", (calendar8.compareTo(calendar33) == 0) == calendar8.equals(calendar33));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        int int6 = timeZone2.getOffset(1645513657024L);
        timeZone2.setID("fra");
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone2.hasSameRules(timeZone9);
        timeZone9.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.lang.String str18 = locale14.getDisplayLanguage();
        java.lang.String str19 = locale14.getDisplayLanguage();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone9, locale14);
        java.util.Locale locale24 = new java.util.Locale("\u4e0a\u5348\u65f6\u5206\u79d2", "7:07:50 AM UTC", "Wed Feb 02 07:07:55 UTC 2022");
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getSeconds();
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        date28.setMinutes(6);
        boolean boolean32 = date26.after(date28);
        java.util.Calendar.Builder builder33 = builder25.setInstant(date28);
        java.util.Calendar.Builder builder35 = builder33.setInstant((long) 36);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder37 = builder35.setLocale(locale36);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone40);
        java.util.Calendar.Builder builder43 = builder35.setTimeZone(timeZone40);
        java.util.Calendar.Builder builder45 = builder35.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        int int51 = timeZone47.getOffset(1645513657024L);
        timeZone47.setID("fra");
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone47.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = locale56.getDisplayCountry();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone47, locale56);
        boolean boolean61 = fastDateFormat46.equals((java.lang.Object) locale56);
        java.util.Calendar.Builder builder62 = builder45.setLocale(locale56);
        java.lang.String str63 = locale56.getScript();
        boolean boolean64 = locale56.hasExtensions();
        java.lang.String str65 = locale24.getDisplayVariant(locale56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9, locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar60", (calendar20.compareTo(calendar60) == 0) == calendar20.equals(calendar60));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        calendar6.setMinimalDaysInFirstWeek(15);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale14);
        java.util.Date date21 = calendar20.getTime();
        calendar6.setTime(date21);
        java.time.Instant instant23 = date21.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar20", (calendar6.compareTo(calendar20) == 0) == calendar6.equals(calendar20));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean7 = timeZone3.observesDaylightTime();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        java.util.TimeZone timeZone17 = calendar16.getTimeZone();
        java.util.Locale locale21 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone17);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = locale29.getDisplayVariant();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39, locale41);
        calendar42.clear(7);
        calendar42.set(16, (int) (byte) 0);
        java.time.Instant instant48 = calendar42.toInstant();
        boolean boolean50 = calendar42.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str51 = fastDateFormat35.format(calendar42);
        java.lang.Object obj52 = fastDateFormat35.clone();
        java.util.Locale locale53 = fastDateFormat35.getLocale();
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale locale55 = null;
        java.lang.String str56 = locale53.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale57.getLanguage();
        boolean boolean59 = locale57.hasExtensions();
        java.lang.String str60 = locale57.getDisplayCountry();
        java.lang.String str61 = locale57.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayLanguage();
        java.lang.String str63 = locale53.getDisplayLanguage(locale57);
        java.lang.String str64 = locale29.getDisplayCountry(locale57);
        java.lang.String str65 = locale29.getDisplayName();
        java.util.Set<java.lang.String> strSet66 = locale29.getUnicodeLocaleKeys();
        java.util.Locale locale69 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str70 = locale29.getDisplayCountry(locale69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone17, locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:09:08", timeZone17);
        java.lang.String str73 = timeZone17.getID();
        boolean boolean74 = timeZone3.hasSameRules(timeZone17);
        timeZone17.setID("7:10:40 AM GMT");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar16", (calendar5.compareTo(calendar16) == 0) == calendar5.equals(calendar16));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        java.util.Locale locale3 = new java.util.Locale("zh-CN", "22 Feb 2022 07:07:38 GMT", "java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        int int10 = timeZone6.getOffset(1645513657024L);
        timeZone6.setID("fra");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone6.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone6, locale15);
        java.lang.String str20 = locale15.getDisplayCountry();
        java.lang.String str22 = locale15.getExtension('a');
        java.util.Locale.setDefault(category4, locale15);
        java.util.Locale locale24 = java.util.Locale.getDefault(category4);
        java.util.Locale locale25 = java.util.Locale.getDefault(category4);
        java.lang.String str26 = locale3.getDisplayCountry(locale25);
        java.util.Locale locale27 = locale25.stripExtensions();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        timeZone32.setRawOffset((int) (byte) 1);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone32, locale37);
        int int40 = timeZone32.getOffset(1645513689942L);
        boolean boolean41 = timeZone32.observesDaylightTime();
        java.util.Locale locale45 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str46 = locale45.getDisplayScript();
        boolean boolean47 = locale45.hasExtensions();
        java.util.Locale locale48 = locale45.stripExtensions();
        java.lang.String str49 = locale45.getCountry();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone32, locale45);
        java.lang.String str51 = locale45.getDisplayName();
        java.lang.String str52 = locale27.getDisplayLanguage(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar50", (calendar19.compareTo(calendar50) == 0) == calendar19.equals(calendar50));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.lang.String str20 = timeZone3.getID();
        timeZone3.setRawOffset(124);
        int int23 = timeZone3.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.util.Set<java.lang.String> strSet20 = locale16.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder14 = builder12.setLocale(locale13);
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        timeZone19.setRawOffset((int) (byte) 1);
        boolean boolean24 = timeZone19.observesDaylightTime();
        java.util.Calendar.Builder builder25 = builder14.setTimeZone(timeZone19);
        java.util.Date date29 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date29.setMonth(4);
        java.util.Calendar.Builder builder32 = builder14.setInstant(date29);
        java.util.Calendar.Builder builder34 = builder14.setInstant(1645513674789L);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        int int42 = timeZone38.getOffset(1645513656868L);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        boolean boolean48 = timeZone38.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder49 = builder14.setTimeZone(timeZone38);
        java.util.Locale locale53 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder56 = new java.util.Calendar.Builder();
        java.util.Date date57 = new java.util.Date();
        int int58 = date57.getSeconds();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getTimezoneOffset();
        date59.setMinutes(6);
        boolean boolean63 = date57.after(date59);
        java.util.Calendar.Builder builder64 = builder56.setInstant(date59);
        java.util.Calendar.Builder builder66 = builder64.setInstant((long) 36);
        java.util.Calendar.Builder builder70 = builder66.setWeekDate(17, 37, 6);
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.lang.String str72 = locale71.getLanguage();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone76, locale78);
        java.lang.String str80 = locale71.getDisplayName(locale78);
        java.lang.String str81 = locale78.getDisplayCountry();
        java.util.Calendar.Builder builder82 = builder66.setLocale(locale78);
        java.util.Set<java.lang.String> strSet83 = locale78.getUnicodeLocaleKeys();
        java.lang.String str84 = locale53.getDisplayLanguage(locale78);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone38, locale78);
        boolean boolean86 = attribute0.equals((java.lang.Object) timeZone38);
        timeZone38.setRawOffset(97);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar79", (calendar40.compareTo(calendar79) == 0) == calendar40.equals(calendar79));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        java.util.Locale locale3 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale3);
        int int6 = calendar5.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        int int12 = fastDateFormat11.getMaxLengthEstimate();
        java.lang.String str13 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        calendar20.set(16, (int) (byte) 0);
        java.time.Instant instant26 = calendar20.toInstant();
        int int27 = calendar20.getMinimalDaysInFirstWeek();
        int int28 = calendar20.getMinimalDaysInFirstWeek();
        calendar20.add((int) (short) 0, 100);
        calendar20.setMinimalDaysInFirstWeek(38);
        long long34 = calendar20.getTimeInMillis();
        java.lang.String str35 = fastDateFormat11.format(calendar20);
        java.util.TimeZone timeZone36 = fastDateFormat11.getTimeZone();
        calendar5.setTimeZone(timeZone36);
        java.util.TimeZone.setDefault(timeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.lang.String str20 = timeZone3.getID();
        timeZone3.setRawOffset(124);
        boolean boolean23 = timeZone3.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        calendar10.setFirstDayOfWeek(37);
        int int14 = calendar10.getGreatestMinimum(5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        int int20 = timeZone16.getOffset(1645513657024L);
        timeZone16.setID("fra");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayCountry();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone16, locale25);
        boolean boolean30 = fastDateFormat15.equals((java.lang.Object) locale25);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        int int43 = calendar37.getFirstDayOfWeek();
        int int44 = calendar37.getWeekYear();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        int int49 = timeZone45.getOffset(1645513657024L);
        timeZone45.setID("fra");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone45.hasSameRules(timeZone52);
        timeZone52.setRawOffset(9);
        calendar37.setTimeZone(timeZone52);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone60);
        int int64 = timeZone60.getOffset(1645513656868L);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone66.hasSameRules(timeZone68);
        boolean boolean70 = timeZone60.hasSameRules(timeZone66);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone72.hasSameRules(timeZone74);
        boolean boolean76 = timeZone66.hasSameRules(timeZone74);
        java.lang.String str77 = timeZone74.getID();
        calendar37.setTimeZone(timeZone74);
        java.lang.String str79 = fastDateFormat15.format(calendar37);
        boolean boolean80 = calendar10.after((java.lang.Object) calendar37);
        int int82 = calendar37.getMinimum(15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        java.util.Locale locale3 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale3);
        int int6 = calendar5.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        int int12 = fastDateFormat11.getMaxLengthEstimate();
        java.lang.String str13 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        calendar20.set(16, (int) (byte) 0);
        java.time.Instant instant26 = calendar20.toInstant();
        int int27 = calendar20.getMinimalDaysInFirstWeek();
        int int28 = calendar20.getMinimalDaysInFirstWeek();
        calendar20.add((int) (short) 0, 100);
        calendar20.setMinimalDaysInFirstWeek(38);
        long long34 = calendar20.getTimeInMillis();
        java.lang.String str35 = fastDateFormat11.format(calendar20);
        java.util.TimeZone timeZone36 = fastDateFormat11.getTimeZone();
        calendar5.setTimeZone(timeZone36);
        int int39 = timeZone36.getOffset(1645513777943L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar calendar13 = builder12.build();
        java.util.Calendar.Builder builder15 = builder12.setLenient(true);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        int int23 = timeZone19.getOffset(1645513656868L);
        boolean boolean24 = timeZone19.observesDaylightTime();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone19, locale25);
        boolean boolean27 = timeZone19.observesDaylightTime();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        boolean boolean35 = locale33.hasExtensions();
        java.lang.String str36 = locale33.getDisplayVariant();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        calendar46.clear(7);
        calendar46.set(16, (int) (byte) 0);
        java.time.Instant instant52 = calendar46.toInstant();
        boolean boolean54 = calendar46.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str55 = fastDateFormat39.format(calendar46);
        java.lang.Object obj56 = fastDateFormat39.clone();
        java.util.Locale locale57 = fastDateFormat39.getLocale();
        java.lang.String str58 = locale57.getLanguage();
        java.util.Locale locale59 = null;
        java.lang.String str60 = locale57.getDisplayVariant(locale59);
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        boolean boolean63 = locale61.hasExtensions();
        java.lang.String str64 = locale61.getDisplayCountry();
        java.lang.String str65 = locale61.getDisplayLanguage();
        java.lang.String str66 = locale61.getDisplayLanguage();
        java.lang.String str67 = locale57.getDisplayLanguage(locale61);
        java.lang.String str68 = locale33.getDisplayCountry(locale61);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone70.hasSameRules(timeZone72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone72);
        java.util.TimeZone timeZone75 = calendar74.getTimeZone();
        java.util.Locale locale79 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone75, locale79);
        java.lang.String str81 = locale61.getDisplayLanguage(locale79);
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone19, locale79);
        java.util.Calendar.Builder builder83 = builder15.setTimeZone(timeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar26", (calendar21.compareTo(calendar26) == 0) == calendar21.equals(calendar26));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.lang.String str5 = locale0.getISO3Country();
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getSeconds();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getTimezoneOffset();
        date9.setMinutes(6);
        boolean boolean13 = date7.after(date9);
        java.util.Calendar.Builder builder14 = builder6.setInstant(date9);
        java.util.Calendar.Builder builder16 = builder14.setInstant((long) 36);
        java.util.Calendar.Builder builder20 = builder16.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder30 = builder25.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder32 = builder30.setLenient(true);
        java.util.Calendar.Builder builder34 = builder32.setLenient(false);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        calendar41.clear(7);
        calendar41.set(16, (int) (byte) 0);
        java.time.Instant instant47 = calendar41.toInstant();
        java.util.TimeZone timeZone48 = calendar41.getTimeZone();
        java.util.TimeZone timeZone49 = calendar41.getTimeZone();
        java.lang.String str50 = timeZone49.getID();
        java.util.Calendar.Builder builder51 = builder34.setTimeZone(timeZone49);
        java.util.Calendar.Builder builder55 = builder34.setWeekDate(50, 59, 2022);
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.lang.String str63 = locale58.getDisplayCountry(locale62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale58);
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder66 = builder65.clear();
        java.util.Locale.Builder builder67 = builder65.clear();
        java.util.Locale locale68 = builder65.build();
        java.lang.String str69 = locale68.getLanguage();
        java.lang.String str70 = locale58.getDisplayName(locale68);
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.lang.String str72 = locale71.getLanguage();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone76, locale78);
        java.lang.String str80 = locale71.getDisplayName(locale78);
        java.util.Locale locale81 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet82 = locale81.getUnicodeLocaleKeys();
        java.lang.String str83 = locale78.getDisplayName(locale81);
        java.lang.String str84 = locale78.getISO3Language();
        java.lang.String str85 = locale78.getVariant();
        java.util.Set<java.lang.String> strSet86 = locale78.getUnicodeLocaleKeys();
        java.lang.String str87 = locale78.getDisplayScript();
        java.lang.String str88 = locale68.getDisplayVariant(locale78);
        java.util.Calendar.Builder builder89 = builder55.setLocale(locale68);
        java.util.Locale.Builder builder90 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder91 = builder90.clear();
        java.util.Locale.Builder builder92 = builder90.clear();
        java.util.Locale locale93 = builder90.build();
        java.util.Locale.Builder builder94 = builder90.clear();
        java.util.Locale locale95 = builder94.build();
        java.util.Calendar.Builder builder96 = builder89.setLocale(locale95);
        java.lang.String str97 = locale0.getDisplayCountry(locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar41", (calendar2.compareTo(calendar41) == 0) == calendar2.equals(calendar41));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        java.util.Locale locale3 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale12 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.lang.String str19 = locale12.getDisplayVariant(locale18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone7, locale18);
        boolean boolean21 = timeZone7.observesDaylightTime();
        java.util.Locale locale23 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone7, locale25);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone33);
        int int37 = timeZone33.getOffset(1645513656868L);
        boolean boolean38 = timeZone33.observesDaylightTime();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone33, locale39);
        java.lang.String str41 = locale25.getDisplayLanguage(locale39);
        boolean boolean42 = locale25.hasExtensions();
        java.lang.String str43 = locale3.getDisplayCountry(locale25);
        java.util.Locale locale44 = locale3.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar40", (calendar35.compareTo(calendar40) == 0) == calendar35.equals(calendar40));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        boolean boolean6 = languageRangeList1.isEmpty();
        boolean boolean7 = languageRangeList1.isEmpty();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor8 = languageRangeList1.listIterator();
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getSeconds();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        date12.setMinutes(6);
        boolean boolean16 = date10.after(date12);
        java.util.Calendar.Builder builder17 = builder9.setInstant(date12);
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 36);
        java.util.Calendar.Builder builder23 = builder19.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder27 = builder19.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder31 = builder27.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.lang.String str41 = locale32.getDisplayName(locale39);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale39.getDisplayName(locale42);
        java.lang.String str45 = locale39.getISO3Language();
        java.lang.String str46 = locale39.getVariant();
        java.util.Calendar.Builder builder47 = builder31.setLocale(locale39);
        int int48 = languageRangeList1.indexOf((java.lang.Object) builder31);
        java.util.Calendar.Builder builder49 = new java.util.Calendar.Builder();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        date52.setMinutes(6);
        boolean boolean56 = date50.after(date52);
        java.util.Calendar.Builder builder57 = builder49.setInstant(date52);
        java.util.Calendar.Builder builder59 = builder57.setInstant((long) 36);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder61 = builder59.setLocale(locale60);
        java.util.Calendar.Builder builder63 = builder61.setLenient(false);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66);
        timeZone66.setRawOffset((int) (byte) 1);
        boolean boolean71 = timeZone66.observesDaylightTime();
        java.util.Calendar.Builder builder72 = builder61.setTimeZone(timeZone66);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        boolean boolean78 = timeZone66.hasSameRules(timeZone74);
        java.util.Locale locale80 = new java.util.Locale("Chinese (China)");
        java.util.Locale locale81 = locale80.stripExtensions();
        java.util.Set<java.lang.Character> charSet82 = locale80.getExtensionKeys();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone66, locale80);
        java.util.Calendar.Builder builder84 = builder31.setTimeZone(timeZone66);
        java.util.Calendar calendar85 = builder31.build();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar83", (calendar40.compareTo(calendar83) == 0) == calendar40.equals(calendar83));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale8 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale8.getScript();
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.lang.String str15 = locale8.getDisplayVariant(locale14);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone3, locale14);
        boolean boolean17 = timeZone3.observesDaylightTime();
        java.util.Locale locale19 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale23 = java.util.Locale.US;
        java.lang.String str24 = locale21.getDisplayCountry(locale23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone3, locale21);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone29);
        int int33 = timeZone29.getOffset(1645513656868L);
        boolean boolean34 = timeZone29.observesDaylightTime();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone29, locale35);
        java.lang.String str37 = locale21.getDisplayLanguage(locale35);
        java.lang.String str38 = locale35.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar36", (calendar31.compareTo(calendar36) == 0) == calendar31.equals(calendar36));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        timeZone8.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone8);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone8, locale13);
        timeZone8.setRawOffset((int) (byte) -1);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        boolean boolean25 = locale23.hasExtensions();
        java.lang.String str26 = locale23.getScript();
        java.lang.String str27 = locale22.getDisplayName(locale23);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone8, locale22);
        java.util.Locale locale29 = locale22.stripExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar28", (calendar19.compareTo(calendar28) == 0) == calendar19.equals(calendar28));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar10.clear(7);
        calendar10.set(16, (int) (byte) 0);
        java.time.Instant instant16 = calendar10.toInstant();
        boolean boolean18 = calendar10.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str19 = fastDateFormat3.format(calendar10);
        java.lang.String str20 = calendar10.getCalendarType();
        boolean boolean21 = calendar10.isWeekDateSupported();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        int int26 = timeZone22.getOffset(1645513657024L);
        timeZone22.setID("fra");
        calendar10.setTimeZone(timeZone22);
        int int31 = timeZone22.getOffset(1645513660313L);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        boolean boolean35 = locale33.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale33);
        java.lang.String str37 = locale33.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone22, locale33);
        java.util.Locale.Category category39 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale40 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category39, locale40);
        java.util.Locale locale42 = java.util.Locale.getDefault(category39);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Locale locale47 = new java.util.Locale("", "hi!", "");
        java.lang.String str48 = locale43.getDisplayVariant(locale47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale43);
        java.lang.String str50 = locale43.getDisplayVariant();
        java.util.Locale.setDefault(category39, locale43);
        java.util.Locale locale52 = java.util.Locale.getDefault(category39);
        java.lang.String str53 = locale52.getISO3Language();
        java.lang.String str54 = locale33.getDisplayVariant(locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar49", (calendar10.compareTo(calendar49) == 0) == calendar10.equals(calendar49));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder18 = builder10.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.lang.String str32 = locale23.getDisplayName(locale30);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayName(locale33);
        java.lang.String str36 = locale30.getISO3Language();
        java.lang.String str37 = locale30.getVariant();
        java.util.Calendar.Builder builder38 = builder22.setLocale(locale30);
        java.util.Calendar.Builder builder42 = builder38.setWeekDate(1969, 57, 53);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49, locale51);
        java.lang.String str53 = locale44.getDisplayName(locale51);
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleKeys();
        java.lang.String str56 = locale51.getDisplayName(locale54);
        java.lang.String str57 = locale54.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale54);
        java.lang.String str59 = locale54.toLanguageTag();
        java.util.Calendar.Builder builder60 = builder38.setLocale(locale54);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone62.hasSameRules(timeZone64);
        java.util.Locale locale66 = java.util.Locale.CHINA;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone64, locale66);
        timeZone64.setID("7:08:14 AM UTC");
        java.util.Calendar.Builder builder70 = builder38.setTimeZone(timeZone64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar67", (calendar31.compareTo(calendar67) == 0) == calendar31.equals(calendar67));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.lang.String str28 = locale24.getDisplayLanguage();
        java.lang.String str29 = locale24.getDisplayLanguage();
        java.lang.String str30 = locale20.getDisplayLanguage(locale24);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale33.getDisplayVariant(locale37);
        java.lang.String str39 = locale31.getDisplayVariant(locale33);
        java.lang.String str40 = locale24.getDisplayScript(locale31);
        java.lang.String str41 = locale24.getScript();
        java.util.Locale locale42 = locale24.stripExtensions();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45);
        timeZone45.setRawOffset((int) (byte) 1);
        boolean boolean50 = timeZone45.observesDaylightTime();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone45);
        java.util.Locale locale52 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        boolean boolean54 = locale52.hasExtensions();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone45, locale52);
        calendar55.clear(0);
        boolean boolean58 = locale42.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar51", (calendar9.compareTo(calendar51) == 0) == calendar9.equals(calendar51));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        int int19 = timeZone15.getOffset(1645513656868L);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        boolean boolean25 = timeZone15.hasSameRules(timeZone21);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        boolean boolean31 = timeZone21.hasSameRules(timeZone29);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getSeconds();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        date35.setMinutes(6);
        boolean boolean39 = date33.after(date35);
        java.util.Calendar.Builder builder40 = builder32.setInstant(date35);
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 36);
        java.util.Calendar.Builder builder44 = builder42.setLenient(true);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.lang.String str47 = locale46.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale46);
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.lang.String str50 = locale46.getDisplayName(locale49);
        java.lang.String str51 = locale46.getDisplayCountry();
        java.lang.String str52 = locale46.getDisplayScript();
        java.util.Calendar.Builder builder53 = builder42.setLocale(locale46);
        java.util.Locale locale54 = null;
        java.lang.String str55 = locale46.getDisplayVariant(locale54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21, locale46);
        calendar6.setTimeZone(timeZone21);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = locale58.getDisplayVariant();
        java.lang.String str61 = locale58.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str64 = fastDateFormat62.format((long) ' ');
        java.lang.String str66 = fastDateFormat62.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj67 = fastDateFormat62.clone();
        java.util.Locale locale68 = fastDateFormat62.getLocale();
        java.lang.String str69 = locale58.getDisplayCountry(locale68);
        java.lang.String str70 = timeZone21.getDisplayName(locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar17", (calendar6.compareTo(calendar17) == 0) == calendar6.equals(calendar17));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.setMinimalDaysInFirstWeek(24);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        calendar17.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone22 = calendar17.getTimeZone();
        calendar7.setTimeZone(timeZone22);
        java.lang.String str24 = timeZone22.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar17", (calendar7.compareTo(calendar17) == 0) == calendar7.equals(calendar17));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.lang.String str14 = locale9.getDisplayCountry();
        java.lang.String str16 = locale9.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.lang.String str23 = locale18.getDisplayCountry(locale22);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.lang.String str29 = locale24.getDisplayVariant(locale28);
        java.lang.String str30 = locale24.getISO3Language();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        calendar40.clear(7);
        calendar40.set(16, (int) (byte) 0);
        java.time.Instant instant46 = calendar40.toInstant();
        boolean boolean48 = calendar40.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str49 = fastDateFormat33.format(calendar40);
        java.lang.Object obj50 = fastDateFormat33.clone();
        java.util.Locale locale51 = fastDateFormat33.getLocale();
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = locale51.getDisplayName();
        java.lang.String str54 = locale24.getDisplayCountry(locale51);
        java.lang.String str55 = locale22.getDisplayCountry(locale24);
        java.util.Locale locale56 = locale24.stripExtensions();
        java.lang.String str57 = locale9.getDisplayCountry(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar40", (calendar13.compareTo(calendar40) == 0) == calendar13.equals(calendar40));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset(21);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category7, locale9);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getSeconds();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getTimezoneOffset();
        date14.setMinutes(6);
        boolean boolean18 = date12.after(date14);
        java.util.Calendar.Builder builder19 = builder11.setInstant(date14);
        java.util.Calendar.Builder builder21 = builder19.setInstant((long) 36);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder23 = builder21.setLocale(locale22);
        java.lang.String str24 = locale22.toLanguageTag();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str26 = locale22.getISO3Language();
        java.lang.String str27 = locale22.getLanguage();
        java.util.Locale.setDefault(category7, locale22);
        java.util.Locale locale29 = java.util.Locale.getDefault(category7);
        java.util.Locale locale30 = java.util.Locale.getDefault(category7);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        calendar47.set(16, (int) (byte) 0);
        java.time.Instant instant53 = calendar47.toInstant();
        boolean boolean55 = calendar47.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str56 = fastDateFormat40.format(calendar47);
        java.lang.Object obj57 = fastDateFormat40.clone();
        java.util.Locale locale58 = fastDateFormat40.getLocale();
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = locale58.getDisplayName();
        java.lang.String str61 = locale31.getDisplayCountry(locale58);
        java.lang.String str62 = locale30.getDisplayName(locale58);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone2, locale30);
        java.lang.String str64 = locale30.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar63", (calendar47.compareTo(calendar63) == 0) == calendar47.equals(calendar63));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        timeZone3.setID("FastDateFormat[d MMMM yyyy]");
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        calendar22.clear(7);
        calendar22.set(16, (int) (byte) 0);
        java.time.Instant instant28 = calendar22.toInstant();
        boolean boolean30 = calendar22.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str31 = fastDateFormat15.format(calendar22);
        java.lang.String str32 = calendar22.getCalendarType();
        boolean boolean33 = calendar22.isWeekDateSupported();
        java.time.Instant instant34 = calendar22.toInstant();
        java.util.Date date35 = java.util.Date.from(instant34);
        date35.setHours(30);
        boolean boolean38 = timeZone3.inDaylightTime(date35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar22", (calendar5.compareTo(calendar22) == 0) == calendar5.equals(calendar22));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        java.lang.String str7 = timeZone2.getID();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale16, locale17, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale28, locale29, locale30, locale31, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList34);
        int int37 = languageRangeList14.lastIndexOf((java.lang.Object) languageRangeList26);
        java.lang.String[] strArray56 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = languageRangeList26.retainAll((java.util.Collection<java.lang.String>) strList57);
        boolean boolean60 = languageRangeList12.removeAll((java.util.Collection<java.lang.String>) strList57);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("it-IT");
        boolean boolean63 = languageRangeList12.equals((java.lang.Object) locale62);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone2, locale62);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("fr-FR");
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "");
        java.lang.String str73 = locale68.getDisplayCountry(locale72);
        java.lang.String str74 = locale72.getISO3Language();
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.lang.String str76 = locale75.getLanguage();
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Locale locale81 = new java.util.Locale("", "hi!", "");
        java.lang.String str82 = locale77.getDisplayVariant(locale81);
        java.lang.String str83 = locale75.getDisplayVariant(locale77);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(locale77);
        java.lang.String str85 = locale72.getDisplayCountry(locale77);
        java.lang.String str86 = locale77.getDisplayLanguage();
        java.lang.String str87 = locale77.getCountry();
        java.util.Locale.setDefault(locale77);
        java.lang.String str89 = locale67.getDisplayCountry(locale77);
        java.util.Locale locale91 = new java.util.Locale("22 Feb 2022 07:08:24 GMT");
        java.lang.String str92 = locale67.getDisplayName(locale91);
        java.lang.String str93 = timeZone65.getDisplayName(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar64 and calendar84", (calendar64.compareTo(calendar84) == 0) == calendar64.equals(calendar84));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        java.util.Date date1 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMinutes();
        date15.setHours(43);
        date15.setSeconds(130);
        boolean boolean21 = date1.after(date15);
        int int22 = date1.getTimezoneOffset();
        date1.setDate(16);
        int int25 = date1.getYear();
        int int26 = date1.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar14", (calendar10.compareTo(calendar14) == 0) == calendar10.equals(calendar14));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.util.Locale locale16 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str17 = locale9.getDisplayScript(locale16);
        java.lang.Object obj18 = locale9.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar12", (calendar8.compareTo(calendar12) == 0) == calendar8.equals(calendar12));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        timeZone10.setRawOffset(54);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale14);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(7);
        calendar27.set(16, (int) (byte) 0);
        java.time.Instant instant33 = calendar27.toInstant();
        boolean boolean35 = calendar27.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str36 = fastDateFormat20.format(calendar27);
        java.lang.Object obj37 = fastDateFormat20.clone();
        java.util.Locale locale38 = fastDateFormat20.getLocale();
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        boolean boolean44 = locale42.hasExtensions();
        java.lang.String str45 = locale42.getDisplayCountry();
        java.lang.String str46 = locale42.getDisplayLanguage();
        java.lang.String str47 = locale42.getDisplayLanguage();
        java.lang.String str48 = locale38.getDisplayLanguage(locale42);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getVariant();
        java.lang.String str51 = locale38.getDisplayLanguage(locale49);
        java.lang.String str52 = locale14.getDisplayCountry(locale38);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.lang.String str58 = locale53.getDisplayVariant(locale57);
        java.lang.String str59 = locale38.getDisplayLanguage(locale57);
        java.util.Locale locale61 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale locale65 = java.util.Locale.US;
        java.lang.String str66 = locale63.getDisplayCountry(locale65);
        java.lang.String str67 = locale57.getDisplayLanguage(locale65);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone10, locale57);
        java.lang.String str69 = timeZone10.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar68", (calendar27.compareTo(calendar68) == 0) == calendar27.equals(calendar68));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.util.Locale locale16 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str17 = locale9.getDisplayScript(locale16);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale9.getDisplayCountry(locale18);
        java.lang.String str23 = locale18.toLanguageTag();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar12", (calendar8.compareTo(calendar12) == 0) == calendar8.equals(calendar12));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int2 = timeZone0.getRawOffset();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.lang.String str12 = locale4.getDisplayVariant(locale6);
        java.lang.String str13 = locale4.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale4);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        boolean boolean24 = calendar21.isWeekDateSupported();
        int int26 = calendar21.getMinimum(4);
        calendar21.setMinimalDaysInFirstWeek(15);
        int int29 = calendar21.getWeeksInWeekYear();
        java.lang.String str30 = fastDateFormat14.format(calendar21);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getSeconds();
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getTimezoneOffset();
        date34.setMinutes(6);
        boolean boolean38 = date32.after(date34);
        java.util.Calendar.Builder builder39 = builder31.setInstant(date34);
        java.util.Calendar.Builder builder41 = builder39.setInstant((long) 36);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder43 = builder41.setLocale(locale42);
        java.util.Calendar.Builder builder45 = builder43.setLenient(false);
        java.util.Calendar.Builder builder47 = builder43.setLenient(false);
        java.util.Calendar.Builder builder51 = builder43.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Calendar.Builder builder54 = builder51.setLocale(locale52);
        java.lang.String str55 = locale52.getISO3Country();
        java.lang.String str56 = locale52.getDisplayName();
        java.util.Set<java.lang.Character> charSet57 = locale52.getExtensionKeys();
        boolean boolean58 = fastDateFormat14.equals((java.lang.Object) charSet57);
        java.lang.String str60 = fastDateFormat14.format(1645513677743L);
        java.util.TimeZone timeZone61 = fastDateFormat14.getTimeZone();
        java.lang.String str62 = fastDateFormat14.toString();
        java.util.TimeZone timeZone63 = fastDateFormat14.getTimeZone();
        java.lang.String str64 = timeZone63.getID();
        boolean boolean65 = timeZone0.hasSameRules(timeZone63);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone69);
        int int73 = timeZone69.getOffset(1645513656868L);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone75.hasSameRules(timeZone77);
        boolean boolean79 = timeZone69.hasSameRules(timeZone75);
        timeZone75.setRawOffset(6);
        timeZone75.setRawOffset((int) '#');
        int int85 = timeZone75.getOffset((long) 40);
        java.lang.String str86 = timeZone75.getID();
        int int87 = timeZone75.getRawOffset();
        boolean boolean88 = timeZone0.hasSameRules(timeZone75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar71", (calendar21.compareTo(calendar71) == 0) == calendar21.equals(calendar71));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getFirstDayOfWeek();
        calendar6.set(48, 44, 31, 16, (int) (short) 0);
        calendar6.setMinimalDaysInFirstWeek(23);
        int int21 = calendar6.getWeeksInWeekYear();
        java.text.Format.Field field22 = null;
        java.text.FieldPosition fieldPosition23 = new java.text.FieldPosition(field22);
        java.lang.String str24 = fieldPosition23.toString();
        boolean boolean25 = calendar6.after((java.lang.Object) str24);
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition(7);
        fieldPosition27.setEndIndex(8);
        int int30 = fieldPosition27.getEndIndex();
        fieldPosition27.setEndIndex(12);
        int int33 = fieldPosition27.getEndIndex();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        java.util.TimeZone.setDefault(timeZone37);
        boolean boolean41 = fieldPosition27.equals((java.lang.Object) timeZone37);
        boolean boolean42 = timeZone37.observesDaylightTime();
        calendar6.setTimeZone(timeZone37);
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Date date45 = new java.util.Date();
        int int46 = date45.getSeconds();
        java.util.Date date47 = new java.util.Date();
        int int48 = date47.getTimezoneOffset();
        date47.setMinutes(6);
        boolean boolean51 = date45.after(date47);
        java.util.Calendar.Builder builder52 = builder44.setInstant(date47);
        java.util.Calendar.Builder builder54 = builder52.setInstant((long) 36);
        java.util.Calendar.Builder builder58 = builder54.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder63 = builder58.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder68 = builder63.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder70 = builder63.setLenient(true);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        int int75 = timeZone71.getOffset(1645513657024L);
        timeZone71.setID("fra");
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone71.hasSameRules(timeZone78);
        java.util.Locale locale80 = java.util.Locale.CHINESE;
        java.lang.String str81 = locale80.getLanguage();
        boolean boolean82 = locale80.hasExtensions();
        java.lang.String str83 = locale80.getDisplayCountry();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone71, locale80);
        java.util.Calendar.Builder builder85 = builder70.setTimeZone(timeZone71);
        timeZone71.setRawOffset(0);
        int int89 = timeZone71.getOffset((long) 100);
        boolean boolean90 = calendar6.before((java.lang.Object) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar84", (calendar39.compareTo(calendar84) == 0) == calendar39.equals(calendar84));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        java.util.Locale locale1 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale1.getDisplayVariant(locale7);
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = locale12.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale12);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        calendar25.clear(7);
        calendar25.set(16, (int) (byte) 0);
        java.time.Instant instant31 = calendar25.toInstant();
        boolean boolean33 = calendar25.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str34 = fastDateFormat18.format(calendar25);
        java.lang.Object obj35 = fastDateFormat18.clone();
        java.util.Locale locale36 = fastDateFormat18.getLocale();
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = null;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.lang.String str44 = locale40.getDisplayLanguage();
        java.lang.String str45 = locale40.getDisplayLanguage();
        java.lang.String str46 = locale36.getDisplayLanguage(locale40);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.lang.String str48 = locale47.getVariant();
        java.lang.String str49 = locale36.getDisplayLanguage(locale47);
        java.lang.String str50 = locale12.getDisplayCountry(locale36);
        java.lang.String str51 = locale7.getDisplayScript(locale12);
        java.util.Set<java.lang.String> strSet52 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str53 = locale12.getVariant();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57, locale59);
        calendar60.clear(7);
        calendar60.setMinimalDaysInFirstWeek(69);
        boolean boolean66 = calendar60.after((java.lang.Object) (byte) 10);
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category67, locale68);
        java.util.Locale locale70 = java.util.Locale.getDefault(category67);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Locale locale75 = new java.util.Locale("", "hi!", "");
        java.lang.String str76 = locale71.getDisplayVariant(locale75);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale71);
        java.lang.String str78 = locale71.getDisplayVariant();
        java.util.Locale.setDefault(category67, locale71);
        boolean boolean80 = calendar60.after((java.lang.Object) locale71);
        java.lang.String str81 = locale12.getDisplayVariant(locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar60", (calendar25.compareTo(calendar60) == 0) == calendar25.equals(calendar60));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.util.Locale locale44 = fastDateFormat26.getLocale();
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = locale44.getDisplayLanguage(locale48);
        java.lang.String str55 = locale20.getDisplayCountry(locale48);
        java.lang.String str56 = locale20.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str61 = locale20.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone8, locale20);
        java.text.AttributedCharacterIterator.Attribute attribute63 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = attribute63.equals((java.lang.Object) timeZone64);
        java.lang.String str66 = attribute63.toString();
        java.lang.String str67 = attribute63.toString();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        int int72 = timeZone68.getOffset(1645513657024L);
        timeZone68.setID("fra");
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone68.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        boolean boolean79 = locale77.hasExtensions();
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone68, locale77);
        boolean boolean82 = attribute63.equals((java.lang.Object) calendar81);
        java.util.Date date83 = calendar81.getTime();
        boolean boolean84 = calendar62.after((java.lang.Object) date83);
        date83.setTime(1644476977897L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar81", (calendar7.compareTo(calendar81) == 0) == calendar7.equals(calendar81));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale12.getDisplayVariant();
        java.util.Locale.Builder builder16 = builder4.setLocale(locale12);
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder18 = builder16.clear();
        java.util.Locale locale19 = builder16.build();
        boolean boolean20 = attribute0.equals((java.lang.Object) locale19);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone25);
        int int29 = timeZone25.getOffset(1645513656868L);
        boolean boolean30 = timeZone25.observesDaylightTime();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone25, locale31);
        java.util.TimeZone.setDefault(timeZone25);
        int int34 = timeZone25.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone25);
        java.util.TimeZone timeZone36 = fastDateFormat35.getTimeZone();
        boolean boolean37 = attribute0.equals((java.lang.Object) timeZone36);
        java.util.Locale locale39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale39);
        java.util.TimeZone timeZone41 = fastDateFormat40.getTimeZone();
        timeZone41.setRawOffset((int) 'a');
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41);
        java.lang.Object obj45 = timeZone41.clone();
        boolean boolean46 = attribute0.equals((java.lang.Object) timeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar44", (calendar13.compareTo(calendar44) == 0) == calendar13.equals(calendar44));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone8);
        int int12 = timeZone8.getOffset(1645513656868L);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        boolean boolean18 = timeZone8.hasSameRules(timeZone14);
        java.lang.String str19 = timeZone8.getID();
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.lang.String str22 = locale21.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale21);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone8, locale21);
        calendar24.setMinimalDaysInFirstWeek(44);
        java.util.Locale locale28 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getScript();
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale28.getDisplayVariant(locale34);
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        boolean boolean37 = calendar24.after((java.lang.Object) strSet36);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar24", (calendar10.compareTo(calendar24) == 0) == calendar10.equals(calendar24));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone11 = calendar6.getTimeZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone11);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        calendar22.clear(7);
        calendar22.set(16, (int) (byte) 0);
        java.time.Instant instant28 = calendar22.toInstant();
        boolean boolean30 = calendar22.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str31 = fastDateFormat15.format(calendar22);
        java.lang.Object obj32 = fastDateFormat15.clone();
        java.util.Locale locale33 = fastDateFormat15.getLocale();
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayCountry();
        java.lang.String str41 = locale37.getDisplayLanguage();
        java.lang.String str42 = locale37.getDisplayLanguage();
        java.lang.String str43 = locale33.getDisplayLanguage(locale37);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Locale locale50 = new java.util.Locale("", "hi!", "");
        java.lang.String str51 = locale46.getDisplayVariant(locale50);
        java.lang.String str52 = locale44.getDisplayVariant(locale46);
        java.lang.String str53 = locale37.getDisplayScript(locale44);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone11, locale37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar12", (calendar6.compareTo(calendar12) == 0) == calendar6.equals(calendar12));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        languageRangeList13.clear();
        int int26 = languageRangeList13.size();
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale33 = new java.util.Locale("", "hi!", "");
        java.lang.String str34 = locale29.getDisplayCountry(locale33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale29);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        java.lang.String str45 = locale36.getDisplayName(locale43);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleKeys();
        java.lang.String str48 = locale43.getDisplayName(locale46);
        java.lang.String str49 = locale43.getISO3Language();
        boolean boolean50 = fastDateFormat35.equals((java.lang.Object) locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str53 = fastDateFormat51.format((long) ' ');
        java.lang.String str55 = fastDateFormat51.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj56 = fastDateFormat51.clone();
        java.util.Locale locale57 = fastDateFormat51.getLocale();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale57);
        java.lang.String str59 = fastDateFormat35.format(calendar58);
        java.time.Instant instant60 = calendar58.toInstant();
        calendar58.setFirstDayOfWeek((int) '#');
        java.lang.Class<?> wildcardClass63 = calendar58.getClass();
        int int64 = languageRangeList13.lastIndexOf((java.lang.Object) calendar58);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor65 = languageRangeList13.listIterator();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar44 and calendar58", (calendar44.compareTo(calendar58) == 0) == calendar44.equals(calendar58));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        java.util.TimeZone timeZone12 = calendar6.getTimeZone();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone16);
        java.util.TimeZone timeZone19 = calendar18.getTimeZone();
        boolean boolean20 = timeZone12.hasSameRules(timeZone19);
        java.lang.Object obj21 = timeZone12.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar18", (calendar6.compareTo(calendar18) == 0) == calendar6.equals(calendar18));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        boolean boolean26 = timeZone18.hasSameRules(timeZone23);
        timeZone18.setID("22 Feb 2022 07:07:53 GMT");
        java.util.Locale locale30 = new java.util.Locale("February 22, 2022");
        java.lang.String str31 = locale30.getScript();
        java.util.Locale locale35 = new java.util.Locale("7:07:38 AM UTC", "java.text.ParsePosition[index=52,errorIndex=0]", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str36 = locale30.getDisplayLanguage(locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone18, locale30);
        java.lang.String str39 = fastDateFormat37.format(1645513657009L);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone43);
        int int47 = timeZone43.getOffset(1645513656868L);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        boolean boolean53 = timeZone43.hasSameRules(timeZone49);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        boolean boolean59 = timeZone49.hasSameRules(timeZone57);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone62);
        boolean boolean65 = timeZone57.hasSameRules(timeZone62);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder67 = builder66.clear();
        java.util.Locale locale68 = builder67.build();
        java.util.Locale.Builder builder69 = builder67.clearExtensions();
        java.util.Locale locale70 = builder69.build();
        java.util.Set<java.lang.Character> charSet71 = locale70.getExtensionKeys();
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone75.hasSameRules(timeZone76);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone76.hasSameRules(timeZone78);
        java.util.Locale locale80 = java.util.Locale.CHINA;
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone78, locale80);
        calendar81.clear(7);
        calendar81.set(16, (int) (byte) 0);
        java.time.Instant instant87 = calendar81.toInstant();
        boolean boolean89 = calendar81.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str90 = fastDateFormat74.format(calendar81);
        java.lang.Object obj91 = fastDateFormat74.clone();
        java.util.Locale locale92 = fastDateFormat74.getLocale();
        java.lang.String str93 = locale92.getLanguage();
        java.lang.String str94 = locale92.getVariant();
        java.lang.String str95 = locale70.getDisplayVariant(locale92);
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(timeZone62, locale70);
        int int97 = calendar96.getMinimalDaysInFirstWeek();
        java.lang.String str98 = fastDateFormat37.format(calendar96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar81", (calendar45.compareTo(calendar81) == 0) == calendar45.equals(calendar81));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        boolean boolean11 = timeZone1.hasSameRules(timeZone7);
        timeZone7.setRawOffset(21);
        boolean boolean14 = timeZone7.observesDaylightTime();
        java.util.Locale locale18 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.text.AttributedCharacterIterator.Attribute attribute20 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = attribute20.equals((java.lang.Object) timeZone21);
        boolean boolean23 = timeZone21.observesDaylightTime();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale.Builder builder26 = builder24.clear();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale.Builder builder28 = builder26.clearExtensions();
        java.util.Locale locale29 = builder26.build();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone21, locale29);
        java.lang.String str31 = locale18.getDisplayName(locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7, locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar30", (calendar10.compareTo(calendar30) == 0) == calendar10.equals(calendar30));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.util.TimeZone timeZone17 = calendar9.getTimeZone();
        calendar9.setLenient(false);
        calendar9.setLenient(false);
        java.util.Date date22 = calendar9.getTime();
        java.util.Locale locale26 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str27 = locale26.getDisplayCountry();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale26);
        java.util.Date date29 = calendar28.getTime();
        boolean boolean30 = date22.equals((java.lang.Object) date29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar28", (calendar9.compareTo(calendar28) == 0) == calendar9.equals(calendar28));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(53);
        java.lang.Object obj9 = fastDateFormat2.parseObject("", parsePosition8);
        java.util.TimeZone timeZone10 = fastDateFormat2.getTimeZone();
        int int12 = timeZone10.getOffset((-58914147076879L));
        java.util.Locale locale14 = new java.util.Locale("7:07:37 AM UTC");
        java.lang.String str15 = locale14.getISO3Country();
        java.util.Locale locale16 = locale14.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone10, locale16);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.lang.String str25 = locale20.getDisplayVariant(locale24);
        java.lang.String str26 = locale18.getDisplayVariant(locale20);
        java.lang.String str27 = locale18.getScript();
        java.lang.String str28 = locale18.getISO3Country();
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getSeconds();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        date32.setMinutes(6);
        boolean boolean36 = date30.after(date32);
        java.util.Calendar.Builder builder37 = builder29.setInstant(date32);
        java.util.Calendar.Builder builder39 = builder37.setInstant((long) 36);
        java.util.Calendar.Builder builder43 = builder39.setWeekDate(17, 37, 6);
        java.util.Calendar calendar44 = builder39.build();
        java.util.Calendar.Builder builder46 = builder39.setLenient(true);
        java.util.Locale locale48 = new java.util.Locale("feb 22, 2022 7:07:42 am");
        java.util.Calendar.Builder builder49 = builder46.setLocale(locale48);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        calendar59.clear(7);
        calendar59.set(16, (int) (byte) 0);
        java.time.Instant instant65 = calendar59.toInstant();
        boolean boolean67 = calendar59.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str68 = fastDateFormat52.format(calendar59);
        java.lang.Object obj69 = fastDateFormat52.clone();
        java.util.Locale locale70 = fastDateFormat52.getLocale();
        java.lang.String str71 = locale70.getLanguage();
        java.util.Locale locale72 = null;
        java.lang.String str73 = locale70.getDisplayVariant(locale72);
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.lang.String str75 = locale74.getLanguage();
        boolean boolean76 = locale74.hasExtensions();
        java.lang.String str77 = locale74.getDisplayCountry();
        java.lang.String str78 = locale74.getDisplayLanguage();
        java.lang.String str79 = locale74.getDisplayLanguage();
        java.lang.String str80 = locale70.getDisplayLanguage(locale74);
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.lang.String str82 = locale81.getVariant();
        java.lang.String str83 = locale70.getDisplayLanguage(locale81);
        java.util.Calendar.Builder builder84 = builder46.setLocale(locale81);
        java.lang.String str85 = locale81.getDisplayCountry();
        java.lang.String str86 = locale18.getDisplayCountry(locale81);
        java.lang.String str87 = locale16.getDisplayName(locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar59", (calendar17.compareTo(calendar59) == 0) == calendar17.equals(calendar59));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone11);
        int int15 = timeZone11.getOffset(1645513656868L);
        boolean boolean16 = timeZone11.observesDaylightTime();
        boolean boolean17 = timeZone1.hasSameRules(timeZone11);
        boolean boolean18 = timeZone11.observesDaylightTime();
        timeZone11.setID("Feb 22, 2022 7:12:11 AM");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar13", (calendar7.compareTo(calendar13) == 0) == calendar7.equals(calendar13));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset(21);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category7, locale9);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getSeconds();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getTimezoneOffset();
        date14.setMinutes(6);
        boolean boolean18 = date12.after(date14);
        java.util.Calendar.Builder builder19 = builder11.setInstant(date14);
        java.util.Calendar.Builder builder21 = builder19.setInstant((long) 36);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder23 = builder21.setLocale(locale22);
        java.lang.String str24 = locale22.toLanguageTag();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str26 = locale22.getISO3Language();
        java.lang.String str27 = locale22.getLanguage();
        java.util.Locale.setDefault(category7, locale22);
        java.util.Locale locale29 = java.util.Locale.getDefault(category7);
        java.util.Locale locale30 = java.util.Locale.getDefault(category7);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        calendar47.set(16, (int) (byte) 0);
        java.time.Instant instant53 = calendar47.toInstant();
        boolean boolean55 = calendar47.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str56 = fastDateFormat40.format(calendar47);
        java.lang.Object obj57 = fastDateFormat40.clone();
        java.util.Locale locale58 = fastDateFormat40.getLocale();
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = locale58.getDisplayName();
        java.lang.String str61 = locale31.getDisplayCountry(locale58);
        java.lang.String str62 = locale30.getDisplayName(locale58);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone2, locale30);
        java.lang.String str64 = locale30.toLanguageTag();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar63", (calendar47.compareTo(calendar63) == 0) == calendar47.equals(calendar63));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:09:25 GMT");
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder5 = builder3.setInstant(1645513671992L);
        java.util.Calendar.Builder builder8 = builder3.setWeekDefinition(7, (int) (short) 1);
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getSeconds();
        long long11 = date9.getTime();
        date9.setTime((long) 37);
        date9.setDate((int) (short) 0);
        int int16 = date9.getYear();
        int int17 = date9.getYear();
        date9.setMinutes(100);
        java.time.Instant instant20 = date9.toInstant();
        int int21 = date9.getYear();
        java.util.Calendar.Builder builder22 = builder8.setInstant(date9);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale31 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getScript();
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale31.getDisplayVariant(locale37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone26, locale37);
        boolean boolean40 = timeZone26.observesDaylightTime();
        java.util.Locale locale42 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale43 = locale42.stripExtensions();
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.lang.String str45 = locale43.getDisplayLanguage(locale44);
        java.util.Locale locale46 = java.util.Locale.US;
        java.lang.String str47 = locale44.getDisplayCountry(locale46);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone26, locale44);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone50.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone52);
        int int56 = timeZone52.getOffset(1645513656868L);
        boolean boolean57 = timeZone52.observesDaylightTime();
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone52, locale58);
        java.lang.String str60 = locale44.getDisplayLanguage(locale58);
        boolean boolean61 = locale44.hasExtensions();
        java.util.Calendar.Builder builder62 = builder8.setLocale(locale44);
        java.util.Locale locale65 = new java.util.Locale("hi!", "USA");
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale44.getDisplayScript(locale65);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone2, locale65);
        java.time.ZoneId zoneId70 = timeZone2.toZoneId();
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale71.getDisplayScript();
        java.lang.String str74 = locale71.getExtension('a');
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone2, locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar54 and calendar69", (calendar54.compareTo(calendar69) == 0) == calendar54.equals(calendar69));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.setMinimalDaysInFirstWeek(24);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        calendar17.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone22 = calendar17.getTimeZone();
        calendar7.setTimeZone(timeZone22);
        java.lang.String str24 = timeZone22.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar17", (calendar7.compareTo(calendar17) == 0) == calendar7.equals(calendar17));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        calendar10.setFirstDayOfWeek(37);
        int int14 = calendar10.getGreatestMinimum(5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        int int20 = timeZone16.getOffset(1645513657024L);
        timeZone16.setID("fra");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayCountry();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone16, locale25);
        boolean boolean30 = fastDateFormat15.equals((java.lang.Object) locale25);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        int int43 = calendar37.getFirstDayOfWeek();
        int int44 = calendar37.getWeekYear();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        int int49 = timeZone45.getOffset(1645513657024L);
        timeZone45.setID("fra");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone45.hasSameRules(timeZone52);
        timeZone52.setRawOffset(9);
        calendar37.setTimeZone(timeZone52);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone60);
        int int64 = timeZone60.getOffset(1645513656868L);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone66.hasSameRules(timeZone68);
        boolean boolean70 = timeZone60.hasSameRules(timeZone66);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone72.hasSameRules(timeZone74);
        boolean boolean76 = timeZone66.hasSameRules(timeZone74);
        java.lang.String str77 = timeZone74.getID();
        calendar37.setTimeZone(timeZone74);
        java.lang.String str79 = fastDateFormat15.format(calendar37);
        boolean boolean80 = calendar10.after((java.lang.Object) calendar37);
        calendar10.set(365, 0, 800302, 33, 13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar29", (calendar5.compareTo(calendar29) == 0) == calendar5.equals(calendar29));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:09:25 GMT");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder2.setInstant(1645513671992L);
        java.util.Calendar.Builder builder7 = builder2.setWeekDefinition(7, (int) (short) 1);
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getSeconds();
        long long10 = date8.getTime();
        date8.setTime((long) 37);
        date8.setDate((int) (short) 0);
        int int15 = date8.getYear();
        int int16 = date8.getYear();
        date8.setMinutes(100);
        java.time.Instant instant19 = date8.toInstant();
        int int20 = date8.getYear();
        java.util.Calendar.Builder builder21 = builder7.setInstant(date8);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale30 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale30.getScript();
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale30.getDisplayVariant(locale36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone25, locale36);
        boolean boolean39 = timeZone25.observesDaylightTime();
        java.util.Locale locale41 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale43.getDisplayCountry(locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone25, locale43);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone51);
        int int55 = timeZone51.getOffset(1645513656868L);
        boolean boolean56 = timeZone51.observesDaylightTime();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone51, locale57);
        java.lang.String str59 = locale43.getDisplayLanguage(locale57);
        boolean boolean60 = locale43.hasExtensions();
        java.util.Calendar.Builder builder61 = builder7.setLocale(locale43);
        java.util.Locale locale64 = new java.util.Locale("hi!", "USA");
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale43.getDisplayScript(locale64);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone1, locale64);
        java.time.ZoneId zoneId69 = timeZone1.toZoneId();
        java.lang.String str70 = timeZone1.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar68", (calendar53.compareTo(calendar68) == 0) == calendar53.equals(calendar68));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        boolean boolean10 = calendar7.isWeekDateSupported();
        int int12 = calendar7.getMinimum(4);
        java.util.TimeZone timeZone13 = calendar7.getTimeZone();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        boolean boolean21 = timeZone13.hasSameRules(timeZone20);
        boolean boolean22 = timeZone13.observesDaylightTime();
        java.lang.String str23 = timeZone13.getID();
        int int24 = timeZone13.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:08:24", timeZone13);
        timeZone13.setRawOffset((int) 'a');
        java.lang.Object obj28 = timeZone13.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar19", (calendar7.compareTo(calendar19) == 0) == calendar7.equals(calendar19));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.set(16, (int) (byte) 0);
        int int14 = calendar8.getFirstDayOfWeek();
        int int15 = calendar8.getWeekYear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        int int27 = timeZone23.getOffset(1645513657024L);
        timeZone23.setID("fra");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone23.hasSameRules(timeZone30);
        boolean boolean32 = timeZone22.hasSameRules(timeZone30);
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone30);
        java.util.Locale locale39 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayVariant();
        java.lang.String str44 = locale40.getDisplayLanguage(locale42);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:08:12", timeZone30, locale42);
        java.util.Locale.Category category47 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale48 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category47, locale48);
        java.util.Locale locale50 = java.util.Locale.getDefault(category47);
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.lang.String str56 = locale51.getDisplayVariant(locale55);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale51);
        java.lang.String str58 = locale51.getDisplayVariant();
        java.util.Locale.setDefault(category47, locale51);
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale64 = new java.util.Locale("", "hi!", "");
        java.lang.String str65 = locale60.getDisplayCountry(locale64);
        java.util.Locale locale69 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str70 = locale69.getDisplayScript();
        java.lang.String str71 = locale60.getDisplayName(locale69);
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.lang.String str74 = locale73.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale73);
        java.util.Locale locale76 = java.util.Locale.TAIWAN;
        java.lang.String str77 = locale73.getDisplayName(locale76);
        java.lang.String str78 = locale73.getDisplayCountry();
        java.lang.String str79 = locale73.getDisplayScript();
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = locale80.toLanguageTag();
        java.util.Locale.setDefault(locale80);
        java.lang.String str83 = locale73.getDisplayName(locale80);
        java.lang.String str84 = locale60.getDisplayName(locale73);
        java.util.Locale.setDefault(category47, locale60);
        java.util.Locale locale86 = java.util.Locale.getDefault(category47);
        java.util.Locale locale87 = java.util.Locale.getDefault(category47);
        java.util.Locale locale88 = java.util.Locale.getDefault(category47);
        java.lang.String str89 = locale42.getDisplayLanguage(locale88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar21", (calendar8.compareTo(calendar21) == 0) == calendar8.equals(calendar21));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        boolean boolean11 = timeZone3.observesDaylightTime();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayVariant();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        java.time.Instant instant36 = calendar30.toInstant();
        boolean boolean38 = calendar30.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str39 = fastDateFormat23.format(calendar30);
        java.lang.Object obj40 = fastDateFormat23.clone();
        java.util.Locale locale41 = fastDateFormat23.getLocale();
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.lang.String str49 = locale45.getDisplayLanguage();
        java.lang.String str50 = locale45.getDisplayLanguage();
        java.lang.String str51 = locale41.getDisplayLanguage(locale45);
        java.lang.String str52 = locale17.getDisplayCountry(locale45);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone56);
        java.util.TimeZone timeZone59 = calendar58.getTimeZone();
        java.util.Locale locale63 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone59, locale63);
        java.lang.String str65 = locale45.getDisplayLanguage(locale63);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone3, locale63);
        calendar66.clear(0);
        java.util.Date date69 = new java.util.Date();
        int int70 = date69.getTimezoneOffset();
        long long71 = date69.getTime();
        long long72 = date69.getTime();
        int int73 = date69.getMinutes();
        int int74 = date69.getYear();
        java.lang.String str75 = date69.toGMTString();
        calendar66.setTime(date69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Locale.LanguageRange languageRange5 = null;
        boolean boolean6 = languageRangeList1.add(languageRange5);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getSeconds();
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getTimezoneOffset();
        date10.setMinutes(6);
        boolean boolean14 = date8.after(date10);
        java.util.Calendar.Builder builder15 = builder7.setInstant(date10);
        java.util.Calendar.Builder builder17 = builder15.setInstant((long) 36);
        java.util.Calendar.Builder builder21 = builder17.setWeekDate(17, 37, 6);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale22.getDisplayName(locale29);
        java.lang.String str32 = locale29.getDisplayCountry();
        java.util.Calendar.Builder builder33 = builder17.setLocale(locale29);
        java.util.Set<java.lang.String> strSet34 = locale29.getUnicodeLocaleKeys();
        boolean boolean35 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        timeZone38.setRawOffset((int) (byte) 1);
        boolean boolean43 = timeZone38.observesDaylightTime();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone38);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        boolean boolean47 = locale45.hasExtensions();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone38, locale45);
        boolean boolean49 = locale45.hasExtensions();
        java.lang.String str50 = locale45.getDisplayLanguage();
        java.util.Locale locale52 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str53 = locale45.getDisplayScript(locale52);
        java.lang.String str54 = locale45.getISO3Language();
        java.util.Set<java.lang.String> strSet55 = locale45.getUnicodeLocaleKeys();
        boolean boolean56 = languageRangeList1.removeAll((java.util.Collection<java.lang.String>) strSet55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar44", (calendar30.compareTo(calendar44) == 0) == calendar30.equals(calendar44));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        java.util.TimeZone timeZone12 = calendar6.getTimeZone();
        timeZone12.setRawOffset(7);
        timeZone12.setID("2022-2-22 7:07:56");
        timeZone12.setRawOffset((int) (byte) 100);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("");
        boolean boolean21 = timeZone12.hasSameRules(timeZone20);
        timeZone20.setRawOffset(54);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.lang.String str44 = fastDateFormat26.toString();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        calendar54.clear(7);
        calendar54.set(16, (int) (byte) 0);
        int int60 = calendar54.getFirstDayOfWeek();
        java.lang.String str61 = fastDateFormat47.format(calendar54);
        java.util.TimeZone timeZone62 = calendar54.getTimeZone();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone62);
        int int65 = calendar63.getActualMinimum(13);
        java.lang.String str66 = fastDateFormat26.format(calendar63);
        java.util.Locale locale67 = fastDateFormat26.getLocale();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone20, locale67);
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale67.getDisplayName(locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar63", (calendar33.compareTo(calendar63) == 0) == calendar33.equals(calendar63));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone4, locale10);
        java.util.TimeZone.setDefault(timeZone4);
        int int13 = timeZone4.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone4);
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getSeconds();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        date19.setMinutes(6);
        boolean boolean23 = date17.after(date19);
        java.util.Calendar.Builder builder24 = builder16.setInstant(date19);
        java.util.Calendar.Builder builder26 = builder24.setInstant((long) 36);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder28 = builder26.setLocale(locale27);
        java.util.Calendar.Builder builder30 = builder28.setLenient(false);
        java.util.Calendar.Builder builder32 = builder28.setLenient(false);
        java.util.Calendar.Builder builder34 = builder32.setLenient(false);
        java.util.Locale locale38 = new java.util.Locale("", "hi!", "");
        java.util.Calendar.Builder builder39 = builder34.setLocale(locale38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale38);
        calendar40.setLenient(true);
        java.util.Date date43 = calendar40.getTime();
        java.lang.String str44 = fastDateFormat14.format(date43);
        java.util.TimeZone timeZone45 = fastDateFormat14.getTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar11", (calendar6.compareTo(calendar11) == 0) == calendar6.equals(calendar11));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange languageRange6 = null;
        boolean boolean7 = languageRangeList1.add(languageRange6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str10 = fastDateFormat8.format((long) ' ');
        java.util.Locale locale11 = fastDateFormat8.getLocale();
        boolean boolean12 = languageRangeList1.equals((java.lang.Object) locale11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder13.clearExtensions();
        boolean boolean16 = languageRangeList1.contains((java.lang.Object) builder13);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        timeZone19.setRawOffset((int) (byte) 1);
        boolean boolean24 = timeZone19.observesDaylightTime();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone19);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        boolean boolean28 = locale26.hasExtensions();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone19, locale26);
        boolean boolean30 = locale26.hasExtensions();
        java.lang.String str31 = locale26.getDisplayLanguage();
        java.util.Locale locale33 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str34 = locale26.getDisplayScript(locale33);
        java.util.Locale.Builder builder35 = builder13.setLocale(locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar29", (calendar25.compareTo(calendar29) == 0) == calendar25.equals(calendar29));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getSeconds();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        boolean boolean8 = date2.after(date4);
        java.util.Calendar.Builder builder9 = builder1.setInstant(date4);
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 36);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder15 = builder13.setLenient(false);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        timeZone18.setRawOffset((int) (byte) 1);
        boolean boolean23 = timeZone18.observesDaylightTime();
        java.util.Calendar.Builder builder24 = builder13.setTimeZone(timeZone18);
        java.util.Date date28 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date28.setMonth(4);
        java.util.Calendar.Builder builder31 = builder13.setInstant(date28);
        java.util.Calendar.Builder builder33 = builder13.setInstant(1645513674789L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        int int41 = timeZone37.getOffset(1645513656868L);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder48 = builder13.setTimeZone(timeZone37);
        java.util.Locale locale52 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getDisplayCountry();
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getSeconds();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        date58.setMinutes(6);
        boolean boolean62 = date56.after(date58);
        java.util.Calendar.Builder builder63 = builder55.setInstant(date58);
        java.util.Calendar.Builder builder65 = builder63.setInstant((long) 36);
        java.util.Calendar.Builder builder69 = builder65.setWeekDate(17, 37, 6);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.lang.String str79 = locale70.getDisplayName(locale77);
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar.Builder builder81 = builder65.setLocale(locale77);
        java.util.Set<java.lang.String> strSet82 = locale77.getUnicodeLocaleKeys();
        java.lang.String str83 = locale52.getDisplayLanguage(locale77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone37, locale77);
        java.util.TimeZone.setDefault(timeZone37);
        timeZone37.setRawOffset(0);
        int int89 = timeZone37.getOffset(1645513926234L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar78", (calendar39.compareTo(calendar78) == 0) == calendar39.equals(calendar78));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:09:25 GMT");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder2.setInstant(1645513671992L);
        java.util.Calendar.Builder builder7 = builder2.setWeekDefinition(7, (int) (short) 1);
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getSeconds();
        long long10 = date8.getTime();
        date8.setTime((long) 37);
        date8.setDate((int) (short) 0);
        int int15 = date8.getYear();
        int int16 = date8.getYear();
        date8.setMinutes(100);
        java.time.Instant instant19 = date8.toInstant();
        int int20 = date8.getYear();
        java.util.Calendar.Builder builder21 = builder7.setInstant(date8);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale30 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale30.getScript();
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale30.getDisplayVariant(locale36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone25, locale36);
        boolean boolean39 = timeZone25.observesDaylightTime();
        java.util.Locale locale41 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale43.getDisplayCountry(locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone25, locale43);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone51);
        int int55 = timeZone51.getOffset(1645513656868L);
        boolean boolean56 = timeZone51.observesDaylightTime();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone51, locale57);
        java.lang.String str59 = locale43.getDisplayLanguage(locale57);
        boolean boolean60 = locale43.hasExtensions();
        java.util.Calendar.Builder builder61 = builder7.setLocale(locale43);
        java.util.Locale locale64 = new java.util.Locale("hi!", "USA");
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale43.getDisplayScript(locale64);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone1, locale64);
        java.time.ZoneId zoneId69 = timeZone1.toZoneId();
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder70.clear();
        java.util.Locale locale72 = builder71.build();
        java.util.Locale.Builder builder73 = builder71.clearExtensions();
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.lang.String str76 = locale75.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale75);
        java.util.Locale locale78 = java.util.Locale.TAIWAN;
        java.lang.String str79 = locale75.getDisplayName(locale78);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale78);
        java.util.Locale.Builder builder81 = builder73.setLocale(locale78);
        java.lang.String str83 = locale78.getExtension('a');
        java.lang.String str84 = locale78.toLanguageTag();
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone1, locale78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar68", (calendar53.compareTo(calendar68) == 0) == calendar53.equals(calendar68));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(2, 0, 2022);
        java.util.Calendar.Builder builder19 = builder10.setTimeOfDay(0, 7, 0, 32769);
        java.util.Calendar.Builder builder21 = builder10.setLenient(true);
        java.util.Calendar.Builder builder26 = builder21.setTimeOfDay(36, 9, 2022, (int) 'u');
        java.util.Calendar.Builder builder30 = builder21.setTimeOfDay((int) 'x', (-46800000), 122);
        java.util.Calendar.Builder builder34 = builder30.setDate(456, 1, 1);
        java.util.Calendar.Builder builder36 = builder30.setLenient(true);
        java.util.Calendar.Builder builder40 = builder30.setTimeOfDay(13, 18, (-405));
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        int int46 = fastDateFormat45.getMaxLengthEstimate();
        java.lang.String str47 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        calendar54.clear(7);
        calendar54.set(16, (int) (byte) 0);
        java.time.Instant instant60 = calendar54.toInstant();
        int int61 = calendar54.getMinimalDaysInFirstWeek();
        int int62 = calendar54.getMinimalDaysInFirstWeek();
        calendar54.add((int) (short) 0, 100);
        calendar54.setMinimalDaysInFirstWeek(38);
        long long68 = calendar54.getTimeInMillis();
        java.lang.String str69 = fastDateFormat45.format(calendar54);
        java.util.Calendar.Builder builder70 = new java.util.Calendar.Builder();
        java.util.Date date71 = new java.util.Date();
        int int72 = date71.getSeconds();
        java.util.Date date73 = new java.util.Date();
        int int74 = date73.getTimezoneOffset();
        date73.setMinutes(6);
        boolean boolean77 = date71.after(date73);
        java.util.Calendar.Builder builder78 = builder70.setInstant(date73);
        java.util.Calendar.Builder builder80 = builder78.setInstant((long) 36);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder82 = builder80.setLocale(locale81);
        java.util.TimeZone timeZone84 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone85 = java.util.TimeZone.getDefault();
        boolean boolean86 = timeZone84.hasSameRules(timeZone85);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone85);
        java.util.Calendar.Builder builder88 = builder80.setTimeZone(timeZone85);
        calendar54.setTimeZone(timeZone85);
        java.util.Locale locale90 = java.util.Locale.CHINESE;
        java.lang.String str91 = locale90.getLanguage();
        boolean boolean92 = locale90.hasExtensions();
        java.lang.String str93 = locale90.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet94 = locale90.getUnicodeLocaleKeys();
        java.lang.String str95 = locale90.getDisplayLanguage();
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(timeZone85, locale90);
        java.util.TimeZone timeZone97 = calendar96.getTimeZone();
        java.util.Calendar.Builder builder98 = builder40.setTimeZone(timeZone97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar54 and calendar96", (calendar54.compareTo(calendar96) == 0) == calendar54.equals(calendar96));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar.Builder builder23 = builder20.setLocale(locale21);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.setMinimalDaysInFirstWeek(69);
        calendar30.setLenient(true);
        calendar30.setLenient(false);
        int int39 = calendar30.getFirstDayOfWeek();
        calendar30.setFirstDayOfWeek(19);
        java.util.TimeZone timeZone42 = calendar30.getTimeZone();
        java.util.Calendar.Builder builder43 = builder20.setTimeZone(timeZone42);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone48.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        calendar53.clear(7);
        calendar53.set(16, (int) (byte) 0);
        int int59 = calendar53.getFirstDayOfWeek();
        java.lang.String str60 = fastDateFormat46.format(calendar53);
        java.util.TimeZone timeZone61 = calendar53.getTimeZone();
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getTimezoneOffset();
        java.util.Date date64 = new java.util.Date();
        java.lang.String str65 = date64.toGMTString();
        boolean boolean66 = date62.before(date64);
        boolean boolean67 = calendar53.after((java.lang.Object) date64);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone69.hasSameRules(timeZone71);
        java.util.Locale locale73 = java.util.Locale.CHINA;
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone71, locale73);
        calendar74.clear(7);
        calendar74.set(16, (int) (byte) 0);
        java.time.Instant instant80 = calendar74.toInstant();
        java.util.Date date81 = java.util.Date.from(instant80);
        boolean boolean82 = date64.before(date81);
        int int83 = date64.getDay();
        date64.setMonth(45);
        java.util.Locale locale86 = java.util.Locale.CHINA;
        java.util.Locale locale90 = new java.util.Locale("", "hi!", "");
        java.lang.String str91 = locale86.getDisplayVariant(locale90);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(locale86);
        java.util.Date date93 = calendar92.getTime();
        calendar92.clear();
        java.time.Instant instant95 = calendar92.toInstant();
        java.util.Date date96 = java.util.Date.from(instant95);
        boolean boolean97 = date64.before(date96);
        boolean boolean98 = timeZone42.inDaylightTime(date64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar53", (calendar30.compareTo(calendar53) == 0) == calendar30.equals(calendar53));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9, locale11);
        calendar12.clear(7);
        calendar12.set(16, (int) (byte) 0);
        int int18 = calendar12.getWeeksInWeekYear();
        java.util.Date date24 = new java.util.Date(58, 41, 39, 31, 41);
        calendar12.setTime(date24);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        int int28 = date26.getSeconds();
        int int29 = date26.getMinutes();
        long long30 = date26.getTime();
        java.lang.String str31 = date26.toLocaleString();
        boolean boolean32 = date24.before(date26);
        boolean boolean33 = fastDateFormat2.equals((java.lang.Object) boolean32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        int int41 = timeZone37.getOffset(1645513656868L);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone43);
        java.lang.String str48 = timeZone37.getID();
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale50);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone37, locale50);
        calendar53.setMinimalDaysInFirstWeek(44);
        boolean boolean56 = calendar53.isWeekDateSupported();
        boolean boolean57 = fastDateFormat2.equals((java.lang.Object) boolean56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar53", (calendar39.compareTo(calendar53) == 0) == calendar39.equals(calendar53));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        java.util.TimeZone timeZone12 = calendar6.getTimeZone();
        timeZone12.setRawOffset(7);
        timeZone12.setID("2022-2-22 7:07:56");
        timeZone12.setRawOffset((int) (byte) 100);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("");
        boolean boolean21 = timeZone12.hasSameRules(timeZone20);
        timeZone20.setRawOffset(54);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.lang.String str44 = fastDateFormat26.toString();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        calendar54.clear(7);
        calendar54.set(16, (int) (byte) 0);
        int int60 = calendar54.getFirstDayOfWeek();
        java.lang.String str61 = fastDateFormat47.format(calendar54);
        java.util.TimeZone timeZone62 = calendar54.getTimeZone();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone62);
        int int65 = calendar63.getActualMinimum(13);
        java.lang.String str66 = fastDateFormat26.format(calendar63);
        java.util.Locale locale67 = fastDateFormat26.getLocale();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone20, locale67);
        java.lang.String str69 = locale67.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar68", (calendar33.compareTo(calendar68) == 0) == calendar33.equals(calendar68));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        boolean boolean6 = languageRangeList1.isEmpty();
        boolean boolean7 = languageRangeList1.isEmpty();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor8 = languageRangeList1.listIterator();
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getSeconds();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        date12.setMinutes(6);
        boolean boolean16 = date10.after(date12);
        java.util.Calendar.Builder builder17 = builder9.setInstant(date12);
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 36);
        java.util.Calendar.Builder builder23 = builder19.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder27 = builder19.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder31 = builder27.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.lang.String str41 = locale32.getDisplayName(locale39);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleKeys();
        java.lang.String str44 = locale39.getDisplayName(locale42);
        java.lang.String str45 = locale39.getISO3Language();
        java.lang.String str46 = locale39.getVariant();
        java.util.Calendar.Builder builder47 = builder31.setLocale(locale39);
        int int48 = languageRangeList1.indexOf((java.lang.Object) builder31);
        java.util.Calendar.Builder builder49 = new java.util.Calendar.Builder();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        date52.setMinutes(6);
        boolean boolean56 = date50.after(date52);
        java.util.Calendar.Builder builder57 = builder49.setInstant(date52);
        java.util.Calendar.Builder builder59 = builder57.setInstant((long) 36);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder61 = builder59.setLocale(locale60);
        java.util.Calendar.Builder builder63 = builder61.setLenient(false);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66);
        timeZone66.setRawOffset((int) (byte) 1);
        boolean boolean71 = timeZone66.observesDaylightTime();
        java.util.Calendar.Builder builder72 = builder61.setTimeZone(timeZone66);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        boolean boolean78 = timeZone66.hasSameRules(timeZone74);
        java.util.Locale locale80 = new java.util.Locale("Chinese (China)");
        java.util.Locale locale81 = locale80.stripExtensions();
        java.util.Set<java.lang.Character> charSet82 = locale80.getExtensionKeys();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone66, locale80);
        java.util.Calendar.Builder builder84 = builder31.setTimeZone(timeZone66);
        boolean boolean85 = timeZone66.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar83", (calendar40.compareTo(calendar83) == 0) == calendar40.equals(calendar83));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone1, locale10);
        boolean boolean15 = fastDateFormat0.equals((java.lang.Object) locale10);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        calendar22.clear(7);
        calendar22.set(16, (int) (byte) 0);
        int int28 = calendar22.getFirstDayOfWeek();
        int int29 = calendar22.getWeekYear();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        int int34 = timeZone30.getOffset(1645513657024L);
        timeZone30.setID("fra");
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone30.hasSameRules(timeZone37);
        timeZone37.setRawOffset(9);
        calendar22.setTimeZone(timeZone37);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone45);
        int int49 = timeZone45.getOffset(1645513656868L);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone51.hasSameRules(timeZone53);
        boolean boolean55 = timeZone45.hasSameRules(timeZone51);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone57.hasSameRules(timeZone59);
        boolean boolean61 = timeZone51.hasSameRules(timeZone59);
        java.lang.String str62 = timeZone59.getID();
        calendar22.setTimeZone(timeZone59);
        java.lang.String str64 = fastDateFormat0.format(calendar22);
        int int66 = calendar22.getActualMaximum(2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar47", (calendar14.compareTo(calendar47) == 0) == calendar14.equals(calendar47));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.util.Calendar.Builder builder23 = builder18.setLocale(locale22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale22);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone28);
        int int32 = timeZone28.getOffset(1645513656868L);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        boolean boolean38 = timeZone28.hasSameRules(timeZone34);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale46 = new java.util.Locale("", "hi!", "");
        java.lang.String str47 = locale42.getDisplayVariant(locale46);
        java.lang.String str48 = locale40.getDisplayVariant(locale42);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale42);
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone53);
        java.lang.String str55 = fastDateFormat54.getPattern();
        java.lang.String str57 = fastDateFormat54.format((long) '#');
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition(53);
        java.lang.Object obj61 = fastDateFormat54.parseObject("", parsePosition60);
        int int62 = parsePosition60.getErrorIndex();
        java.lang.Object obj63 = fastDateFormat50.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition60);
        java.util.TimeZone timeZone64 = fastDateFormat50.getTimeZone();
        boolean boolean65 = timeZone64.observesDaylightTime();
        boolean boolean66 = timeZone34.hasSameRules(timeZone64);
        calendar24.setTimeZone(timeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar49", (calendar30.compareTo(calendar49) == 0) == calendar30.equals(calendar49));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        calendar35.clear(7);
        calendar35.set(16, (int) (byte) 0);
        java.time.Instant instant41 = calendar35.toInstant();
        java.util.TimeZone timeZone42 = calendar35.getTimeZone();
        java.util.TimeZone timeZone43 = calendar35.getTimeZone();
        java.lang.String str44 = timeZone43.getID();
        java.util.Calendar.Builder builder45 = builder28.setTimeZone(timeZone43);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone49);
        java.util.TimeZone timeZone52 = calendar51.getTimeZone();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        int int57 = timeZone53.getOffset(1645513657024L);
        timeZone53.setID("fra");
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone53.hasSameRules(timeZone60);
        boolean boolean62 = timeZone52.hasSameRules(timeZone60);
        java.util.Calendar.Builder builder63 = builder28.setTimeZone(timeZone60);
        java.util.Calendar.Builder builder65 = builder28.setLenient(true);
        java.util.Calendar.Builder builder69 = builder28.setWeekDate(127, 55, 22);
        java.util.Calendar.Builder builder73 = builder28.setTimeOfDay(292278994, 40, 21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar51", (calendar35.compareTo(calendar51) == 0) == calendar35.equals(calendar51));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        java.lang.Object obj35 = timeZone25.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar34", (calendar10.compareTo(calendar34) == 0) == calendar10.equals(calendar34));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.lang.String str12 = locale3.getDisplayName(locale10);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = locale10.getDisplayName(locale13);
        java.lang.String str16 = locale13.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale13);
        java.lang.String str18 = locale0.getDisplayCountry(locale13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar11", (calendar1.compareTo(calendar11) == 0) == calendar1.equals(calendar11));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        java.util.Locale locale3 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale12 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale12.getScript();
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.lang.String str19 = locale12.getDisplayVariant(locale18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone7, locale18);
        boolean boolean21 = timeZone7.observesDaylightTime();
        java.util.Locale locale23 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale24.getDisplayLanguage(locale25);
        java.util.Locale locale27 = java.util.Locale.US;
        java.lang.String str28 = locale25.getDisplayCountry(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone7, locale25);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone33);
        int int37 = timeZone33.getOffset(1645513656868L);
        boolean boolean38 = timeZone33.observesDaylightTime();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone33, locale39);
        java.lang.String str41 = locale25.getDisplayLanguage(locale39);
        boolean boolean42 = locale25.hasExtensions();
        java.lang.String str43 = locale3.getDisplayCountry(locale25);
        java.lang.String str44 = locale3.getScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar40", (calendar35.compareTo(calendar40) == 0) == calendar35.equals(calendar40));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        int int29 = date27.getSeconds();
        int int30 = languageRangeList13.indexOf((java.lang.Object) date27);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        int int36 = timeZone32.getOffset(1645513657024L);
        timeZone32.setID("fra");
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone32.hasSameRules(timeZone39);
        timeZone39.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone39);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale44.getDisplayCountry();
        java.lang.String str48 = locale44.getDisplayLanguage();
        java.lang.String str49 = locale44.getDisplayLanguage();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone39, locale44);
        boolean boolean51 = languageRangeList13.equals((java.lang.Object) calendar50);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator52 = languageRangeList13.spliterator();
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.lang.String str58 = locale53.getDisplayVariant(locale57);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale53);
        calendar59.add((int) (byte) 0, (int) (byte) 10);
        int int63 = calendar59.getMinimalDaysInFirstWeek();
        boolean boolean64 = languageRangeList13.equals((java.lang.Object) int63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar50 and calendar59", (calendar50.compareTo(calendar59) == 0) == calendar50.equals(calendar59));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange11 = null;
        languageRangeList1.add(0, languageRange11);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        java.lang.StringBuffer stringBuffer18 = null;
        java.lang.StringBuffer stringBuffer19 = fastDateFormat15.format(date16, stringBuffer18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        calendar26.clear(7);
        boolean boolean29 = calendar26.isWeekDateSupported();
        java.util.TimeZone timeZone30 = calendar26.getTimeZone();
        int int32 = calendar26.getMaximum(3);
        java.lang.StringBuffer stringBuffer33 = null;
        java.lang.StringBuffer stringBuffer34 = fastDateFormat15.format(calendar26, stringBuffer33);
        calendar26.clear();
        java.time.Instant instant36 = calendar26.toInstant();
        java.util.Date date43 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date43.setMonth(50400000);
        date43.setMonth(32769);
        java.time.Instant instant48 = date43.toInstant();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.lang.String str56 = locale51.getDisplayCountry(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale51);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone61.hasSameRules(timeZone63);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone63, locale65);
        java.lang.String str67 = locale58.getDisplayName(locale65);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getDisplayName(locale68);
        java.lang.String str71 = locale65.getISO3Language();
        boolean boolean72 = fastDateFormat57.equals((java.lang.Object) locale65);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str75 = fastDateFormat73.format((long) ' ');
        java.lang.String str77 = fastDateFormat73.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj78 = fastDateFormat73.clone();
        java.util.Locale locale79 = fastDateFormat73.getLocale();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = fastDateFormat57.format(calendar80);
        java.time.Instant instant82 = calendar80.toInstant();
        java.util.Calendar.Builder builder83 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder87 = builder83.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar88 = builder83.build();
        int int89 = calendar88.getMinimalDaysInFirstWeek();
        java.time.Instant instant90 = calendar88.toInstant();
        java.time.Instant[] instantArray91 = new java.time.Instant[] { instant36, instant48, instant82, instant90 };
        java.time.Instant[] instantArray92 = languageRangeList1.toArray(instantArray91);
        java.util.Locale locale95 = new java.util.Locale("2/22/22 7:08 AM", "22 Feb 2022 07:07:44 GMT");
        int int96 = languageRangeList1.lastIndexOf((java.lang.Object) locale95);
        java.lang.Object[] objArray97 = languageRangeList1.toArray();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar66 and calendar80", (calendar66.compareTo(calendar80) == 0) == calendar66.equals(calendar80));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        java.text.AttributedCharacterIterator.Attribute attribute1 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = attribute1.equals((java.lang.Object) timeZone2);
        java.lang.String str4 = timeZone2.getID();
        timeZone2.setRawOffset(10);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale11 = builder7.build();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale11);
        java.lang.String str13 = timeZone2.getID();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.lang.String str15 = fastDateFormat14.toString();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        calendar21.set(5, 16);
        long long26 = calendar21.getTimeInMillis();
        int int27 = calendar21.getWeeksInWeekYear();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale29.getDisplayVariant(locale31);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale31);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getTimezoneOffset();
        long long43 = date41.getTime();
        int int44 = date41.getHours();
        java.lang.String str45 = fastDateFormat39.format(date41);
        calendar21.setTime(date41);
        calendar21.clear(0);
        calendar21.clear(4);
        java.lang.StringBuffer stringBuffer51 = null;
        java.lang.StringBuffer stringBuffer52 = fastDateFormat14.format(calendar21, stringBuffer51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar38", (calendar12.compareTo(calendar38) == 0) == calendar12.equals(calendar38));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        parsePosition1.setErrorIndex(5);
        int int4 = parsePosition1.getErrorIndex();
        int int5 = parsePosition1.getErrorIndex();
        int int6 = parsePosition1.getIndex();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        calendar16.set(16, (int) (byte) 0);
        java.time.Instant instant22 = calendar16.toInstant();
        boolean boolean24 = calendar16.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str25 = fastDateFormat9.format(calendar16);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale30, locale31, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale locale37 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale41, locale42, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList47);
        int int50 = languageRangeList27.lastIndexOf((java.lang.Object) languageRangeList39);
        boolean boolean51 = languageRangeList27.isEmpty();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        java.util.Date date54 = new java.util.Date();
        java.lang.String str55 = date54.toGMTString();
        boolean boolean56 = date52.before(date54);
        int int57 = languageRangeList27.lastIndexOf((java.lang.Object) date54);
        date54.setMinutes(36);
        java.lang.String str60 = fastDateFormat9.format(date54);
        java.text.AttributedCharacterIterator attributedCharacterIterator62 = fastDateFormat9.formatToCharacterIterator((java.lang.Object) 1645513673849L);
        boolean boolean63 = parsePosition1.equals((java.lang.Object) fastDateFormat9);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone64.hasSameRules(timeZone65);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone65.hasSameRules(timeZone67);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone67);
        int int71 = timeZone67.getOffset(1645513656868L);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        boolean boolean77 = timeZone67.hasSameRules(timeZone73);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone78.hasSameRules(timeZone79);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone79.hasSameRules(timeZone81);
        boolean boolean83 = timeZone73.hasSameRules(timeZone81);
        boolean boolean84 = parsePosition1.equals((java.lang.Object) timeZone81);
        java.util.Locale locale87 = new java.util.Locale("", "22 Feb 2022 07:09:20 GMT");
        java.util.Locale.setDefault(locale87);
        java.lang.String str89 = timeZone81.getDisplayName(locale87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar69", (calendar16.compareTo(calendar69) == 0) == calendar16.equals(calendar69));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category2);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale6);
        java.lang.String str13 = locale6.getDisplayVariant();
        java.util.Locale.setDefault(category2, locale6);
        java.util.Locale locale16 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category2, locale16);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale16);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.lang.String str32 = locale27.getDisplayVariant(locale31);
        java.lang.String str33 = locale25.getDisplayVariant(locale27);
        java.lang.String str35 = locale27.getExtension('x');
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone22, locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone22);
        boolean boolean39 = timeZone22.observesDaylightTime();
        timeZone22.setRawOffset(29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar21", (calendar12.compareTo(calendar21) == 0) == calendar12.equals(calendar21));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        boolean boolean35 = locale30.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar34", (calendar10.compareTo(calendar34) == 0) == calendar10.equals(calendar34));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar calendar15 = builder10.build();
        java.util.Calendar.Builder builder17 = builder10.setLenient(true);
        java.util.Locale locale19 = new java.util.Locale("feb 22, 2022 7:07:42 am");
        java.util.Calendar.Builder builder20 = builder17.setLocale(locale19);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        java.time.Instant instant36 = calendar30.toInstant();
        boolean boolean38 = calendar30.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str39 = fastDateFormat23.format(calendar30);
        java.lang.Object obj40 = fastDateFormat23.clone();
        java.util.Locale locale41 = fastDateFormat23.getLocale();
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.lang.String str49 = locale45.getDisplayLanguage();
        java.lang.String str50 = locale45.getDisplayLanguage();
        java.lang.String str51 = locale41.getDisplayLanguage(locale45);
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getVariant();
        java.lang.String str54 = locale41.getDisplayLanguage(locale52);
        java.util.Calendar.Builder builder55 = builder17.setLocale(locale52);
        java.lang.String str56 = locale52.getDisplayCountry();
        java.util.Locale.Category category57 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale58 = java.util.Locale.getDefault(category57);
        java.util.Locale locale62 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str63 = locale62.getDisplayScript();
        boolean boolean64 = locale62.hasExtensions();
        java.util.Locale locale65 = locale62.stripExtensions();
        java.util.Locale.setDefault(category57, locale62);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.lang.String str69 = locale68.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale68);
        java.util.Locale locale71 = java.util.Locale.TAIWAN;
        java.lang.String str72 = locale68.getDisplayName(locale71);
        java.lang.String str73 = locale68.getDisplayCountry();
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(locale68);
        java.lang.String str75 = locale68.getISO3Country();
        java.lang.String str76 = locale62.getDisplayScript(locale68);
        java.lang.String str77 = locale52.getDisplayCountry(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar74", (calendar30.compareTo(calendar74) == 0) == calendar30.equals(calendar74));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        java.util.Locale locale2 = new java.util.Locale("2/22/22 7:08 AM", "22 Feb 2022 07:07:44 GMT");
        java.util.Locale locale4 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale4.getDisplayScript(locale5);
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleKeys();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("Feb 22, 2022 7:06:39 AM");
        java.lang.String str10 = locale4.getDisplayCountry(locale9);
        java.lang.String str11 = locale2.getDisplayCountry(locale4);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Locale locale16 = new java.util.Locale("", "hi!", "");
        java.lang.String str17 = locale12.getDisplayVariant(locale16);
        java.lang.String str18 = locale12.getISO3Language();
        java.util.Locale locale20 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.lang.String str24 = locale12.getDisplayName(locale21);
        java.lang.String str25 = locale21.getVariant();
        java.lang.String str26 = locale2.getDisplayCountry(locale21);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale32.getDisplayVariant();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        calendar45.clear(7);
        calendar45.set(16, (int) (byte) 0);
        java.time.Instant instant51 = calendar45.toInstant();
        boolean boolean53 = calendar45.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str54 = fastDateFormat38.format(calendar45);
        java.lang.Object obj55 = fastDateFormat38.clone();
        java.util.Locale locale56 = fastDateFormat38.getLocale();
        java.lang.String str57 = locale56.getLanguage();
        java.util.Locale locale58 = null;
        java.lang.String str59 = locale56.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        boolean boolean62 = locale60.hasExtensions();
        java.lang.String str63 = locale60.getDisplayCountry();
        java.lang.String str64 = locale60.getDisplayLanguage();
        java.lang.String str65 = locale60.getDisplayLanguage();
        java.lang.String str66 = locale56.getDisplayLanguage(locale60);
        java.lang.String str67 = locale32.getDisplayCountry(locale60);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone69.hasSameRules(timeZone71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone71);
        java.util.TimeZone timeZone74 = calendar73.getTimeZone();
        java.util.Locale locale78 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone74, locale78);
        java.lang.String str80 = locale60.getDisplayLanguage(locale78);
        java.lang.String str81 = locale21.getDisplayName(locale78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar73", (calendar33.compareTo(calendar73) == 0) == calendar33.equals(calendar73));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = attribute0.toString();
        java.lang.String str4 = attribute0.toString();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        int int9 = timeZone5.getOffset(1645513657024L);
        timeZone5.setID("fra");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone5.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone5, locale14);
        boolean boolean19 = attribute0.equals((java.lang.Object) calendar18);
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getSeconds();
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getTimezoneOffset();
        date23.setMinutes(6);
        boolean boolean27 = date21.after(date23);
        java.util.Calendar.Builder builder28 = builder20.setInstant(date23);
        java.util.Calendar.Builder builder30 = builder28.setInstant((long) 36);
        java.util.Calendar.Builder builder34 = builder30.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder38 = builder30.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder42 = builder38.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48, locale50);
        java.lang.String str52 = locale43.getDisplayName(locale50);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleKeys();
        java.lang.String str55 = locale50.getDisplayName(locale53);
        java.lang.String str56 = locale50.getISO3Language();
        java.lang.String str57 = locale50.getVariant();
        java.util.Calendar.Builder builder58 = builder42.setLocale(locale50);
        java.util.Calendar.Builder builder62 = builder58.setWeekDate(1969, 57, 53);
        java.util.Calendar.Builder builder67 = builder58.setTimeOfDay(21, 9, (int) (short) 10, 30);
        boolean boolean68 = attribute0.equals((java.lang.Object) 9);
        java.util.Date date72 = new java.util.Date(19, (int) (byte) -1, 38);
        boolean boolean73 = attribute0.equals((java.lang.Object) 38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar51", (calendar18.compareTo(calendar51) == 0) == calendar18.equals(calendar51));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        int int7 = timeZone3.getOffset(1645513657024L);
        timeZone3.setID("fra");
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone3.hasSameRules(timeZone10);
        timeZone10.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone10);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.lang.String str19 = locale15.getDisplayLanguage();
        java.lang.String str20 = locale15.getDisplayLanguage();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone10, locale15);
        timeZone10.setRawOffset((int) (byte) -1);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getScript();
        java.lang.String str29 = locale24.getDisplayName(locale25);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone10, locale24);
        java.lang.String str31 = locale0.getDisplayName(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar30", (calendar21.compareTo(calendar30) == 0) == calendar21.equals(calendar30));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        java.util.Date date1 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMinutes();
        date15.setHours(43);
        date15.setSeconds(130);
        boolean boolean21 = date1.after(date15);
        date1.setMinutes(15);
        int int24 = date1.getDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar14", (calendar10.compareTo(calendar14) == 0) == calendar10.equals(calendar14));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset(21);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category7, locale9);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getSeconds();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getTimezoneOffset();
        date14.setMinutes(6);
        boolean boolean18 = date12.after(date14);
        java.util.Calendar.Builder builder19 = builder11.setInstant(date14);
        java.util.Calendar.Builder builder21 = builder19.setInstant((long) 36);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder23 = builder21.setLocale(locale22);
        java.lang.String str24 = locale22.toLanguageTag();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str26 = locale22.getISO3Language();
        java.lang.String str27 = locale22.getLanguage();
        java.util.Locale.setDefault(category7, locale22);
        java.util.Locale locale29 = java.util.Locale.getDefault(category7);
        java.util.Locale locale30 = java.util.Locale.getDefault(category7);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        calendar47.set(16, (int) (byte) 0);
        java.time.Instant instant53 = calendar47.toInstant();
        boolean boolean55 = calendar47.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str56 = fastDateFormat40.format(calendar47);
        java.lang.Object obj57 = fastDateFormat40.clone();
        java.util.Locale locale58 = fastDateFormat40.getLocale();
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = locale58.getDisplayName();
        java.lang.String str61 = locale31.getDisplayCountry(locale58);
        java.lang.String str62 = locale30.getDisplayName(locale58);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone2, locale30);
        java.lang.String str64 = timeZone2.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar63", (calendar47.compareTo(calendar63) == 0) == calendar47.equals(calendar63));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        boolean boolean26 = timeZone18.hasSameRules(timeZone23);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.lang.String str36 = locale28.getDisplayVariant(locale30);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone18, locale30);
        java.lang.String str40 = locale30.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar37", (calendar6.compareTo(calendar37) == 0) == calendar6.equals(calendar37));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder14 = builder12.setLocale(locale13);
        java.util.Calendar.Builder builder16 = builder14.setLenient(false);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        timeZone19.setRawOffset((int) (byte) 1);
        boolean boolean24 = timeZone19.observesDaylightTime();
        java.util.Calendar.Builder builder25 = builder14.setTimeZone(timeZone19);
        java.util.Date date29 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date29.setMonth(4);
        java.util.Calendar.Builder builder32 = builder14.setInstant(date29);
        java.util.Calendar.Builder builder34 = builder14.setInstant(1645513674789L);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        int int42 = timeZone38.getOffset(1645513656868L);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        boolean boolean48 = timeZone38.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder49 = builder14.setTimeZone(timeZone38);
        java.util.Locale locale53 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str54 = locale53.getDisplayScript();
        java.lang.String str55 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder56 = new java.util.Calendar.Builder();
        java.util.Date date57 = new java.util.Date();
        int int58 = date57.getSeconds();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getTimezoneOffset();
        date59.setMinutes(6);
        boolean boolean63 = date57.after(date59);
        java.util.Calendar.Builder builder64 = builder56.setInstant(date59);
        java.util.Calendar.Builder builder66 = builder64.setInstant((long) 36);
        java.util.Calendar.Builder builder70 = builder66.setWeekDate(17, 37, 6);
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.lang.String str72 = locale71.getLanguage();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone74.hasSameRules(timeZone76);
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone76, locale78);
        java.lang.String str80 = locale71.getDisplayName(locale78);
        java.lang.String str81 = locale78.getDisplayCountry();
        java.util.Calendar.Builder builder82 = builder66.setLocale(locale78);
        java.util.Set<java.lang.String> strSet83 = locale78.getUnicodeLocaleKeys();
        java.lang.String str84 = locale53.getDisplayLanguage(locale78);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone38, locale78);
        boolean boolean86 = attribute0.equals((java.lang.Object) timeZone38);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone38);
        int int88 = timeZone38.getRawOffset();
        java.lang.String str89 = timeZone38.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar79", (calendar40.compareTo(calendar79) == 0) == calendar40.equals(calendar79));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.set(16, (int) (byte) 0);
        int int14 = calendar8.getFirstDayOfWeek();
        int int15 = calendar8.getWeekYear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        int int27 = timeZone23.getOffset(1645513657024L);
        timeZone23.setID("fra");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone23.hasSameRules(timeZone30);
        boolean boolean32 = timeZone22.hasSameRules(timeZone30);
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone30);
        java.util.Locale locale39 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayVariant();
        java.lang.String str44 = locale40.getDisplayLanguage(locale42);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:08:12", timeZone30, locale42);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getVariant();
        java.util.Locale locale50 = new java.util.Locale("Chinese (China)");
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale50);
        java.lang.String str52 = locale47.getDisplayName(locale50);
        java.lang.String str53 = locale42.getDisplayCountry(locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar21", (calendar8.compareTo(calendar21) == 0) == calendar8.equals(calendar21));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category2);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale6);
        java.lang.String str13 = locale6.getDisplayVariant();
        java.util.Locale.setDefault(category2, locale6);
        java.util.Locale locale16 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale17 = null;
        java.lang.String str18 = locale16.getDisplayScript(locale17);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category2, locale16);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale16);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.lang.String str32 = locale27.getDisplayVariant(locale31);
        java.lang.String str33 = locale25.getDisplayVariant(locale27);
        java.lang.String str35 = locale27.getExtension('x');
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone22, locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(3, timeZone22);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        calendar45.clear(7);
        calendar45.set(16, (int) (byte) 0);
        java.time.Instant instant51 = calendar45.toInstant();
        java.util.TimeZone timeZone52 = calendar45.getTimeZone();
        int int53 = calendar45.getMinimalDaysInFirstWeek();
        calendar45.setMinimalDaysInFirstWeek((-46800000));
        java.util.TimeZone timeZone56 = calendar45.getTimeZone();
        int int58 = timeZone56.getOffset(0L);
        boolean boolean59 = timeZone22.hasSameRules(timeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar45", (calendar12.compareTo(calendar45) == 0) == calendar12.equals(calendar45));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-2-22 7:08:13");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9, locale11);
        calendar12.clear(7);
        calendar12.set(16, (int) (byte) 0);
        java.time.Instant instant18 = calendar12.toInstant();
        boolean boolean20 = calendar12.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str21 = fastDateFormat5.format(calendar12);
        java.lang.Object obj22 = fastDateFormat5.clone();
        java.util.Locale locale23 = fastDateFormat5.getLocale();
        java.lang.String str24 = locale23.getLanguage();
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale23.getDisplayVariant(locale25);
        java.lang.String str27 = locale23.getLanguage();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale30);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        java.lang.String str46 = locale37.getDisplayName(locale44);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.lang.String str49 = locale44.getDisplayName(locale47);
        java.lang.String str50 = locale44.getISO3Language();
        boolean boolean51 = fastDateFormat36.equals((java.lang.Object) locale44);
        java.lang.String str52 = locale23.getDisplayLanguage(locale44);
        java.lang.String str53 = locale23.getISO3Country();
        java.lang.String str54 = locale23.getDisplayName();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone1, locale23);
        java.util.TimeZone.setDefault(timeZone1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar55", (calendar12.compareTo(calendar55) == 0) == calendar12.equals(calendar55));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.lang.String str3 = parsePosition1.toString();
        java.lang.Object obj4 = null;
        boolean boolean5 = parsePosition1.equals(obj4);
        int int6 = parsePosition1.getIndex();
        boolean boolean8 = parsePosition1.equals((java.lang.Object) 1645513657332L);
        java.lang.String str9 = parsePosition1.toString();
        int int10 = parsePosition1.getErrorIndex();
        int int11 = parsePosition1.getErrorIndex();
        java.lang.String str12 = parsePosition1.toString();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getSeconds();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        date16.setMinutes(6);
        boolean boolean20 = date14.after(date16);
        java.util.Calendar.Builder builder21 = builder13.setInstant(date16);
        java.util.Calendar.Builder builder23 = builder21.setInstant((long) 36);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder25 = builder23.setLocale(locale24);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        timeZone30.setRawOffset((int) (byte) 1);
        boolean boolean35 = timeZone30.observesDaylightTime();
        java.util.Calendar.Builder builder36 = builder25.setTimeZone(timeZone30);
        java.util.Date date40 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date40.setMonth(4);
        java.util.Calendar.Builder builder43 = builder25.setInstant(date40);
        boolean boolean44 = parsePosition1.equals((java.lang.Object) builder25);
        java.util.Date date45 = new java.util.Date();
        int int46 = date45.getTimezoneOffset();
        int int47 = date45.getSeconds();
        java.time.Instant instant48 = date45.toInstant();
        date45.setMinutes(16);
        java.util.Calendar.Builder builder51 = builder25.setInstant(date45);
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone56.hasSameRules(timeZone58);
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone58, locale60);
        calendar61.clear(7);
        calendar61.set(16, (int) (byte) 0);
        int int67 = calendar61.getFirstDayOfWeek();
        java.lang.String str68 = fastDateFormat54.format(calendar61);
        java.util.Date date69 = calendar61.getTime();
        java.util.Calendar.Builder builder70 = builder51.setInstant(date69);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone72.hasSameRules(timeZone74);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone74);
        java.util.TimeZone timeZone77 = calendar76.getTimeZone();
        timeZone77.setID("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Calendar.Builder builder80 = builder70.setTimeZone(timeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar61 and calendar76", (calendar61.compareTo(calendar76) == 0) == calendar61.equals(calendar76));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.setFirstDayOfWeek(8);
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale12.getDisplayCountry();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        java.lang.String str23 = locale21.getDisplayVariant();
        boolean boolean24 = locale21.hasExtensions();
        java.lang.String str25 = locale12.getDisplayLanguage(locale21);
        java.lang.String str26 = locale21.getISO3Country();
        java.lang.String str27 = locale21.getDisplayScript();
        java.util.Calendar.Builder builder28 = new java.util.Calendar.Builder();
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getSeconds();
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getTimezoneOffset();
        date31.setMinutes(6);
        boolean boolean35 = date29.after(date31);
        java.util.Calendar.Builder builder36 = builder28.setInstant(date31);
        java.util.Calendar.Builder builder38 = builder36.setInstant((long) 36);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder40 = builder38.setLocale(locale39);
        java.util.Calendar.Builder builder42 = builder40.setLenient(false);
        java.util.Calendar.Builder builder44 = builder40.setLenient(false);
        java.util.Calendar.Builder builder48 = builder40.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale49 = java.util.Locale.CHINA;
        java.lang.String str50 = locale49.toLanguageTag();
        java.util.Calendar.Builder builder51 = builder48.setLocale(locale49);
        java.lang.String str52 = locale49.getISO3Country();
        java.lang.String str53 = locale49.getDisplayCountry();
        java.util.Locale locale54 = java.util.Locale.US;
        java.lang.String str55 = locale49.getDisplayVariant(locale54);
        java.lang.String str56 = locale21.getDisplayName(locale49);
        java.lang.String str57 = locale49.getDisplayLanguage();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone11, locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar22", (calendar7.compareTo(calendar22) == 0) == calendar7.equals(calendar22));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone6 = calendar5.getTimeZone();
        java.util.Locale locale10 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale10);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getSeconds();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        date16.setMinutes(6);
        boolean boolean20 = date14.after(date16);
        java.util.Calendar.Builder builder21 = builder13.setInstant(date16);
        java.util.Calendar.Builder builder23 = builder21.setInstant((long) 36);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder25 = builder23.setLocale(locale24);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28);
        java.util.Calendar.Builder builder31 = builder23.setTimeZone(timeZone28);
        java.util.Calendar.Builder builder33 = builder23.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        int int39 = timeZone35.getOffset(1645513657024L);
        timeZone35.setID("fra");
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale44.getDisplayCountry();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone35, locale44);
        boolean boolean49 = fastDateFormat34.equals((java.lang.Object) locale44);
        java.util.Calendar.Builder builder50 = builder33.setLocale(locale44);
        java.lang.String str51 = locale44.getScript();
        boolean boolean52 = locale44.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale44);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone6, locale44);
        java.lang.String str55 = locale44.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar48", (calendar5.compareTo(calendar48) == 0) == calendar5.equals(calendar48));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(53);
        java.lang.Object obj9 = fastDateFormat2.parseObject("", parsePosition8);
        java.util.TimeZone timeZone10 = fastDateFormat2.getTimeZone();
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.lang.String str13 = locale12.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale12.getDisplayName(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone10, locale15);
        java.util.Set<java.lang.Character> charSet19 = locale15.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar18", (calendar17.compareTo(calendar18) == 0) == calendar17.equals(calendar18));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.lang.String str14 = locale9.getDisplayCountry();
        java.lang.String str16 = locale9.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale9);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale9);
        calendar19.set(999, (int) 'x', (-1899));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar18", (calendar13.compareTo(calendar18) == 0) == calendar13.equals(calendar18));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1);
        int int6 = timeZone1.getRawOffset();
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition(field7);
        fieldPosition8.setBeginIndex(59);
        java.lang.String str11 = fieldPosition8.toString();
        fieldPosition8.setBeginIndex(15);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.lang.String str27 = locale26.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale26);
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.lang.String str30 = locale26.getDisplayName(locale29);
        java.lang.String str31 = locale26.getDisplayCountry();
        java.lang.String str32 = locale26.getDisplayScript();
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Locale.setDefault(locale33);
        java.lang.String str36 = locale26.getDisplayName(locale33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str39 = fastDateFormat37.format((long) ' ');
        java.lang.String str41 = fastDateFormat37.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj42 = fastDateFormat37.clone();
        java.util.Locale locale43 = fastDateFormat37.getLocale();
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale45);
        java.lang.Object obj47 = fastDateFormat46.clone();
        java.util.Locale locale48 = fastDateFormat46.getLocale();
        java.lang.String str49 = locale43.getDisplayScript(locale48);
        java.lang.String str50 = locale33.getDisplayScript(locale43);
        java.util.Calendar.Builder builder51 = builder22.setLocale(locale33);
        boolean boolean52 = fieldPosition8.equals((java.lang.Object) locale33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("HH' h 'mm z", timeZone1, locale33);
        java.util.Locale.Category category54 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category54, locale55);
        java.util.Locale locale57 = java.util.Locale.getDefault(category54);
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.lang.String str63 = locale58.getDisplayVariant(locale62);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(locale58);
        java.lang.String str65 = locale58.getDisplayVariant();
        java.util.Locale.setDefault(category54, locale58);
        java.util.Locale locale68 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale69 = null;
        java.lang.String str70 = locale68.getDisplayScript(locale69);
        java.util.Set<java.lang.String> strSet71 = locale68.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category54, locale68);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale68);
        java.util.TimeZone timeZone74 = calendar73.getTimeZone();
        boolean boolean75 = timeZone1.hasSameRules(timeZone74);
        java.time.ZoneId zoneId76 = timeZone74.toZoneId();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar64", (calendar5.compareTo(calendar64) == 0) == calendar5.equals(calendar64));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        boolean boolean19 = timeZone9.hasSameRules(timeZone17);
        timeZone17.setID("Taiwan");
        timeZone17.setRawOffset(0);
        int int24 = timeZone17.getRawOffset();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        int int30 = timeZone26.getOffset(1645513657024L);
        timeZone26.setID("fra");
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone26.hasSameRules(timeZone33);
        timeZone33.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone33);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        calendar44.clear(7);
        boolean boolean47 = calendar44.isWeekDateSupported();
        int int49 = calendar44.getMinimum(4);
        java.time.Instant instant50 = calendar44.toInstant();
        int int52 = calendar44.getMaximum(12);
        calendar44.setMinimalDaysInFirstWeek((int) 'u');
        int int56 = calendar44.getActualMinimum(7);
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray65 = new java.util.Locale[] { locale60, locale61, locale62, locale63, locale64 };
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.Locale locale68 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList66);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale73 = java.util.Locale.FRANCE;
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.Locale locale76 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray77 = new java.util.Locale[] { locale72, locale73, locale74, locale75, locale76 };
        java.util.ArrayList<java.util.Locale> localeList78 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList78, localeArray77);
        java.util.Locale locale80 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList78);
        int int81 = languageRangeList58.lastIndexOf((java.lang.Object) languageRangeList70);
        boolean boolean82 = languageRangeList58.isEmpty();
        java.util.Date date83 = new java.util.Date();
        int int84 = date83.getTimezoneOffset();
        java.util.Date date85 = new java.util.Date();
        java.lang.String str86 = date85.toGMTString();
        boolean boolean87 = date83.before(date85);
        int int88 = languageRangeList58.lastIndexOf((java.lang.Object) date85);
        languageRangeList58.clear();
        java.lang.Object[] objArray90 = languageRangeList58.toArray();
        languageRangeList58.clear();
        java.util.TimeZone timeZone92 = java.util.TimeZone.getDefault();
        int int93 = languageRangeList58.lastIndexOf((java.lang.Object) timeZone92);
        timeZone92.setRawOffset(50);
        calendar44.setTimeZone(timeZone92);
        boolean boolean97 = timeZone33.hasSameRules(timeZone92);
        boolean boolean98 = timeZone17.hasSameRules(timeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar44", (calendar5.compareTo(calendar44) == 0) == calendar5.equals(calendar44));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getSeconds();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        boolean boolean8 = date2.after(date4);
        java.util.Calendar.Builder builder9 = builder1.setInstant(date4);
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 36);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder15 = builder13.setLenient(false);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        timeZone18.setRawOffset((int) (byte) 1);
        boolean boolean23 = timeZone18.observesDaylightTime();
        java.util.Calendar.Builder builder24 = builder13.setTimeZone(timeZone18);
        java.util.Date date28 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date28.setMonth(4);
        java.util.Calendar.Builder builder31 = builder13.setInstant(date28);
        java.util.Calendar.Builder builder33 = builder13.setInstant(1645513674789L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        int int41 = timeZone37.getOffset(1645513656868L);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder48 = builder13.setTimeZone(timeZone37);
        java.util.Locale locale52 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getDisplayCountry();
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getSeconds();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        date58.setMinutes(6);
        boolean boolean62 = date56.after(date58);
        java.util.Calendar.Builder builder63 = builder55.setInstant(date58);
        java.util.Calendar.Builder builder65 = builder63.setInstant((long) 36);
        java.util.Calendar.Builder builder69 = builder65.setWeekDate(17, 37, 6);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.lang.String str79 = locale70.getDisplayName(locale77);
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar.Builder builder81 = builder65.setLocale(locale77);
        java.util.Set<java.lang.String> strSet82 = locale77.getUnicodeLocaleKeys();
        java.lang.String str83 = locale52.getDisplayLanguage(locale77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone37, locale77);
        java.util.TimeZone.setDefault(timeZone37);
        timeZone37.setID("\u4e0a\u5348 02:02:05");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar78", (calendar39.compareTo(calendar78) == 0) == calendar39.equals(calendar78));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.util.Calendar.Builder builder18 = builder10.setTimeZone(timeZone15);
        java.util.Calendar.Builder builder20 = builder10.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        int int26 = timeZone22.getOffset(1645513657024L);
        timeZone22.setID("fra");
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone22.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone22, locale31);
        boolean boolean36 = fastDateFormat21.equals((java.lang.Object) locale31);
        java.util.Calendar.Builder builder37 = builder20.setLocale(locale31);
        java.util.Calendar calendar38 = builder37.build();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayVariant();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone50);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone53.hasSameRules(timeZone55);
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55, locale57);
        calendar58.clear(7);
        calendar58.set(16, (int) (byte) 0);
        java.time.Instant instant64 = calendar58.toInstant();
        boolean boolean66 = calendar58.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str67 = fastDateFormat51.format(calendar58);
        java.lang.Object obj68 = fastDateFormat51.clone();
        java.util.Locale locale69 = fastDateFormat51.getLocale();
        java.lang.String str70 = locale69.getLanguage();
        java.util.Locale locale71 = null;
        java.lang.String str72 = locale69.getDisplayVariant(locale71);
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.lang.String str74 = locale73.getLanguage();
        boolean boolean75 = locale73.hasExtensions();
        java.lang.String str76 = locale73.getDisplayCountry();
        java.lang.String str77 = locale73.getDisplayLanguage();
        java.lang.String str78 = locale73.getDisplayLanguage();
        java.lang.String str79 = locale69.getDisplayLanguage(locale73);
        java.lang.String str80 = locale45.getDisplayCountry(locale73);
        java.lang.String str81 = locale45.getDisplayName();
        java.util.Set<java.lang.String> strSet82 = locale45.getUnicodeLocaleKeys();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale45);
        java.util.Calendar.Builder builder84 = builder37.setLocale(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar46", (calendar35.compareTo(calendar46) == 0) == calendar35.equals(calendar46));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        boolean boolean26 = timeZone18.hasSameRules(timeZone23);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.lang.String str36 = locale28.getDisplayVariant(locale30);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone18, locale30);
        java.lang.String str40 = timeZone18.getID();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        timeZone43.setRawOffset((int) (byte) 1);
        boolean boolean48 = timeZone43.observesDaylightTime();
        boolean boolean49 = timeZone43.observesDaylightTime();
        boolean boolean50 = timeZone18.hasSameRules(timeZone43);
        java.util.TimeZone.setDefault(timeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar37", (calendar6.compareTo(calendar37) == 0) == calendar6.equals(calendar37));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        java.util.TimeZone.setDefault(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        timeZone3.setRawOffset(32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset(10);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale10 = builder6.build();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale10);
        java.lang.String str12 = timeZone1.getID();
        timeZone1.setID("Wed Feb 16 07:08:08 GMT 2022");
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        int int27 = calendar21.getWeeksInWeekYear();
        calendar21.clear();
        java.util.Date date29 = calendar21.getTime();
        calendar21.set((int) 'a', 15, (int) (byte) 0, 46, 9);
        int int37 = calendar21.getMaximum(16);
        boolean boolean39 = calendar21.after((java.lang.Object) 1645513674789L);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        calendar49.clear(7);
        calendar49.set(16, (int) (byte) 0);
        java.time.Instant instant55 = calendar49.toInstant();
        boolean boolean57 = calendar49.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str58 = fastDateFormat42.format(calendar49);
        java.lang.Object obj59 = fastDateFormat42.clone();
        java.lang.String str60 = fastDateFormat42.toString();
        java.util.Locale locale61 = fastDateFormat42.getLocale();
        java.lang.String str62 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone63 = fastDateFormat42.getTimeZone();
        java.util.Locale locale64 = fastDateFormat42.getLocale();
        boolean boolean65 = calendar21.after((java.lang.Object) fastDateFormat42);
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition(10);
        int int69 = parsePosition68.getErrorIndex();
        int int70 = parsePosition68.getErrorIndex();
        java.lang.String str71 = parsePosition68.toString();
        parsePosition68.setErrorIndex(456);
        int int74 = parsePosition68.getIndex();
        java.lang.Object obj75 = fastDateFormat42.parseObject("und", parsePosition68);
        java.util.TimeZone timeZone76 = fastDateFormat42.getTimeZone();
        boolean boolean77 = timeZone1.hasSameRules(timeZone76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar49", (calendar11.compareTo(calendar49) == 0) == calendar11.equals(calendar49));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.setMinimalDaysInFirstWeek(15);
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale15);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale22.getDisplayName(locale29);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        java.lang.String str35 = locale29.getISO3Language();
        boolean boolean36 = fastDateFormat21.equals((java.lang.Object) locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str39 = fastDateFormat37.format((long) ' ');
        java.lang.String str41 = fastDateFormat37.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj42 = fastDateFormat37.clone();
        java.util.Locale locale43 = fastDateFormat37.getLocale();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.lang.String str45 = fastDateFormat21.format(calendar44);
        calendar44.clear();
        calendar44.setTimeInMillis((long) 3);
        calendar44.setFirstDayOfWeek(0);
        calendar44.set(58, 50, 45);
        boolean boolean55 = calendar6.after((java.lang.Object) calendar44);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone57.hasSameRules(timeZone59);
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone59, locale61);
        calendar62.clear(7);
        calendar62.set(16, (int) (byte) 0);
        int int68 = calendar62.getFirstDayOfWeek();
        int int69 = calendar62.getWeekYear();
        java.util.TimeZone timeZone70 = calendar62.getTimeZone();
        int int72 = timeZone70.getOffset((-61604322582998L));
        timeZone70.setRawOffset(41);
        calendar6.setTimeZone(timeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar62", (calendar30.compareTo(calendar62) == 0) == calendar30.equals(calendar62));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        boolean boolean10 = calendar7.isWeekDateSupported();
        int int12 = calendar7.getMinimum(4);
        java.util.TimeZone timeZone13 = calendar7.getTimeZone();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        boolean boolean21 = timeZone13.hasSameRules(timeZone20);
        boolean boolean22 = timeZone13.observesDaylightTime();
        java.lang.String str23 = timeZone13.getID();
        int int24 = timeZone13.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:08:24", timeZone13);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMonth(0);
        java.time.Instant instant30 = date26.toInstant();
        java.util.Date date31 = java.util.Date.from(instant30);
        date31.setSeconds(38);
        date31.setYear(41);
        int int36 = date31.getHours();
        java.lang.String str37 = date31.toLocaleString();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone40);
        int int43 = fastDateFormat42.getMaxLengthEstimate();
        int int44 = fastDateFormat42.getMaxLengthEstimate();
        java.util.Date date46 = new java.util.Date(1645513662388L);
        date46.setYear(11);
        java.text.AttributedCharacterIterator attributedCharacterIterator49 = fastDateFormat42.formatToCharacterIterator((java.lang.Object) date46);
        boolean boolean50 = date31.before(date46);
        date46.setHours(24);
        date46.setMonth((int) (byte) 0);
        java.text.AttributedCharacterIterator attributedCharacterIterator55 = fastDateFormat25.formatToCharacterIterator((java.lang.Object) date46);
        java.lang.String str56 = fastDateFormat25.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar19", (calendar7.compareTo(calendar19) == 0) == calendar7.equals(calendar19));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        calendar44.clear(7);
        calendar44.set(16, (int) (byte) 0);
        int int50 = calendar44.getFirstDayOfWeek();
        java.lang.String str51 = fastDateFormat37.format(calendar44);
        java.lang.String str52 = fastDateFormat37.toString();
        java.util.Locale locale53 = fastDateFormat37.getLocale();
        java.lang.String str54 = locale30.getDisplayName(locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar44", (calendar34.compareTo(calendar44) == 0) == calendar34.equals(calendar44));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.lang.String str17 = fastDateFormat2.toString();
        boolean boolean18 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone19 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone24);
        int int28 = timeZone24.getOffset(1645513656868L);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        boolean boolean34 = timeZone24.hasSameRules(timeZone30);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        boolean boolean40 = timeZone30.hasSameRules(timeZone38);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        boolean boolean46 = timeZone38.hasSameRules(timeZone43);
        timeZone38.setID("22 Feb 2022 07:07:53 GMT");
        java.util.Locale locale50 = new java.util.Locale("February 22, 2022");
        java.lang.String str51 = locale50.getScript();
        java.util.Locale locale55 = new java.util.Locale("7:07:38 AM UTC", "java.text.ParsePosition[index=52,errorIndex=0]", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str56 = locale50.getDisplayLanguage(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone38, locale50);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone19, locale50);
        boolean boolean59 = timeZone19.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar26", (calendar9.compareTo(calendar26) == 0) == calendar9.equals(calendar26));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.util.Date date21 = new java.util.Date();
        long long22 = date21.getTime();
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getTimezoneOffset();
        int int25 = date23.getSeconds();
        int int26 = date23.getMinutes();
        long long27 = date23.getTime();
        java.lang.String str28 = date23.toLocaleString();
        boolean boolean29 = date21.before(date23);
        java.time.Instant instant30 = date21.toInstant();
        java.lang.String str31 = fastDateFormat2.format(date21);
        java.lang.String str33 = fastDateFormat2.format((long) 18);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.lang.String str39 = fastDateFormat37.toString();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition(16);
        parsePosition42.setErrorIndex(5);
        parsePosition42.setErrorIndex(1);
        java.lang.Object obj47 = fastDateFormat37.parseObject("22 Feb 2022 07:07:39 GMT", parsePosition42);
        java.lang.Object obj48 = fastDateFormat2.parseObject("7:08:27 AM GMT+00:00", parsePosition42);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale.Builder builder51 = builder49.clear();
        java.util.Locale.Builder builder52 = builder51.clearExtensions();
        java.util.Locale.Builder builder53 = builder52.clear();
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder55.clear();
        java.util.Locale.Builder builder57 = builder55.clear();
        java.util.Locale locale58 = builder55.build();
        java.util.Locale.Builder builder59 = builder55.clear();
        java.util.Locale locale60 = builder59.build();
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone63.hasSameRules(timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone64.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone66, locale68);
        java.lang.String str70 = locale61.getDisplayName(locale68);
        java.util.Locale.Builder builder71 = builder59.setLocale(locale61);
        java.util.Locale locale72 = builder59.build();
        java.util.Locale.Builder builder73 = builder53.setLocale(locale72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(locale72);
        calendar74.setFirstDayOfWeek(0);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Locale locale81 = new java.util.Locale("", "hi!", "");
        java.lang.String str82 = locale77.getDisplayVariant(locale81);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(locale77);
        java.lang.String str84 = locale77.getDisplayVariant();
        java.lang.String str85 = locale77.getDisplayVariant();
        java.util.Locale locale87 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale88 = locale87.stripExtensions();
        java.util.Locale locale89 = java.util.Locale.TAIWAN;
        java.lang.String str90 = locale88.getDisplayLanguage(locale89);
        java.lang.String str91 = locale77.getDisplayLanguage(locale89);
        java.util.Locale.setDefault(locale77);
        boolean boolean93 = calendar74.before((java.lang.Object) locale77);
        java.lang.String str94 = calendar74.getCalendarType();
        boolean boolean95 = fastDateFormat2.equals((java.lang.Object) str94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar74", (calendar9.compareTo(calendar74) == 0) == calendar9.equals(calendar74));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMinutes(6);
        int int30 = date26.getMinutes();
        java.util.Date date37 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean38 = date26.before(date37);
        java.util.Date date44 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean45 = date26.before(date44);
        boolean boolean46 = calendar13.after((java.lang.Object) date44);
        java.util.TimeZone timeZone47 = calendar13.getTimeZone();
        int int48 = timeZone47.getRawOffset();
        java.util.Calendar.Builder builder49 = new java.util.Calendar.Builder();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        date52.setMinutes(6);
        boolean boolean56 = date50.after(date52);
        java.util.Calendar.Builder builder57 = builder49.setInstant(date52);
        java.util.Calendar.Builder builder59 = builder57.setInstant((long) 36);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder61 = builder59.setLocale(locale60);
        java.lang.String str62 = locale60.getVariant();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone47, locale60);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone47);
        int int65 = timeZone47.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar63 and calendar64", (calendar63.compareTo(calendar64) == 0) == calendar63.equals(calendar64));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:09:25 GMT");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder2.setInstant(1645513671992L);
        java.util.Calendar.Builder builder7 = builder2.setWeekDefinition(7, (int) (short) 1);
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getSeconds();
        long long10 = date8.getTime();
        date8.setTime((long) 37);
        date8.setDate((int) (short) 0);
        int int15 = date8.getYear();
        int int16 = date8.getYear();
        date8.setMinutes(100);
        java.time.Instant instant19 = date8.toInstant();
        int int20 = date8.getYear();
        java.util.Calendar.Builder builder21 = builder7.setInstant(date8);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale30 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale30.getScript();
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale30.getDisplayVariant(locale36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone25, locale36);
        boolean boolean39 = timeZone25.observesDaylightTime();
        java.util.Locale locale41 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale42.getDisplayLanguage(locale43);
        java.util.Locale locale45 = java.util.Locale.US;
        java.lang.String str46 = locale43.getDisplayCountry(locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone25, locale43);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone51);
        int int55 = timeZone51.getOffset(1645513656868L);
        boolean boolean56 = timeZone51.observesDaylightTime();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone51, locale57);
        java.lang.String str59 = locale43.getDisplayLanguage(locale57);
        boolean boolean60 = locale43.hasExtensions();
        java.util.Calendar.Builder builder61 = builder7.setLocale(locale43);
        java.util.Locale locale64 = new java.util.Locale("hi!", "USA");
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale43.getDisplayScript(locale64);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone1, locale64);
        java.util.Set<java.lang.String> strSet69 = locale64.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar68", (calendar53.compareTo(calendar68) == 0) == calendar53.equals(calendar68));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.Locale locale21 = fastDateFormat2.getLocale();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        java.util.Date date24 = new java.util.Date();
        java.lang.String str25 = date24.toGMTString();
        boolean boolean26 = date22.before(date24);
        java.lang.String str27 = date24.toLocaleString();
        int int28 = date24.getTimezoneOffset();
        date24.setDate(292278994);
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDateFormat2.format(date24, stringBuffer31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        calendar39.clear(7);
        calendar39.set(16, (int) (byte) 0);
        int int45 = calendar39.getWeeksInWeekYear();
        calendar39.setFirstDayOfWeek(14);
        calendar39.setFirstDayOfWeek(50);
        java.util.TimeZone timeZone50 = calendar39.getTimeZone();
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar39);
        java.text.AttributedCharacterIterator attributedCharacterIterator53 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) 2972122161000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar39", (calendar9.compareTo(calendar39) == 0) == calendar9.equals(calendar39));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        int int9 = timeZone5.getOffset(1645513657024L);
        timeZone5.setID("fra");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone5.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone5, locale14);
        java.lang.String str19 = locale14.getDisplayCountry();
        java.lang.String str21 = locale14.getExtension('a');
        java.util.Locale.setDefault(category3, locale14);
        java.util.Locale.setDefault(locale14);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone1, locale14);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        calendar35.clear(7);
        calendar35.set(16, (int) (byte) 0);
        java.time.Instant instant41 = calendar35.toInstant();
        boolean boolean43 = calendar35.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str44 = fastDateFormat28.format(calendar35);
        java.lang.String str45 = calendar35.getCalendarType();
        boolean boolean46 = calendar35.isWeekDateSupported();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        int int51 = timeZone47.getOffset(1645513657024L);
        timeZone47.setID("fra");
        calendar35.setTimeZone(timeZone47);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayLanguage();
        java.lang.String str59 = locale55.getISO3Country();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale55);
        boolean boolean61 = calendar24.after((java.lang.Object) timeZone47);
        boolean boolean62 = timeZone47.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar24", (calendar18.compareTo(calendar24) == 0) == calendar18.equals(calendar24));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        boolean boolean19 = timeZone9.hasSameRules(timeZone17);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        boolean boolean25 = timeZone17.hasSameRules(timeZone22);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone17);
        int int27 = timeZone17.getRawOffset();
        timeZone17.setID("Heure de Greenwich");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar26", (calendar5.compareTo(calendar26) == 0) == calendar5.equals(calendar26));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        calendar7.set(16, (int) (byte) 0);
        java.time.Instant instant13 = calendar7.toInstant();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        int int16 = calendar7.getMaximum((int) (short) 0);
        calendar7.setLenient(true);
        java.text.AttributedCharacterIterator.Attribute attribute19 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = attribute19.equals((java.lang.Object) timeZone20);
        java.util.TimeZone.setDefault(timeZone20);
        calendar7.setTimeZone(timeZone20);
        java.lang.String str24 = timeZone20.getID();
        java.lang.String str25 = timeZone20.getID();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:11:10", timeZone20);
        java.util.Locale locale28 = new java.util.Locale("java.text.ParsePosition[index=12,errorIndex=5]");
        java.lang.String str29 = locale28.getDisplayCountry();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone20, locale28);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone34);
        int int38 = timeZone34.getOffset(1645513656868L);
        boolean boolean39 = timeZone34.observesDaylightTime();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone34, locale40);
        boolean boolean42 = timeZone34.observesDaylightTime();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayVariant();
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone56.hasSameRules(timeZone58);
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone58, locale60);
        calendar61.clear(7);
        calendar61.set(16, (int) (byte) 0);
        java.time.Instant instant67 = calendar61.toInstant();
        boolean boolean69 = calendar61.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str70 = fastDateFormat54.format(calendar61);
        java.lang.Object obj71 = fastDateFormat54.clone();
        java.util.Locale locale72 = fastDateFormat54.getLocale();
        java.lang.String str73 = locale72.getLanguage();
        java.util.Locale locale74 = null;
        java.lang.String str75 = locale72.getDisplayVariant(locale74);
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getLanguage();
        boolean boolean78 = locale76.hasExtensions();
        java.lang.String str79 = locale76.getDisplayCountry();
        java.lang.String str80 = locale76.getDisplayLanguage();
        java.lang.String str81 = locale76.getDisplayLanguage();
        java.lang.String str82 = locale72.getDisplayLanguage(locale76);
        java.lang.String str83 = locale48.getDisplayCountry(locale76);
        java.util.TimeZone timeZone84 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone85 = java.util.TimeZone.getDefault();
        boolean boolean86 = timeZone84.hasSameRules(timeZone85);
        java.util.TimeZone timeZone87 = java.util.TimeZone.getDefault();
        boolean boolean88 = timeZone85.hasSameRules(timeZone87);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone87);
        java.util.TimeZone timeZone90 = calendar89.getTimeZone();
        java.util.Locale locale94 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar95 = java.util.Calendar.getInstance(timeZone90, locale94);
        java.lang.String str96 = locale76.getDisplayLanguage(locale94);
        java.util.Calendar calendar97 = java.util.Calendar.getInstance(timeZone34, locale94);
        java.lang.String str98 = timeZone20.getDisplayName(locale94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar36", (calendar7.compareTo(calendar36) == 0) == calendar7.equals(calendar36));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        int int8 = calendar6.getWeeksInWeekYear();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        boolean boolean16 = calendar6.after((java.lang.Object) calendar15);
        java.lang.String str17 = calendar15.getCalendarType();
        boolean boolean19 = calendar15.after((java.lang.Object) 52);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone23);
        int int27 = timeZone23.getOffset(1645513656868L);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        boolean boolean33 = timeZone23.hasSameRules(timeZone29);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        boolean boolean39 = timeZone29.hasSameRules(timeZone37);
        boolean boolean40 = timeZone37.observesDaylightTime();
        boolean boolean41 = timeZone37.observesDaylightTime();
        timeZone37.setID("it");
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone45.hasSameRules(timeZone47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone47);
        int int51 = timeZone47.getOffset(1645513656868L);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone53.hasSameRules(timeZone55);
        boolean boolean57 = timeZone47.hasSameRules(timeZone53);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone59.hasSameRules(timeZone61);
        boolean boolean63 = timeZone53.hasSameRules(timeZone61);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66);
        boolean boolean69 = timeZone61.hasSameRules(timeZone66);
        boolean boolean70 = timeZone37.hasSameRules(timeZone66);
        calendar15.setTimeZone(timeZone66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar25", (calendar6.compareTo(calendar25) == 0) == calendar6.equals(calendar25));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        java.time.Instant instant19 = calendar13.toInstant();
        int int20 = calendar13.getMinimalDaysInFirstWeek();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        calendar13.add((int) (short) 0, 100);
        calendar13.setMinimalDaysInFirstWeek(38);
        long long27 = calendar13.getTimeInMillis();
        java.lang.String str28 = fastDateFormat4.format(calendar13);
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getSeconds();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        date32.setMinutes(6);
        boolean boolean36 = date30.after(date32);
        java.util.Calendar.Builder builder37 = builder29.setInstant(date32);
        java.util.Calendar.Builder builder39 = builder37.setInstant((long) 36);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder41 = builder39.setLocale(locale40);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.util.Calendar.Builder builder47 = builder39.setTimeZone(timeZone44);
        calendar13.setTimeZone(timeZone44);
        java.util.TimeZone.setDefault(timeZone44);
        java.util.Locale locale51 = new java.util.Locale("22 Feb 2022 07:07:39 GMT");
        java.util.Locale.setDefault(locale51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone44, locale51);
        boolean boolean54 = timeZone44.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar53", (calendar13.compareTo(calendar53) == 0) == calendar13.equals(calendar53));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder19.setLenient(true);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        int int31 = timeZone27.getOffset(1645513657024L);
        timeZone27.setID("fra");
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone27.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone27, locale36);
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone27);
        timeZone27.setRawOffset(0);
        int int45 = timeZone27.getOffset((long) 100);
        int int47 = timeZone27.getOffset(1645513736562L);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone49);
        java.lang.String str51 = fastDateFormat50.toString();
        int int52 = fastDateFormat50.getMaxLengthEstimate();
        java.util.TimeZone timeZone53 = fastDateFormat50.getTimeZone();
        timeZone53.setID("\u610f\u5927\u5229");
        int int56 = timeZone53.getRawOffset();
        boolean boolean57 = timeZone27.hasSameRules(timeZone53);
        java.util.Locale.Category category58 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category58, locale59);
        java.util.Locale locale61 = java.util.Locale.getDefault(category58);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.lang.String str67 = locale62.getDisplayVariant(locale66);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(locale62);
        java.lang.String str69 = locale62.getDisplayVariant();
        java.util.Locale.setDefault(category58, locale62);
        java.util.Locale locale71 = java.util.Locale.getDefault(category58);
        java.util.Locale locale72 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale76 = new java.util.Locale("", "hi!", "");
        java.lang.String str77 = locale72.getDisplayCountry(locale76);
        java.util.Locale locale81 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str82 = locale81.getDisplayScript();
        java.lang.String str83 = locale72.getDisplayName(locale81);
        java.lang.String str84 = locale81.getDisplayScript();
        java.lang.String str85 = locale81.getISO3Language();
        java.util.Locale.setDefault(locale81);
        java.util.Locale.setDefault(category58, locale81);
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(timeZone27, locale81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar68", (calendar40.compareTo(calendar68) == 0) == calendar40.equals(calendar68));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.setMinimalDaysInFirstWeek(15);
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale15);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale22.getDisplayName(locale29);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        java.lang.String str35 = locale29.getISO3Language();
        boolean boolean36 = fastDateFormat21.equals((java.lang.Object) locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str39 = fastDateFormat37.format((long) ' ');
        java.lang.String str41 = fastDateFormat37.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj42 = fastDateFormat37.clone();
        java.util.Locale locale43 = fastDateFormat37.getLocale();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.lang.String str45 = fastDateFormat21.format(calendar44);
        calendar44.clear();
        calendar44.setTimeInMillis((long) 3);
        calendar44.setFirstDayOfWeek(0);
        calendar44.set(58, 50, 45);
        boolean boolean55 = calendar6.after((java.lang.Object) calendar44);
        java.util.TimeZone timeZone56 = calendar6.getTimeZone();
        java.util.TimeZone timeZone57 = calendar6.getTimeZone();
        java.lang.Object obj58 = timeZone57.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar30", (calendar6.compareTo(calendar30) == 0) == calendar6.equals(calendar30));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        java.util.Date date1 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMinutes();
        date15.setHours(43);
        date15.setSeconds(130);
        boolean boolean21 = date1.after(date15);
        date15.setTime(1645513779791L);
        java.lang.String str24 = date15.toLocaleString();
        java.lang.String str25 = date15.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar14", (calendar10.compareTo(calendar14) == 0) == calendar10.equals(calendar14));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.clear(7);
        calendar9.set(0, 0, (int) (short) 0, 122, 2, 5);
        calendar9.setMinimalDaysInFirstWeek(38);
        calendar9.setFirstDayOfWeek(25);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        timeZone34.setRawOffset((int) (byte) 1);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone34, locale39);
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = locale41.getISO3Country();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone34, locale41);
        int int44 = calendar43.getFirstDayOfWeek();
        java.util.Date date48 = new java.util.Date(2022, 7, (-1));
        date48.setTime((-58914147028618L));
        calendar43.setTime(date48);
        calendar9.setTime(date48);
        int int53 = date48.getHours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar43", (calendar9.compareTo(calendar43) == 0) == calendar9.equals(calendar43));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(53);
        java.lang.Object obj9 = fastDateFormat2.parseObject("", parsePosition8);
        java.lang.String str10 = fastDateFormat2.toString();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        boolean boolean20 = calendar17.isWeekDateSupported();
        int int22 = calendar17.getMinimum(4);
        calendar17.setMinimalDaysInFirstWeek(15);
        int int25 = calendar17.getWeeksInWeekYear();
        boolean boolean26 = calendar17.isWeekDateSupported();
        java.lang.String str27 = fastDateFormat2.format(calendar17);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        java.time.Instant instant43 = calendar37.toInstant();
        boolean boolean45 = calendar37.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str46 = fastDateFormat30.format(calendar37);
        java.lang.String str47 = calendar37.getCalendarType();
        boolean boolean48 = calendar37.isWeekDateSupported();
        java.time.Instant instant49 = calendar37.toInstant();
        int int50 = calendar37.getWeeksInWeekYear();
        java.util.Date date51 = calendar37.getTime();
        boolean boolean53 = calendar37.after((java.lang.Object) (-61972629833525L));
        java.util.Date date54 = calendar37.getTime();
        java.lang.String str55 = fastDateFormat2.format(calendar37);
        java.util.Date date56 = calendar37.getTime();
        java.time.Instant instant57 = date56.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar37", (calendar17.compareTo(calendar37) == 0) == calendar17.equals(calendar37));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.lang.String str15 = locale6.getDisplayName(locale13);
        java.util.Locale.Builder builder16 = builder4.setLocale(locale6);
        java.util.Locale locale17 = builder4.build();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.util.Locale.setDefault(locale17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale.LanguageRange languageRange23 = null;
        boolean boolean24 = languageRangeList21.add(languageRange23);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor25 = languageRangeList21.iterator();
        java.util.Set<java.lang.String> strSet26 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet26.parallelStream();
        boolean boolean29 = languageRangeList21.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale31 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        boolean boolean35 = languageRangeList21.contains((java.lang.Object) locale32);
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale32.getDisplayCountry(locale36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        int int43 = timeZone39.getOffset(1645513657024L);
        timeZone39.setID("fra");
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone39.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone39, locale48);
        boolean boolean53 = fastDateFormat38.equals((java.lang.Object) locale48);
        java.lang.String str54 = locale48.getCountry();
        java.lang.String str55 = locale36.getDisplayLanguage(locale48);
        java.lang.String str56 = locale17.getDisplayScript(locale36);
        java.util.Set<java.lang.String> strSet57 = locale17.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet58 = locale17.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar52", (calendar14.compareTo(calendar52) == 0) == calendar14.equals(calendar52));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        java.util.Locale locale3 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale3);
        int int6 = calendar5.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        int int12 = fastDateFormat11.getMaxLengthEstimate();
        java.lang.String str13 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        calendar20.set(16, (int) (byte) 0);
        java.time.Instant instant26 = calendar20.toInstant();
        int int27 = calendar20.getMinimalDaysInFirstWeek();
        int int28 = calendar20.getMinimalDaysInFirstWeek();
        calendar20.add((int) (short) 0, 100);
        calendar20.setMinimalDaysInFirstWeek(38);
        long long34 = calendar20.getTimeInMillis();
        java.lang.String str35 = fastDateFormat11.format(calendar20);
        java.util.TimeZone timeZone36 = fastDateFormat11.getTimeZone();
        calendar5.setTimeZone(timeZone36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = attribute0.toString();
        java.lang.String str4 = attribute0.toString();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        int int9 = timeZone5.getOffset(1645513657024L);
        timeZone5.setID("fra");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone5.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone5, locale14);
        boolean boolean19 = attribute0.equals((java.lang.Object) calendar18);
        java.lang.String str20 = attribute0.toString();
        java.lang.String str21 = attribute0.toString();
        java.lang.String str22 = attribute0.toString();
        java.lang.String str23 = attribute0.toString();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = locale31.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27, locale31);
        boolean boolean34 = attribute0.equals((java.lang.Object) locale31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar30", (calendar18.compareTo(calendar30) == 0) == calendar18.equals(calendar30));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.lang.String str9 = locale4.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale4);
        java.lang.String str11 = locale4.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.lang.String str19 = locale14.getDisplayCountry(locale18);
        java.util.Locale locale23 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str24 = locale23.getDisplayScript();
        java.lang.String str25 = locale14.getDisplayName(locale23);
        java.lang.String str26 = locale23.getDisplayScript();
        java.lang.String str27 = locale23.getISO3Language();
        java.util.Locale.setDefault(locale23);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale34 = new java.util.Locale("java.util.GregorianCalendar[time=100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]", "", "France");
        java.util.Locale.setDefault(category0, locale34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category0);
        java.util.Locale locale37 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone39);
        boolean boolean41 = fastDateFormat40.getTimeZoneOverridesCalendar();
        java.lang.String str43 = fastDateFormat40.format((-838185410000L));
        java.lang.Object obj44 = fastDateFormat40.clone();
        java.util.TimeZone timeZone45 = fastDateFormat40.getTimeZone();
        java.util.Locale locale48 = new java.util.Locale("Nov 1, 34768 12:00:00 AM", "2022-02-22 07:07:55");
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone45, locale48);
        java.util.Locale.setDefault(category0, locale48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar49", (calendar10.compareTo(calendar49) == 0) == calendar10.equals(calendar49));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Calendar.Builder builder27 = new java.util.Calendar.Builder();
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getSeconds();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        date30.setMinutes(6);
        boolean boolean34 = date28.after(date30);
        java.util.Calendar.Builder builder35 = builder27.setInstant(date30);
        java.util.Calendar.Builder builder37 = builder35.setInstant((long) 36);
        java.util.Calendar.Builder builder39 = builder37.setLenient(true);
        java.util.Calendar.Builder builder41 = builder39.setLenient(false);
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getSeconds();
        long long44 = date42.getTime();
        date42.setTime((long) 37);
        date42.setDate((int) (short) 0);
        int int49 = date42.getMonth();
        date42.setDate(16);
        java.util.Calendar.Builder builder52 = builder41.setInstant(date42);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone57.hasSameRules(timeZone59);
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone59, locale61);
        boolean boolean63 = timeZone53.hasSameRules(timeZone59);
        timeZone59.setRawOffset(21);
        boolean boolean66 = timeZone59.observesDaylightTime();
        java.util.Calendar.Builder builder67 = builder52.setTimeZone(timeZone59);
        int int69 = timeZone59.getOffset(1645513704277L);
        boolean boolean70 = timeZone25.hasSameRules(timeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar62", (calendar10.compareTo(calendar62) == 0) == calendar10.equals(calendar62));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str7 = locale4.getVariant();
        java.lang.String str8 = locale4.getISO3Language();
        java.lang.String str9 = locale4.getDisplayCountry();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clear();
        java.util.Locale locale14 = builder11.build();
        java.util.Locale.Builder builder15 = builder11.clear();
        java.util.Locale locale16 = builder15.build();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.lang.String str26 = locale17.getDisplayName(locale24);
        java.util.Locale.Builder builder27 = builder15.setLocale(locale17);
        java.util.Locale locale28 = builder15.build();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        java.util.Locale.setDefault(locale28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale.LanguageRange languageRange34 = null;
        boolean boolean35 = languageRangeList32.add(languageRange34);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor36 = languageRangeList32.iterator();
        java.util.Set<java.lang.String> strSet37 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream38 = strSet37.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream39 = strSet37.parallelStream();
        boolean boolean40 = languageRangeList32.retainAll((java.util.Collection<java.lang.String>) strSet37);
        java.util.Locale locale42 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale43 = locale42.stripExtensions();
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayCountry(locale44);
        boolean boolean46 = languageRangeList32.contains((java.lang.Object) locale43);
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = locale43.getDisplayCountry(locale47);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        int int54 = timeZone50.getOffset(1645513657024L);
        timeZone50.setID("fra");
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone50.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = locale59.getDisplayCountry();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone50, locale59);
        boolean boolean64 = fastDateFormat49.equals((java.lang.Object) locale59);
        java.lang.String str65 = locale59.getCountry();
        java.lang.String str66 = locale47.getDisplayLanguage(locale59);
        java.lang.String str67 = locale28.getDisplayScript(locale47);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale47);
        boolean boolean69 = locale4.equals((java.lang.Object) (short) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar63", (calendar25.compareTo(calendar63) == 0) == calendar25.equals(calendar63));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        int int9 = timeZone5.getOffset(1645513656868L);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        boolean boolean15 = timeZone5.hasSameRules(timeZone11);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        boolean boolean21 = timeZone11.hasSameRules(timeZone19);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone24);
        boolean boolean27 = timeZone19.hasSameRules(timeZone24);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale29.getDisplayVariant(locale31);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone19, locale31);
        java.lang.String str41 = timeZone19.getID();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        timeZone44.setRawOffset((int) (byte) 1);
        boolean boolean49 = timeZone44.observesDaylightTime();
        boolean boolean50 = timeZone44.observesDaylightTime();
        boolean boolean51 = timeZone19.hasSameRules(timeZone44);
        java.lang.String str52 = timeZone44.getID();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar38", (calendar7.compareTo(calendar38) == 0) == calendar7.equals(calendar38));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        boolean boolean3 = timeZone0.observesDaylightTime();
        boolean boolean4 = timeZone0.observesDaylightTime();
        boolean boolean5 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone11);
        int int15 = timeZone11.getOffset(0L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 3, timeZone11);
        boolean boolean17 = timeZone0.hasSameRules(timeZone11);
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getSeconds();
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getTimezoneOffset();
        date21.setMinutes(6);
        boolean boolean25 = date19.after(date21);
        java.util.Calendar.Builder builder26 = builder18.setInstant(date21);
        java.util.Calendar.Builder builder28 = builder26.setInstant((long) 36);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder30 = builder28.setLocale(locale29);
        java.util.Calendar.Builder builder32 = builder30.setLenient(false);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        timeZone35.setRawOffset((int) (byte) 1);
        boolean boolean40 = timeZone35.observesDaylightTime();
        java.util.Calendar.Builder builder41 = builder30.setTimeZone(timeZone35);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone35.hasSameRules(timeZone43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str50 = fastDateFormat48.format((long) ' ');
        java.util.Locale locale51 = fastDateFormat48.getLocale();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone43, locale51);
        int int54 = timeZone43.getOffset(1645513663835L);
        boolean boolean55 = timeZone11.hasSameRules(timeZone43);
        java.util.Locale locale57 = new java.util.Locale("7:09:32 AM GMT");
        java.lang.String str58 = locale57.getDisplayVariant();
        java.util.Locale locale59 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale63 = new java.util.Locale("", "hi!", "");
        java.lang.String str64 = locale59.getDisplayCountry(locale63);
        java.util.Locale locale68 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str69 = locale68.getDisplayScript();
        java.lang.String str70 = locale59.getDisplayName(locale68);
        java.lang.String str71 = locale68.getDisplayScript();
        java.lang.String str72 = locale68.getISO3Language();
        java.lang.String str73 = locale68.getDisplayLanguage();
        java.lang.String str74 = locale68.getISO3Language();
        java.lang.String str75 = locale57.getDisplayName(locale68);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone43, locale57);
        java.util.Date date82 = new java.util.Date(25, 39, 32769, (-405), 41);
        calendar76.setTime(date82);
        int int84 = date82.getTimezoneOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar52", (calendar13.compareTo(calendar52) == 0) == calendar13.equals(calendar52));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone9);
        java.util.TimeZone timeZone12 = calendar11.getTimeZone();
        java.util.Locale locale16 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone12);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayVariant();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        java.time.Instant instant43 = calendar37.toInstant();
        boolean boolean45 = calendar37.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str46 = fastDateFormat30.format(calendar37);
        java.lang.Object obj47 = fastDateFormat30.clone();
        java.util.Locale locale48 = fastDateFormat30.getLocale();
        java.lang.String str49 = locale48.getLanguage();
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale52.getDisplayCountry();
        java.lang.String str56 = locale52.getDisplayLanguage();
        java.lang.String str57 = locale52.getDisplayLanguage();
        java.lang.String str58 = locale48.getDisplayLanguage(locale52);
        java.lang.String str59 = locale24.getDisplayCountry(locale52);
        java.lang.String str60 = locale24.getDisplayName();
        java.util.Set<java.lang.String> strSet61 = locale24.getUnicodeLocaleKeys();
        java.util.Locale locale64 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str65 = locale24.getDisplayCountry(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone12, locale24);
        java.text.AttributedCharacterIterator.Attribute attribute67 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = attribute67.equals((java.lang.Object) timeZone68);
        java.lang.String str70 = attribute67.toString();
        java.lang.String str71 = attribute67.toString();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        int int76 = timeZone72.getOffset(1645513657024L);
        timeZone72.setID("fra");
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone72.hasSameRules(timeZone79);
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.lang.String str82 = locale81.getLanguage();
        boolean boolean83 = locale81.hasExtensions();
        java.lang.String str84 = locale81.getDisplayCountry();
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone72, locale81);
        boolean boolean86 = attribute67.equals((java.lang.Object) calendar85);
        java.util.Date date87 = calendar85.getTime();
        boolean boolean88 = calendar66.after((java.lang.Object) date87);
        boolean boolean89 = fastDateFormat3.equals((java.lang.Object) boolean88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar85", (calendar25.compareTo(calendar85) == 0) == calendar25.equals(calendar85));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.util.Locale locale14 = locale9.stripExtensions();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.lang.String str16 = locale14.getISO3Country();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar15", (calendar13.compareTo(calendar15) == 0) == calendar13.equals(calendar15));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale9.getDisplayName(locale16);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayName(locale19);
        java.lang.String str22 = locale16.getISO3Language();
        boolean boolean23 = fastDateFormat8.equals((java.lang.Object) locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str26 = fastDateFormat24.format((long) ' ');
        java.lang.String str28 = fastDateFormat24.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj29 = fastDateFormat24.clone();
        java.util.Locale locale30 = fastDateFormat24.getLocale();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        java.lang.String str32 = fastDateFormat8.format(calendar31);
        calendar31.setLenient(false);
        java.util.TimeZone timeZone35 = calendar31.getTimeZone();
        boolean boolean36 = timeZone35.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar31", (calendar17.compareTo(calendar31) == 0) == calendar17.equals(calendar31));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        date6.setYear(0);
        java.lang.String str11 = fastDateFormat2.format(date6);
        java.util.Locale locale12 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        boolean boolean18 = fastDateFormat16.getTimeZoneOverridesCalendar();
        java.lang.String str19 = fastDateFormat16.getPattern();
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj23 = fastDateFormat16.parseObject("22 Feb 2022 07:07:38 GMT", parsePosition22);
        int int24 = parsePosition22.getErrorIndex();
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getSeconds();
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        date28.setMinutes(6);
        boolean boolean32 = date26.after(date28);
        java.util.Calendar.Builder builder33 = builder25.setInstant(date28);
        java.util.Calendar.Builder builder35 = builder33.setInstant((long) 36);
        java.util.Calendar.Builder builder39 = builder35.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder43 = builder39.setWeekDate(0, 2, (-1));
        boolean boolean44 = parsePosition22.equals((java.lang.Object) 0);
        java.lang.Object obj45 = fastDateFormat2.parseObject("\u6cd5\u6587\u6cd5\u570b)", parsePosition22);
        int int46 = parsePosition22.getErrorIndex();
        java.util.Locale locale48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale48);
        java.util.TimeZone timeZone50 = fastDateFormat49.getTimeZone();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone50);
        boolean boolean52 = parsePosition22.equals((java.lang.Object) timeZone50);
        java.util.Calendar.Builder builder53 = new java.util.Calendar.Builder();
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getSeconds();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getTimezoneOffset();
        date56.setMinutes(6);
        boolean boolean60 = date54.after(date56);
        java.util.Calendar.Builder builder61 = builder53.setInstant(date56);
        java.util.Calendar.Builder builder63 = builder61.setInstant((long) 36);
        java.util.Calendar.Builder builder67 = builder63.setWeekDate(17, 37, 6);
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone71.hasSameRules(timeZone73);
        java.util.Locale locale75 = java.util.Locale.CHINA;
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone73, locale75);
        java.lang.String str77 = locale68.getDisplayName(locale75);
        java.lang.String str78 = locale75.getDisplayCountry();
        java.util.Calendar.Builder builder79 = builder63.setLocale(locale75);
        java.util.Set<java.lang.String> strSet80 = locale75.getUnicodeLocaleKeys();
        java.util.Locale locale81 = locale75.stripExtensions();
        java.lang.String str82 = timeZone50.getDisplayName(locale75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar76", (calendar51.compareTo(calendar76) == 0) == calendar51.equals(calendar76));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = attribute0.toString();
        java.lang.String str4 = attribute0.toString();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        int int9 = timeZone5.getOffset(1645513657024L);
        timeZone5.setID("fra");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone5.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone5, locale14);
        boolean boolean19 = attribute0.equals((java.lang.Object) calendar18);
        java.lang.String str20 = attribute0.toString();
        java.lang.Object obj21 = null;
        boolean boolean22 = attribute0.equals(obj21);
        java.util.Locale locale25 = new java.util.Locale("Chinese (China)", "java.util.GregorianCalendar[time=1645513665356,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.lang.String str28 = locale27.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale27);
        java.lang.String str30 = locale25.getDisplayScript(locale27);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale27);
        boolean boolean32 = attribute0.equals((java.lang.Object) locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar31", (calendar18.compareTo(calendar31) == 0) == calendar18.equals(calendar31));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        java.util.Locale locale3 = new java.util.Locale("7:07:39 AM UTC");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale3);
        java.util.TimeZone timeZone5 = fastDateFormat4.getTimeZone();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.lang.String str21 = locale12.getDisplayName(locale19);
        java.util.Locale.Builder builder22 = builder10.setLocale(locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1941-1-22 7:10:38", timeZone5, locale12);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone5);
        timeZone5.setRawOffset(50400000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar24", (calendar20.compareTo(calendar24) == 0) == calendar20.equals(calendar24));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.util.Locale locale16 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str17 = locale9.getDisplayScript(locale16);
        java.lang.String str18 = locale9.getISO3Language();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.lang.String str23 = locale19.getDisplayLanguage();
        java.lang.String str24 = locale19.getDisplayLanguage();
        java.lang.String str25 = locale19.toLanguageTag();
        java.lang.String str26 = locale9.getDisplayName(locale19);
        java.lang.String str27 = locale19.getScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar12", (calendar8.compareTo(calendar12) == 0) == calendar8.equals(calendar12));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.set(16, (int) (byte) 0);
        int int14 = calendar8.getFirstDayOfWeek();
        int int15 = calendar8.getWeekYear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone19);
        java.util.TimeZone timeZone22 = calendar21.getTimeZone();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        int int27 = timeZone23.getOffset(1645513657024L);
        timeZone23.setID("fra");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone23.hasSameRules(timeZone30);
        boolean boolean32 = timeZone22.hasSameRules(timeZone30);
        calendar8.setTimeZone(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone30);
        java.util.Locale locale39 = new java.util.Locale("java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)", "22 Feb 2022 07:08:03 GMT", "2022-02-02 07:08:13");
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayVariant();
        java.lang.String str44 = locale40.getDisplayLanguage(locale42);
        java.lang.String str45 = locale39.getDisplayCountry(locale42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:08:12", timeZone30, locale42);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:08:25 GMT");
        boolean boolean49 = timeZone48.observesDaylightTime();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone48);
        java.lang.String str51 = fastDateFormat46.format((java.lang.Object) calendar50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar21", (calendar8.compareTo(calendar21) == 0) == calendar8.equals(calendar21));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.lang.String str17 = fastDateFormat2.toString();
        boolean boolean18 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        calendar25.clear(7);
        calendar25.set(16, (int) (byte) 0);
        int int31 = calendar25.getFirstDayOfWeek();
        calendar25.set(48, 44, 31, 16, (int) (short) 0);
        boolean boolean38 = fastDateFormat2.equals((java.lang.Object) 31);
        java.util.Date date42 = new java.util.Date((int) 'a', 1, 292269054);
        int int43 = date42.getHours();
        java.lang.String str44 = fastDateFormat2.format(date42);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48, locale50);
        calendar51.clear(7);
        calendar51.set(16, (int) (byte) 0);
        java.time.Instant instant57 = calendar51.toInstant();
        int int58 = calendar51.getMinimalDaysInFirstWeek();
        calendar51.set(49, 6, (int) (byte) 10, 3, 40);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone66.hasSameRules(timeZone68);
        java.util.Locale locale70 = java.util.Locale.CHINA;
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone68, locale70);
        calendar71.clear(7);
        calendar71.set(16, (int) (byte) 0);
        java.time.Instant instant77 = calendar71.toInstant();
        java.util.TimeZone timeZone78 = calendar71.getTimeZone();
        int int79 = calendar71.getMinimalDaysInFirstWeek();
        calendar71.setMinimalDaysInFirstWeek((-46800000));
        java.util.TimeZone timeZone82 = calendar71.getTimeZone();
        calendar51.setTimeZone(timeZone82);
        java.util.TimeZone timeZone84 = calendar51.getTimeZone();
        calendar51.clear();
        java.lang.String str86 = fastDateFormat2.format(calendar51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar71", (calendar9.compareTo(calendar71) == 0) == calendar9.equals(calendar71));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar23.clear(7);
        boolean boolean26 = calendar23.isWeekDateSupported();
        java.util.TimeZone timeZone27 = calendar23.getTimeZone();
        int int29 = calendar23.getMaximum(3);
        java.lang.String str30 = fastDateFormat2.format(calendar23);
        int int31 = calendar23.getWeeksInWeekYear();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("java.text.fieldposition[field=-1,attribute=null,beginindex=59,endindex=0] (FEB 22, 2022 7:06:49 AM,Feb 22, 2022 7:07:57 AM)");
        calendar23.setTimeZone(timeZone33);
        java.lang.String str35 = timeZone33.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar23", (calendar9.compareTo(calendar23) == 0) == calendar9.equals(calendar23));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.clear(7);
        calendar9.set(0, 0, (int) (short) 0, 122, 2, 5);
        int int26 = calendar9.getFirstDayOfWeek();
        java.util.Date date27 = calendar9.getTime();
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        long long30 = date28.getTime();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        int int35 = timeZone31.getOffset(1645513657024L);
        timeZone31.setID("fra");
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone31.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone31, locale40);
        java.time.Instant instant45 = calendar44.toInstant();
        java.util.Date date46 = java.util.Date.from(instant45);
        java.util.Date date47 = java.util.Date.from(instant45);
        boolean boolean48 = date28.after(date47);
        calendar9.setTime(date47);
        date47.setDate(999);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar44", (calendar9.compareTo(calendar44) == 0) == calendar9.equals(calendar44));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale7 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone2, locale13);
        java.lang.Object obj16 = fastDateFormat15.clone();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category18, locale19);
        java.util.Locale locale21 = java.util.Locale.getDefault(category18);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale22.getDisplayVariant(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale22);
        java.lang.String str29 = locale22.getDisplayVariant();
        java.util.Locale.setDefault(category18, locale22);
        java.util.Locale locale31 = java.util.Locale.getDefault(category18);
        boolean boolean32 = fastDateFormat15.equals((java.lang.Object) locale31);
        java.lang.String str34 = fastDateFormat15.format((-4045651830173000L));
        java.lang.String str35 = fastDateFormat15.getPattern();
        java.util.Calendar.Builder builder36 = new java.util.Calendar.Builder();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getSeconds();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getTimezoneOffset();
        date39.setMinutes(6);
        boolean boolean43 = date37.after(date39);
        java.util.Calendar.Builder builder44 = builder36.setInstant(date39);
        java.util.Calendar.Builder builder46 = builder44.setInstant((long) 36);
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder48 = builder46.setLocale(locale47);
        java.util.Calendar calendar49 = builder48.build();
        int int50 = calendar49.getFirstDayOfWeek();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone54, locale56);
        calendar57.clear(7);
        boolean boolean60 = calendar57.isWeekDateSupported();
        int int62 = calendar57.getMinimum(4);
        calendar57.setMinimalDaysInFirstWeek(15);
        calendar57.clear();
        boolean boolean66 = calendar49.after((java.lang.Object) calendar57);
        calendar49.setMinimalDaysInFirstWeek(50);
        calendar49.clear();
        java.lang.String str70 = fastDateFormat15.format(calendar49);
        java.lang.String str71 = fastDateFormat15.getPattern();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar57", (calendar49.compareTo(calendar57) == 0) == calendar49.equals(calendar57));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.setMinimalDaysInFirstWeek(24);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        calendar17.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone22 = calendar17.getTimeZone();
        calendar7.setTimeZone(timeZone22);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.lang.String str32 = locale27.getDisplayVariant(locale31);
        java.lang.String str33 = locale25.getDisplayVariant(locale27);
        java.lang.String str34 = locale25.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale25);
        java.util.Date date42 = new java.util.Date((int) ' ', 11, 4, 9, (int) '#', 32769);
        java.lang.String str43 = date42.toLocaleString();
        date42.setYear((int) (byte) 10);
        date42.setMinutes((int) '#');
        java.text.AttributedCharacterIterator attributedCharacterIterator48 = fastDateFormat35.formatToCharacterIterator((java.lang.Object) date42);
        boolean boolean49 = timeZone22.inDaylightTime(date42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar17", (calendar7.compareTo(calendar17) == 0) == calendar7.equals(calendar17));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder19.setLenient(true);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        int int31 = timeZone27.getOffset(1645513657024L);
        timeZone27.setID("fra");
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone27.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone27, locale36);
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone27);
        timeZone27.setRawOffset(0);
        int int45 = timeZone27.getOffset((long) 100);
        int int47 = timeZone27.getOffset(1645513736562L);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone49);
        java.lang.String str51 = fastDateFormat50.toString();
        int int52 = fastDateFormat50.getMaxLengthEstimate();
        java.util.TimeZone timeZone53 = fastDateFormat50.getTimeZone();
        timeZone53.setID("\u610f\u5927\u5229");
        int int56 = timeZone53.getRawOffset();
        boolean boolean57 = timeZone27.hasSameRules(timeZone53);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone60);
        int int63 = fastDateFormat62.getMaxLengthEstimate();
        int int64 = fastDateFormat62.getMaxLengthEstimate();
        boolean boolean65 = fastDateFormat62.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone66 = fastDateFormat62.getTimeZone();
        java.util.TimeZone timeZone67 = fastDateFormat62.getTimeZone();
        int int69 = timeZone67.getOffset(1645513675042L);
        boolean boolean70 = timeZone53.hasSameRules(timeZone67);
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone72);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone75.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.CHINA;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone77, locale79);
        calendar80.clear(7);
        calendar80.set(16, (int) (byte) 0);
        java.time.Instant instant86 = calendar80.toInstant();
        boolean boolean88 = calendar80.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str89 = fastDateFormat73.format(calendar80);
        java.lang.Object obj90 = fastDateFormat73.clone();
        java.util.Locale locale91 = fastDateFormat73.getLocale();
        java.lang.String str92 = locale91.getLanguage();
        java.util.Locale locale93 = null;
        java.lang.String str94 = locale91.getDisplayVariant(locale93);
        java.lang.String str95 = locale91.getLanguage();
        java.lang.String str96 = locale91.getVariant();
        java.lang.String str97 = locale91.getDisplayVariant();
        java.util.Calendar calendar98 = java.util.Calendar.getInstance(timeZone53, locale91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar80", (calendar40.compareTo(calendar80) == 0) == calendar40.equals(calendar80));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.util.Locale locale44 = fastDateFormat26.getLocale();
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = locale44.getDisplayLanguage(locale48);
        java.lang.String str55 = locale20.getDisplayCountry(locale48);
        java.lang.String str56 = locale20.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str61 = locale20.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone8, locale20);
        java.text.AttributedCharacterIterator.Attribute attribute63 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = attribute63.equals((java.lang.Object) timeZone64);
        java.lang.String str66 = attribute63.toString();
        java.lang.String str67 = attribute63.toString();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        int int72 = timeZone68.getOffset(1645513657024L);
        timeZone68.setID("fra");
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone68.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        boolean boolean79 = locale77.hasExtensions();
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone68, locale77);
        boolean boolean82 = attribute63.equals((java.lang.Object) calendar81);
        java.util.Date date83 = calendar81.getTime();
        boolean boolean84 = calendar62.after((java.lang.Object) date83);
        long long85 = calendar62.getTimeInMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar81", (calendar13.compareTo(calendar81) == 0) == calendar13.equals(calendar81));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        calendar10.setFirstDayOfWeek(37);
        int int14 = calendar10.getGreatestMinimum(5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        int int20 = timeZone16.getOffset(1645513657024L);
        timeZone16.setID("fra");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayCountry();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone16, locale25);
        boolean boolean30 = fastDateFormat15.equals((java.lang.Object) locale25);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        int int43 = calendar37.getFirstDayOfWeek();
        int int44 = calendar37.getWeekYear();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        int int49 = timeZone45.getOffset(1645513657024L);
        timeZone45.setID("fra");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone45.hasSameRules(timeZone52);
        timeZone52.setRawOffset(9);
        calendar37.setTimeZone(timeZone52);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone60);
        int int64 = timeZone60.getOffset(1645513656868L);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone66.hasSameRules(timeZone68);
        boolean boolean70 = timeZone60.hasSameRules(timeZone66);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone72.hasSameRules(timeZone74);
        boolean boolean76 = timeZone66.hasSameRules(timeZone74);
        java.lang.String str77 = timeZone74.getID();
        calendar37.setTimeZone(timeZone74);
        java.lang.String str79 = fastDateFormat15.format(calendar37);
        boolean boolean80 = calendar10.after((java.lang.Object) calendar37);
        java.lang.String str81 = calendar37.getCalendarType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar29", (calendar10.compareTo(calendar29) == 0) == calendar10.equals(calendar29));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.setMinimalDaysInFirstWeek(69);
        java.util.TimeZone timeZone11 = calendar6.getTimeZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone11);
        int int14 = timeZone11.getOffset((long) 1200000);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar12", (calendar6.compareTo(calendar12) == 0) == calendar6.equals(calendar12));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.setMinimalDaysInFirstWeek(15);
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale15);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale22.getDisplayName(locale29);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = locale29.getDisplayName(locale32);
        java.lang.String str35 = locale29.getISO3Language();
        boolean boolean36 = fastDateFormat21.equals((java.lang.Object) locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str39 = fastDateFormat37.format((long) ' ');
        java.lang.String str41 = fastDateFormat37.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj42 = fastDateFormat37.clone();
        java.util.Locale locale43 = fastDateFormat37.getLocale();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.lang.String str45 = fastDateFormat21.format(calendar44);
        calendar44.clear();
        calendar44.setTimeInMillis((long) 3);
        calendar44.setFirstDayOfWeek(0);
        calendar44.set(58, 50, 45);
        boolean boolean55 = calendar6.after((java.lang.Object) calendar44);
        int int57 = calendar44.getMinimum((int) (byte) 10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar30", (calendar6.compareTo(calendar30) == 0) == calendar6.equals(calendar30));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder4.clearExtensions();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.lang.String str21 = locale12.getDisplayName(locale19);
        java.util.Locale.Builder builder22 = builder10.setLocale(locale12);
        java.util.Locale locale23 = builder10.build();
        java.util.Locale.Builder builder24 = builder4.setLocale(locale23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone26.observesDaylightTime();
        int int28 = timeZone26.getRawOffset();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale32.getDisplayVariant(locale36);
        java.lang.String str38 = locale30.getDisplayVariant(locale32);
        java.lang.String str39 = locale30.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale30);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        boolean boolean50 = calendar47.isWeekDateSupported();
        int int52 = calendar47.getMinimum(4);
        calendar47.setMinimalDaysInFirstWeek(15);
        int int55 = calendar47.getWeeksInWeekYear();
        java.lang.String str56 = fastDateFormat40.format(calendar47);
        java.util.Calendar.Builder builder57 = new java.util.Calendar.Builder();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getSeconds();
        java.util.Date date60 = new java.util.Date();
        int int61 = date60.getTimezoneOffset();
        date60.setMinutes(6);
        boolean boolean64 = date58.after(date60);
        java.util.Calendar.Builder builder65 = builder57.setInstant(date60);
        java.util.Calendar.Builder builder67 = builder65.setInstant((long) 36);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder69 = builder67.setLocale(locale68);
        java.util.Calendar.Builder builder71 = builder69.setLenient(false);
        java.util.Calendar.Builder builder73 = builder69.setLenient(false);
        java.util.Calendar.Builder builder77 = builder69.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale78 = java.util.Locale.CHINA;
        java.lang.String str79 = locale78.toLanguageTag();
        java.util.Calendar.Builder builder80 = builder77.setLocale(locale78);
        java.lang.String str81 = locale78.getISO3Country();
        java.lang.String str82 = locale78.getDisplayName();
        java.util.Set<java.lang.Character> charSet83 = locale78.getExtensionKeys();
        boolean boolean84 = fastDateFormat40.equals((java.lang.Object) charSet83);
        java.lang.String str86 = fastDateFormat40.format(1645513677743L);
        java.util.TimeZone timeZone87 = fastDateFormat40.getTimeZone();
        java.lang.String str88 = fastDateFormat40.toString();
        java.util.TimeZone timeZone89 = fastDateFormat40.getTimeZone();
        java.lang.String str90 = timeZone89.getID();
        boolean boolean91 = timeZone26.hasSameRules(timeZone89);
        int int92 = timeZone89.getRawOffset();
        int int94 = timeZone89.getOffset(1645513673315L);
        calendar25.setTimeZone(timeZone89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar47", (calendar20.compareTo(calendar47) == 0) == calendar20.equals(calendar47));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.lang.String str17 = fastDateFormat2.toString();
        boolean boolean18 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone19 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone24);
        int int28 = timeZone24.getOffset(1645513656868L);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        boolean boolean34 = timeZone24.hasSameRules(timeZone30);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        boolean boolean40 = timeZone30.hasSameRules(timeZone38);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        boolean boolean46 = timeZone38.hasSameRules(timeZone43);
        timeZone38.setID("22 Feb 2022 07:07:53 GMT");
        java.util.Locale locale50 = new java.util.Locale("February 22, 2022");
        java.lang.String str51 = locale50.getScript();
        java.util.Locale locale55 = new java.util.Locale("7:07:38 AM UTC", "java.text.ParsePosition[index=52,errorIndex=0]", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str56 = locale50.getDisplayLanguage(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone38, locale50);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone19, locale50);
        java.lang.String str60 = locale50.getExtension('u');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar58", (calendar9.compareTo(calendar58) == 0) == calendar9.equals(calendar58));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone6);
        java.lang.String str8 = fastDateFormat7.toString();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        calendar18.clear(7);
        calendar18.set(16, (int) (byte) 0);
        int int24 = calendar18.getFirstDayOfWeek();
        java.lang.String str25 = fastDateFormat11.format(calendar18);
        calendar18.set((int) (short) 100, 37, 2);
        java.lang.String str30 = fastDateFormat7.format(calendar18);
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getTimezoneOffset();
        date31.setMinutes(6);
        int int35 = date31.getMinutes();
        java.util.Date date42 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean43 = date31.before(date42);
        java.util.Date date49 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean50 = date31.before(date49);
        boolean boolean51 = calendar18.after((java.lang.Object) date49);
        java.util.TimeZone timeZone52 = calendar18.getTimeZone();
        int int53 = timeZone52.getRawOffset();
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.Date date55 = new java.util.Date();
        int int56 = date55.getSeconds();
        java.util.Date date57 = new java.util.Date();
        int int58 = date57.getTimezoneOffset();
        date57.setMinutes(6);
        boolean boolean61 = date55.after(date57);
        java.util.Calendar.Builder builder62 = builder54.setInstant(date57);
        java.util.Calendar.Builder builder64 = builder62.setInstant((long) 36);
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder66 = builder64.setLocale(locale65);
        java.lang.String str67 = locale65.getVariant();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone52, locale65);
        java.util.Locale.setDefault(category0, locale65);
        java.lang.String str70 = locale65.getISO3Country();
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder71.clear();
        java.util.Locale.Builder builder73 = builder71.clear();
        java.util.Locale locale74 = builder71.build();
        java.util.Locale.Builder builder75 = builder71.clear();
        java.util.Locale locale76 = builder75.build();
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        boolean boolean83 = timeZone80.hasSameRules(timeZone82);
        java.util.Locale locale84 = java.util.Locale.CHINA;
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone82, locale84);
        java.lang.String str86 = locale77.getDisplayName(locale84);
        java.util.Locale.Builder builder87 = builder75.setLocale(locale77);
        java.util.Locale locale89 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale89);
        java.lang.String str91 = fastDateFormat90.getPattern();
        boolean boolean93 = fastDateFormat90.equals((java.lang.Object) 1645513690955L);
        java.util.Locale locale94 = fastDateFormat90.getLocale();
        java.lang.String str95 = locale94.getDisplayVariant();
        java.lang.String str96 = locale77.getDisplayCountry(locale94);
        java.lang.String str97 = locale65.getDisplayName(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar68 and calendar85", (calendar68.compareTo(calendar85) == 0) == calendar68.equals(calendar85));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = java.util.Locale.getDefault(category3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        int int9 = timeZone5.getOffset(1645513657024L);
        timeZone5.setID("fra");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone5.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone5, locale14);
        java.lang.String str19 = locale14.getDisplayCountry();
        java.lang.String str21 = locale14.getExtension('a');
        java.util.Locale.setDefault(category3, locale14);
        java.util.Locale.setDefault(locale14);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone1, locale14);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar24", (calendar18.compareTo(calendar24) == 0) == calendar18.equals(calendar24));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        boolean boolean26 = timeZone18.hasSameRules(timeZone23);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale locale29 = builder28.build();
        java.util.Locale.Builder builder30 = builder28.clearExtensions();
        java.util.Locale locale31 = builder30.build();
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39, locale41);
        calendar42.clear(7);
        calendar42.set(16, (int) (byte) 0);
        java.time.Instant instant48 = calendar42.toInstant();
        boolean boolean50 = calendar42.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str51 = fastDateFormat35.format(calendar42);
        java.lang.Object obj52 = fastDateFormat35.clone();
        java.util.Locale locale53 = fastDateFormat35.getLocale();
        java.lang.String str54 = locale53.getLanguage();
        java.lang.String str55 = locale53.getVariant();
        java.lang.String str56 = locale31.getDisplayVariant(locale53);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone23, locale31);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale59);
        java.lang.String str61 = locale59.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23, locale59);
        java.lang.String str63 = locale59.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar42", (calendar6.compareTo(calendar42) == 0) == calendar6.equals(calendar42));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-2-22 7:07:59");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.toString();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        calendar16.set(16, (int) (byte) 0);
        int int22 = calendar16.getFirstDayOfWeek();
        java.lang.String str23 = fastDateFormat9.format(calendar16);
        calendar16.set((int) (short) 100, 37, 2);
        java.lang.String str28 = fastDateFormat5.format(calendar16);
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        date29.setMinutes(6);
        int int33 = date29.getMinutes();
        java.util.Date date40 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean41 = date29.before(date40);
        java.util.Date date47 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean48 = date29.before(date47);
        boolean boolean49 = calendar16.after((java.lang.Object) date47);
        java.util.TimeZone timeZone50 = calendar16.getTimeZone();
        int int51 = timeZone50.getRawOffset();
        java.util.Calendar.Builder builder52 = new java.util.Calendar.Builder();
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getSeconds();
        java.util.Date date55 = new java.util.Date();
        int int56 = date55.getTimezoneOffset();
        date55.setMinutes(6);
        boolean boolean59 = date53.after(date55);
        java.util.Calendar.Builder builder60 = builder52.setInstant(date55);
        java.util.Calendar.Builder builder62 = builder60.setInstant((long) 36);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder64 = builder62.setLocale(locale63);
        java.lang.String str65 = locale63.getVariant();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone50, locale63);
        calendar2.setTimeZone(timeZone50);
        int int68 = timeZone50.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar66", (calendar2.compareTo(calendar66) == 0) == calendar2.equals(calendar66));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Date date27 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date27.setMonth(4);
        java.util.Calendar.Builder builder30 = builder12.setInstant(date27);
        java.util.Calendar.Builder builder32 = builder12.setInstant(1645513674789L);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone36);
        int int40 = timeZone36.getOffset(1645513656868L);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        boolean boolean46 = timeZone36.hasSameRules(timeZone42);
        java.util.Calendar.Builder builder47 = builder12.setTimeZone(timeZone36);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        calendar54.clear(7);
        boolean boolean57 = calendar54.isWeekDateSupported();
        int int59 = calendar54.getMinimum(4);
        java.util.TimeZone timeZone60 = calendar54.getTimeZone();
        boolean boolean61 = timeZone60.observesDaylightTime();
        boolean boolean62 = timeZone36.hasSameRules(timeZone60);
        java.lang.Object obj63 = timeZone36.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar54", (calendar38.compareTo(calendar54) == 0) == calendar38.equals(calendar54));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder15.clear();
        java.util.Locale locale18 = builder15.build();
        java.util.Locale.Builder builder19 = builder15.clear();
        java.util.Locale locale20 = builder19.build();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.lang.String str30 = locale21.getDisplayName(locale28);
        java.util.Locale.Builder builder31 = builder19.setLocale(locale21);
        java.util.Locale locale32 = builder19.build();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:11:25", timeZone10, locale32);
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar29", (calendar6.compareTo(calendar29) == 0) == calendar6.equals(calendar29));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale6 = new java.util.Locale("7:07:38 AM UTC", "java.text.ParsePosition[index=52,errorIndex=0]", "22 Feb 2022 07:07:44 GMT");
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getSeconds();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        date12.setMinutes(6);
        boolean boolean16 = date10.after(date12);
        java.util.Calendar.Builder builder17 = builder9.setInstant(date12);
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 36);
        java.util.Calendar.Builder builder23 = builder19.setWeekDate(17, 37, 6);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.lang.String str33 = locale24.getDisplayName(locale31);
        java.lang.String str34 = locale31.getDisplayCountry();
        java.util.Calendar.Builder builder35 = builder19.setLocale(locale31);
        java.util.Set<java.lang.String> strSet36 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale37 = locale31.stripExtensions();
        java.lang.String str38 = locale31.getDisplayLanguage();
        java.util.Locale locale40 = new java.util.Locale("feb 22, 2022 7:07:42 am");
        java.lang.String str41 = locale31.getDisplayScript(locale40);
        java.lang.String str42 = locale40.toLanguageTag();
        java.util.Locale.setDefault(category0, locale40);
        java.util.Locale locale44 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        int int50 = timeZone46.getOffset(1645513657024L);
        timeZone46.setID("fra");
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone46.hasSameRules(timeZone53);
        timeZone53.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone53);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        boolean boolean60 = locale58.hasExtensions();
        java.lang.String str61 = locale58.getDisplayCountry();
        java.lang.String str62 = locale58.getDisplayLanguage();
        java.lang.String str63 = locale58.getDisplayLanguage();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone53, locale58);
        java.lang.String str65 = locale58.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet66 = locale58.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar32 and calendar64", (calendar32.compareTo(calendar64) == 0) == calendar32.equals(calendar64));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:07:46");
        boolean boolean2 = fastDateFormat1.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.lang.String str9 = fastDateFormat6.format((long) '#');
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(53);
        java.lang.Object obj13 = fastDateFormat6.parseObject("", parsePosition12);
        int int14 = parsePosition12.getErrorIndex();
        int int15 = parsePosition12.getErrorIndex();
        java.lang.Object obj16 = fastDateFormat1.parseObject("5 Jul 1916 00:48:59 GMT", parsePosition12);
        java.util.Date date18 = new java.util.Date(1645513667847L);
        java.lang.String str19 = fastDateFormat1.format(date18);
        java.util.TimeZone timeZone20 = fastDateFormat1.getTimeZone();
        java.util.Locale locale24 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale24);
        int int27 = calendar26.getFirstDayOfWeek();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        int int33 = fastDateFormat32.getMaxLengthEstimate();
        java.lang.String str34 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        calendar41.clear(7);
        calendar41.set(16, (int) (byte) 0);
        java.time.Instant instant47 = calendar41.toInstant();
        int int48 = calendar41.getMinimalDaysInFirstWeek();
        int int49 = calendar41.getMinimalDaysInFirstWeek();
        calendar41.add((int) (short) 0, 100);
        calendar41.setMinimalDaysInFirstWeek(38);
        long long55 = calendar41.getTimeInMillis();
        java.lang.String str56 = fastDateFormat32.format(calendar41);
        java.util.TimeZone timeZone57 = fastDateFormat32.getTimeZone();
        calendar26.setTimeZone(timeZone57);
        boolean boolean59 = calendar26.isWeekDateSupported();
        java.lang.String str60 = fastDateFormat1.format(calendar26);
        java.util.TimeZone timeZone61 = fastDateFormat1.getTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar41", (calendar26.compareTo(calendar41) == 0) == calendar26.equals(calendar41));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.setMinimalDaysInFirstWeek(69);
        boolean boolean12 = calendar6.after((java.lang.Object) (byte) 10);
        calendar6.add((int) (byte) 1, 39);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale19, locale20, locale21, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor29 = languageRangeList17.listIterator(0);
        boolean boolean30 = languageRangeList17.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Set<java.lang.String> strSet34 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream35 = strSet34.parallelStream();
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strSet34);
        boolean boolean37 = languageRangeList17.retainAll((java.util.Collection<java.lang.String>) strList36);
        int int38 = languageRangeList17.size();
        boolean boolean39 = calendar6.after((java.lang.Object) int38);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.lang.String str43 = fastDateFormat42.toString();
        boolean boolean44 = fastDateFormat42.getTimeZoneOverridesCalendar();
        java.lang.String str45 = fastDateFormat42.getPattern();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj49 = fastDateFormat42.parseObject("22 Feb 2022 07:07:38 GMT", parsePosition48);
        java.util.TimeZone timeZone50 = fastDateFormat42.getTimeZone();
        calendar6.setTimeZone(timeZone50);
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone56.hasSameRules(timeZone58);
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone58, locale60);
        calendar61.clear(7);
        calendar61.set(16, (int) (byte) 0);
        java.time.Instant instant67 = calendar61.toInstant();
        boolean boolean69 = calendar61.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str70 = fastDateFormat54.format(calendar61);
        java.lang.String str71 = calendar61.getCalendarType();
        boolean boolean72 = calendar61.isWeekDateSupported();
        calendar61.add(10, 8);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone77.hasSameRules(timeZone79);
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone79);
        int int83 = timeZone79.getOffset(1645513656868L);
        calendar61.setTimeZone(timeZone79);
        boolean boolean85 = timeZone50.hasSameRules(timeZone79);
        int int87 = timeZone50.getOffset(1645513691372L);
        java.util.Locale locale89 = java.util.Locale.forLanguageTag("22-feb-2022 7.11.28");
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(timeZone50, locale89);
        java.util.Locale.Builder builder91 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder92 = builder91.clear();
        java.util.Locale locale93 = builder92.build();
        java.util.Locale.Builder builder94 = builder92.clearExtensions();
        java.util.Locale locale95 = builder94.build();
        java.util.Set<java.lang.Character> charSet96 = locale95.getExtensionKeys();
        java.lang.String str97 = locale95.getDisplayScript();
        java.lang.String str98 = locale89.getDisplayCountry(locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar81 and calendar90", (calendar81.compareTo(calendar90) == 0) == calendar81.equals(calendar90));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.util.Calendar.Builder builder18 = builder10.setTimeZone(timeZone15);
        java.util.Calendar.Builder builder20 = builder10.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        int int26 = timeZone22.getOffset(1645513657024L);
        timeZone22.setID("fra");
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone22.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone22, locale31);
        boolean boolean36 = fastDateFormat21.equals((java.lang.Object) locale31);
        java.util.Calendar.Builder builder37 = builder20.setLocale(locale31);
        java.util.Date date43 = new java.util.Date(50, (int) (short) 0, 52, 54, 32770);
        java.util.Calendar.Builder builder44 = builder37.setInstant(date43);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.lang.String str50 = fastDateFormat47.format((long) '#');
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57, locale59);
        calendar60.clear(7);
        calendar60.set(16, (int) (byte) 0);
        int int66 = calendar60.getFirstDayOfWeek();
        java.lang.String str67 = fastDateFormat53.format(calendar60);
        java.util.TimeZone timeZone68 = calendar60.getTimeZone();
        java.util.Date date69 = new java.util.Date();
        int int70 = date69.getTimezoneOffset();
        java.util.Date date71 = new java.util.Date();
        java.lang.String str72 = date71.toGMTString();
        boolean boolean73 = date69.before(date71);
        boolean boolean74 = calendar60.after((java.lang.Object) date71);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone75.hasSameRules(timeZone76);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone76.hasSameRules(timeZone78);
        java.util.Locale locale80 = java.util.Locale.CHINA;
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone78, locale80);
        calendar81.clear(7);
        calendar81.set(16, (int) (byte) 0);
        java.time.Instant instant87 = calendar81.toInstant();
        java.util.Date date88 = java.util.Date.from(instant87);
        boolean boolean89 = date71.before(date88);
        java.lang.String str90 = fastDateFormat47.format(date71);
        java.util.Locale locale91 = fastDateFormat47.getLocale();
        java.util.TimeZone timeZone92 = fastDateFormat47.getTimeZone();
        java.util.Calendar.Builder builder93 = builder37.setTimeZone(timeZone92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar60", (calendar35.compareTo(calendar60) == 0) == calendar35.equals(calendar60));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar calendar13 = builder12.build();
        int int14 = calendar13.getFirstDayOfWeek();
        calendar13.setFirstDayOfWeek(28);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar22 = builder17.build();
        java.util.Calendar.Builder builder26 = builder17.setDate(40, 100, 103);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone30);
        int int34 = timeZone30.getOffset(1645513656868L);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        boolean boolean40 = timeZone30.hasSameRules(timeZone36);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        boolean boolean46 = timeZone36.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder47 = builder26.setTimeZone(timeZone36);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone49);
        java.lang.String str51 = fastDateFormat50.toString();
        int int52 = fastDateFormat50.getMaxLengthEstimate();
        java.util.TimeZone timeZone53 = fastDateFormat50.getTimeZone();
        boolean boolean54 = timeZone36.hasSameRules(timeZone53);
        int int56 = timeZone36.getOffset(1645513723070L);
        calendar13.setTimeZone(timeZone36);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone59.hasSameRules(timeZone61);
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone61, locale63);
        calendar64.clear(7);
        boolean boolean67 = calendar64.isWeekDateSupported();
        int int69 = calendar64.getMinimum(4);
        java.util.TimeZone timeZone70 = calendar64.getTimeZone();
        timeZone70.setRawOffset(7);
        int int74 = timeZone70.getOffset(1645513677733L);
        int int75 = timeZone70.getRawOffset();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone70);
        boolean boolean77 = timeZone70.observesDaylightTime();
        calendar13.setTimeZone(timeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar32 and calendar76", (calendar32.compareTo(calendar76) == 0) == calendar32.equals(calendar76));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        java.util.Locale locale3 = new java.util.Locale("", "hi!", "");
        java.lang.String str4 = locale3.getCountry();
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        calendar14.clear(7);
        calendar14.set(16, (int) (byte) 0);
        int int20 = calendar14.getFirstDayOfWeek();
        java.lang.String str21 = fastDateFormat7.format(calendar14);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        calendar28.clear(7);
        boolean boolean31 = calendar28.isWeekDateSupported();
        java.util.TimeZone timeZone32 = calendar28.getTimeZone();
        int int34 = calendar28.getMaximum(3);
        java.lang.String str35 = fastDateFormat7.format(calendar28);
        java.util.Locale locale36 = fastDateFormat7.getLocale();
        java.lang.String str37 = locale3.getDisplayCountry(locale36);
        java.util.Calendar.Builder builder38 = new java.util.Calendar.Builder();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getSeconds();
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getTimezoneOffset();
        date41.setMinutes(6);
        boolean boolean45 = date39.after(date41);
        java.util.Calendar.Builder builder46 = builder38.setInstant(date41);
        java.util.Calendar.Builder builder48 = builder46.setInstant((long) 36);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder50 = builder48.setLocale(locale49);
        java.util.Calendar.Builder builder52 = builder50.setLenient(false);
        java.util.Calendar.Builder builder54 = builder50.setLenient(false);
        java.util.Calendar.Builder builder58 = builder50.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.lang.String str60 = locale59.toLanguageTag();
        java.util.Calendar.Builder builder61 = builder58.setLocale(locale59);
        java.lang.String str62 = locale59.getISO3Country();
        java.lang.String str63 = locale59.getDisplayName();
        java.util.Set<java.lang.Character> charSet64 = locale59.getExtensionKeys();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str67 = fastDateFormat65.format((long) ' ');
        java.util.Locale locale68 = fastDateFormat65.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        int int74 = timeZone70.getOffset(1645513657024L);
        timeZone70.setID("fra");
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone70.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.CHINESE;
        java.lang.String str80 = locale79.getLanguage();
        boolean boolean81 = locale79.hasExtensions();
        java.lang.String str82 = locale79.getDisplayCountry();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone70, locale79);
        boolean boolean84 = fastDateFormat69.equals((java.lang.Object) locale79);
        java.lang.String str85 = locale79.getCountry();
        java.lang.String str86 = locale68.getDisplayCountry(locale79);
        java.lang.String str87 = locale59.getDisplayLanguage(locale79);
        java.lang.String str88 = locale3.getDisplayCountry(locale59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar83", (calendar14.compareTo(calendar83) == 0) == calendar14.equals(calendar83));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        java.text.AttributedCharacterIterator.Attribute attribute1 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = attribute1.equals((java.lang.Object) timeZone2);
        java.lang.String str4 = timeZone2.getID();
        timeZone2.setRawOffset(10);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder10 = builder7.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale11 = builder7.build();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale11);
        java.lang.String str13 = timeZone2.getID();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.lang.String str15 = fastDateFormat14.toString();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        java.lang.String str20 = fastDateFormat19.toString();
        boolean boolean21 = fastDateFormat19.getTimeZoneOverridesCalendar();
        java.lang.String str22 = fastDateFormat19.toString();
        java.util.Locale locale23 = fastDateFormat19.getLocale();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone26);
        java.lang.String str28 = fastDateFormat27.toString();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        calendar38.clear(7);
        calendar38.set(16, (int) (byte) 0);
        int int44 = calendar38.getFirstDayOfWeek();
        java.lang.String str45 = fastDateFormat31.format(calendar38);
        calendar38.set((int) (short) 100, 37, 2);
        java.lang.String str50 = fastDateFormat27.format(calendar38);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition(16);
        parsePosition53.setErrorIndex(5);
        parsePosition53.setErrorIndex(1);
        java.lang.Object obj58 = fastDateFormat27.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition53);
        java.lang.String str59 = parsePosition53.toString();
        java.lang.Object obj60 = fastDateFormat19.parseObject("7:08:05 AM GMT+00:00", parsePosition53);
        java.lang.Object obj61 = fastDateFormat14.parseObject("\u4e0a\u5348", parsePosition53);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone62.hasSameRules(timeZone63);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone63.hasSameRules(timeZone65);
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone65, locale67);
        calendar68.clear(7);
        calendar68.set(16, (int) (byte) 0);
        java.time.Instant instant74 = calendar68.toInstant();
        java.util.TimeZone timeZone75 = calendar68.getTimeZone();
        java.util.TimeZone timeZone76 = calendar68.getTimeZone();
        calendar68.setMinimalDaysInFirstWeek((int) (short) 1);
        int int79 = calendar68.getWeeksInWeekYear();
        java.util.Date date83 = new java.util.Date(32770, 36, 3);
        int int84 = date83.getMonth();
        date83.setMinutes(50400000);
        int int87 = date83.getDay();
        boolean boolean88 = calendar68.before((java.lang.Object) date83);
        date83.setTime(3984562848000L);
        java.lang.String str91 = fastDateFormat14.format((java.lang.Object) 3984562848000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar68", (calendar12.compareTo(calendar68) == 0) == calendar12.equals(calendar68));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        boolean boolean11 = timeZone1.hasSameRules(timeZone7);
        timeZone7.setRawOffset(21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayVariant(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale15);
        java.util.Date date22 = calendar21.getTime();
        int int23 = calendar21.getWeeksInWeekYear();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        boolean boolean31 = calendar21.after((java.lang.Object) calendar30);
        java.lang.String str32 = calendar30.getCalendarType();
        boolean boolean34 = calendar30.after((java.lang.Object) 52);
        java.util.TimeZone timeZone35 = calendar30.getTimeZone();
        boolean boolean36 = timeZone7.hasSameRules(timeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar21", (calendar10.compareTo(calendar21) == 0) == calendar10.equals(calendar21));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.clear(7);
        calendar9.set(0, 0, (int) (short) 0, 122, 2, 5);
        calendar9.setMinimalDaysInFirstWeek(38);
        calendar9.setFirstDayOfWeek(25);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        timeZone34.setRawOffset((int) (byte) 1);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone34, locale39);
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = locale41.getISO3Country();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone34, locale41);
        int int44 = calendar43.getFirstDayOfWeek();
        java.util.Date date48 = new java.util.Date(2022, 7, (-1));
        date48.setTime((-58914147028618L));
        calendar43.setTime(date48);
        calendar9.setTime(date48);
        long long53 = date48.getTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar43", (calendar9.compareTo(calendar43) == 0) == calendar9.equals(calendar43));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        boolean boolean29 = timeZone17.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str32 = fastDateFormat30.format((long) ' ');
        java.util.Locale locale33 = fastDateFormat30.getLocale();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale33);
        int int36 = timeZone25.getOffset(1645513663835L);
        java.util.Locale locale40 = new java.util.Locale("22 Feb 2022 07:08:29 GMT", "22 Feb 2022 07:08:08 GMT", "7:08:36 AM GMT+00:00");
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone25, locale40);
        java.util.Locale locale45 = new java.util.Locale("Sat Jan 22 07:07:49 UTC 2022", "Wed Feb 02 07:07:55 UTC 2022", "6:43:10 PM UTC");
        java.lang.String str46 = locale40.getDisplayScript(locale45);
        java.lang.Object obj47 = locale45.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar41", (calendar34.compareTo(calendar41) == 0) == calendar34.equals(calendar41));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:08:25 GMT");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone1);
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder4.setDate(15, (int) 'u', (int) ' ');
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale10);
        java.lang.Object obj12 = fastDateFormat11.clone();
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        int int15 = date13.getSeconds();
        int int16 = date13.getMinutes();
        long long17 = date13.getTime();
        long long18 = date13.getTime();
        date13.setHours(122);
        java.lang.String str21 = fastDateFormat11.format(date13);
        java.util.TimeZone timeZone22 = fastDateFormat11.getTimeZone();
        java.util.Calendar.Builder builder23 = builder4.setTimeZone(timeZone22);
        java.lang.String str24 = timeZone22.getID();
        timeZone22.setRawOffset(8);
        java.lang.String str27 = timeZone22.getID();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean30 = timeZone22.hasSameRules(timeZone29);
        timeZone22.setID("Feb 22, 2022 7:06:51 AM");
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        boolean boolean35 = locale33.hasExtensions();
        java.lang.String str36 = locale33.getISO3Country();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone22, locale33);
        int int38 = timeZone22.getRawOffset();
        boolean boolean39 = timeZone1.hasSameRules(timeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar37", (calendar3.compareTo(calendar37) == 0) == calendar3.equals(calendar37));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("CHN");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.Locale locale8 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str9 = locale8.getDisplayCountry();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale8);
        java.lang.String str11 = locale8.getDisplayLanguage();
        java.lang.String str12 = locale8.getDisplayLanguage();
        java.util.Locale locale15 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale15);
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category22, locale24);
        java.lang.String str26 = locale24.getVariant();
        boolean boolean27 = locale24.hasExtensions();
        java.lang.String str28 = locale15.getDisplayName(locale24);
        java.lang.String str29 = locale8.getDisplayName(locale24);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone4, locale8);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        boolean boolean40 = calendar37.isWeekDateSupported();
        int int42 = calendar37.getMinimum(4);
        java.util.TimeZone timeZone43 = calendar37.getTimeZone();
        calendar37.set(4, (int) (short) 100, (int) 'a', 10, (int) (byte) 100, 100);
        int int51 = calendar37.getFirstDayOfWeek();
        java.util.TimeZone timeZone52 = calendar37.getTimeZone();
        java.util.TimeZone.setDefault(timeZone52);
        timeZone52.setID("Feb 22, 2022 7:12:41 AM");
        java.text.AttributedCharacterIterator.Attribute attribute56 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = attribute56.equals((java.lang.Object) timeZone57);
        java.lang.String str59 = timeZone57.getID();
        boolean boolean60 = timeZone57.observesDaylightTime();
        timeZone57.setRawOffset(50);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone57);
        boolean boolean64 = timeZone52.hasSameRules(timeZone57);
        boolean boolean65 = timeZone4.hasSameRules(timeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar30", (calendar10.compareTo(calendar30) == 0) == calendar10.equals(calendar30));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getScript();
        java.lang.String str5 = locale0.getDisplayName(locale1);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str8 = fastDateFormat6.format((long) ' ');
        java.lang.String str10 = fastDateFormat6.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj11 = fastDateFormat6.clone();
        java.util.Locale locale12 = fastDateFormat6.getLocale();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.lang.String str21 = locale19.getCountry();
        java.lang.String str22 = locale19.getCountry();
        java.lang.String str23 = locale12.getDisplayVariant(locale19);
        java.lang.String str24 = locale0.getDisplayScript(locale12);
        boolean boolean25 = locale12.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar20", (calendar13.compareTo(calendar20) == 0) == calendar13.equals(calendar20));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(15, (int) 'u', (int) ' ');
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale6);
        java.lang.Object obj8 = fastDateFormat7.clone();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getTimezoneOffset();
        int int11 = date9.getSeconds();
        int int12 = date9.getMinutes();
        long long13 = date9.getTime();
        long long14 = date9.getTime();
        date9.setHours(122);
        java.lang.String str17 = fastDateFormat7.format(date9);
        java.util.TimeZone timeZone18 = fastDateFormat7.getTimeZone();
        java.util.Calendar.Builder builder19 = builder0.setTimeZone(timeZone18);
        java.lang.String str20 = timeZone18.getID();
        timeZone18.setRawOffset(8);
        java.lang.String str23 = timeZone18.getID();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone18);
        java.util.Locale locale28 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.util.Locale locale30 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale30.getScript();
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale30.getDisplayVariant(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale36.getScript();
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        boolean boolean43 = locale41.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale41);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        calendar54.clear(7);
        calendar54.set(16, (int) (byte) 0);
        java.time.Instant instant60 = calendar54.toInstant();
        boolean boolean62 = calendar54.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str63 = fastDateFormat47.format(calendar54);
        java.lang.Object obj64 = fastDateFormat47.clone();
        java.util.Locale locale65 = fastDateFormat47.getLocale();
        java.lang.String str66 = locale65.getLanguage();
        java.util.Locale locale67 = null;
        java.lang.String str68 = locale65.getDisplayVariant(locale67);
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        boolean boolean71 = locale69.hasExtensions();
        java.lang.String str72 = locale69.getDisplayCountry();
        java.lang.String str73 = locale69.getDisplayLanguage();
        java.lang.String str74 = locale69.getDisplayLanguage();
        java.lang.String str75 = locale65.getDisplayLanguage(locale69);
        java.util.Locale locale76 = java.util.Locale.ITALY;
        java.lang.String str77 = locale76.getVariant();
        java.lang.String str78 = locale65.getDisplayLanguage(locale76);
        java.lang.String str79 = locale41.getDisplayCountry(locale65);
        java.lang.String str80 = locale36.getDisplayScript(locale41);
        java.lang.String str81 = locale28.getDisplayVariant(locale36);
        java.util.Set<java.lang.String> strSet82 = locale36.getUnicodeLocaleAttributes();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone18, locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar54", (calendar24.compareTo(calendar54) == 0) == calendar24.equals(calendar54));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.clear(7);
        boolean boolean23 = calendar13.isWeekDateSupported();
        int int25 = calendar13.getGreatestMinimum((int) (short) 10);
        java.lang.String str26 = fastDateFormat2.format(calendar13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        int int33 = timeZone29.getOffset(1645513657024L);
        timeZone29.setID("fra");
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone29.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale38.getDisplayCountry();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone29, locale38);
        boolean boolean43 = fastDateFormat28.equals((java.lang.Object) locale38);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition(1970);
        java.lang.Object obj47 = fastDateFormat28.parseObject("Italia", parsePosition46);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) '4');
        parsePosition50.setErrorIndex(0);
        int int53 = parsePosition50.getIndex();
        java.lang.String str54 = parsePosition50.toString();
        int int55 = parsePosition50.getErrorIndex();
        java.lang.Object obj56 = fastDateFormat28.parseObject("7:08:14 AM GMT+00:00", parsePosition50);
        int int57 = parsePosition50.getIndex();
        parsePosition50.setErrorIndex((int) (byte) 10);
        boolean boolean61 = parsePosition50.equals((java.lang.Object) "it");
        java.lang.Object obj62 = fastDateFormat2.parseObject("7:09:40 AM GMT", parsePosition50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar42", (calendar13.compareTo(calendar42) == 0) == calendar13.equals(calendar42));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale locale4 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale locale6 = builder5.build();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.lang.String str16 = locale7.getDisplayName(locale14);
        java.util.Locale.Builder builder17 = builder5.setLocale(locale7);
        java.util.Locale locale18 = builder5.build();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.util.Locale.setDefault(locale18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange languageRange24 = null;
        boolean boolean25 = languageRangeList22.add(languageRange24);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor26 = languageRangeList22.iterator();
        java.util.Set<java.lang.String> strSet27 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet27.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet27.parallelStream();
        boolean boolean30 = languageRangeList22.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale32 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        boolean boolean36 = languageRangeList22.contains((java.lang.Object) locale33);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        int int44 = timeZone40.getOffset(1645513657024L);
        timeZone40.setID("fra");
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone40.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone40, locale49);
        boolean boolean54 = fastDateFormat39.equals((java.lang.Object) locale49);
        java.lang.String str55 = locale49.getCountry();
        java.lang.String str56 = locale37.getDisplayLanguage(locale49);
        java.lang.String str57 = locale18.getDisplayScript(locale37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale37);
        java.lang.String str59 = fastDateFormat58.getPattern();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar53", (calendar15.compareTo(calendar53) == 0) == calendar15.equals(calendar53));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale18, locale19, locale20, locale21, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray35 = new java.util.Locale[] { locale30, locale31, locale32, locale33, locale34 };
        java.util.ArrayList<java.util.Locale> localeList36 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList36, localeArray35);
        java.util.Locale locale38 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList36);
        int int39 = languageRangeList16.lastIndexOf((java.lang.Object) languageRangeList28);
        java.util.Set<java.lang.String> strSet40 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream41 = strSet40.parallelStream();
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strSet40, filteringMode42);
        java.util.Locale.LanguageRange languageRange44 = null;
        boolean boolean45 = languageRangeList28.add(languageRange44);
        boolean boolean46 = calendar6.before((java.lang.Object) boolean45);
        calendar6.setFirstDayOfWeek((int) (short) 10);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone50.hasSameRules(timeZone52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone52);
        java.util.TimeZone timeZone55 = calendar54.getTimeZone();
        calendar6.setTimeZone(timeZone55);
        java.util.TimeZone.setDefault(timeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar54", (calendar6.compareTo(calendar54) == 0) == calendar6.equals(calendar54));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.util.Locale locale44 = fastDateFormat26.getLocale();
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = locale44.getDisplayLanguage(locale48);
        java.lang.String str55 = locale20.getDisplayCountry(locale48);
        java.lang.String str56 = locale20.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str61 = locale20.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone8, locale20);
        timeZone8.setID("7:10:47 AM GMT");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar21", (calendar7.compareTo(calendar21) == 0) == calendar7.equals(calendar21));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.lang.String str10 = locale1.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale1);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        calendar18.clear(7);
        boolean boolean21 = calendar18.isWeekDateSupported();
        int int23 = calendar18.getMinimum(4);
        calendar18.setMinimalDaysInFirstWeek(15);
        int int26 = calendar18.getWeeksInWeekYear();
        java.lang.String str27 = fastDateFormat11.format(calendar18);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        calendar34.clear(7);
        calendar34.set(16, (int) (byte) 0);
        int int40 = calendar34.getFirstDayOfWeek();
        int int41 = calendar34.getWeekYear();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone45);
        java.util.TimeZone timeZone48 = calendar47.getTimeZone();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        int int53 = timeZone49.getOffset(1645513657024L);
        timeZone49.setID("fra");
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone49.hasSameRules(timeZone56);
        boolean boolean58 = timeZone48.hasSameRules(timeZone56);
        calendar34.setTimeZone(timeZone56);
        int int61 = calendar34.getMaximum(11);
        java.lang.String str62 = fastDateFormat11.format(calendar34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar47", (calendar18.compareTo(calendar47) == 0) == calendar18.equals(calendar47));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange11 = null;
        languageRangeList1.add(0, languageRange11);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        java.lang.StringBuffer stringBuffer18 = null;
        java.lang.StringBuffer stringBuffer19 = fastDateFormat15.format(date16, stringBuffer18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        calendar26.clear(7);
        boolean boolean29 = calendar26.isWeekDateSupported();
        java.util.TimeZone timeZone30 = calendar26.getTimeZone();
        int int32 = calendar26.getMaximum(3);
        java.lang.StringBuffer stringBuffer33 = null;
        java.lang.StringBuffer stringBuffer34 = fastDateFormat15.format(calendar26, stringBuffer33);
        calendar26.clear();
        java.time.Instant instant36 = calendar26.toInstant();
        java.util.Date date43 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date43.setMonth(50400000);
        date43.setMonth(32769);
        java.time.Instant instant48 = date43.toInstant();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.lang.String str56 = locale51.getDisplayCountry(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale51);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone61.hasSameRules(timeZone63);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone63, locale65);
        java.lang.String str67 = locale58.getDisplayName(locale65);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getDisplayName(locale68);
        java.lang.String str71 = locale65.getISO3Language();
        boolean boolean72 = fastDateFormat57.equals((java.lang.Object) locale65);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str75 = fastDateFormat73.format((long) ' ');
        java.lang.String str77 = fastDateFormat73.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj78 = fastDateFormat73.clone();
        java.util.Locale locale79 = fastDateFormat73.getLocale();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = fastDateFormat57.format(calendar80);
        java.time.Instant instant82 = calendar80.toInstant();
        java.util.Calendar.Builder builder83 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder87 = builder83.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar88 = builder83.build();
        int int89 = calendar88.getMinimalDaysInFirstWeek();
        java.time.Instant instant90 = calendar88.toInstant();
        java.time.Instant[] instantArray91 = new java.time.Instant[] { instant36, instant48, instant82, instant90 };
        java.time.Instant[] instantArray92 = languageRangeList1.toArray(instantArray91);
        int int93 = languageRangeList1.size();
        int int94 = languageRangeList1.size();
        java.lang.Object[] objArray95 = languageRangeList1.toArray();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor96 = languageRangeList1.iterator();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar66 and calendar80", (calendar66.compareTo(calendar80) == 0) == calendar66.equals(calendar80));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange11 = null;
        languageRangeList1.add(0, languageRange11);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        java.lang.StringBuffer stringBuffer18 = null;
        java.lang.StringBuffer stringBuffer19 = fastDateFormat15.format(date16, stringBuffer18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        calendar26.clear(7);
        boolean boolean29 = calendar26.isWeekDateSupported();
        java.util.TimeZone timeZone30 = calendar26.getTimeZone();
        int int32 = calendar26.getMaximum(3);
        java.lang.StringBuffer stringBuffer33 = null;
        java.lang.StringBuffer stringBuffer34 = fastDateFormat15.format(calendar26, stringBuffer33);
        calendar26.clear();
        java.time.Instant instant36 = calendar26.toInstant();
        java.util.Date date43 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date43.setMonth(50400000);
        date43.setMonth(32769);
        java.time.Instant instant48 = date43.toInstant();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.lang.String str56 = locale51.getDisplayCountry(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale51);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone61.hasSameRules(timeZone63);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone63, locale65);
        java.lang.String str67 = locale58.getDisplayName(locale65);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getDisplayName(locale68);
        java.lang.String str71 = locale65.getISO3Language();
        boolean boolean72 = fastDateFormat57.equals((java.lang.Object) locale65);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str75 = fastDateFormat73.format((long) ' ');
        java.lang.String str77 = fastDateFormat73.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj78 = fastDateFormat73.clone();
        java.util.Locale locale79 = fastDateFormat73.getLocale();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = fastDateFormat57.format(calendar80);
        java.time.Instant instant82 = calendar80.toInstant();
        java.util.Calendar.Builder builder83 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder87 = builder83.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar88 = builder83.build();
        int int89 = calendar88.getMinimalDaysInFirstWeek();
        java.time.Instant instant90 = calendar88.toInstant();
        java.time.Instant[] instantArray91 = new java.time.Instant[] { instant36, instant48, instant82, instant90 };
        java.time.Instant[] instantArray92 = languageRangeList1.toArray(instantArray91);
        int int93 = languageRangeList1.size();
        java.util.Locale.LanguageRange languageRange94 = null;
        boolean boolean95 = languageRangeList1.add(languageRange94);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator96 = languageRangeList1.spliterator();
        languageRangeList1.clear();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator98 = languageRangeList1.spliterator();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar66 and calendar80", (calendar66.compareTo(calendar80) == 0) == calendar66.equals(calendar80));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone1, locale10);
        boolean boolean15 = fastDateFormat0.equals((java.lang.Object) locale10);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        calendar22.clear(7);
        calendar22.set(16, (int) (byte) 0);
        int int28 = calendar22.getFirstDayOfWeek();
        int int29 = calendar22.getWeekYear();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        int int34 = timeZone30.getOffset(1645513657024L);
        timeZone30.setID("fra");
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone30.hasSameRules(timeZone37);
        timeZone37.setRawOffset(9);
        calendar22.setTimeZone(timeZone37);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone45);
        int int49 = timeZone45.getOffset(1645513656868L);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone51.hasSameRules(timeZone53);
        boolean boolean55 = timeZone45.hasSameRules(timeZone51);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone57.hasSameRules(timeZone59);
        boolean boolean61 = timeZone51.hasSameRules(timeZone59);
        java.lang.String str62 = timeZone59.getID();
        calendar22.setTimeZone(timeZone59);
        java.lang.String str64 = fastDateFormat0.format(calendar22);
        boolean boolean65 = fastDateFormat0.getTimeZoneOverridesCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar22", (calendar14.compareTo(calendar22) == 0) == calendar14.equals(calendar22));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale locale4 = builder3.build();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder5.setDate(15, (int) 'u', (int) ' ');
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale11);
        java.lang.Object obj13 = fastDateFormat12.clone();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getTimezoneOffset();
        int int16 = date14.getSeconds();
        int int17 = date14.getMinutes();
        long long18 = date14.getTime();
        long long19 = date14.getTime();
        date14.setHours(122);
        java.lang.String str22 = fastDateFormat12.format(date14);
        java.util.TimeZone timeZone23 = fastDateFormat12.getTimeZone();
        java.util.Calendar.Builder builder24 = builder5.setTimeZone(timeZone23);
        java.lang.String str25 = timeZone23.getID();
        timeZone23.setRawOffset(8);
        java.lang.String str28 = timeZone23.getID();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean31 = timeZone23.hasSameRules(timeZone30);
        timeZone23.setID("Feb 22, 2022 7:06:51 AM");
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getISO3Country();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone23, locale34);
        java.util.Locale.Builder builder39 = builder3.setLocale(locale34);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale41 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category40, locale41);
        java.util.Locale locale43 = java.util.Locale.getDefault(category40);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Locale locale48 = new java.util.Locale("", "hi!", "");
        java.lang.String str49 = locale44.getDisplayVariant(locale48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale44);
        java.lang.String str51 = locale44.getDisplayVariant();
        java.util.Locale.setDefault(category40, locale44);
        java.util.Calendar.Builder builder53 = new java.util.Calendar.Builder();
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getSeconds();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getTimezoneOffset();
        date56.setMinutes(6);
        boolean boolean60 = date54.after(date56);
        java.util.Calendar.Builder builder61 = builder53.setInstant(date56);
        java.util.Calendar.Builder builder63 = builder61.setInstant((long) 36);
        java.util.Calendar.Builder builder67 = builder63.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder71 = builder63.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder75 = builder71.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getLanguage();
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone78.hasSameRules(timeZone79);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone79.hasSameRules(timeZone81);
        java.util.Locale locale83 = java.util.Locale.CHINA;
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone81, locale83);
        java.lang.String str85 = locale76.getDisplayName(locale83);
        java.util.Locale locale86 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleKeys();
        java.lang.String str88 = locale83.getDisplayName(locale86);
        java.lang.String str89 = locale83.getISO3Language();
        java.lang.String str90 = locale83.getVariant();
        java.util.Calendar.Builder builder91 = builder75.setLocale(locale83);
        java.util.Locale.setDefault(category40, locale83);
        java.lang.String str93 = locale83.getISO3Country();
        java.lang.String str94 = locale83.getCountry();
        java.lang.String str95 = locale34.getDisplayName(locale83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar50", (calendar38.compareTo(calendar50) == 0) == calendar38.equals(calendar50));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        java.util.Locale locale3 = new java.util.Locale("7:07:39 AM UTC");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale3);
        java.util.TimeZone timeZone5 = fastDateFormat4.getTimeZone();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale locale9 = builder6.build();
        java.util.Locale.Builder builder10 = builder6.clear();
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.lang.String str21 = locale12.getDisplayName(locale19);
        java.util.Locale.Builder builder22 = builder10.setLocale(locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1941-1-22 7:10:38", timeZone5, locale12);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone5);
        int int26 = timeZone5.getOffset(14L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar24", (calendar20.compareTo(calendar24) == 0) == calendar20.equals(calendar24));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone6 = calendar5.getTimeZone();
        timeZone6.setRawOffset(40);
        int int9 = timeZone6.getRawOffset();
        int int10 = timeZone6.getRawOffset();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        java.util.Locale.Builder builder13 = builder11.clearExtensions();
        java.util.Locale locale14 = builder13.build();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.lang.String str16 = calendar15.getCalendarType();
        java.util.Date date17 = calendar15.getTime();
        boolean boolean18 = timeZone6.inDaylightTime(date17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.util.Locale locale44 = fastDateFormat26.getLocale();
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = locale44.getDisplayLanguage(locale48);
        java.lang.String str55 = locale20.getDisplayCountry(locale48);
        java.lang.String str56 = locale20.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str61 = locale20.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone8, locale20);
        java.text.AttributedCharacterIterator.Attribute attribute63 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = attribute63.equals((java.lang.Object) timeZone64);
        java.lang.String str66 = attribute63.toString();
        java.lang.String str67 = attribute63.toString();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        int int72 = timeZone68.getOffset(1645513657024L);
        timeZone68.setID("fra");
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone68.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        boolean boolean79 = locale77.hasExtensions();
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone68, locale77);
        boolean boolean82 = attribute63.equals((java.lang.Object) calendar81);
        java.util.Date date83 = calendar81.getTime();
        boolean boolean84 = calendar62.after((java.lang.Object) date83);
        int int85 = calendar62.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar81", (calendar7.compareTo(calendar81) == 0) == calendar7.equals(calendar81));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        boolean boolean26 = timeZone18.hasSameRules(timeZone23);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.lang.String str36 = locale28.getDisplayVariant(locale30);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone18, locale30);
        java.text.AttributedCharacterIterator.Attribute attribute40 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = attribute40.equals((java.lang.Object) timeZone41);
        java.lang.String str43 = attribute40.toString();
        java.lang.String str44 = attribute40.toString();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        int int49 = timeZone45.getOffset(1645513657024L);
        timeZone45.setID("fra");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone45.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        boolean boolean56 = locale54.hasExtensions();
        java.lang.String str57 = locale54.getDisplayCountry();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone45, locale54);
        boolean boolean59 = attribute40.equals((java.lang.Object) calendar58);
        java.lang.String str60 = attribute40.toString();
        java.lang.Object obj61 = null;
        boolean boolean62 = attribute40.equals(obj61);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone63.hasSameRules(timeZone64);
        int int67 = timeZone63.getOffset(1645513657024L);
        timeZone63.setID("fra");
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone63.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        java.lang.String str73 = locale72.getLanguage();
        boolean boolean74 = locale72.hasExtensions();
        java.lang.String str75 = locale72.getDisplayCountry();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone63, locale72);
        java.util.Locale locale77 = locale72.stripExtensions();
        boolean boolean78 = attribute40.equals((java.lang.Object) locale77);
        java.util.Locale locale79 = locale77.stripExtensions();
        java.lang.String str80 = timeZone18.getDisplayName(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar37", (calendar6.compareTo(calendar37) == 0) == calendar6.equals(calendar37));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.util.Date date7 = calendar6.getTime();
        calendar6.clear();
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        timeZone9.setID("22 Feb 2022 07:07:46 GMT");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Locale locale22 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale22);
        boolean boolean24 = timeZone9.hasSameRules(timeZone18);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.lang.String str30 = locale25.getDisplayCountry(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder34 = builder32.clear();
        java.util.Locale locale35 = builder32.build();
        java.util.Locale.Builder builder36 = builder32.clear();
        java.util.Locale locale37 = builder36.build();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        java.lang.String str47 = locale38.getDisplayName(locale45);
        java.util.Locale.Builder builder48 = builder36.setLocale(locale38);
        java.util.Locale locale49 = builder36.build();
        java.lang.String str50 = locale29.getDisplayCountry(locale49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone18, locale29);
        timeZone18.setRawOffset(800302);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar46", (calendar17.compareTo(calendar46) == 0) == calendar17.equals(calendar46));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getFirstDayOfWeek();
        int int13 = calendar6.getWeekYear();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        int int25 = timeZone21.getOffset(1645513657024L);
        timeZone21.setID("fra");
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone21.hasSameRules(timeZone28);
        boolean boolean30 = timeZone20.hasSameRules(timeZone28);
        calendar6.setTimeZone(timeZone28);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder34 = builder32.clear();
        java.util.Locale locale35 = builder32.build();
        java.util.Locale.Builder builder36 = builder32.clear();
        java.util.Locale locale37 = builder36.build();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        java.lang.String str47 = locale38.getDisplayName(locale45);
        java.util.Locale.Builder builder48 = builder36.setLocale(locale38);
        java.util.Locale locale49 = builder36.build();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale49);
        java.util.Locale.setDefault(locale49);
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale.LanguageRange languageRange55 = null;
        boolean boolean56 = languageRangeList53.add(languageRange55);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor57 = languageRangeList53.iterator();
        java.util.Set<java.lang.String> strSet58 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream59 = strSet58.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream60 = strSet58.parallelStream();
        boolean boolean61 = languageRangeList53.retainAll((java.util.Collection<java.lang.String>) strSet58);
        java.util.Locale locale63 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale64 = locale63.stripExtensions();
        java.util.Locale locale65 = null;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        boolean boolean67 = languageRangeList53.contains((java.lang.Object) locale64);
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = locale64.getDisplayCountry(locale68);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        int int75 = timeZone71.getOffset(1645513657024L);
        timeZone71.setID("fra");
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone71.hasSameRules(timeZone78);
        java.util.Locale locale80 = java.util.Locale.CHINESE;
        java.lang.String str81 = locale80.getLanguage();
        boolean boolean82 = locale80.hasExtensions();
        java.lang.String str83 = locale80.getDisplayCountry();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone71, locale80);
        boolean boolean85 = fastDateFormat70.equals((java.lang.Object) locale80);
        java.lang.String str86 = locale80.getCountry();
        java.lang.String str87 = locale68.getDisplayLanguage(locale80);
        java.lang.String str88 = locale49.getDisplayScript(locale68);
        java.util.Set<java.lang.String> strSet89 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str90 = timeZone28.getDisplayName(locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar84", (calendar6.compareTo(calendar84) == 0) == calendar6.equals(calendar84));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.lang.String str14 = locale9.getDisplayCountry();
        java.util.Locale locale15 = locale9.stripExtensions();
        java.text.AttributedCharacterIterator.Attribute attribute16 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str17 = attribute16.toString();
        java.lang.String str18 = attribute16.toString();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = builder20.build();
        java.util.Locale.Builder builder22 = builder20.clearExtensions();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale28.getDisplayVariant();
        java.util.Locale.Builder builder32 = builder20.setLocale(locale28);
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder34 = builder32.clear();
        java.util.Locale locale35 = builder32.build();
        boolean boolean36 = attribute16.equals((java.lang.Object) locale35);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone41);
        int int45 = timeZone41.getOffset(1645513656868L);
        boolean boolean46 = timeZone41.observesDaylightTime();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone41, locale47);
        java.util.TimeZone.setDefault(timeZone41);
        int int50 = timeZone41.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone41);
        java.util.TimeZone timeZone52 = fastDateFormat51.getTimeZone();
        boolean boolean53 = attribute16.equals((java.lang.Object) timeZone52);
        boolean boolean54 = locale9.equals((java.lang.Object) attribute16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar29", (calendar13.compareTo(calendar29) == 0) == calendar13.equals(calendar29));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        long long17 = date15.getTime();
        date15.setTime((long) 37);
        date15.setDate((int) (short) 0);
        int int22 = date15.getMonth();
        date15.setDate(16);
        java.util.Calendar.Builder builder25 = builder14.setInstant(date15);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        boolean boolean36 = timeZone26.hasSameRules(timeZone32);
        timeZone32.setRawOffset(21);
        boolean boolean39 = timeZone32.observesDaylightTime();
        java.util.Calendar.Builder builder40 = builder25.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder41 = new java.util.Calendar.Builder();
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getSeconds();
        java.util.Date date44 = new java.util.Date();
        int int45 = date44.getTimezoneOffset();
        date44.setMinutes(6);
        boolean boolean48 = date42.after(date44);
        java.util.Calendar.Builder builder49 = builder41.setInstant(date44);
        java.util.Calendar.Builder builder51 = builder49.setInstant((long) 36);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder53 = builder51.setLocale(locale52);
        java.util.Calendar.Builder builder55 = builder53.setLenient(false);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        timeZone58.setRawOffset((int) (byte) 1);
        boolean boolean63 = timeZone58.observesDaylightTime();
        java.util.Calendar.Builder builder64 = builder53.setTimeZone(timeZone58);
        java.util.Date date68 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date68.setMonth(4);
        java.util.Calendar.Builder builder71 = builder53.setInstant(date68);
        java.util.Calendar.Builder builder73 = builder53.setInstant(1645513674789L);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone75.hasSameRules(timeZone77);
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(timeZone77);
        int int81 = timeZone77.getOffset(1645513656868L);
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone83 = java.util.TimeZone.getDefault();
        boolean boolean84 = timeZone82.hasSameRules(timeZone83);
        java.util.TimeZone timeZone85 = java.util.TimeZone.getDefault();
        boolean boolean86 = timeZone83.hasSameRules(timeZone85);
        boolean boolean87 = timeZone77.hasSameRules(timeZone83);
        java.util.Calendar.Builder builder88 = builder53.setTimeZone(timeZone77);
        timeZone77.setID("7.08.13");
        int int91 = timeZone77.getRawOffset();
        java.util.Locale locale93 = java.util.Locale.forLanguageTag("02 h 08 UTC");
        java.util.Set<java.lang.Character> charSet94 = locale93.getExtensionKeys();
        java.lang.String str96 = locale93.getExtension('u');
        java.util.Calendar calendar97 = java.util.Calendar.getInstance(timeZone77, locale93);
        boolean boolean98 = timeZone32.hasSameRules(timeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar79", (calendar35.compareTo(calendar79) == 0) == calendar35.equals(calendar79));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar.Builder builder23 = builder20.setLocale(locale21);
        java.util.Calendar.Builder builder24 = new java.util.Calendar.Builder();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getSeconds();
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        date27.setMinutes(6);
        boolean boolean31 = date25.after(date27);
        java.util.Calendar.Builder builder32 = builder24.setInstant(date27);
        java.util.Calendar.Builder builder34 = builder32.setInstant((long) 36);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder36 = builder34.setLocale(locale35);
        java.util.Calendar.Builder builder38 = builder36.setLenient(false);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        timeZone41.setRawOffset((int) (byte) 1);
        boolean boolean46 = timeZone41.observesDaylightTime();
        java.util.Calendar.Builder builder47 = builder36.setTimeZone(timeZone41);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        boolean boolean53 = timeZone41.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str56 = fastDateFormat54.format((long) ' ');
        java.util.Locale locale57 = fastDateFormat54.getLocale();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone49, locale57);
        int int60 = timeZone49.getOffset(1645513663835L);
        java.util.Locale locale64 = new java.util.Locale("22 Feb 2022 07:08:29 GMT", "22 Feb 2022 07:08:08 GMT", "7:08:36 AM GMT+00:00");
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone49, locale64);
        java.util.Calendar.Builder builder66 = builder20.setTimeZone(timeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar58 and calendar65", (calendar58.compareTo(calendar65) == 0) == calendar58.equals(calendar65));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:07:41 GMT");
        int int2 = timeZone1.getRawOffset();
        int int4 = timeZone1.getOffset(1645513673849L);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getSeconds();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getTimezoneOffset();
        date9.setMinutes(6);
        boolean boolean13 = date7.after(date9);
        java.util.Calendar.Builder builder14 = builder6.setInstant(date9);
        java.util.Calendar.Builder builder16 = builder14.setInstant((long) 36);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder18 = builder16.setLocale(locale17);
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        timeZone23.setRawOffset((int) (byte) 1);
        boolean boolean28 = timeZone23.observesDaylightTime();
        java.util.Calendar.Builder builder29 = builder18.setTimeZone(timeZone23);
        java.util.Date date33 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date33.setMonth(4);
        java.util.Calendar.Builder builder36 = builder18.setInstant(date33);
        java.util.Calendar.Builder builder38 = builder18.setInstant(1645513674789L);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone42);
        int int46 = timeZone42.getOffset(1645513656868L);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone48.hasSameRules(timeZone50);
        boolean boolean52 = timeZone42.hasSameRules(timeZone48);
        java.util.Calendar.Builder builder53 = builder18.setTimeZone(timeZone42);
        timeZone42.setID("7.08.13");
        int int56 = timeZone42.getRawOffset();
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("02 h 08 UTC");
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.lang.String str61 = locale58.getExtension('u');
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone42, locale58);
        boolean boolean63 = timeZone1.hasSameRules(timeZone42);
        timeZone42.setID("");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar44 and calendar62", (calendar44.compareTo(calendar62) == 0) == calendar44.equals(calendar62));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        boolean boolean19 = timeZone9.hasSameRules(timeZone17);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        boolean boolean25 = timeZone17.hasSameRules(timeZone22);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale locale28 = builder27.build();
        java.util.Locale.Builder builder29 = builder27.clearExtensions();
        java.util.Locale locale30 = builder29.build();
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        calendar41.clear(7);
        calendar41.set(16, (int) (byte) 0);
        java.time.Instant instant47 = calendar41.toInstant();
        boolean boolean49 = calendar41.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str50 = fastDateFormat34.format(calendar41);
        java.lang.Object obj51 = fastDateFormat34.clone();
        java.util.Locale locale52 = fastDateFormat34.getLocale();
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale52.getVariant();
        java.lang.String str55 = locale30.getDisplayVariant(locale52);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone22, locale30);
        calendar56.set(999, 79, 33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar41", (calendar5.compareTo(calendar41) == 0) == calendar5.equals(calendar41));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer5 = null;
        java.lang.StringBuffer stringBuffer6 = fastDateFormat2.format(date3, stringBuffer5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        boolean boolean16 = calendar13.isWeekDateSupported();
        java.util.TimeZone timeZone17 = calendar13.getTimeZone();
        int int19 = calendar13.getMaximum(3);
        java.lang.StringBuffer stringBuffer20 = null;
        java.lang.StringBuffer stringBuffer21 = fastDateFormat2.format(calendar13, stringBuffer20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        calendar28.clear(7);
        calendar28.set(16, (int) (byte) 0);
        java.time.Instant instant34 = calendar28.toInstant();
        boolean boolean36 = calendar28.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        int int42 = timeZone38.getOffset(1645513657024L);
        timeZone38.setID("fra");
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone38.hasSameRules(timeZone45);
        timeZone45.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone45);
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        int int52 = date50.getSeconds();
        int int53 = date50.getSeconds();
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getTimezoneOffset();
        java.util.Date date56 = new java.util.Date();
        java.lang.String str57 = date56.toGMTString();
        boolean boolean58 = date54.before(date56);
        long long59 = date56.getTime();
        boolean boolean60 = date50.after(date56);
        java.lang.String str61 = fastDateFormat49.format(date50);
        calendar28.setTime(date50);
        java.lang.String str63 = fastDateFormat2.format(calendar28);
        java.util.TimeZone timeZone64 = fastDateFormat2.getTimeZone();
        int int65 = fastDateFormat2.getMaxLengthEstimate();
        java.util.TimeZone timeZone66 = fastDateFormat2.getTimeZone();
        java.util.Date date68 = new java.util.Date(1645513671840L);
        java.lang.String str69 = fastDateFormat2.format(date68);
        java.util.Locale locale70 = java.util.Locale.UK;
        java.lang.String str71 = locale70.getDisplayVariant();
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(locale70);
        java.lang.String str73 = locale70.getCountry();
        java.lang.String str74 = locale70.getDisplayCountry();
        java.lang.String str75 = locale70.getISO3Country();
        java.lang.String str76 = locale70.getLanguage();
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(locale70);
        java.lang.StringBuffer stringBuffer78 = null;
        java.text.FieldPosition fieldPosition80 = new java.text.FieldPosition(7);
        fieldPosition80.setEndIndex(8);
        int int83 = fieldPosition80.getEndIndex();
        int int84 = fieldPosition80.getField();
        java.text.AttributedCharacterIterator.Attribute attribute85 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone86 = java.util.TimeZone.getDefault();
        boolean boolean87 = attribute85.equals((java.lang.Object) timeZone86);
        boolean boolean88 = fieldPosition80.equals((java.lang.Object) timeZone86);
        java.text.Format.Field field89 = fieldPosition80.getFieldAttribute();
        java.lang.StringBuffer stringBuffer90 = fastDateFormat2.format((java.lang.Object) calendar77, stringBuffer78, fieldPosition80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar72", (calendar13.compareTo(calendar72) == 0) == calendar13.equals(calendar72));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Calendar.Builder builder24 = builder12.setWeekDate(15, 100, 10);
        java.util.Calendar.Builder builder28 = builder24.setTimeOfDay((int) ' ', (int) '#', 130);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        boolean boolean31 = timeZone30.observesDaylightTime();
        java.time.ZoneId zoneId32 = timeZone30.toZoneId();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone(zoneId32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getTimeZone(zoneId32);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.toString();
        int int40 = fastDateFormat38.getMaxLengthEstimate();
        java.util.TimeZone timeZone41 = fastDateFormat38.getTimeZone();
        timeZone41.setID("\u610f\u5927\u5229");
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("22 Feb 2022 07:07:54 GMT");
        java.lang.String str46 = locale45.getDisplayCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone41, locale45);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone51.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone53, locale55);
        java.lang.String str57 = locale48.getDisplayName(locale55);
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale55.getDisplayName(locale58);
        java.lang.String str61 = locale55.getISO3Language();
        java.lang.String str62 = locale55.getVariant();
        java.util.Locale locale63 = locale55.stripExtensions();
        boolean boolean64 = fastDateFormat47.equals((java.lang.Object) locale63);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone34, locale63);
        java.util.Calendar.Builder builder66 = builder28.setLocale(locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar65", (calendar56.compareTo(calendar65) == 0) == calendar56.equals(calendar65));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.lang.String str14 = locale9.getDisplayCountry();
        java.lang.String str16 = locale9.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale9);
        java.util.Date date19 = calendar18.getTime();
        int int21 = calendar18.getMaximum(8);
        java.lang.String str22 = calendar18.getCalendarType();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayVariant(locale30);
        java.lang.String str32 = locale24.getDisplayVariant(locale26);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale26);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        java.lang.String str41 = fastDateFormat38.format((long) '#');
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition(53);
        java.lang.Object obj45 = fastDateFormat38.parseObject("", parsePosition44);
        int int46 = parsePosition44.getErrorIndex();
        java.lang.Object obj47 = fastDateFormat34.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition44);
        java.lang.String str48 = fastDateFormat34.getPattern();
        int int49 = fastDateFormat34.getMaxLengthEstimate();
        boolean boolean50 = calendar18.after((java.lang.Object) int49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar33", (calendar13.compareTo(calendar33) == 0) == calendar13.equals(calendar33));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        java.util.Locale locale3 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale3);
        int int6 = calendar5.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        int int12 = fastDateFormat11.getMaxLengthEstimate();
        java.lang.String str13 = fastDateFormat11.getPattern();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        calendar20.set(16, (int) (byte) 0);
        java.time.Instant instant26 = calendar20.toInstant();
        int int27 = calendar20.getMinimalDaysInFirstWeek();
        int int28 = calendar20.getMinimalDaysInFirstWeek();
        calendar20.add((int) (short) 0, 100);
        calendar20.setMinimalDaysInFirstWeek(38);
        long long34 = calendar20.getTimeInMillis();
        java.lang.String str35 = fastDateFormat11.format(calendar20);
        java.util.TimeZone timeZone36 = fastDateFormat11.getTimeZone();
        calendar5.setTimeZone(timeZone36);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        timeZone42.setRawOffset((int) (byte) 1);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone42, locale47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale47);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone36, locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.lang.String str9 = locale0.getDisplayName(locale7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale17 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale17.getScript();
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.lang.String str24 = locale17.getDisplayVariant(locale23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone12, locale23);
        java.lang.String str26 = locale23.getDisplayCountry();
        java.lang.String str27 = locale23.getVariant();
        java.lang.String str28 = locale7.getDisplayCountry(locale23);
        java.lang.String str29 = locale23.getScript();
        java.util.Locale locale30 = locale23.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.lang.String str35 = locale31.getDisplayLanguage();
        java.lang.String str36 = locale31.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet37 = locale31.getExtensionKeys();
        java.lang.String str38 = locale30.getDisplayName(locale31);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder39.clear();
        java.util.Locale.Builder builder41 = builder39.clear();
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        java.util.Locale.Builder builder43 = builder42.clear();
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder47 = builder45.clear();
        java.util.Locale locale48 = builder45.build();
        java.util.Locale.Builder builder49 = builder45.clear();
        java.util.Locale locale50 = builder49.build();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        java.lang.String str60 = locale51.getDisplayName(locale58);
        java.util.Locale.Builder builder61 = builder49.setLocale(locale51);
        java.util.Locale locale62 = builder49.build();
        java.util.Locale.Builder builder63 = builder43.setLocale(locale62);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(locale62);
        calendar64.setFirstDayOfWeek(0);
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Locale locale71 = new java.util.Locale("", "hi!", "");
        java.lang.String str72 = locale67.getDisplayVariant(locale71);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale67);
        java.lang.String str74 = locale67.getDisplayVariant();
        java.lang.String str75 = locale67.getDisplayVariant();
        java.util.Locale locale77 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale78 = locale77.stripExtensions();
        java.util.Locale locale79 = java.util.Locale.TAIWAN;
        java.lang.String str80 = locale78.getDisplayLanguage(locale79);
        java.lang.String str81 = locale67.getDisplayLanguage(locale79);
        java.util.Locale.setDefault(locale67);
        boolean boolean83 = calendar64.before((java.lang.Object) locale67);
        java.lang.String str84 = locale31.getDisplayLanguage(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar64", (calendar8.compareTo(calendar64) == 0) == calendar8.equals(calendar64));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.util.Locale locale13 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone9);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getDisplayVariant();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        calendar34.clear(7);
        calendar34.set(16, (int) (byte) 0);
        java.time.Instant instant40 = calendar34.toInstant();
        boolean boolean42 = calendar34.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str43 = fastDateFormat27.format(calendar34);
        java.lang.Object obj44 = fastDateFormat27.clone();
        java.util.Locale locale45 = fastDateFormat27.getLocale();
        java.lang.String str46 = locale45.getLanguage();
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.lang.String str53 = locale49.getDisplayLanguage();
        java.lang.String str54 = locale49.getDisplayLanguage();
        java.lang.String str55 = locale45.getDisplayLanguage(locale49);
        java.lang.String str56 = locale21.getDisplayCountry(locale49);
        java.lang.String str57 = locale21.getDisplayName();
        java.util.Set<java.lang.String> strSet58 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale61 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str62 = locale21.getDisplayCountry(locale61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone9, locale21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:09:08", timeZone9);
        timeZone9.setRawOffset(44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar22", (calendar8.compareTo(calendar22) == 0) == calendar8.equals(calendar22));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Thu Jan 01 00:00:00 GMT 1970");
        java.text.AttributedCharacterIterator.Attribute attribute2 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = attribute2.equals((java.lang.Object) timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        boolean boolean6 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clear();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale locale10 = builder7.build();
        java.util.Locale.Builder builder11 = builder7.clear();
        java.util.Locale locale12 = builder11.build();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayLanguage();
        java.lang.String str17 = locale13.getISO3Country();
        java.util.Locale locale18 = locale13.stripExtensions();
        java.util.Locale.Builder builder19 = builder11.setLocale(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone3, locale18);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone3);
        java.util.Locale locale24 = new java.util.Locale("2022-2-22 7:07:44");
        java.lang.String str25 = locale24.getVariant();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale.LanguageRange languageRange29 = null;
        boolean boolean30 = languageRangeList27.add(languageRange29);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList27.iterator();
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream34 = strSet32.parallelStream();
        boolean boolean35 = languageRangeList27.retainAll((java.util.Collection<java.lang.String>) strSet32);
        java.util.Locale locale37 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = null;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        boolean boolean41 = languageRangeList27.contains((java.lang.Object) locale38);
        java.lang.String str42 = locale38.getCountry();
        java.util.Set<java.lang.String> strSet43 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale44 = locale38.stripExtensions();
        java.lang.String str45 = locale24.getDisplayLanguage(locale44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale24);
        java.lang.String str47 = locale24.toLanguageTag();
        java.lang.String str48 = timeZone3.getDisplayName(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar21", (calendar20.compareTo(calendar21) == 0) == calendar20.equals(calendar21));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(53);
        java.lang.Object obj9 = fastDateFormat2.parseObject("", parsePosition8);
        java.lang.String str10 = fastDateFormat2.toString();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        boolean boolean20 = calendar17.isWeekDateSupported();
        int int22 = calendar17.getMinimum(4);
        calendar17.setMinimalDaysInFirstWeek(15);
        int int25 = calendar17.getWeeksInWeekYear();
        boolean boolean26 = calendar17.isWeekDateSupported();
        java.lang.String str27 = fastDateFormat2.format(calendar17);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone29);
        java.lang.String str31 = fastDateFormat30.toString();
        boolean boolean32 = fastDateFormat30.getTimeZoneOverridesCalendar();
        java.lang.String str33 = fastDateFormat30.toString();
        java.util.Locale locale34 = fastDateFormat30.getLocale();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.toString();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        calendar49.clear(7);
        calendar49.set(16, (int) (byte) 0);
        int int55 = calendar49.getFirstDayOfWeek();
        java.lang.String str56 = fastDateFormat42.format(calendar49);
        calendar49.set((int) (short) 100, 37, 2);
        java.lang.String str61 = fastDateFormat38.format(calendar49);
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition(16);
        parsePosition64.setErrorIndex(5);
        parsePosition64.setErrorIndex(1);
        java.lang.Object obj69 = fastDateFormat38.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition64);
        java.lang.String str70 = parsePosition64.toString();
        java.lang.Object obj71 = fastDateFormat30.parseObject("7:08:05 AM GMT+00:00", parsePosition64);
        java.lang.Object obj72 = fastDateFormat30.clone();
        java.lang.Object obj73 = fastDateFormat30.clone();
        java.util.TimeZone timeZone74 = fastDateFormat30.getTimeZone();
        calendar17.setTimeZone(timeZone74);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone77.hasSameRules(timeZone79);
        java.util.Locale locale81 = java.util.Locale.CHINA;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone79, locale81);
        timeZone79.setRawOffset(35);
        boolean boolean85 = timeZone79.observesDaylightTime();
        calendar17.setTimeZone(timeZone79);
        boolean boolean87 = timeZone79.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar82", (calendar17.compareTo(calendar82) == 0) == calendar17.equals(calendar82));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        timeZone8.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone8);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone8, locale13);
        java.util.Locale locale21 = new java.util.Locale("February 22, 2022");
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone8, locale21);
        int int24 = timeZone8.getOffset((-1827569400000L));
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.lang.String str30 = fastDateFormat27.format((long) '#');
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(53);
        java.lang.Object obj34 = fastDateFormat27.parseObject("", parsePosition33);
        java.util.TimeZone timeZone35 = fastDateFormat27.getTimeZone();
        int int37 = timeZone35.getOffset((-58914147076879L));
        boolean boolean38 = timeZone8.hasSameRules(timeZone35);
        java.lang.String str39 = timeZone35.getID();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35);
        timeZone35.setRawOffset(2022);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar40", (calendar19.compareTo(calendar40) == 0) == calendar19.equals(calendar40));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.Locale locale21 = fastDateFormat2.getLocale();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        java.util.Date date24 = new java.util.Date();
        java.lang.String str25 = date24.toGMTString();
        boolean boolean26 = date22.before(date24);
        java.lang.String str27 = date24.toLocaleString();
        int int28 = date24.getTimezoneOffset();
        date24.setDate(292278994);
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDateFormat2.format(date24, stringBuffer31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        calendar39.clear(7);
        calendar39.set(16, (int) (byte) 0);
        int int45 = calendar39.getWeeksInWeekYear();
        calendar39.setFirstDayOfWeek(14);
        calendar39.setFirstDayOfWeek(50);
        java.util.TimeZone timeZone50 = calendar39.getTimeZone();
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar39);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone53.hasSameRules(timeZone55);
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55, locale57);
        calendar58.clear(7);
        calendar58.set(16, (int) (byte) 0);
        int int64 = calendar58.getWeeksInWeekYear();
        calendar58.clear();
        java.util.Date date66 = calendar58.getTime();
        calendar58.roll(5, (int) 'a');
        boolean boolean70 = calendar58.isWeekDateSupported();
        java.lang.StringBuffer stringBuffer71 = null;
        java.lang.StringBuffer stringBuffer72 = fastDateFormat2.format(calendar58, stringBuffer71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar39", (calendar9.compareTo(calendar39) == 0) == calendar9.equals(calendar39));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange11 = null;
        languageRangeList1.add(0, languageRange11);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        java.lang.StringBuffer stringBuffer18 = null;
        java.lang.StringBuffer stringBuffer19 = fastDateFormat15.format(date16, stringBuffer18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        calendar26.clear(7);
        boolean boolean29 = calendar26.isWeekDateSupported();
        java.util.TimeZone timeZone30 = calendar26.getTimeZone();
        int int32 = calendar26.getMaximum(3);
        java.lang.StringBuffer stringBuffer33 = null;
        java.lang.StringBuffer stringBuffer34 = fastDateFormat15.format(calendar26, stringBuffer33);
        calendar26.clear();
        java.time.Instant instant36 = calendar26.toInstant();
        java.util.Date date43 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date43.setMonth(50400000);
        date43.setMonth(32769);
        java.time.Instant instant48 = date43.toInstant();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale55 = new java.util.Locale("", "hi!", "");
        java.lang.String str56 = locale51.getDisplayCountry(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale51);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone61.hasSameRules(timeZone63);
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone63, locale65);
        java.lang.String str67 = locale58.getDisplayName(locale65);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleKeys();
        java.lang.String str70 = locale65.getDisplayName(locale68);
        java.lang.String str71 = locale65.getISO3Language();
        boolean boolean72 = fastDateFormat57.equals((java.lang.Object) locale65);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str75 = fastDateFormat73.format((long) ' ');
        java.lang.String str77 = fastDateFormat73.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj78 = fastDateFormat73.clone();
        java.util.Locale locale79 = fastDateFormat73.getLocale();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(locale79);
        java.lang.String str81 = fastDateFormat57.format(calendar80);
        java.time.Instant instant82 = calendar80.toInstant();
        java.util.Calendar.Builder builder83 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder87 = builder83.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar88 = builder83.build();
        int int89 = calendar88.getMinimalDaysInFirstWeek();
        java.time.Instant instant90 = calendar88.toInstant();
        java.time.Instant[] instantArray91 = new java.time.Instant[] { instant36, instant48, instant82, instant90 };
        java.time.Instant[] instantArray92 = languageRangeList1.toArray(instantArray91);
        int int93 = languageRangeList1.size();
        int int94 = languageRangeList1.size();
        boolean boolean96 = languageRangeList1.equals((java.lang.Object) "22 Feb 2022 07:12:34 GMT");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar66 and calendar80", (calendar66.compareTo(calendar80) == 0) == calendar66.equals(calendar80));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar23.clear(7);
        boolean boolean26 = calendar23.isWeekDateSupported();
        java.util.TimeZone timeZone27 = calendar23.getTimeZone();
        int int29 = calendar23.getMaximum(3);
        java.lang.String str30 = fastDateFormat2.format(calendar23);
        java.lang.String str32 = fastDateFormat2.format(1645513660916L);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(7);
        fieldPosition34.setBeginIndex(7);
        int int37 = fieldPosition34.getField();
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((int) (byte) 0);
        int int40 = fieldPosition39.getEndIndex();
        int int41 = fieldPosition39.getField();
        boolean boolean42 = fieldPosition34.equals((java.lang.Object) fieldPosition39);
        int int43 = fieldPosition39.getBeginIndex();
        boolean boolean44 = fastDateFormat2.equals((java.lang.Object) int43);
        java.util.Locale locale46 = new java.util.Locale("Chinese (China)");
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        calendar47.setMinimalDaysInFirstWeek((-1899));
        java.lang.String str50 = fastDateFormat2.format(calendar47);
        java.text.AttributedCharacterIterator.Attribute attribute51 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = attribute51.equals((java.lang.Object) timeZone52);
        java.lang.String str54 = attribute51.toString();
        java.lang.String str55 = attribute51.toString();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        int int60 = timeZone56.getOffset(1645513657024L);
        timeZone56.setID("fra");
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone56.hasSameRules(timeZone63);
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        java.lang.String str66 = locale65.getLanguage();
        boolean boolean67 = locale65.hasExtensions();
        java.lang.String str68 = locale65.getDisplayCountry();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone56, locale65);
        boolean boolean70 = attribute51.equals((java.lang.Object) calendar69);
        java.util.Date date71 = calendar69.getTime();
        java.text.AttributedCharacterIterator.Attribute attribute72 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = attribute72.equals((java.lang.Object) timeZone73);
        java.lang.String str75 = timeZone73.getID();
        calendar69.setTimeZone(timeZone73);
        java.lang.String str77 = fastDateFormat2.format(calendar69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar47", (calendar9.compareTo(calendar47) == 0) == calendar9.equals(calendar47));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        java.util.Locale locale4 = new java.util.Locale("7:07:39 AM UTC");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale4);
        java.util.TimeZone timeZone6 = fastDateFormat5.getTimeZone();
        boolean boolean7 = timeZone6.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7.11.54", timeZone6);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.lang.String str12 = locale11.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale11);
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale11.getDisplayName(locale14);
        java.lang.String str16 = locale11.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone6, locale11);
        java.util.Locale locale18 = java.util.Locale.US;
        java.lang.String str19 = locale18.getISO3Country();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale18);
        java.lang.String str21 = locale11.getDisplayVariant(locale18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar20", (calendar17.compareTo(calendar20) == 0) == calendar17.equals(calendar20));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        java.util.TimeZone timeZone2 = null;
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.lang.String str12 = locale3.getDisplayName(locale10);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleKeys();
        java.lang.String str15 = locale10.getDisplayName(locale13);
        java.lang.String str16 = locale10.getISO3Language();
        java.lang.String str17 = locale10.getVariant();
        java.util.Locale locale18 = locale10.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, timeZone2, locale10);
        java.lang.String str21 = fastDateFormat19.format(1645513662547L);
        java.util.TimeZone timeZone22 = fastDateFormat19.getTimeZone();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar23", (calendar11.compareTo(calendar23) == 0) == calendar11.equals(calendar23));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.lang.String str3 = locale2.getDisplayVariant();
        java.util.Locale locale5 = new java.util.Locale("it");
        java.util.Locale locale8 = new java.util.Locale("hi!", "USA");
        java.lang.String str9 = locale5.getDisplayVariant(locale8);
        java.lang.String str10 = locale2.getDisplayName(locale5);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale2);
        java.lang.String str12 = locale0.getDisplayVariant(locale2);
        java.lang.String str13 = locale2.toLanguageTag();
        java.util.Date date15 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        timeZone18.setRawOffset((int) (byte) 1);
        boolean boolean23 = timeZone18.observesDaylightTime();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone18);
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        boolean boolean27 = locale25.hasExtensions();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone18, locale25);
        java.util.Date date29 = calendar28.getTime();
        int int30 = date29.getMinutes();
        date29.setHours(43);
        date29.setSeconds(130);
        boolean boolean35 = date15.after(date29);
        date15.setMinutes(15);
        boolean boolean38 = locale2.equals((java.lang.Object) date15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar24", (calendar11.compareTo(calendar24) == 0) == calendar11.equals(calendar24));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone11);
        int int15 = timeZone11.getOffset(1645513656868L);
        boolean boolean16 = timeZone11.observesDaylightTime();
        boolean boolean17 = timeZone1.hasSameRules(timeZone11);
        boolean boolean18 = timeZone11.observesDaylightTime();
        timeZone11.setID("Thu Feb 24 03:13:41 GMT+00:00 2022");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar13", (calendar7.compareTo(calendar13) == 0) == calendar7.equals(calendar13));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        timeZone10.setRawOffset(54);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale14);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(7);
        calendar27.set(16, (int) (byte) 0);
        java.time.Instant instant33 = calendar27.toInstant();
        boolean boolean35 = calendar27.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str36 = fastDateFormat20.format(calendar27);
        java.lang.Object obj37 = fastDateFormat20.clone();
        java.util.Locale locale38 = fastDateFormat20.getLocale();
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = null;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        boolean boolean44 = locale42.hasExtensions();
        java.lang.String str45 = locale42.getDisplayCountry();
        java.lang.String str46 = locale42.getDisplayLanguage();
        java.lang.String str47 = locale42.getDisplayLanguage();
        java.lang.String str48 = locale38.getDisplayLanguage(locale42);
        java.util.Locale locale49 = java.util.Locale.ITALY;
        java.lang.String str50 = locale49.getVariant();
        java.lang.String str51 = locale38.getDisplayLanguage(locale49);
        java.lang.String str52 = locale14.getDisplayCountry(locale38);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.lang.String str58 = locale53.getDisplayVariant(locale57);
        java.lang.String str59 = locale38.getDisplayLanguage(locale57);
        java.util.Locale locale61 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        java.util.Locale locale65 = java.util.Locale.US;
        java.lang.String str66 = locale63.getDisplayCountry(locale65);
        java.lang.String str67 = locale57.getDisplayLanguage(locale65);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone10, locale57);
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = timeZone10.getDisplayName(locale69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar68", (calendar27.compareTo(calendar68) == 0) == calendar27.equals(calendar68));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = locale4.getExtension('a');
        java.util.Locale.setDefault(category0, locale4);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        boolean boolean12 = fastDateFormat11.getTimeZoneOverridesCalendar();
        java.lang.String str14 = fastDateFormat11.format((-838185410000L));
        java.lang.Object obj15 = fastDateFormat11.clone();
        java.util.TimeZone timeZone16 = fastDateFormat11.getTimeZone();
        java.util.Locale locale19 = new java.util.Locale("Nov 1, 34768 12:00:00 AM", "2022-02-22 07:07:55");
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone16, locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale19);
        java.lang.String str22 = locale4.getDisplayScript(locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar21", (calendar20.compareTo(calendar21) == 0) == calendar20.equals(calendar21));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:10:55 GMT");
        java.util.Locale locale5 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.util.Locale locale7 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str16 = locale13.getScript();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        boolean boolean20 = locale18.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale18);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        calendar31.clear(7);
        calendar31.set(16, (int) (byte) 0);
        java.time.Instant instant37 = calendar31.toInstant();
        boolean boolean39 = calendar31.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str40 = fastDateFormat24.format(calendar31);
        java.lang.Object obj41 = fastDateFormat24.clone();
        java.util.Locale locale42 = fastDateFormat24.getLocale();
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.lang.String str50 = locale46.getDisplayLanguage();
        java.lang.String str51 = locale46.getDisplayLanguage();
        java.lang.String str52 = locale42.getDisplayLanguage(locale46);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getVariant();
        java.lang.String str55 = locale42.getDisplayLanguage(locale53);
        java.lang.String str56 = locale18.getDisplayCountry(locale42);
        java.lang.String str57 = locale13.getDisplayScript(locale18);
        java.lang.String str58 = locale5.getDisplayVariant(locale13);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone1, locale5);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar59", (calendar31.compareTo(calendar59) == 0) == calendar31.equals(calendar59));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.lang.String str14 = timeZone3.getID();
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.lang.String str17 = locale16.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3, locale16);
        boolean boolean20 = calendar19.isWeekDateSupported();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder23 = builder21.clear();
        java.util.Locale locale24 = builder21.build();
        java.util.Locale.Builder builder25 = builder21.clear();
        java.util.Locale locale26 = builder25.build();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        java.util.TimeZone timeZone28 = calendar27.getTimeZone();
        timeZone28.setID("Feb 2, 2022 7:07:55 AM");
        boolean boolean31 = calendar19.after((java.lang.Object) "Feb 2, 2022 7:07:55 AM");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar27", (calendar5.compareTo(calendar27) == 0) == calendar5.equals(calendar27));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        timeZone8.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone8);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone8, locale13);
        timeZone8.setRawOffset((int) (byte) -1);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        boolean boolean25 = locale23.hasExtensions();
        java.lang.String str26 = locale23.getScript();
        java.lang.String str27 = locale22.getDisplayName(locale23);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone8, locale22);
        int int29 = timeZone8.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar28", (calendar19.compareTo(calendar28) == 0) == calendar19.equals(calendar28));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        int int8 = timeZone4.getOffset(1645513657024L);
        timeZone4.setID("fra");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone4.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone4, locale13);
        java.util.Locale locale18 = locale13.stripExtensions();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.lang.String str20 = locale0.getDisplayName(locale18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar19", (calendar17.compareTo(calendar19) == 0) == calendar17.equals(calendar19));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.lang.String str17 = fastDateFormat2.toString();
        java.lang.Object obj18 = fastDateFormat2.clone();
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale22, locale23, locale24, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale locale30 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale34, locale35, locale36, locale37, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList40);
        int int43 = languageRangeList20.lastIndexOf((java.lang.Object) languageRangeList32);
        java.util.Date date44 = new java.util.Date();
        int int45 = date44.getTimezoneOffset();
        java.util.Date date46 = new java.util.Date();
        java.lang.String str47 = date46.toGMTString();
        boolean boolean48 = date44.before(date46);
        int int49 = date44.getHours();
        java.lang.String str50 = date44.toGMTString();
        int int51 = date44.getDay();
        boolean boolean52 = languageRangeList32.remove((java.lang.Object) date44);
        date44.setYear(44);
        java.lang.String str55 = fastDateFormat2.format(date44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        int int62 = timeZone58.getOffset(1645513657024L);
        timeZone58.setID("fra");
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone58.hasSameRules(timeZone65);
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = locale67.getDisplayCountry();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone58, locale67);
        boolean boolean72 = fastDateFormat57.equals((java.lang.Object) locale67);
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition(1970);
        java.lang.Object obj76 = fastDateFormat57.parseObject("Italia", parsePosition75);
        parsePosition75.setErrorIndex(50);
        parsePosition75.setIndex(38);
        java.lang.Object obj81 = fastDateFormat2.parseObject("7:14:08 AM GMT+00:00", parsePosition75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar71", (calendar9.compareTo(calendar71) == 0) == calendar9.equals(calendar71));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((-1));
        java.lang.String str2 = fieldPosition1.toString();
        java.util.Locale locale6 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str7 = locale6.getDisplayCountry();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale6);
        int int9 = calendar8.getFirstDayOfWeek();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        int int15 = fastDateFormat14.getMaxLengthEstimate();
        java.lang.String str16 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar23.clear(7);
        calendar23.set(16, (int) (byte) 0);
        java.time.Instant instant29 = calendar23.toInstant();
        int int30 = calendar23.getMinimalDaysInFirstWeek();
        int int31 = calendar23.getMinimalDaysInFirstWeek();
        calendar23.add((int) (short) 0, 100);
        calendar23.setMinimalDaysInFirstWeek(38);
        long long37 = calendar23.getTimeInMillis();
        java.lang.String str38 = fastDateFormat14.format(calendar23);
        java.util.TimeZone timeZone39 = fastDateFormat14.getTimeZone();
        calendar8.setTimeZone(timeZone39);
        boolean boolean41 = fieldPosition1.equals((java.lang.Object) timeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar23", (calendar8.compareTo(calendar23) == 0) == calendar8.equals(calendar23));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1921-01-24 05:10:00", timeZone1);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone1, locale7);
        java.lang.String str11 = locale7.getISO3Language();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale locale15 = builder12.build();
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale20 = new java.util.Locale("java.util.GregorianCalendar[time=36,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-22 07:07:51", "7:08:28 AM GMT+00:00");
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.lang.String str22 = locale7.getDisplayName(locale15);
        java.lang.String str23 = locale7.getDisplayCountry();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        int int30 = timeZone26.getOffset(1645513657024L);
        timeZone26.setID("fra");
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone26.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayCountry();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone26, locale35);
        java.lang.String str40 = locale35.getDisplayCountry();
        java.lang.String str42 = locale35.getExtension('a');
        java.util.Locale.setDefault(category24, locale35);
        java.util.Locale locale44 = java.util.Locale.getDefault(category24);
        java.util.Locale locale45 = java.util.Locale.getDefault(category24);
        java.lang.String str46 = locale7.getDisplayCountry(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar39", (calendar10.compareTo(calendar39) == 0) == calendar10.equals(calendar39));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.setFirstDayOfWeek(8);
        int int11 = calendar7.getWeeksInWeekYear();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("2022-2-22 7:08:13");
        java.time.ZoneId zoneId14 = timeZone13.toZoneId();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("2022-2-22 7:07:59");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone17);
        calendar15.setTimeZone(timeZone17);
        java.time.ZoneId zoneId20 = timeZone17.toZoneId();
        calendar7.setTimeZone(timeZone17);
        boolean boolean22 = timeZone17.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar15", (calendar7.compareTo(calendar15) == 0) == calendar7.equals(calendar15));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone1, locale10);
        boolean boolean15 = fastDateFormat0.equals((java.lang.Object) locale10);
        java.lang.String str17 = fastDateFormat0.format(1645513713794L);
        java.lang.Object obj18 = fastDateFormat0.clone();
        java.lang.String str20 = fastDateFormat0.format(1645513814128L);
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.lang.String str28 = locale23.getDisplayCountry(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale23);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        java.lang.String str39 = locale30.getDisplayName(locale37);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleKeys();
        java.lang.String str42 = locale37.getDisplayName(locale40);
        java.lang.String str43 = locale37.getISO3Language();
        boolean boolean44 = fastDateFormat29.equals((java.lang.Object) locale37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str47 = fastDateFormat45.format((long) ' ');
        java.lang.String str49 = fastDateFormat45.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj50 = fastDateFormat45.clone();
        java.util.Locale locale51 = fastDateFormat45.getLocale();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale51);
        java.lang.String str53 = fastDateFormat29.format(calendar52);
        calendar52.clear();
        calendar52.setTimeInMillis((long) 3);
        calendar52.setFirstDayOfWeek(0);
        calendar52.set(58, 50, 45);
        int int64 = calendar52.getActualMaximum(0);
        int int66 = calendar52.getMaximum((int) (byte) 10);
        java.lang.String str67 = fastDateFormat0.format(calendar52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar38", (calendar14.compareTo(calendar38) == 0) == calendar14.equals(calendar38));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getSeconds();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getTimezoneOffset();
        date24.setMinutes(6);
        boolean boolean28 = date22.after(date24);
        java.util.Calendar.Builder builder29 = builder21.setInstant(date24);
        java.util.Calendar.Builder builder31 = builder29.setInstant((long) 36);
        java.util.Calendar.Builder builder33 = builder31.setLenient(true);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = locale35.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale35.getDisplayName(locale38);
        java.lang.String str40 = locale35.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayScript();
        java.util.Calendar.Builder builder42 = builder31.setLocale(locale35);
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale35.getDisplayVariant(locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10, locale35);
        java.util.Locale locale46 = java.util.Locale.ITALY;
        java.lang.String str47 = locale46.getVariant();
        java.lang.String str48 = locale46.getScript();
        java.lang.String str49 = locale46.getVariant();
        java.lang.String str50 = locale35.getDisplayScript(locale46);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone54, locale56);
        calendar57.clear(7);
        calendar57.setMinimalDaysInFirstWeek(69);
        boolean boolean63 = calendar57.after((java.lang.Object) (byte) 10);
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category64, locale65);
        java.util.Locale locale67 = java.util.Locale.getDefault(category64);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "");
        java.lang.String str73 = locale68.getDisplayVariant(locale72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(locale68);
        java.lang.String str75 = locale68.getDisplayVariant();
        java.util.Locale.setDefault(category64, locale68);
        boolean boolean77 = calendar57.after((java.lang.Object) locale68);
        java.lang.String str78 = locale35.getDisplayName(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar57", (calendar6.compareTo(calendar57) == 0) == calendar6.equals(calendar57));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder19.setLenient(true);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        int int31 = timeZone27.getOffset(1645513657024L);
        timeZone27.setID("fra");
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone27.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone27, locale36);
        java.util.Calendar.Builder builder41 = builder26.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder45 = builder26.setWeekDate((int) '#', 32769, (int) ' ');
        java.util.Calendar.Builder builder50 = builder26.setTimeOfDay(7200000, 5, 8, 50400000);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone54, locale56);
        calendar57.clear(7);
        boolean boolean60 = calendar57.isWeekDateSupported();
        int int62 = calendar57.getMinimum(4);
        java.util.TimeZone timeZone63 = calendar57.getTimeZone();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone64.hasSameRules(timeZone65);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone65.hasSameRules(timeZone67);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone67);
        java.util.TimeZone timeZone70 = calendar69.getTimeZone();
        boolean boolean71 = timeZone63.hasSameRules(timeZone70);
        boolean boolean72 = timeZone63.observesDaylightTime();
        java.lang.String str73 = timeZone63.getID();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone75.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.CHINA;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone77, locale79);
        calendar80.clear(7);
        boolean boolean83 = calendar80.isWeekDateSupported();
        int int85 = calendar80.getMinimum(4);
        java.util.TimeZone timeZone86 = calendar80.getTimeZone();
        java.util.TimeZone timeZone88 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone89 = java.util.TimeZone.getDefault();
        boolean boolean90 = timeZone88.hasSameRules(timeZone89);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone89);
        timeZone89.setRawOffset((int) (byte) 1);
        boolean boolean94 = timeZone89.observesDaylightTime();
        boolean boolean95 = timeZone89.observesDaylightTime();
        boolean boolean96 = timeZone86.hasSameRules(timeZone89);
        boolean boolean97 = timeZone63.hasSameRules(timeZone86);
        java.util.Calendar.Builder builder98 = builder26.setTimeZone(timeZone86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar57", (calendar40.compareTo(calendar57) == 0) == calendar40.equals(calendar57));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        int int8 = timeZone4.getOffset(1645513657024L);
        timeZone4.setID("fra");
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone4.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone4, locale13);
        java.time.Instant instant18 = calendar17.toInstant();
        java.util.Date date19 = calendar17.getTime();
        int int20 = calendar17.getMinimalDaysInFirstWeek();
        java.lang.String str21 = calendar17.getCalendarType();
        calendar17.setFirstDayOfWeek(27);
        java.util.Date date24 = calendar17.getTime();
        java.lang.String str25 = fastDateFormat2.format((java.lang.Object) date24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        boolean boolean33 = locale31.hasExtensions();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale31);
        int int35 = calendar34.getMinimalDaysInFirstWeek();
        calendar34.set(130, 1, 130, 0, 50, 292278994);
        calendar34.setMinimalDaysInFirstWeek(30);
        calendar34.clear(5);
        java.lang.String str47 = fastDateFormat2.format(calendar34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar32", (calendar17.compareTo(calendar32) == 0) == calendar17.equals(calendar32));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale7 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone2, locale13);
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getVariant();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        int int25 = timeZone21.getOffset(1645513657024L);
        timeZone21.setID("fra");
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone21.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayCountry();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone21, locale30);
        java.lang.String str35 = locale30.getDisplayCountry();
        java.lang.String str37 = locale30.getExtension('a');
        java.util.Locale.setDefault(category19, locale30);
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.util.Locale.setDefault(category19, locale42);
        java.util.Locale locale44 = java.util.Locale.getDefault(category19);
        java.lang.String str45 = locale13.getDisplayVariant(locale44);
        java.util.Locale.Category category46 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale47 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category46, locale47);
        java.util.Locale locale49 = java.util.Locale.getDefault(category46);
        java.util.Locale locale50 = java.util.Locale.CHINA;
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.lang.String str55 = locale50.getDisplayVariant(locale54);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale50);
        java.lang.String str57 = locale50.getDisplayVariant();
        java.util.Locale.setDefault(category46, locale50);
        java.util.Locale locale59 = java.util.Locale.getDefault(category46);
        java.lang.String str60 = locale59.getISO3Language();
        java.lang.String str61 = locale13.getDisplayVariant(locale59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar56", (calendar34.compareTo(calendar56) == 0) == calendar34.equals(calendar56));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        java.util.TimeZone timeZone21 = calendar9.getTimeZone();
        int int22 = timeZone21.getRawOffset();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        int int28 = timeZone24.getOffset(1645513657024L);
        timeZone24.setID("fra");
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone24.hasSameRules(timeZone31);
        timeZone31.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone31);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.lang.String str40 = locale36.getDisplayLanguage();
        java.lang.String str41 = locale36.getDisplayLanguage();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone31, locale36);
        boolean boolean43 = timeZone21.hasSameRules(timeZone31);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone21);
        int int45 = timeZone21.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar44", (calendar42.compareTo(calendar44) == 0) == calendar42.equals(calendar44));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        calendar12.setLenient(true);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        int int27 = calendar21.getFirstDayOfWeek();
        int int28 = calendar21.getWeekYear();
        java.util.TimeZone timeZone29 = calendar21.getTimeZone();
        int int31 = timeZone29.getOffset((-61604322582998L));
        timeZone29.setRawOffset(41);
        calendar12.setTimeZone(timeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar21", (calendar8.compareTo(calendar21) == 0) == calendar8.equals(calendar21));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getSeconds();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        boolean boolean8 = date2.after(date4);
        java.util.Calendar.Builder builder9 = builder1.setInstant(date4);
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 36);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder15 = builder13.setLenient(false);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        timeZone18.setRawOffset((int) (byte) 1);
        boolean boolean23 = timeZone18.observesDaylightTime();
        java.util.Calendar.Builder builder24 = builder13.setTimeZone(timeZone18);
        java.util.Date date28 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date28.setMonth(4);
        java.util.Calendar.Builder builder31 = builder13.setInstant(date28);
        java.util.Calendar.Builder builder33 = builder13.setInstant(1645513674789L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        int int41 = timeZone37.getOffset(1645513656868L);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder48 = builder13.setTimeZone(timeZone37);
        java.util.Locale locale52 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str53 = locale52.getDisplayScript();
        java.lang.String str54 = locale52.getDisplayCountry();
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getSeconds();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        date58.setMinutes(6);
        boolean boolean62 = date56.after(date58);
        java.util.Calendar.Builder builder63 = builder55.setInstant(date58);
        java.util.Calendar.Builder builder65 = builder63.setInstant((long) 36);
        java.util.Calendar.Builder builder69 = builder65.setWeekDate(17, 37, 6);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.lang.String str79 = locale70.getDisplayName(locale77);
        java.lang.String str80 = locale77.getDisplayCountry();
        java.util.Calendar.Builder builder81 = builder65.setLocale(locale77);
        java.util.Set<java.lang.String> strSet82 = locale77.getUnicodeLocaleKeys();
        java.lang.String str83 = locale52.getDisplayLanguage(locale77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone37, locale77);
        java.lang.String str86 = fastDateFormat84.format(1645513728919L);
        java.text.ParsePosition parsePosition89 = new java.text.ParsePosition(16);
        parsePosition89.setIndex((int) (short) 0);
        int int92 = parsePosition89.getErrorIndex();
        java.lang.Object obj93 = fastDateFormat84.parseObject("2022-02-22 07:16:23", parsePosition89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar39 and calendar78", (calendar39.compareTo(calendar78) == 0) == calendar39.equals(calendar78));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getSeconds();
        int int9 = date6.getMinutes();
        long long10 = date6.getTime();
        java.lang.String str11 = date6.toLocaleString();
        boolean boolean12 = date4.before(date6);
        java.lang.String str13 = fastDateFormat2.format(date4);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        boolean boolean27 = fastDateFormat2.equals((java.lang.Object) builder24);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        calendar34.clear(7);
        calendar34.set(16, (int) (byte) 0);
        java.time.Instant instant40 = calendar34.toInstant();
        int int41 = calendar34.getMinimalDaysInFirstWeek();
        int int42 = calendar34.getMinimalDaysInFirstWeek();
        java.lang.String str43 = fastDateFormat2.format(calendar34);
        java.util.TimeZone timeZone44 = fastDateFormat2.getTimeZone();
        timeZone44.setID("28 Sep 1950 23:32:59 GMT");
        int int48 = timeZone44.getOffset(1645513871807L);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone54);
        java.util.TimeZone timeZone57 = calendar56.getTimeZone();
        calendar56.set(5, 16);
        boolean boolean61 = parsePosition50.equals((java.lang.Object) 5);
        java.util.Locale locale63 = new java.util.Locale("gregory");
        boolean boolean64 = parsePosition50.equals((java.lang.Object) locale63);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone44, locale63);
        int int67 = timeZone44.getOffset(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar65", (calendar34.compareTo(calendar65) == 0) == calendar34.equals(calendar65));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        boolean boolean8 = timeZone2.observesDaylightTime();
        timeZone2.setRawOffset(22);
        java.lang.String str11 = timeZone2.getID();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale18 = new java.util.Locale("", "hi!", "");
        java.lang.String str19 = locale14.getDisplayCountry(locale18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale14);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder21.clear();
        java.util.Locale.Builder builder23 = builder21.clear();
        java.util.Locale locale24 = builder21.build();
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale14.getDisplayName(locale24);
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28);
        java.lang.String str30 = fastDateFormat29.toString();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        calendar40.clear(7);
        calendar40.set(16, (int) (byte) 0);
        int int46 = calendar40.getFirstDayOfWeek();
        java.lang.String str47 = fastDateFormat33.format(calendar40);
        calendar40.set((int) (short) 100, 37, 2);
        java.lang.String str52 = fastDateFormat29.format(calendar40);
        java.util.TimeZone timeZone53 = fastDateFormat29.getTimeZone();
        java.util.Locale locale54 = fastDateFormat29.getLocale();
        java.lang.String str55 = locale14.getDisplayScript(locale54);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale54);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone2, locale54);
        int int59 = timeZone2.getOffset(1645513915319L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar57", (calendar56.compareTo(calendar57) == 0) == calendar56.equals(calendar57));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.lang.String str15 = locale6.getDisplayName(locale13);
        java.util.Locale.Builder builder16 = builder4.setLocale(locale6);
        java.util.Locale locale17 = builder4.build();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.util.Locale.setDefault(locale17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale.LanguageRange languageRange23 = null;
        boolean boolean24 = languageRangeList21.add(languageRange23);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor25 = languageRangeList21.iterator();
        java.util.Set<java.lang.String> strSet26 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet26.parallelStream();
        boolean boolean29 = languageRangeList21.retainAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Locale locale31 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale33 = null;
        java.lang.String str34 = locale32.getDisplayCountry(locale33);
        boolean boolean35 = languageRangeList21.contains((java.lang.Object) locale32);
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = locale32.getDisplayCountry(locale36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        int int43 = timeZone39.getOffset(1645513657024L);
        timeZone39.setID("fra");
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone39.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone39, locale48);
        boolean boolean53 = fastDateFormat38.equals((java.lang.Object) locale48);
        java.lang.String str54 = locale48.getCountry();
        java.lang.String str55 = locale36.getDisplayLanguage(locale48);
        java.lang.String str56 = locale17.getDisplayScript(locale36);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar52", (calendar14.compareTo(calendar52) == 0) == calendar14.equals(calendar52));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str4 = fastDateFormat2.toString();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        parsePosition8.setErrorIndex(5);
        int int11 = parsePosition8.getErrorIndex();
        java.lang.Object obj12 = fastDateFormat2.parseObject("7:07:41 AM UTC", parsePosition8);
        java.util.TimeZone timeZone13 = fastDateFormat2.getTimeZone();
        java.lang.String str14 = timeZone13.getID();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("CHN");
        boolean boolean17 = timeZone16.observesDaylightTime();
        java.time.ZoneId zoneId18 = timeZone16.toZoneId();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone(zoneId18);
        java.util.Locale locale23 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str24 = locale23.getDisplayCountry();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale23);
        java.lang.String str26 = locale23.getDisplayLanguage();
        java.lang.String str27 = locale23.getDisplayLanguage();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale30);
        java.util.Locale.Category category37 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category37, locale39);
        java.lang.String str41 = locale39.getVariant();
        boolean boolean42 = locale39.hasExtensions();
        java.lang.String str43 = locale30.getDisplayName(locale39);
        java.lang.String str44 = locale23.getDisplayName(locale39);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone19, locale23);
        boolean boolean46 = timeZone13.hasSameRules(timeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar45", (calendar25.compareTo(calendar45) == 0) == calendar25.equals(calendar45));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-2-22 7:08:13");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9, locale11);
        calendar12.clear(7);
        calendar12.set(16, (int) (byte) 0);
        java.time.Instant instant18 = calendar12.toInstant();
        boolean boolean20 = calendar12.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str21 = fastDateFormat5.format(calendar12);
        java.lang.Object obj22 = fastDateFormat5.clone();
        java.util.Locale locale23 = fastDateFormat5.getLocale();
        java.lang.String str24 = locale23.getLanguage();
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale23.getDisplayVariant(locale25);
        java.lang.String str27 = locale23.getLanguage();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale30);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        java.lang.String str46 = locale37.getDisplayName(locale44);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.lang.String str49 = locale44.getDisplayName(locale47);
        java.lang.String str50 = locale44.getISO3Language();
        boolean boolean51 = fastDateFormat36.equals((java.lang.Object) locale44);
        java.lang.String str52 = locale23.getDisplayLanguage(locale44);
        java.lang.String str53 = locale23.getISO3Country();
        java.lang.String str54 = locale23.getDisplayName();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone1, locale23);
        int int56 = timeZone1.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar55", (calendar12.compareTo(calendar55) == 0) == calendar12.equals(calendar55));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId3);
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.toString();
        int int11 = fastDateFormat9.getMaxLengthEstimate();
        java.util.TimeZone timeZone12 = fastDateFormat9.getTimeZone();
        timeZone12.setID("\u610f\u5927\u5229");
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("22 Feb 2022 07:07:54 GMT");
        java.lang.String str17 = locale16.getDisplayCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone12, locale16);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale19.getDisplayName(locale26);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleKeys();
        java.lang.String str31 = locale26.getDisplayName(locale29);
        java.lang.String str32 = locale26.getISO3Language();
        java.lang.String str33 = locale26.getVariant();
        java.util.Locale locale34 = locale26.stripExtensions();
        boolean boolean35 = fastDateFormat18.equals((java.lang.Object) locale34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone5, locale34);
        java.lang.String str37 = locale34.getCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar36", (calendar27.compareTo(calendar36) == 0) == calendar27.equals(calendar36));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getDisplayLanguage();
        java.util.Locale locale16 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.lang.String str17 = locale9.getDisplayScript(locale16);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale18.getISO3Language();
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale9.getDisplayCountry(locale18);
        java.lang.String str23 = locale9.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar12", (calendar8.compareTo(calendar12) == 0) == calendar8.equals(calendar12));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23);
        boolean boolean26 = timeZone18.hasSameRules(timeZone23);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.lang.String str36 = locale28.getDisplayVariant(locale30);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone18, locale30);
        java.lang.String str40 = timeZone18.getID();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        timeZone43.setRawOffset((int) (byte) 1);
        boolean boolean48 = timeZone43.observesDaylightTime();
        boolean boolean49 = timeZone43.observesDaylightTime();
        boolean boolean50 = timeZone18.hasSameRules(timeZone43);
        int int51 = timeZone43.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar37", (calendar6.compareTo(calendar37) == 0) == calendar6.equals(calendar37));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        int int9 = timeZone5.getOffset(0L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 3, timeZone5);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        calendar20.set(16, (int) (byte) 0);
        int int26 = calendar20.getFirstDayOfWeek();
        java.lang.String str27 = fastDateFormat13.format(calendar20);
        java.lang.String str28 = fastDateFormat13.toString();
        java.lang.Object obj29 = fastDateFormat13.clone();
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Locale locale33 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale33, locale34, locale35, locale36, locale37 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale locale41 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.util.Locale>) localeList39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray50 = new java.util.Locale[] { locale45, locale46, locale47, locale48, locale49 };
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList51);
        int int54 = languageRangeList31.lastIndexOf((java.lang.Object) languageRangeList43);
        java.util.Date date55 = new java.util.Date();
        int int56 = date55.getTimezoneOffset();
        java.util.Date date57 = new java.util.Date();
        java.lang.String str58 = date57.toGMTString();
        boolean boolean59 = date55.before(date57);
        int int60 = date55.getHours();
        java.lang.String str61 = date55.toGMTString();
        int int62 = date55.getDay();
        boolean boolean63 = languageRangeList43.remove((java.lang.Object) date55);
        date55.setYear(44);
        java.lang.String str66 = fastDateFormat13.format(date55);
        date55.setDate(51);
        date55.setTime(1645513727958L);
        int int71 = date55.getDay();
        int int72 = date55.getTimezoneOffset();
        java.lang.String str73 = fastDateFormat10.format((java.lang.Object) date55);
        java.lang.String str74 = fastDateFormat10.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar20", (calendar7.compareTo(calendar20) == 0) == calendar7.equals(calendar20));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        java.util.TimeZone timeZone17 = calendar16.getTimeZone();
        java.util.Locale locale21 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale21);
        java.util.Calendar.Builder builder23 = builder8.setTimeZone(timeZone17);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone17);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone17);
        java.lang.String str26 = timeZone17.getID();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone17);
        boolean boolean28 = timeZone17.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar22", (calendar16.compareTo(calendar22) == 0) == calendar16.equals(calendar22));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        java.util.Date date7 = new java.util.Date();
        java.lang.String str8 = date7.toGMTString();
        boolean boolean9 = date5.before(date7);
        long long10 = date7.getTime();
        java.lang.String str11 = date7.toGMTString();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        int int14 = date12.getSeconds();
        java.time.Instant instant15 = date12.toInstant();
        int int16 = date12.getDate();
        boolean boolean17 = date7.before(date12);
        java.lang.String str18 = fastDateFormat4.format((java.lang.Object) date12);
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        java.util.Date date21 = new java.util.Date();
        java.lang.String str22 = date21.toGMTString();
        boolean boolean23 = date19.before(date21);
        int int24 = date19.getHours();
        java.lang.String str25 = date19.toGMTString();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMinutes(6);
        int int30 = date26.getMinutes();
        java.util.Date date37 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean38 = date26.before(date37);
        boolean boolean39 = date19.after(date37);
        java.lang.String str40 = fastDateFormat4.format(date19);
        java.lang.Object obj41 = fastDateFormat4.clone();
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        java.lang.String str45 = fastDateFormat44.toString();
        boolean boolean46 = fastDateFormat44.getTimeZoneOverridesCalendar();
        java.lang.String str47 = fastDateFormat44.getPattern();
        java.lang.String str49 = fastDateFormat44.format(1645513657001L);
        java.util.Date date55 = new java.util.Date(58, 41, 39, 31, 41);
        java.lang.String str56 = fastDateFormat44.format(date55);
        java.lang.String str57 = fastDateFormat4.format(date55);
        java.util.Calendar.Builder builder58 = new java.util.Calendar.Builder();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getSeconds();
        java.util.Date date61 = new java.util.Date();
        int int62 = date61.getTimezoneOffset();
        date61.setMinutes(6);
        boolean boolean65 = date59.after(date61);
        java.util.Calendar.Builder builder66 = builder58.setInstant(date61);
        java.util.Calendar.Builder builder68 = builder66.setInstant((long) 36);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder70 = builder68.setLocale(locale69);
        java.util.Calendar.Builder builder72 = builder70.setLenient(false);
        java.util.Calendar calendar73 = builder70.build();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        boolean boolean76 = timeZone75.observesDaylightTime();
        int int78 = timeZone75.getOffset(1645513677331L);
        java.util.Calendar.Builder builder79 = builder70.setTimeZone(timeZone75);
        java.util.Calendar calendar80 = builder70.build();
        java.util.Calendar calendar81 = builder70.build();
        java.lang.String str82 = fastDateFormat4.format(calendar81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar73 and calendar80", (calendar73.compareTo(calendar80) == 0) == calendar73.equals(calendar80));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        java.util.Date date1 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMinutes();
        date15.setHours(43);
        date15.setSeconds(130);
        boolean boolean21 = date1.after(date15);
        int int22 = date1.getTimezoneOffset();
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getTimezoneOffset();
        int int25 = date23.getSeconds();
        boolean boolean26 = date1.before(date23);
        long long27 = date23.getTime();
        date23.setSeconds(57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar14", (calendar10.compareTo(calendar14) == 0) == calendar10.equals(calendar14));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        calendar35.clear(7);
        calendar35.set(16, (int) (byte) 0);
        java.time.Instant instant41 = calendar35.toInstant();
        java.util.TimeZone timeZone42 = calendar35.getTimeZone();
        java.util.TimeZone timeZone43 = calendar35.getTimeZone();
        java.lang.String str44 = timeZone43.getID();
        java.util.Calendar.Builder builder45 = builder28.setTimeZone(timeZone43);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone49);
        java.util.TimeZone timeZone52 = calendar51.getTimeZone();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        int int57 = timeZone53.getOffset(1645513657024L);
        timeZone53.setID("fra");
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone53.hasSameRules(timeZone60);
        boolean boolean62 = timeZone52.hasSameRules(timeZone60);
        java.util.Calendar.Builder builder63 = builder28.setTimeZone(timeZone60);
        java.util.Calendar.Builder builder65 = builder28.setLenient(true);
        java.util.Calendar.Builder builder69 = builder65.setDate((int) 'x', 43, 32769);
        java.util.Calendar.Builder builder74 = builder69.setTimeOfDay(43, 49, 4, 130);
        java.util.Calendar.Builder builder79 = builder69.setTimeOfDay((int) (byte) 0, (-1899), 365, (int) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar51", (calendar35.compareTo(calendar51) == 0) == calendar35.equals(calendar51));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone25);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.toString();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        calendar49.clear(7);
        calendar49.set(16, (int) (byte) 0);
        int int55 = calendar49.getFirstDayOfWeek();
        java.lang.String str56 = fastDateFormat42.format(calendar49);
        calendar49.set((int) (short) 100, 37, 2);
        java.lang.String str61 = fastDateFormat38.format(calendar49);
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getTimezoneOffset();
        date62.setMinutes(6);
        int int66 = date62.getMinutes();
        java.util.Date date73 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean74 = date62.before(date73);
        java.util.Date date80 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean81 = date62.before(date80);
        boolean boolean82 = calendar49.after((java.lang.Object) date80);
        date80.setSeconds(54);
        java.time.Instant instant85 = date80.toInstant();
        date80.setHours(6);
        boolean boolean88 = timeZone25.inDaylightTime(date80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar34", (calendar10.compareTo(calendar34) == 0) == calendar10.equals(calendar34));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder18 = builder10.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.lang.String str32 = locale23.getDisplayName(locale30);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayName(locale33);
        java.lang.String str36 = locale30.getISO3Language();
        java.lang.String str37 = locale30.getVariant();
        java.util.Calendar.Builder builder38 = builder22.setLocale(locale30);
        java.util.Calendar.Builder builder42 = builder38.setWeekDate(1969, 57, 53);
        java.util.Calendar.Builder builder47 = builder38.setTimeOfDay(21, 9, (int) (short) 10, 30);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone50);
        timeZone50.setRawOffset((int) (byte) 1);
        boolean boolean55 = timeZone50.observesDaylightTime();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        boolean boolean59 = timeZone56.observesDaylightTime();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone56);
        boolean boolean61 = timeZone50.hasSameRules(timeZone56);
        java.util.Calendar.Builder builder62 = builder38.setTimeZone(timeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar60", (calendar31.compareTo(calendar60) == 0) == calendar31.equals(calendar60));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone4, locale10);
        java.util.TimeZone.setDefault(timeZone4);
        int int13 = timeZone4.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone4);
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        java.util.Date date17 = new java.util.Date("22 Feb 2022 07:08:01 GMT");
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getSeconds();
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getTimezoneOffset();
        date21.setMinutes(6);
        boolean boolean25 = date19.after(date21);
        java.util.Calendar.Builder builder26 = builder18.setInstant(date21);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        date29.setMinutes(6);
        boolean boolean33 = date27.after(date29);
        date27.setHours((int) (short) 100);
        boolean boolean36 = date21.before(date27);
        boolean boolean37 = date17.before(date21);
        boolean boolean38 = fastDateFormat14.equals((java.lang.Object) date17);
        java.lang.String str39 = fastDateFormat14.getPattern();
        boolean boolean41 = fastDateFormat14.equals((java.lang.Object) 1645513831469L);
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.lang.String str46 = fastDateFormat45.toString();
        boolean boolean47 = fastDateFormat45.getTimeZoneOverridesCalendar();
        java.lang.String str48 = fastDateFormat45.getPattern();
        java.lang.String str50 = fastDateFormat45.format(1645513657001L);
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone57);
        java.util.TimeZone timeZone60 = calendar59.getTimeZone();
        calendar59.set(5, 16);
        boolean boolean64 = parsePosition53.equals((java.lang.Object) 5);
        java.lang.Object obj65 = fastDateFormat45.parseObject("2022-02-22 08:37:55", parsePosition53);
        parsePosition53.setIndex(9);
        java.lang.Object obj68 = fastDateFormat14.parseObject("22 Feb 2022 07:11:17 GMT", parsePosition53);
        parsePosition53.setErrorIndex(19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar11", (calendar6.compareTo(calendar11) == 0) == calendar6.equals(calendar11));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        java.util.TimeZone timeZone21 = calendar9.getTimeZone();
        int int22 = timeZone21.getRawOffset();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        int int28 = timeZone24.getOffset(1645513657024L);
        timeZone24.setID("fra");
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone24.hasSameRules(timeZone31);
        timeZone31.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone31);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.lang.String str40 = locale36.getDisplayLanguage();
        java.lang.String str41 = locale36.getDisplayLanguage();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone31, locale36);
        boolean boolean43 = timeZone21.hasSameRules(timeZone31);
        timeZone31.setID("java.util.GregorianCalendar[time=1645513761728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=21,MILLISECOND=797,ZONE_OFFSET=69,DST_OFFSET=0]");
        java.lang.String str46 = timeZone31.getID();
        java.util.Date date48 = new java.util.Date("22 Feb 2022 07:08:45 GMT");
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone50);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone53.hasSameRules(timeZone55);
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55, locale57);
        calendar58.clear(7);
        calendar58.set(16, (int) (byte) 0);
        java.time.Instant instant64 = calendar58.toInstant();
        boolean boolean66 = calendar58.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str67 = fastDateFormat51.format(calendar58);
        java.lang.String str68 = calendar58.getCalendarType();
        boolean boolean69 = calendar58.isWeekDateSupported();
        java.time.Instant instant70 = calendar58.toInstant();
        int int71 = calendar58.getWeeksInWeekYear();
        java.util.Date date72 = calendar58.getTime();
        date72.setSeconds(45);
        boolean boolean75 = date48.after(date72);
        date48.setMinutes(20);
        java.lang.String str78 = date48.toGMTString();
        boolean boolean79 = timeZone31.inDaylightTime(date48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar58", (calendar42.compareTo(calendar58) == 0) == calendar42.equals(calendar58));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        java.util.Date date1 = new java.util.Date((long) 11);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        boolean boolean9 = timeZone4.observesDaylightTime();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone4);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone4, locale11);
        java.util.Date date15 = calendar14.getTime();
        int int16 = date15.getMinutes();
        date15.setHours(43);
        date15.setSeconds(130);
        boolean boolean21 = date1.after(date15);
        int int22 = date1.getTimezoneOffset();
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getTimezoneOffset();
        int int25 = date23.getSeconds();
        boolean boolean26 = date1.before(date23);
        long long27 = date23.getTime();
        date23.setYear((-1));
        int int30 = date23.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar14", (calendar10.compareTo(calendar14) == 0) == calendar10.equals(calendar14));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        java.util.Date date1 = new java.util.Date(1645513723009L);
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.set(16, (int) (byte) 0);
        java.time.Instant instant14 = calendar8.toInstant();
        java.util.TimeZone timeZone15 = calendar8.getTimeZone();
        int int16 = calendar8.getMinimalDaysInFirstWeek();
        boolean boolean17 = calendar8.isWeekDateSupported();
        int int18 = calendar8.getFirstDayOfWeek();
        calendar8.set(100, 103, (int) (byte) 10, 2, 61);
        calendar8.set(41, 0, 0);
        boolean boolean29 = calendar8.isWeekDateSupported();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        calendar36.clear(7);
        calendar36.set(16, (int) (byte) 0);
        int int42 = calendar36.getFirstDayOfWeek();
        int int43 = calendar36.getWeekYear();
        java.util.TimeZone timeZone44 = calendar36.getTimeZone();
        calendar36.clear();
        calendar36.clear();
        java.util.Date date47 = calendar36.getTime();
        java.util.TimeZone timeZone48 = calendar36.getTimeZone();
        calendar8.setTimeZone(timeZone48);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone51.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone53, locale55);
        calendar56.clear(7);
        calendar56.set(16, (int) (byte) 0);
        int int62 = calendar56.getFirstDayOfWeek();
        int int63 = calendar56.getWeekYear();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone64.hasSameRules(timeZone65);
        int int68 = timeZone64.getOffset(1645513657024L);
        timeZone64.setID("fra");
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone64.hasSameRules(timeZone71);
        timeZone71.setRawOffset(9);
        calendar56.setTimeZone(timeZone71);
        int int76 = calendar56.getWeeksInWeekYear();
        java.util.Date date77 = calendar56.getTime();
        calendar8.setTime(date77);
        int int79 = date1.compareTo(date77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar56", (calendar8.compareTo(calendar56) == 0) == calendar8.equals(calendar56));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(2, 0, 2022);
        java.util.Calendar.Builder builder19 = builder10.setTimeOfDay(0, 7, 0, 32769);
        java.util.Calendar.Builder builder21 = builder10.setLenient(true);
        java.util.Calendar.Builder builder26 = builder21.setTimeOfDay(36, 9, 2022, (int) 'u');
        java.util.Calendar.Builder builder30 = builder21.setTimeOfDay((int) 'x', (-46800000), 122);
        java.util.Calendar.Builder builder34 = builder30.setDate(456, 1, 1);
        java.util.Calendar.Builder builder36 = builder30.setLenient(true);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder48 = builder36.setTimeZone(timeZone37);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.lang.String str50 = locale49.getDisplayScript();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.lang.String str55 = locale49.getDisplayVariant(locale54);
        java.lang.String str56 = locale49.getLanguage();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone37, locale49);
        java.lang.String str58 = locale49.getDisplayScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar46 and calendar57", (calendar46.compareTo(calendar57) == 0) == calendar46.equals(calendar57));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone6 = calendar5.getTimeZone();
        java.util.Locale locale10 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        java.util.TimeZone timeZone18 = calendar17.getTimeZone();
        java.util.Locale locale22 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale22);
        java.util.Calendar.Builder builder25 = new java.util.Calendar.Builder();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getSeconds();
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        date28.setMinutes(6);
        boolean boolean32 = date26.after(date28);
        java.util.Calendar.Builder builder33 = builder25.setInstant(date28);
        java.util.Calendar.Builder builder35 = builder33.setInstant((long) 36);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder37 = builder35.setLocale(locale36);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone40);
        java.util.Calendar.Builder builder43 = builder35.setTimeZone(timeZone40);
        java.util.Calendar.Builder builder45 = builder35.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        int int51 = timeZone47.getOffset(1645513657024L);
        timeZone47.setID("fra");
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone47.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = locale56.getDisplayCountry();
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone47, locale56);
        boolean boolean61 = fastDateFormat46.equals((java.lang.Object) locale56);
        java.util.Calendar.Builder builder62 = builder45.setLocale(locale56);
        java.lang.String str63 = locale56.getScript();
        boolean boolean64 = locale56.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale56);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone18, locale56);
        java.lang.String str67 = locale10.getDisplayScript(locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar60", (calendar5.compareTo(calendar60) == 0) == calendar5.equals(calendar60));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale locale4 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale locale6 = builder5.build();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.lang.String str16 = locale7.getDisplayName(locale14);
        java.util.Locale.Builder builder17 = builder5.setLocale(locale7);
        java.util.Locale locale18 = builder5.build();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.util.Locale.setDefault(locale18);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Locale.LanguageRange languageRange24 = null;
        boolean boolean25 = languageRangeList22.add(languageRange24);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor26 = languageRangeList22.iterator();
        java.util.Set<java.lang.String> strSet27 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream28 = strSet27.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream29 = strSet27.parallelStream();
        boolean boolean30 = languageRangeList22.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.Locale locale32 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = null;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        boolean boolean36 = languageRangeList22.contains((java.lang.Object) locale33);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        int int44 = timeZone40.getOffset(1645513657024L);
        timeZone40.setID("fra");
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone40.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone40, locale49);
        boolean boolean54 = fastDateFormat39.equals((java.lang.Object) locale49);
        java.lang.String str55 = locale49.getCountry();
        java.lang.String str56 = locale37.getDisplayLanguage(locale49);
        java.lang.String str57 = locale18.getDisplayScript(locale37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale37);
        java.util.TimeZone timeZone60 = null;
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone63.hasSameRules(timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone64.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone66, locale68);
        java.lang.String str70 = locale61.getDisplayName(locale68);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.lang.String str73 = locale68.getDisplayName(locale71);
        java.lang.String str74 = locale68.getISO3Language();
        java.lang.String str75 = locale68.getVariant();
        java.util.Locale locale76 = locale68.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, timeZone60, locale68);
        java.lang.String str79 = fastDateFormat77.format(1645513662547L);
        java.util.TimeZone timeZone80 = fastDateFormat77.getTimeZone();
        boolean boolean81 = fastDateFormat58.equals((java.lang.Object) fastDateFormat77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar53", (calendar15.compareTo(calendar53) == 0) == calendar15.equals(calendar53));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset(21);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category7, locale9);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getSeconds();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getTimezoneOffset();
        date14.setMinutes(6);
        boolean boolean18 = date12.after(date14);
        java.util.Calendar.Builder builder19 = builder11.setInstant(date14);
        java.util.Calendar.Builder builder21 = builder19.setInstant((long) 36);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder23 = builder21.setLocale(locale22);
        java.lang.String str24 = locale22.toLanguageTag();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str26 = locale22.getISO3Language();
        java.lang.String str27 = locale22.getLanguage();
        java.util.Locale.setDefault(category7, locale22);
        java.util.Locale locale29 = java.util.Locale.getDefault(category7);
        java.util.Locale locale30 = java.util.Locale.getDefault(category7);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        calendar47.set(16, (int) (byte) 0);
        java.time.Instant instant53 = calendar47.toInstant();
        boolean boolean55 = calendar47.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str56 = fastDateFormat40.format(calendar47);
        java.lang.Object obj57 = fastDateFormat40.clone();
        java.util.Locale locale58 = fastDateFormat40.getLocale();
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = locale58.getDisplayName();
        java.lang.String str61 = locale31.getDisplayCountry(locale58);
        java.lang.String str62 = locale30.getDisplayName(locale58);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone2, locale30);
        java.lang.String str64 = locale30.getCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar63", (calendar47.compareTo(calendar63) == 0) == calendar47.equals(calendar63));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.setMinimalDaysInFirstWeek((-46800000));
        java.util.TimeZone timeZone17 = calendar6.getTimeZone();
        java.time.Instant instant18 = calendar6.toInstant();
        calendar6.setLenient(true);
        java.time.Instant instant21 = calendar6.toInstant();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.lang.String str30 = locale25.getDisplayCountry(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale29);
        java.util.Locale locale34 = locale29.stripExtensions();
        java.lang.String str35 = calendar6.getDisplayName(10, 32770, locale34);
        java.lang.String str36 = locale34.getDisplayVariant();
        java.util.Locale locale37 = java.util.Locale.FRENCH;
        java.lang.String str38 = locale37.getDisplayVariant();
        boolean boolean39 = locale37.hasExtensions();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        java.util.Locale locale43 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale44.getDisplayLanguage(locale45);
        java.util.Locale locale47 = java.util.Locale.US;
        java.lang.String str48 = locale45.getDisplayCountry(locale47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone41, locale47);
        java.lang.String str50 = locale47.getDisplayLanguage();
        java.lang.String str51 = locale47.getDisplayVariant();
        java.lang.String str52 = locale37.getDisplayVariant(locale47);
        java.lang.String str53 = locale34.getDisplayLanguage(locale37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar49", (calendar6.compareTo(calendar49) == 0) == calendar6.equals(calendar49));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        java.util.TimeZone timeZone21 = calendar9.getTimeZone();
        int int22 = timeZone21.getRawOffset();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        int int28 = timeZone24.getOffset(1645513657024L);
        timeZone24.setID("fra");
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone24.hasSameRules(timeZone31);
        timeZone31.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone31);
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.lang.String str40 = locale36.getDisplayLanguage();
        java.lang.String str41 = locale36.getDisplayLanguage();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone31, locale36);
        boolean boolean43 = timeZone21.hasSameRules(timeZone31);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone21);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone45.observesDaylightTime();
        boolean boolean47 = timeZone21.hasSameRules(timeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar44", (calendar42.compareTo(calendar44) == 0) == calendar42.equals(calendar44));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        calendar9.setMinimalDaysInFirstWeek((int) ' ');
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale31, locale32, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList49);
        int int52 = languageRangeList29.lastIndexOf((java.lang.Object) languageRangeList41);
        java.lang.String[] strArray71 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        boolean boolean74 = languageRangeList41.retainAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean75 = languageRangeList27.removeAll((java.util.Collection<java.lang.String>) strList72);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone77.hasSameRules(timeZone79);
        java.util.Locale locale81 = java.util.Locale.CHINA;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone79, locale81);
        boolean boolean83 = languageRangeList27.remove((java.lang.Object) timeZone79);
        int int84 = timeZone79.getRawOffset();
        timeZone79.setRawOffset(1970);
        calendar9.setTimeZone(timeZone79);
        java.util.Locale locale89 = java.util.Locale.FRANCE;
        java.lang.String str90 = locale89.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale89);
        java.util.Locale locale92 = java.util.Locale.TAIWAN;
        java.lang.String str93 = locale89.getDisplayName(locale92);
        java.lang.String str94 = locale89.getDisplayCountry();
        java.lang.String str95 = locale89.getDisplayScript();
        java.lang.String str96 = locale89.getLanguage();
        java.util.Calendar calendar97 = java.util.Calendar.getInstance(timeZone79, locale89);
        boolean boolean98 = timeZone79.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar82 and calendar97", (calendar82.compareTo(calendar97) == 0) == calendar82.equals(calendar97));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale20.getISO3Country();
        java.lang.String str23 = locale20.getDisplayLanguage();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.lang.String str32 = locale27.getDisplayVariant(locale31);
        java.lang.String str33 = locale25.getDisplayVariant(locale27);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale27);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.lang.String str42 = fastDateFormat39.format((long) '#');
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition(53);
        java.lang.Object obj46 = fastDateFormat39.parseObject("", parsePosition45);
        int int47 = parsePosition45.getErrorIndex();
        java.lang.Object obj48 = fastDateFormat35.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition45);
        java.util.TimeZone timeZone49 = fastDateFormat35.getTimeZone();
        java.lang.String str50 = timeZone49.getID();
        int int51 = timeZone49.getRawOffset();
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category52, locale54);
        java.util.Calendar.Builder builder56 = new java.util.Calendar.Builder();
        java.util.Date date57 = new java.util.Date();
        int int58 = date57.getSeconds();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getTimezoneOffset();
        date59.setMinutes(6);
        boolean boolean63 = date57.after(date59);
        java.util.Calendar.Builder builder64 = builder56.setInstant(date59);
        java.util.Calendar.Builder builder66 = builder64.setInstant((long) 36);
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder68 = builder66.setLocale(locale67);
        java.lang.String str69 = locale67.toLanguageTag();
        java.lang.String str70 = locale67.getScript();
        java.lang.String str71 = locale67.getISO3Language();
        java.lang.String str72 = locale67.getLanguage();
        java.util.Locale.setDefault(category52, locale67);
        java.util.Locale locale74 = java.util.Locale.getDefault(category52);
        java.util.Locale locale75 = java.util.Locale.getDefault(category52);
        java.util.Locale locale78 = new java.util.Locale("7:08:00 AM GMT+00:00", "java.util.GregorianCalendar[time=1645513662536,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=42,MILLISECOND=536,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale.setDefault(category52, locale78);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder81 = builder80.clear();
        java.util.Locale.Builder builder82 = builder80.clear();
        java.util.Locale.Builder builder83 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder84 = builder83.clear();
        java.util.Locale locale85 = builder84.build();
        java.util.Locale.Builder builder86 = builder80.setLocale(locale85);
        java.util.Locale locale87 = java.util.Locale.SIMPLIFIED_CHINESE;
        boolean boolean88 = locale87.hasExtensions();
        java.lang.String str89 = locale87.toLanguageTag();
        java.lang.String str90 = locale87.getISO3Language();
        java.util.Set<java.lang.String> strSet91 = locale87.getUnicodeLocaleKeys();
        java.lang.String str92 = locale85.getDisplayScript(locale87);
        java.util.Locale.setDefault(category52, locale85);
        java.util.Calendar calendar94 = java.util.Calendar.getInstance(timeZone49, locale85);
        java.lang.String str95 = locale20.getDisplayLanguage(locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar94", (calendar9.compareTo(calendar94) == 0) == calendar9.equals(calendar94));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.clear(7);
        calendar9.set(0, 0, (int) (short) 0, 122, 2, 5);
        calendar9.setMinimalDaysInFirstWeek(38);
        calendar9.setFirstDayOfWeek(25);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        timeZone34.setRawOffset((int) (byte) 1);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone34, locale39);
        java.util.Locale locale41 = java.util.Locale.US;
        java.lang.String str42 = locale41.getISO3Country();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone34, locale41);
        int int44 = calendar43.getFirstDayOfWeek();
        java.util.Date date48 = new java.util.Date(2022, 7, (-1));
        date48.setTime((-58914147028618L));
        calendar43.setTime(date48);
        calendar9.setTime(date48);
        int int53 = date48.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar43", (calendar9.compareTo(calendar43) == 0) == calendar9.equals(calendar43));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar5 = builder0.build();
        java.util.Calendar.Builder builder9 = builder0.setDate(40, 100, 103);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        int int17 = timeZone13.getOffset(1645513656868L);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone19.hasSameRules(timeZone21);
        boolean boolean23 = timeZone13.hasSameRules(timeZone19);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        boolean boolean29 = timeZone19.hasSameRules(timeZone27);
        java.util.Calendar.Builder builder30 = builder9.setTimeZone(timeZone19);
        java.util.Calendar.Builder builder32 = builder30.setLenient(false);
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        java.util.Locale locale42 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str43 = locale42.getDisplayScript();
        java.lang.String str44 = locale33.getDisplayName(locale42);
        java.lang.String str45 = locale42.getDisplayScript();
        java.lang.String str46 = locale42.getISO3Language();
        java.util.Locale.setDefault(locale42);
        java.util.Calendar.Builder builder48 = builder30.setLocale(locale42);
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone50);
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getSeconds();
        java.lang.StringBuffer stringBuffer54 = null;
        java.lang.StringBuffer stringBuffer55 = fastDateFormat51.format(date52, stringBuffer54);
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getTimezoneOffset();
        java.util.Date date58 = new java.util.Date();
        java.lang.String str59 = date58.toGMTString();
        boolean boolean60 = date56.before(date58);
        long long61 = date58.getTime();
        java.lang.String str62 = date58.toGMTString();
        int int63 = date58.getDay();
        date58.setDate(10);
        long long66 = date58.getTime();
        java.lang.String str67 = fastDateFormat51.format(date58);
        java.util.TimeZone timeZone68 = fastDateFormat51.getTimeZone();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        int int74 = timeZone70.getOffset(1645513657024L);
        timeZone70.setID("fra");
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone70.hasSameRules(timeZone77);
        timeZone77.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone77);
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        java.lang.String str83 = locale82.getLanguage();
        boolean boolean84 = locale82.hasExtensions();
        java.lang.String str85 = locale82.getDisplayCountry();
        java.lang.String str86 = locale82.getDisplayLanguage();
        java.lang.String str87 = locale82.getDisplayLanguage();
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(timeZone77, locale82);
        java.util.Locale.setDefault(locale82);
        boolean boolean90 = fastDateFormat51.equals((java.lang.Object) locale82);
        java.util.Calendar.Builder builder91 = builder48.setLocale(locale82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar88", (calendar15.compareTo(calendar88) == 0) == calendar15.equals(calendar88));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset(21);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category7, locale9);
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getSeconds();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getTimezoneOffset();
        date14.setMinutes(6);
        boolean boolean18 = date12.after(date14);
        java.util.Calendar.Builder builder19 = builder11.setInstant(date14);
        java.util.Calendar.Builder builder21 = builder19.setInstant((long) 36);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder23 = builder21.setLocale(locale22);
        java.lang.String str24 = locale22.toLanguageTag();
        java.lang.String str25 = locale22.getScript();
        java.lang.String str26 = locale22.getISO3Language();
        java.lang.String str27 = locale22.getLanguage();
        java.util.Locale.setDefault(category7, locale22);
        java.util.Locale locale29 = java.util.Locale.getDefault(category7);
        java.util.Locale locale30 = java.util.Locale.getDefault(category7);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        calendar47.set(16, (int) (byte) 0);
        java.time.Instant instant53 = calendar47.toInstant();
        boolean boolean55 = calendar47.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str56 = fastDateFormat40.format(calendar47);
        java.lang.Object obj57 = fastDateFormat40.clone();
        java.util.Locale locale58 = fastDateFormat40.getLocale();
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = locale58.getDisplayName();
        java.lang.String str61 = locale31.getDisplayCountry(locale58);
        java.lang.String str62 = locale30.getDisplayName(locale58);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone2, locale30);
        java.text.FieldPosition fieldPosition65 = new java.text.FieldPosition(7);
        fieldPosition65.setEndIndex(8);
        int int68 = fieldPosition65.getEndIndex();
        int int69 = fieldPosition65.getField();
        java.text.AttributedCharacterIterator.Attribute attribute70 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = attribute70.equals((java.lang.Object) timeZone71);
        boolean boolean73 = fieldPosition65.equals((java.lang.Object) timeZone71);
        timeZone71.setRawOffset(7);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone71);
        int int77 = timeZone71.getRawOffset();
        boolean boolean78 = timeZone2.hasSameRules(timeZone71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar63", (calendar47.compareTo(calendar63) == 0) == calendar47.equals(calendar63));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.Locale locale21 = fastDateFormat2.getLocale();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        java.util.Date date24 = new java.util.Date();
        java.lang.String str25 = date24.toGMTString();
        boolean boolean26 = date22.before(date24);
        java.lang.String str27 = date24.toLocaleString();
        int int28 = date24.getTimezoneOffset();
        date24.setDate(292278994);
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDateFormat2.format(date24, stringBuffer31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        calendar39.clear(7);
        calendar39.set(16, (int) (byte) 0);
        int int45 = calendar39.getWeeksInWeekYear();
        calendar39.setFirstDayOfWeek(14);
        calendar39.setFirstDayOfWeek(50);
        java.util.TimeZone timeZone50 = calendar39.getTimeZone();
        java.text.AttributedCharacterIterator attributedCharacterIterator51 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar39);
        boolean boolean52 = fastDateFormat2.getTimeZoneOverridesCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar39", (calendar9.compareTo(calendar39) == 0) == calendar9.equals(calendar39));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.util.Locale locale13 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone9);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getDisplayVariant();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        calendar34.clear(7);
        calendar34.set(16, (int) (byte) 0);
        java.time.Instant instant40 = calendar34.toInstant();
        boolean boolean42 = calendar34.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str43 = fastDateFormat27.format(calendar34);
        java.lang.Object obj44 = fastDateFormat27.clone();
        java.util.Locale locale45 = fastDateFormat27.getLocale();
        java.lang.String str46 = locale45.getLanguage();
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.lang.String str53 = locale49.getDisplayLanguage();
        java.lang.String str54 = locale49.getDisplayLanguage();
        java.lang.String str55 = locale45.getDisplayLanguage(locale49);
        java.lang.String str56 = locale21.getDisplayCountry(locale49);
        java.lang.String str57 = locale21.getDisplayName();
        java.util.Set<java.lang.String> strSet58 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale61 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str62 = locale21.getDisplayCountry(locale61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone9, locale21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:09:08", timeZone9);
        timeZone9.setID("Greenwich Mean Time");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar22", (calendar8.compareTo(calendar22) == 0) == calendar8.equals(calendar22));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        boolean boolean7 = locale5.hasExtensions();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale5);
        java.util.Date date9 = calendar8.getTime();
        calendar8.setFirstDayOfWeek((int) 'u');
        java.lang.String str12 = calendar8.getCalendarType();
        java.lang.String str13 = calendar8.getCalendarType();
        java.time.Instant instant14 = calendar8.toInstant();
        java.util.Date date15 = java.util.Date.from(instant14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar8", (calendar6.compareTo(calendar8) == 0) == calendar6.equals(calendar8));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Date date27 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date27.setMonth(4);
        java.util.Calendar.Builder builder30 = builder12.setInstant(date27);
        java.util.Calendar.Builder builder32 = builder30.setInstant(1645513678843L);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone35);
        java.util.Calendar.Builder builder38 = builder30.setTimeZone(timeZone35);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone42);
        java.util.TimeZone timeZone45 = calendar44.getTimeZone();
        timeZone45.setID("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone.setDefault(timeZone45);
        int int50 = timeZone45.getOffset(1645513783114L);
        boolean boolean51 = timeZone35.hasSameRules(timeZone45);
        java.util.Locale locale54 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale58 = new java.util.Locale("", "hi!", "");
        java.lang.String str59 = locale54.getDisplayCountry(locale58);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale54);
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder61.clear();
        java.util.Locale.Builder builder63 = builder61.clear();
        java.util.Locale locale64 = builder61.build();
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale54.getDisplayName(locale64);
        java.lang.String str67 = locale64.getISO3Country();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        boolean boolean71 = locale69.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale69);
        java.lang.String str73 = locale64.getDisplayVariant(locale69);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone35, locale69);
        int int76 = timeZone35.getOffset(1645513812510L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar44 and calendar74", (calendar44.compareTo(calendar74) == 0) == calendar44.equals(calendar74));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.toString();
        java.lang.Object obj6 = fastDateFormat2.clone();
        java.util.Locale locale7 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone11);
        int int15 = timeZone11.getOffset(1645513656868L);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        boolean boolean21 = timeZone11.hasSameRules(timeZone17);
        java.lang.String str22 = timeZone11.getID();
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.lang.String str25 = locale24.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale24);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone11, locale24);
        calendar27.setMinimalDaysInFirstWeek(44);
        boolean boolean30 = calendar27.isWeekDateSupported();
        java.text.AttributedCharacterIterator attributedCharacterIterator31 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar27);
        java.lang.String str33 = fastDateFormat2.format((-1999727402000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar27", (calendar13.compareTo(calendar27) == 0) == calendar13.equals(calendar27));
    }
}


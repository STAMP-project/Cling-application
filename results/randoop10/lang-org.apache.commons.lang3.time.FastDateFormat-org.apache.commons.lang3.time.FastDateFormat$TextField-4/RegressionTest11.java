import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest11 {

    public static boolean debug = false;

    @Test
    public void test05501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05501");
        java.text.AttributedCharacterIterator.Attribute attribute1 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = attribute1.equals((java.lang.Object) timeZone2);
        java.lang.String str4 = attribute1.toString();
        java.lang.String str5 = attribute1.toString();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        int int10 = timeZone6.getOffset(1645513657024L);
        timeZone6.setID("fra");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone6.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone6, locale15);
        boolean boolean20 = attribute1.equals((java.lang.Object) calendar19);
        java.util.Date date21 = calendar19.getTime();
        java.text.AttributedCharacterIterator.Attribute attribute22 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = attribute22.equals((java.lang.Object) timeZone23);
        java.lang.String str25 = timeZone23.getID();
        calendar19.setTimeZone(timeZone23);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        java.time.Instant instant43 = calendar37.toInstant();
        boolean boolean45 = calendar37.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str46 = fastDateFormat30.format(calendar37);
        java.lang.Object obj47 = fastDateFormat30.clone();
        java.util.Locale locale48 = fastDateFormat30.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:11:44 AM GMT", timeZone23, locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str4, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str5, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645513924888,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=4,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:12:04 GMT 2022");
        org.junit.Assert.assertNotNull(attribute22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "GMT" + "'", str25, "GMT");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513924888,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=4,MILLISECOND=888,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "chinese (china)_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat49);
    }

    @Test
    public void test05502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05502");
        java.util.Date date3 = new java.util.Date((int) (short) 100, 61, (int) 'x');
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue May 31 00:00:00 GMT 2005");
    }

    @Test
    public void test05503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05503");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale8.getDisplayCountry(locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale8);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale15.getDisplayName(locale22);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale22.getDisplayName(locale25);
        java.lang.String str28 = locale22.getISO3Language();
        boolean boolean29 = fastDateFormat14.equals((java.lang.Object) locale22);
        java.util.Locale locale30 = locale22.stripExtensions();
        java.util.Locale.Builder builder31 = builder3.setLocale(locale30);
        java.util.Locale.Builder builder32 = builder31.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder32.addUnicodeLocaleAttribute("FastDateFormat[M/d/yy h:mm a]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: FastDateFormat[M/d/yy h:mm a] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513924945,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=4,MILLISECOND=945,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str27, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test05504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05504");
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category1, locale3);
        java.lang.String str5 = locale3.getVariant();
        boolean boolean6 = locale3.hasExtensions();
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = locale3.getDisplayCountry(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(56, locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 56");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test05505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05505");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.lang.String str24 = locale20.getLanguage();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        calendar36.clear(7);
        calendar36.set(16, (int) (byte) 0);
        java.time.Instant instant42 = calendar36.toInstant();
        boolean boolean44 = calendar36.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str45 = fastDateFormat29.format(calendar36);
        java.lang.Object obj46 = fastDateFormat29.clone();
        java.util.Locale locale47 = fastDateFormat29.getLocale();
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale locale49 = null;
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        boolean boolean53 = locale51.hasExtensions();
        java.lang.String str54 = locale51.getDisplayCountry();
        java.lang.String str55 = locale51.getDisplayLanguage();
        java.lang.String str56 = locale51.getDisplayLanguage();
        java.lang.String str57 = locale47.getDisplayLanguage(locale51);
        java.util.Locale locale58 = java.util.Locale.ITALY;
        java.lang.String str59 = locale58.getVariant();
        java.lang.String str60 = locale47.getDisplayLanguage(locale58);
        java.util.Locale locale61 = java.util.Locale.CHINA;
        java.util.Locale locale65 = new java.util.Locale("", "hi!", "");
        java.lang.String str66 = locale61.getDisplayVariant(locale65);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale61);
        java.lang.String str68 = locale61.getDisplayVariant();
        java.lang.String str69 = locale61.getDisplayVariant();
        java.lang.String str70 = locale47.getDisplayScript(locale61);
        java.util.Locale.setDefault(category25, locale61);
        java.lang.String str72 = locale20.getDisplayLanguage(locale61);
        java.lang.String str73 = locale61.getDisplayVariant();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513925013,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=13,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "chinese (china)_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "chinese (china)" + "'", str21, "chinese (china)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "chinese (china)" + "'", str24, "chinese (china)");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645513925013,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=13,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "chinese (china)_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "chinese (china)" + "'", str48, "chinese (china)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh" + "'", str52, "zh");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese" + "'", str55, "Chinese");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese" + "'", str56, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "chinese (china)" + "'", str57, "chinese (china)");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "chinese (china)" + "'", str60, "chinese (china)");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale65.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645513925014,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=14,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "chinese (china)" + "'", str72, "chinese (china)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test05506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05506");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str2 = fastDateFormat0.format((long) ' ');
        java.lang.String str4 = fastDateFormat0.format((java.lang.Object) 1645513657024L);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8, locale10);
        calendar11.clear(7);
        calendar11.set(16, (int) (byte) 0);
        java.time.Instant instant17 = calendar11.toInstant();
        java.util.TimeZone timeZone18 = calendar11.getTimeZone();
        java.util.TimeZone timeZone19 = calendar11.getTimeZone();
        calendar11.setMinimalDaysInFirstWeek((int) (short) 1);
        calendar11.setMinimalDaysInFirstWeek(47);
        java.lang.String str24 = fastDateFormat0.format(calendar11);
        calendar11.set(16, 117);
        org.junit.Assert.assertNotNull(fastDateFormat0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "1/1/70 12:00 AM" + "'", str2, "1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2/22/22 7:07 AM" + "'", str4, "2/22/22 7:07 AM");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=47,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=117]");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2/22/22 7:12 AM" + "'", str24, "2/22/22 7:12 AM");
    }

    @Test
    public void test05507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05507");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Locale locale19 = new java.util.Locale("", "hi!", "");
        java.lang.String str20 = locale15.getDisplayVariant(locale19);
        java.lang.String str21 = locale15.getISO3Language();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        calendar31.clear(7);
        calendar31.set(16, (int) (byte) 0);
        java.time.Instant instant37 = calendar31.toInstant();
        boolean boolean39 = calendar31.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str40 = fastDateFormat24.format(calendar31);
        java.lang.Object obj41 = fastDateFormat24.clone();
        java.util.Locale locale42 = fastDateFormat24.getLocale();
        java.lang.String str43 = locale42.getLanguage();
        java.lang.String str44 = locale42.getDisplayName();
        java.lang.String str45 = locale15.getDisplayCountry(locale42);
        java.util.Calendar.Builder builder46 = builder14.setLocale(locale42);
        java.lang.String str47 = locale42.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = locale42.getISO3Language();
// flaky:             org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for chinese (china)");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:05 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale19.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zho" + "'", str21, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645513925069,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=69,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "chinese (china)_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "chinese (china)" + "'", str43, "chinese (china)");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "chinese (china) (JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0])" + "'", str44, "chinese (china) (JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0])");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "China" + "'", str45, "China");
        org.junit.Assert.assertNotNull(builder46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str47, "JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05508");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.setLanguageTag("CHN");
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.lang.String str15 = locale10.getDisplayVariant(locale14);
        java.lang.String str16 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale10);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale10);
        java.util.Set<java.lang.String> strSet19 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale10.getLanguage();
        java.util.Locale.Builder builder21 = builder0.setLocale(locale10);
        java.util.Locale.Builder builder22 = builder0.clear();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Set<java.lang.String> strSet26 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.parallelStream();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet26);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor29 = languageRangeList24.listIterator();
        boolean boolean30 = languageRangeList24.isEmpty();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.lang.String str40 = locale31.getDisplayName(locale38);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.Locale locale48 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale48.getScript();
        java.util.Locale locale54 = new java.util.Locale("", "hi!", "");
        java.lang.String str55 = locale48.getDisplayVariant(locale54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone43, locale54);
        java.lang.String str57 = locale54.getDisplayCountry();
        java.lang.String str58 = locale54.getVariant();
        java.lang.String str59 = locale38.getDisplayCountry(locale54);
        java.lang.String str60 = locale54.getScript();
        java.util.Locale locale61 = locale54.stripExtensions();
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = locale62.getLanguage();
        boolean boolean64 = locale62.hasExtensions();
        java.lang.String str65 = locale62.getDisplayCountry();
        java.lang.String str66 = locale62.getDisplayLanguage();
        java.lang.String str67 = locale62.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet68 = locale62.getExtensionKeys();
        java.lang.String str69 = locale61.getDisplayName(locale62);
        int int70 = languageRangeList24.indexOf((java.lang.Object) locale62);
        java.util.Locale.Builder builder71 = builder22.setLocale(locale62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder73 = builder71.addUnicodeLocaleAttribute("Feb 22, 2022 7:06:46 AM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Feb 22, 2022 7:06:46 AM [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645513925092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=92,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeItor29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645513925093,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=93,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals(locale48.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals(locale54.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "HI!" + "'", str57, "HI!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "China" + "'", str59, "China");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh" + "'", str63, "zh");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e2d\u6587" + "'", str66, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u4e2d\u6587" + "'", str67, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "HI!" + "'", str69, "HI!");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test05509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05509");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.Locale locale21 = fastDateFormat2.getLocale();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        java.util.Date date24 = new java.util.Date();
        java.lang.String str25 = date24.toGMTString();
        boolean boolean26 = date22.before(date24);
        java.lang.String str27 = date24.toLocaleString();
        int int28 = date24.getTimezoneOffset();
        date24.setDate(292278994);
        java.lang.StringBuffer stringBuffer31 = null;
        java.lang.StringBuffer stringBuffer32 = fastDateFormat2.format(date24, stringBuffer31);
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getTimezoneOffset();
        java.util.Date date35 = new java.util.Date();
        java.lang.String str36 = date35.toGMTString();
        boolean boolean37 = date33.before(date35);
        long long38 = date35.getTime();
        java.lang.String str39 = date35.toGMTString();
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getTimezoneOffset();
        int int42 = date40.getSeconds();
        java.time.Instant instant43 = date40.toInstant();
        int int44 = date40.getDate();
        boolean boolean45 = date35.before(date40);
        java.lang.StringBuffer stringBuffer46 = null;
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition((int) (byte) 0);
        int int49 = fieldPosition48.getEndIndex();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        boolean boolean52 = locale50.hasExtensions();
        java.lang.String str53 = locale50.getDisplayCountry();
        boolean boolean54 = fieldPosition48.equals((java.lang.Object) locale50);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone56.hasSameRules(timeZone58);
        java.util.Locale locale60 = java.util.Locale.CHINA;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone58, locale60);
        calendar61.clear(7);
        boolean boolean64 = calendar61.isWeekDateSupported();
        int int65 = calendar61.getMinimalDaysInFirstWeek();
        int int67 = calendar61.getActualMaximum((int) (byte) 1);
        boolean boolean68 = fieldPosition48.equals((java.lang.Object) (byte) 1);
        java.lang.StringBuffer stringBuffer69 = fastDateFormat2.format((java.lang.Object) date35, stringBuffer46, fieldPosition48);
        int int70 = fieldPosition48.getBeginIndex();
        int int71 = fieldPosition48.getField();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513925132,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=132,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[]" + "'", str20, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "_1/1/70 12:00 AM");
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 07:12:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Mon Oct 16 07:12:05 GMT 802254");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "22 Feb 2022 07:12:05 GMT" + "'", str25, "22 Feb 2022 07:12:05 GMT");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Feb 22, 2022 7:12:05 AM" + "'", str27, "Feb 22, 2022 7:12:05 AM");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(stringBuffer32);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:12:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Feb 22 07:12:05 GMT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "22 Feb 2022 07:12:05 GMT" + "'", str36, "22 Feb 2022 07:12:05 GMT");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645513925132L + "'", long38 == 1645513925132L);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22 Feb 2022 07:12:05 GMT" + "'", str39, "22 Feb 2022 07:12:05 GMT");
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Feb 22 07:12:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh" + "'", str51, "zh");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=132,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278994 + "'", int67 == 292278994);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(stringBuffer69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test05510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05510");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-2-22 7:07:59");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.toString();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        calendar16.set(16, (int) (byte) 0);
        int int22 = calendar16.getFirstDayOfWeek();
        java.lang.String str23 = fastDateFormat9.format(calendar16);
        calendar16.set((int) (short) 100, 37, 2);
        java.lang.String str28 = fastDateFormat5.format(calendar16);
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        date29.setMinutes(6);
        int int33 = date29.getMinutes();
        java.util.Date date40 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean41 = date29.before(date40);
        java.util.Date date47 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean48 = date29.before(date47);
        boolean boolean49 = calendar16.after((java.lang.Object) date47);
        java.util.TimeZone timeZone50 = calendar16.getTimeZone();
        int int51 = timeZone50.getRawOffset();
        java.util.Calendar.Builder builder52 = new java.util.Calendar.Builder();
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getSeconds();
        java.util.Date date55 = new java.util.Date();
        int int56 = date55.getTimezoneOffset();
        date55.setMinutes(6);
        boolean boolean59 = date53.after(date55);
        java.util.Calendar.Builder builder60 = builder52.setInstant(date55);
        java.util.Calendar.Builder builder62 = builder60.setInstant((long) 36);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder64 = builder62.setLocale(locale63);
        java.lang.String str65 = locale63.getVariant();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone50, locale63);
        calendar2.setTimeZone(timeZone50);
        calendar2.roll((int) (short) 0, 292269054);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=183,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str6, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-58914146874817,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=183,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7:12:05 AM GMT" + "'", str23, "7:12:05 AM GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:05 AM GMT" + "'", str28, "7:12:05 AM GMT");
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Feb 22 07:06:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Mar 31 15:13:15 GMT 1903");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Thu Feb 10 00:12:00 GMT 1910");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Feb 22 07:12:05 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Feb 22 07:06:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1645513925183,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=183,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05511");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar10.clear(7);
        calendar10.set(16, (int) (byte) 0);
        int int16 = calendar10.getFirstDayOfWeek();
        java.lang.String str17 = fastDateFormat3.format(calendar10);
        java.util.TimeZone timeZone18 = calendar10.getTimeZone();
        timeZone18.setRawOffset((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Wed Dec 31 01:40:00 GMT+00:00 1969", timeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513925251,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=120,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=251,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "7:12:05 AM GMT" + "'", str17, "7:12:05 AM GMT");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test05512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05512");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Set<java.lang.String> strSet25 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet25.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet25.parallelStream();
        boolean boolean28 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray29 = languageRangeList13.toArray();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale37, locale38, locale39, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale49, locale50, locale51, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale locale57 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList55);
        int int58 = languageRangeList35.lastIndexOf((java.lang.Object) languageRangeList47);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale62, locale63, locale64, locale65, locale66 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale locale70 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor72 = languageRangeList60.listIterator(0);
        boolean boolean73 = languageRangeList60.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray74 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList75 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList75, languageRangeArray74);
        java.util.Set<java.lang.String> strSet77 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream78 = strSet77.parallelStream();
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList75, (java.util.Collection<java.lang.String>) strSet77);
        boolean boolean80 = languageRangeList60.retainAll((java.util.Collection<java.lang.String>) strList79);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.lang.String>) strList79);
        java.lang.String str82 = java.util.Locale.lookupTag(languageRangeList31, (java.util.Collection<java.lang.String>) strList81);
        java.util.Collection<java.util.Locale> localeCollection83 = null;
        java.util.Locale locale84 = java.util.Locale.lookup(languageRangeList31, localeCollection83);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor85 = languageRangeList31.listIterator();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor86 = languageRangeList31.listIterator();
        java.lang.Object obj87 = null;
        boolean boolean88 = languageRangeList31.equals(obj87);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertNotNull(languageRangeItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(languageRangeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(locale84);
        org.junit.Assert.assertNotNull(languageRangeItor85);
        org.junit.Assert.assertNotNull(languageRangeItor86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test05513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05513");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("7:10:01 AM GMT+00:00");
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getTimezoneOffset();
        date7.setMinutes(6);
        boolean boolean11 = date5.after(date7);
        java.util.Calendar.Builder builder12 = builder4.setInstant(date7);
        java.util.Calendar.Builder builder14 = builder12.setInstant((long) 36);
        java.util.Calendar.Builder builder16 = builder14.setLenient(true);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.lang.String str19 = locale18.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale18);
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale18.getDisplayName(locale21);
        java.lang.String str23 = locale18.getDisplayCountry();
        java.lang.String str24 = locale18.getDisplayScript();
        java.util.Calendar.Builder builder25 = builder14.setLocale(locale18);
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale18.getDisplayVariant(locale26);
        java.lang.String str28 = locale18.getISO3Country();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:08:12", timeZone3, locale18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, timeZone3);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Ora media di Greenwich");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:12:05 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:06:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "fra" + "'", str19, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str22, "\u6cd5\u6587\u6cd5\u570b)");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Francia" + "'", str23, "Francia");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FRA" + "'", str28, "FRA");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(fastDateFormat30);
    }

    @Test
    public void test05514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05514");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 9);
        java.lang.String str3 = fieldPosition2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=9,attribute=null,beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=9,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test05515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05515");
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayCountry(locale7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale3);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.lang.String str19 = locale10.getDisplayName(locale17);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleKeys();
        java.lang.String str22 = locale17.getDisplayName(locale20);
        java.lang.String str23 = locale17.getISO3Language();
        boolean boolean24 = fastDateFormat9.equals((java.lang.Object) locale17);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale29 = new java.util.Locale("", "hi!", "");
        java.lang.String str30 = locale25.getDisplayCountry(locale29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        java.lang.String str37 = locale31.getISO3Language();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        calendar47.set(16, (int) (byte) 0);
        java.time.Instant instant53 = calendar47.toInstant();
        boolean boolean55 = calendar47.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str56 = fastDateFormat40.format(calendar47);
        java.lang.Object obj57 = fastDateFormat40.clone();
        java.util.Locale locale58 = fastDateFormat40.getLocale();
        java.lang.String str59 = locale58.getLanguage();
        java.lang.String str60 = locale58.getDisplayName();
        java.lang.String str61 = locale31.getDisplayCountry(locale58);
        java.lang.String str62 = locale29.getDisplayCountry(locale31);
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder63.clear();
        java.util.Locale.Builder builder65 = builder63.clear();
        java.util.Locale locale66 = builder63.build();
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = locale29.getDisplayScript(locale66);
        java.lang.String str69 = locale17.getDisplayName(locale29);
        java.lang.String str70 = locale17.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(40, locale17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 40");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "China" + "'", str8, "China");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645513925411,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=411,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u6587" + "'", str19, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str22, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale29.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zho" + "'", str37, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645513925411,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=411,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "it" + "'", str59, "it");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "italiano (Italia)" + "'", str60, "italiano (Italia)");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Cina" + "'", str61, "Cina");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "HI!" + "'", str62, "HI!");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Chinese (China)" + "'", str69, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test05516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05516");
        java.util.Date date6 = new java.util.Date(0, 10, (int) (byte) 1, 2022, 22, 9);
        int int7 = date6.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 24 06:22:09 GMT 1901");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test05517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05517");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        calendar6.clear();
        java.util.Date date19 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        calendar6.setTime(date19);
        int int22 = calendar6.getMaximum(16);
        java.util.Date date23 = calendar6.getTime();
        java.time.Instant instant24 = calendar6.toInstant();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1889999280000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1910,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=12,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Thu Feb 10 00:12:00 GMT 1910");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7200000 + "'", int22 == 7200000);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Feb 10 00:12:00 GMT 1910");
        org.junit.Assert.assertNotNull(instant24);
    }

    @Test
    public void test05518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05518");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone4, locale9);
        int int12 = timeZone4.getOffset(1645513689942L);
        boolean boolean13 = timeZone4.observesDaylightTime();
        java.util.Locale locale17 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str18 = locale17.getDisplayScript();
        boolean boolean19 = locale17.hasExtensions();
        java.util.Locale locale20 = locale17.stripExtensions();
        java.lang.String str21 = locale17.getCountry();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone4, locale17);
        java.lang.String str23 = locale17.getDisplayName();
        java.lang.String str24 = locale17.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = locale17.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FASTDATEFORMAT[]" + "'", str21, "FASTDATEFORMAT[]");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513925555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=556,ZONE_OFFSET=1,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u5e74\u6708\u65e5\u4e0a\u53487:07)" + "'", str23, "\u5e74\u6708\u65e5\u4e0a\u53487:07)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test05519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05519");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("MMMM d, yyyy");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test05520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05520");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone1, locale10);
        boolean boolean15 = fastDateFormat0.equals((java.lang.Object) locale10);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition(1970);
        java.lang.Object obj19 = fastDateFormat0.parseObject("Italia", parsePosition18);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition((int) '4');
        parsePosition22.setErrorIndex(0);
        int int25 = parsePosition22.getIndex();
        java.lang.String str26 = parsePosition22.toString();
        int int27 = parsePosition22.getErrorIndex();
        java.lang.Object obj28 = fastDateFormat0.parseObject("7:08:14 AM GMT+00:00", parsePosition22);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.lang.String str30 = locale29.getISO3Language();
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream32 = strSet31.stream();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet31.stream();
        java.lang.StringBuffer stringBuffer34 = null;
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition(7);
        fieldPosition36.setEndIndex(8);
        int int39 = fieldPosition36.getEndIndex();
        fieldPosition36.setEndIndex(12);
        fieldPosition36.setEndIndex(5);
        int int44 = fieldPosition36.getBeginIndex();
        int int45 = fieldPosition36.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer46 = fastDateFormat0.format((java.lang.Object) strStream33, stringBuffer34, fieldPosition36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.stream.ReferencePipeline$Head");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645513925629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=629,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=52,errorIndex=0]" + "'", str26, "java.text.ParsePosition[index=52,errorIndex=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fra" + "'", str30, "fra");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test05521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05521");
        java.util.Date date1 = new java.util.Date("22 Feb 2022 07:09:57 GMT");
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:09:57 GMT 2022");
    }

    @Test
    public void test05522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05522");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:09:28 AM GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05523");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        timeZone4.setRawOffset((int) (byte) 1);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone4, locale9);
        int int12 = timeZone4.getOffset(1645513794225L);
        int int13 = timeZone4.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05524");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        java.time.Instant instant19 = calendar13.toInstant();
        int int20 = calendar13.getMinimalDaysInFirstWeek();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        calendar13.add((int) (short) 0, 100);
        calendar13.setMinimalDaysInFirstWeek(38);
        long long27 = calendar13.getTimeInMillis();
        java.lang.String str28 = fastDateFormat4.format(calendar13);
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getSeconds();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        date32.setMinutes(6);
        boolean boolean36 = date30.after(date32);
        java.util.Calendar.Builder builder37 = builder29.setInstant(date32);
        java.util.Calendar.Builder builder39 = builder37.setInstant((long) 36);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder41 = builder39.setLocale(locale40);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.util.Calendar.Builder builder47 = builder39.setTimeZone(timeZone44);
        calendar13.setTimeZone(timeZone44);
        boolean boolean49 = calendar13.isWeekDateSupported();
        long long50 = calendar13.getTimeInMillis();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition((int) (byte) 10);
        int int53 = parsePosition52.getIndex();
        boolean boolean54 = calendar13.equals((java.lang.Object) int53);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 17 + "'", int5 == 17);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "h:mm:ss a z" + "'", str6, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513925817,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=38,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=817,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645513925817L + "'", long27 == 1645513925817L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:05 AM GMT" + "'", str28, "7:12:05 AM GMT");
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Feb 22 07:12:05 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:06:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645513925817L + "'", long50 == 1645513925817L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05525");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale8.getDisplayCountry(locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale8);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale15.getDisplayName(locale22);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale22.getDisplayName(locale25);
        java.lang.String str28 = locale22.getISO3Language();
        boolean boolean29 = fastDateFormat14.equals((java.lang.Object) locale22);
        java.util.Locale locale30 = locale22.stripExtensions();
        java.util.Locale.Builder builder31 = builder3.setLocale(locale30);
        java.util.Locale.Builder builder32 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder3.setLanguageTag("22 f\351vr. 2022 07:11:52");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 22 fe?vr. 2022 07:11:52 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513925847,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=847,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str27, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test05526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05526");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Locale locale26 = fastDateFormat2.getLocale();
        boolean boolean27 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str28 = fastDateFormat2.getPattern();
        java.lang.String str29 = fastDateFormat2.getPattern();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        java.util.Date date32 = new java.util.Date();
        java.lang.String str33 = date32.toGMTString();
        boolean boolean34 = date30.before(date32);
        java.lang.String str35 = date32.toLocaleString();
        date32.setMonth(0);
        date32.setTime((long) 10);
        java.lang.String str40 = fastDateFormat2.format(date32);
        java.lang.String str42 = fastDateFormat2.format(1645513712372L);
        java.util.TimeZone timeZone43 = fastDateFormat2.getTimeZone();
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition(16);
        int int47 = parsePosition46.getErrorIndex();
        java.lang.String str48 = parsePosition46.toString();
        java.lang.Object obj49 = null;
        boolean boolean50 = parsePosition46.equals(obj49);
        int int51 = parsePosition46.getIndex();
        boolean boolean53 = parsePosition46.equals((java.lang.Object) 1645513657332L);
        java.lang.String str54 = parsePosition46.toString();
        int int55 = parsePosition46.getErrorIndex();
        java.lang.String str56 = parsePosition46.toString();
        parsePosition46.setErrorIndex(59);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone60);
        java.lang.String str62 = fastDateFormat61.getPattern();
        boolean boolean63 = parsePosition46.equals((java.lang.Object) str62);
        java.lang.Object obj64 = fastDateFormat2.parseObject("31 Dec 1969 00:00:00 GMT", parsePosition46);
        parsePosition46.setIndex(20);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146874132,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=868,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:05 AM GMT" + "'", str20, "7:12:05 AM GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:05 AM GMT" + "'", str25, "7:12:05 AM GMT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "h:mm:ss a z" + "'", str28, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "h:mm:ss a z" + "'", str29, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Feb 22 07:12:05 GMT 2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 GMT 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22 Feb 2022 07:12:05 GMT" + "'", str33, "22 Feb 2022 07:12:05 GMT");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22 f\351vr. 2022 07:12:05" + "'", str35, "22 f\351vr. 2022 07:12:05");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str40, "12:00:00 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "7:08:32 AM GMT+00:00" + "'", str42, "7:08:32 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str48, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str54, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str56, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "h:mm:ss a z" + "'", str62, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test05527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05527");
        java.util.Locale locale1 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Feb 22, 2022 7:06:39 AM");
        java.lang.String str7 = locale1.getDisplayCountry(locale6);
        java.util.Locale locale11 = new java.util.Locale("gregory", "7:07:38 AM UTC", "7:07:41 AM UTC");
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale1.getDisplayVariant(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale11.getUnicodeLocaleType("7:09:47 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 7:09:47 AM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale11.toString(), "gregory_7:07:38 AM UTC_7:07:41 AM UTC");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test05528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05528");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.FilteringMode filteringMode3 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        boolean boolean4 = languageRangeList1.equals((java.lang.Object) filteringMode3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap6);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor8 = languageRangeList7.listIterator();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor9 = languageRangeList7.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange11 = languageRangeList7.get(51);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 51, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + filteringMode3 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode3.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeItor8);
        org.junit.Assert.assertNotNull(languageRangeItor9);
    }

    @Test
    public void test05529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05529");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:10:55 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05530");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.lang.String str2 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test05531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05531");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        int int21 = calendar9.getWeekYear();
        calendar9.setFirstDayOfWeek((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = calendar9.getActualMinimum(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-58914146874026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=5,MILLISECOND=974,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:05 AM GMT" + "'", str16, "7:12:05 AM GMT");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 103 + "'", int21 == 103);
    }

    @Test
    public void test05532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05532");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        calendar7.set((-1), (int) (byte) 0, 12, 12, 43, 1);
        int int15 = calendar7.getMinimalDaysInFirstWeek();
        calendar7.setMinimalDaysInFirstWeek((-1899));
        int int18 = calendar7.getWeekYear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str5, "\u6cd5\u6587\u6cd5\u570b)");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Francia" + "'", str6, "Francia");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=-62197931818994,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=-1899,ERA=0,YEAR=2,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=12,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=43,SECOND=1,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test05533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05533");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayLanguage();
        java.lang.String str4 = locale0.getISO3Country();
        java.util.Locale locale5 = locale0.stripExtensions();
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getSeconds();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getTimezoneOffset();
        date9.setMinutes(6);
        boolean boolean13 = date7.after(date9);
        java.util.Calendar.Builder builder14 = builder6.setInstant(date9);
        java.util.Calendar.Builder builder16 = builder14.setInstant((long) 36);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder18 = builder16.setLocale(locale17);
        java.lang.String str19 = locale17.getVariant();
        java.lang.String str20 = locale17.getDisplayScript();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        int int26 = timeZone22.getOffset(1645513657024L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1921-01-24 05:10:00", timeZone22);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getVariant();
        java.util.Set<java.lang.Character> charSet30 = locale28.getExtensionKeys();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone22, locale28);
        java.lang.String str32 = locale28.getISO3Language();
        java.lang.String str33 = locale28.getISO3Country();
        java.lang.String str34 = locale17.getDisplayScript(locale28);
        java.lang.String str35 = locale5.getDisplayCountry(locale17);
        java.util.Set<java.lang.Character> charSet36 = locale5.getExtensionKeys();
        java.lang.String str37 = locale5.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "cinese" + "'", str3, "cinese");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:12:06 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 07:06:06 GMT 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645513926018,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=18,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "deu" + "'", str32, "deu");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
    }

    @Test
    public void test05534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05534");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        boolean boolean19 = timeZone9.hasSameRules(timeZone17);
        java.lang.String str20 = timeZone17.getID();
        boolean boolean21 = timeZone17.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645513926039,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=39,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GMT" + "'", str20, "GMT");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test05535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05535");
        java.util.Locale locale2 = new java.util.Locale("7:07:39 AM UTC");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale2);
        java.util.TimeZone timeZone4 = fastDateFormat3.getTimeZone();
        int int6 = timeZone4.getOffset(1269395555000L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeZone4.getDisplayName(true, 130);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 130");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "7:07:39 am utc");
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test05536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05536");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        java.time.ZoneId zoneId7 = timeZone2.toZoneId();
        timeZone2.setRawOffset(0);
        timeZone2.setID("34768-11-01 00:00:00");
        // The following exception was thrown during execution in test generation
        try {
            int int18 = timeZone2.getOffset(1910, 24228570, (int) (byte) 1, 14, 123, 26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(zoneId7);
    }

    @Test
    public void test05537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05537");
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        boolean boolean4 = locale2.hasExtensions();
        java.lang.String str5 = locale2.getDisplayCountry();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.lang.String str13 = locale11.getDisplayVariant();
        boolean boolean14 = locale11.hasExtensions();
        java.lang.String str15 = locale2.getDisplayLanguage(locale11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(32769, 34, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 34");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645513926104,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=104,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e2d\u6587" + "'", str15, "\u4e2d\u6587");
    }

    @Test
    public void test05538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05538");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Calendar.Builder builder24 = builder12.setWeekDate(15, 100, 10);
        java.util.Calendar.Builder builder28 = builder12.setDate(1970, 0, 30);
        java.util.Calendar.Builder builder32 = builder12.setDate(800302, 122, 15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder34 = builder32.setInstant(1645513868821L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:06 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:06 GMT 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test05539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05539");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 2);
    }

    @Test
    public void test05540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05540");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        boolean boolean6 = languageRangeList1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale10, locale11, locale12, locale13, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.Locale locale18 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor20 = languageRangeList8.listIterator(0);
        boolean boolean21 = languageRangeList8.isEmpty();
        languageRangeList8.clear();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale31, locale32, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList49);
        int int52 = languageRangeList29.lastIndexOf((java.lang.Object) languageRangeList41);
        java.lang.String[] strArray71 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        boolean boolean74 = languageRangeList41.retainAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean75 = languageRangeList27.removeAll((java.util.Collection<java.lang.String>) strList72);
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.lang.String str77 = locale76.getISO3Language();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.lang.String str79 = java.util.Locale.lookupTag(languageRangeList27, (java.util.Collection<java.lang.String>) strSet78);
        boolean boolean80 = languageRangeList8.retainAll((java.util.Collection<java.lang.String>) strSet78);
        java.util.Date date81 = new java.util.Date();
        int int82 = date81.getSeconds();
        long long83 = date81.getTime();
        date81.setTime((long) 37);
        date81.setDate((int) (short) 0);
        int int88 = date81.getDay();
        date81.setYear(22);
        java.time.Instant instant91 = date81.toInstant();
        java.lang.String str92 = date81.toGMTString();
        boolean boolean93 = languageRangeList8.equals((java.lang.Object) str92);
        boolean boolean94 = languageRangeList1.remove((java.lang.Object) languageRangeList8);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor95 = languageRangeList1.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(languageRangeItor20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "fra" + "'", str77, "fra");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Sun Dec 31 00:00:00 GMT 1922");
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1645513926234L + "'", long83 == 1645513926234L);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "31 Dec 1922 00:00:00 GMT" + "'", str92, "31 Dec 1922 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(languageRangeItor95);
    }

    @Test
    public void test05541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05541");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("21 Feb 1940 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05542");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str6 = fastDateFormat2.getPattern();
        java.lang.String str8 = fastDateFormat2.format(0L);
        java.lang.Object obj9 = null;
        boolean boolean10 = fastDateFormat2.equals(obj9);
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition(7);
        java.text.Format.Field field13 = fieldPosition12.getFieldAttribute();
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder26 = builder24.setLocale(locale25);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone31);
        timeZone31.setRawOffset((int) (byte) 1);
        boolean boolean36 = timeZone31.observesDaylightTime();
        java.util.Calendar.Builder builder37 = builder26.setTimeZone(timeZone31);
        java.util.Date date41 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date41.setMonth(4);
        java.util.Calendar.Builder builder44 = builder26.setInstant(date41);
        date41.setMinutes(122);
        boolean boolean47 = fieldPosition12.equals((java.lang.Object) date41);
        java.lang.String str48 = fastDateFormat2.format(date41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj50 = fastDateFormat2.parseObject("\u4e0a\u5348\u65f6\u5206\u79d2 UTC");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "h:mm:ss a z" + "'", str6, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str8, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(field13);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:12:06 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:06:06 GMT 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sat May 10 02:02:00 GMT 1952");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2:02:00 AM GMT+00:00" + "'", str48, "2:02:00 AM GMT+00:00");
    }

    @Test
    public void test05543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05543");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale3.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr-FR" + "'", str4, "fr-FR");
    }

    @Test
    public void test05544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05544");
        java.util.Date date1 = new java.util.Date((long) 5);
        date1.setMinutes(0);
        java.util.Locale locale5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale5);
        java.util.TimeZone timeZone7 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        java.util.Date date9 = calendar8.getTime();
        boolean boolean10 = date1.before(date9);
        date1.setYear(1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Jan 01 00:00:00 GMT 1901");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645513926326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=423,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 07:12:06 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test05545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05545");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getSeconds();
        long long2 = date0.getTime();
        date0.setTime((long) 37);
        date0.setDate((int) (short) 0);
        int int7 = date0.getMonth();
        java.util.Calendar.Builder builder8 = new java.util.Calendar.Builder();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getSeconds();
        java.util.Date date11 = new java.util.Date();
        int int12 = date11.getTimezoneOffset();
        date11.setMinutes(6);
        boolean boolean15 = date9.after(date11);
        java.util.Calendar.Builder builder16 = builder8.setInstant(date11);
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getSeconds();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        date19.setMinutes(6);
        boolean boolean23 = date17.after(date19);
        date17.setHours((int) (short) 100);
        boolean boolean26 = date11.before(date17);
        boolean boolean27 = date0.after(date17);
        java.time.Instant instant28 = date0.toInstant();
        java.util.Date date32 = new java.util.Date((int) 'a', 1, 292269054);
        int int33 = date32.getHours();
        boolean boolean34 = date0.after(date32);
        java.lang.String str35 = date32.toLocaleString();
        date32.setYear(9);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Wed Dec 31 00:00:00 GMT 1969");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513926366L + "'", long2 == 1645513926366L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 07:12:06 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Feb 22 07:06:06 GMT 2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 26 04:12:06 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:06:06 GMT 2022");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant28);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Fri Jul 30 00:00:00 GMT 1909");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "802202-7-30 0:00:00" + "'", str35, "802202-7-30 0:00:00");
    }

    @Test
    public void test05546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05546");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        calendar7.setTimeInMillis((long) 22);
        long long11 = calendar7.getTimeInMillis();
        java.text.FieldPosition fieldPosition15 = new java.text.FieldPosition((int) (byte) 100);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.toLanguageTag();
        java.util.Locale.setDefault(locale16);
        boolean boolean19 = fieldPosition15.equals((java.lang.Object) locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = calendar7.getDisplayName(5752, 1910, locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str5, "\u6cd5\u6587\u6cd5\u570b)");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "France" + "'", str6, "France");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=22,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 22L + "'", long11 == 22L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it-IT" + "'", str17, "it-IT");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05547");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone26 = fastDateFormat2.getTimeZone();
        int int27 = fastDateFormat2.getMaxLengthEstimate();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:07:46");
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33);
        java.lang.String str35 = fastDateFormat34.toString();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone40.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINA;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        calendar45.clear(7);
        calendar45.set(16, (int) (byte) 0);
        int int51 = calendar45.getFirstDayOfWeek();
        java.lang.String str52 = fastDateFormat38.format(calendar45);
        calendar45.set((int) (short) 100, 37, 2);
        java.lang.String str57 = fastDateFormat34.format(calendar45);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition(16);
        parsePosition60.setErrorIndex(5);
        parsePosition60.setErrorIndex(1);
        java.lang.Object obj65 = fastDateFormat34.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition60);
        java.lang.Object obj66 = fastDateFormat30.parseObject("2022-02-22 08:37:00", parsePosition60);
        java.lang.Object obj67 = fastDateFormat2.parseObject("7:09:32 AM GMT+00:00", parsePosition60);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale72 = java.util.Locale.FRANCE;
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray76 = new java.util.Locale[] { locale71, locale72, locale73, locale74, locale75 };
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.Locale locale79 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Locale locale83 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale84 = java.util.Locale.FRANCE;
        java.util.Locale locale85 = java.util.Locale.CHINESE;
        java.util.Locale locale86 = java.util.Locale.FRANCE;
        java.util.Locale locale87 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale83, locale84, locale85, locale86, locale87 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.Locale locale91 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.util.Locale>) localeList89);
        int int92 = languageRangeList69.lastIndexOf((java.lang.Object) languageRangeList81);
        int int94 = languageRangeList81.indexOf((java.lang.Object) '4');
        java.util.Set<java.lang.String> strSet95 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, (java.util.Collection<java.lang.String>) strSet95);
        java.util.stream.Stream<java.lang.String> strStream97 = strList96.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator98 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) strList96);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.ArrayList");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146873600,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=400,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:06 AM GMT" + "'", str20, "7:12:06 AM GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:06 AM GMT" + "'", str25, "7:12:06 AM GMT");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 18 + "'", int27 == 18);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str35, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-58914146873600,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=400,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "7:12:06 AM GMT" + "'", str52, "7:12:06 AM GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "7:12:06 AM GMT" + "'", str57, "7:12:06 AM GMT");
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNull(obj66);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(locale79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(locale91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(strStream97);
    }

    @Test
    public void test05548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05548");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.lang.String str8 = calendar7.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar7.add(34, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str5, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Francia" + "'", str6, "Francia");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513926473,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=473,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
    }

    @Test
    public void test05549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05549");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 34");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05550");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        int int15 = calendar13.getActualMaximum(15);
        calendar13.setFirstDayOfWeek((-1));
        calendar13.setTimeInMillis(0L);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        calendar29.clear(7);
        calendar29.set(16, (int) (byte) 0);
        int int35 = calendar29.getFirstDayOfWeek();
        java.lang.String str36 = fastDateFormat22.format(calendar29);
        calendar29.clear(7);
        boolean boolean39 = calendar29.isWeekDateSupported();
        calendar29.setFirstDayOfWeek(30);
        java.lang.String str42 = calendar29.getCalendarType();
        int int43 = calendar13.compareTo(calendar29);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 50400000 + "'", int15 == 50400000);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=30,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=508,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "7:12:06 AM GMT" + "'", str36, "7:12:06 AM GMT");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "gregory" + "'", str42, "gregory");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test05551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05551");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        boolean boolean4 = attribute0.equals((java.lang.Object) category3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category3);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.lang.String str8 = locale7.getVariant();
        java.util.Locale.setDefault(category3, locale7);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.lang.String str15 = locale10.getDisplayCountry(locale14);
        java.lang.String str16 = locale14.getISO3Language();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Locale locale23 = new java.util.Locale("", "hi!", "");
        java.lang.String str24 = locale19.getDisplayVariant(locale23);
        java.lang.String str25 = locale17.getDisplayVariant(locale19);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale19);
        java.lang.String str27 = locale14.getDisplayCountry(locale19);
        java.lang.String str28 = locale19.getDisplayLanguage();
        java.lang.String str29 = locale19.getCountry();
        java.lang.String str30 = locale19.getScript();
        java.util.Locale.setDefault(category3, locale19);
        java.util.Locale locale32 = java.util.Locale.getDefault(category3);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("7:09:52 AM");
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        java.lang.String str44 = locale35.getDisplayName(locale42);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleKeys();
        java.lang.String str47 = locale42.getDisplayName(locale45);
        java.lang.String str48 = locale45.toLanguageTag();
        java.lang.String str49 = locale34.getDisplayLanguage(locale45);
        java.lang.String str50 = locale32.getDisplayLanguage(locale34);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "China" + "'", str15, "China");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645513926547,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=547,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "HI!" + "'", str27, "HI!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cinese" + "'", str28, "cinese");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CN" + "'", str29, "CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zh" + "'", str36, "zh");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645513926547,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=547,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587" + "'", str44, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str47, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh-CN" + "'", str48, "zh-CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese" + "'", str50, "Chinese");
    }

    @Test
    public void test05552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05552");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj9 = fastDateFormat2.parseObject("22 Feb 2022 07:07:38 GMT", parsePosition8);
        java.util.TimeZone timeZone10 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone10);
        boolean boolean13 = calendar11.isSet(0);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645513926582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=679,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test05553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05553");
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale2);
        java.lang.Object obj4 = fastDateFormat3.clone();
        java.util.Locale locale5 = fastDateFormat3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:11:43 AM GMT+00:00", locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
    }

    @Test
    public void test05554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05554");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645513671992L);
        java.util.Calendar.Builder builder5 = builder0.setWeekDefinition(7, (int) (short) 1);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getSeconds();
        long long8 = date6.getTime();
        date6.setTime((long) 37);
        date6.setDate((int) (short) 0);
        int int13 = date6.getYear();
        int int14 = date6.getYear();
        date6.setMinutes(100);
        java.time.Instant instant17 = date6.toInstant();
        int int18 = date6.getYear();
        java.util.Calendar.Builder builder19 = builder5.setInstant(date6);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale28 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getScript();
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale28.getDisplayVariant(locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone23, locale34);
        boolean boolean37 = timeZone23.observesDaylightTime();
        java.util.Locale locale39 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale40.getDisplayLanguage(locale41);
        java.util.Locale locale43 = java.util.Locale.US;
        java.lang.String str44 = locale41.getDisplayCountry(locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-02 07:07:52", timeZone23, locale41);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone49);
        int int53 = timeZone49.getOffset(1645513656868L);
        boolean boolean54 = timeZone49.observesDaylightTime();
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone49, locale55);
        java.lang.String str57 = locale41.getDisplayLanguage(locale55);
        boolean boolean58 = locale41.hasExtensions();
        java.util.Calendar.Builder builder59 = builder5.setLocale(locale41);
        java.util.Locale locale62 = new java.util.Locale("hi!", "USA");
        java.util.Locale locale63 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = locale41.getDisplayScript(locale62);
        java.lang.String str67 = locale41.getExtension('a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Dec 31 01:40:00 GMT 1969");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 6 + "'", int7 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513926639L + "'", long8 == 1645513926639L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 69 + "'", int13 == 69);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 69 + "'", int14 == 69);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 69 + "'", int18 == 69);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals(locale28.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals(locale39.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "7:07:37 am utc" + "'", str42, "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Taiwan" + "'", str44, "Taiwan");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645513926639,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=639,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645513926639,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=639,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese" + "'", str57, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!_USA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi! (USA)" + "'", str64, "hi! (USA)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str67);
    }

    @Test
    public void test05555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05555");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:07:46");
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        calendar17.set(16, (int) (byte) 0);
        int int23 = calendar17.getFirstDayOfWeek();
        java.lang.String str24 = fastDateFormat10.format(calendar17);
        calendar17.set((int) (short) 100, 37, 2);
        java.lang.String str29 = fastDateFormat6.format(calendar17);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition(16);
        parsePosition32.setErrorIndex(5);
        parsePosition32.setErrorIndex(1);
        java.lang.Object obj37 = fastDateFormat6.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition32);
        java.lang.Object obj38 = fastDateFormat2.parseObject("2022-02-22 08:37:00", parsePosition32);
        java.lang.String str40 = fastDateFormat2.format(1645513660525L);
        java.util.TimeZone timeZone41 = fastDateFormat2.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(292278994, timeZone41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 292278994");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str7, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-58914146873257,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=743,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "7:12:06 AM GMT" + "'", str24, "7:12:06 AM GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7:12:06 AM GMT" + "'", str29, "7:12:06 AM GMT");
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-2-22 7:07:46" + "'", str40, "2022-2-22 7:07:46");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test05556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05556");
        java.util.Locale locale4 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = locale4.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 10, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test05557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05557");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder7 = builder2.setScript("");
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.lang.String str10 = locale8.toLanguageTag();
        java.util.Locale locale11 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.lang.String str16 = locale11.getDisplayCountry(locale15);
        java.lang.String str17 = locale15.toLanguageTag();
        java.lang.String str18 = locale15.getDisplayVariant();
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Date date20 = new java.util.Date();
        int int21 = date20.getSeconds();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        date22.setMinutes(6);
        boolean boolean26 = date20.after(date22);
        java.util.Calendar.Builder builder27 = builder19.setInstant(date22);
        java.util.Calendar.Builder builder29 = builder27.setInstant((long) 36);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder31 = builder29.setLocale(locale30);
        java.util.Calendar calendar32 = builder31.build();
        calendar32.set(31, 22, 50, 14, 5, 0);
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.util.Map<java.lang.String, java.lang.Integer> strMap43 = calendar32.getDisplayNames(5, (int) (byte) 1, locale42);
        java.lang.String str44 = locale42.getVariant();
        java.lang.String str45 = locale15.getDisplayScript(locale42);
        java.lang.String str46 = locale8.getDisplayVariant(locale42);
        java.util.Locale.Builder builder47 = builder7.setLocale(locale42);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 27, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 27");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "und" + "'", str10, "und");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "China" + "'", str16, "China");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "und" + "'", str17, "und");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 07:12:06 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 07:06:06 GMT 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=31,MONTH=22,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=50,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=14,MINUTE=5,SECOND=0,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNull(strMap43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test05558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05558");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Locale locale26 = fastDateFormat2.getLocale();
        boolean boolean27 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str29 = fastDateFormat2.format(1645513673568L);
        java.util.Locale locale30 = fastDateFormat2.getLocale();
        java.util.Locale locale31 = fastDateFormat2.getLocale();
        java.lang.String str32 = locale31.toString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146873201,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=6,MILLISECOND=799,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:06 AM GMT" + "'", str20, "7:12:06 AM GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:06 AM GMT" + "'", str25, "7:12:06 AM GMT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7:07:53 AM GMT+00:00" + "'", str29, "7:07:53 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en_US" + "'", str32, "en_US");
    }

    @Test
    public void test05559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05559");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        boolean boolean9 = fastDateFormat8.getTimeZoneOverridesCalendar();
        java.util.Date date10 = new java.util.Date();
        long long11 = date10.getTime();
        long long12 = date10.getTime();
        int int13 = date10.getDate();
        date10.setHours(34);
        date10.setMonth(24);
        int int18 = date10.getHours();
        java.lang.StringBuffer stringBuffer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer20 = fastDateFormat8.format(date10, stringBuffer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "China" + "'", str7, "China");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jan 23 10:12:06 GMT 2024");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645513926830L + "'", long11 == 1645513926830L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513926830L + "'", long12 == 1645513926830L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test05560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05560");
        java.util.Date date3 = new java.util.Date(13, (int) (byte) 0, 61);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Mar 02 00:00:00 GMT+00:00 1913");
    }

    @Test
    public void test05561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05561");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        boolean boolean14 = calendar6.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar6.set(17, 9, (int) '#', 0, 10, 17);
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getDay();
        date22.setDate(2);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMinutes(6);
        int int30 = date26.getMinutes();
        boolean boolean31 = date22.after(date26);
        int int32 = date26.getSeconds();
        calendar6.setTime(date26);
        int int35 = calendar6.getMaximum(5);
        calendar6.setTimeInMillis(1644476882268L);
        int int38 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.clear();
        boolean boolean40 = calendar6.isWeekDateSupported();
        int int41 = calendar6.getFirstDayOfWeek();
        calendar6.setMinimalDaysInFirstWeek((-46800000));
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-46800000,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Wed Feb 02 07:12:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31 + "'", int35 == 31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test05562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05562");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = languageRangeList1.subList(22, 69);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 69");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test05563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05563");
        java.util.Locale locale5 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean6 = locale5.hasExtensions();
        java.lang.String str7 = locale5.getDisplayLanguage();
        java.util.Locale.Category category8 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category8, locale10);
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getSeconds();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getTimezoneOffset();
        date15.setMinutes(6);
        boolean boolean19 = date13.after(date15);
        java.util.Calendar.Builder builder20 = builder12.setInstant(date15);
        java.util.Calendar.Builder builder22 = builder20.setInstant((long) 36);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder24 = builder22.setLocale(locale23);
        java.lang.String str25 = locale23.toLanguageTag();
        java.lang.String str26 = locale23.getScript();
        java.lang.String str27 = locale23.getISO3Language();
        java.lang.String str28 = locale23.getLanguage();
        java.util.Locale.setDefault(category8, locale23);
        java.util.Locale locale30 = java.util.Locale.getDefault(category8);
        java.util.Locale locale31 = java.util.Locale.getDefault(category8);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale32.getDisplayVariant(locale36);
        java.lang.String str38 = locale32.getISO3Language();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone40);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        java.util.Locale locale47 = java.util.Locale.CHINA;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45, locale47);
        calendar48.clear(7);
        calendar48.set(16, (int) (byte) 0);
        java.time.Instant instant54 = calendar48.toInstant();
        boolean boolean56 = calendar48.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str57 = fastDateFormat41.format(calendar48);
        java.lang.Object obj58 = fastDateFormat41.clone();
        java.util.Locale locale59 = fastDateFormat41.getLocale();
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale59.getDisplayName();
        java.lang.String str62 = locale32.getDisplayCountry(locale59);
        java.lang.String str63 = locale31.getDisplayName(locale59);
        java.lang.String str64 = locale5.getDisplayVariant(locale31);
        java.util.Locale.setDefault(locale31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(50400000, (int) (byte) 100, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale5.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:07:39 am utc" + "'", str7, "7:07:39 am utc");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.FORMAT + "'", category8.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "fr-FR" + "'", str25, "fr-FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "fra" + "'", str27, "fra");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "fr" + "'", str28, "fr");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zho" + "'", str38, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645513926963,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=60,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale59);
// flaky:         org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh" + "'", str60, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str61, "\u4e2d\u6587\u4e2d\u56fd)");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e2d\u56fd" + "'", str62, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u6cd5\u6587\u6cd5\u56fd)" + "'", str63, "\u6cd5\u6587\u6cd5\u56fd)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test05564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05564");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.lang.String str3 = parsePosition1.toString();
        java.lang.Object obj4 = null;
        boolean boolean5 = parsePosition1.equals(obj4);
        int int6 = parsePosition1.getIndex();
        boolean boolean8 = parsePosition1.equals((java.lang.Object) 1645513657332L);
        java.lang.String str9 = parsePosition1.toString();
        int int10 = parsePosition1.getErrorIndex();
        int int11 = parsePosition1.getErrorIndex();
        java.lang.String str12 = parsePosition1.toString();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getSeconds();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        date16.setMinutes(6);
        boolean boolean20 = date14.after(date16);
        java.util.Calendar.Builder builder21 = builder13.setInstant(date16);
        java.util.Calendar.Builder builder23 = builder21.setInstant((long) 36);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder25 = builder23.setLocale(locale24);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        timeZone30.setRawOffset((int) (byte) 1);
        boolean boolean35 = timeZone30.observesDaylightTime();
        java.util.Calendar.Builder builder36 = builder25.setTimeZone(timeZone30);
        java.util.Date date40 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date40.setMonth(4);
        java.util.Calendar.Builder builder43 = builder25.setInstant(date40);
        boolean boolean44 = parsePosition1.equals((java.lang.Object) builder25);
        java.util.Date date45 = new java.util.Date();
        int int46 = date45.getTimezoneOffset();
        int int47 = date45.getSeconds();
        java.time.Instant instant48 = date45.toInstant();
        date45.setMinutes(16);
        java.util.Calendar.Builder builder51 = builder25.setInstant(date45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder56 = builder25.setTimeOfDay(56, 1910, 134, 6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str9, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str12, "java.text.ParsePosition[index=16,errorIndex=-1]");
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Feb 22 07:16:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test05565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05565");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(7);
        fieldPosition1.setEndIndex(8);
        fieldPosition1.setEndIndex(8);
        int int6 = fieldPosition1.getField();
        int int7 = fieldPosition1.getBeginIndex();
        int int8 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test05566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05566");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getSeconds();
        int int9 = date6.getMinutes();
        long long10 = date6.getTime();
        java.lang.String str11 = date6.toLocaleString();
        boolean boolean12 = date4.before(date6);
        java.lang.String str13 = fastDateFormat2.format(date4);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        boolean boolean27 = fastDateFormat2.equals((java.lang.Object) builder24);
        java.util.Calendar calendar28 = builder24.build();
        java.util.Calendar.Builder builder32 = builder24.setWeekDate(3, 69, 51);
        java.util.Calendar.Builder builder37 = builder32.setTimeOfDay((-1), 21, 10, 130);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder39 = builder37.setCalendarType("31-dic-1969 0.00.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 31-dic-1969 0.00.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645513927068L + "'", long5 == 1645513927068L);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513927068L + "'", long10 == 1645513927068L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22 f\351vr. 2022 07:12:07" + "'", str11, "22 f\351vr. 2022 07:12:07");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "07 h 12 UTC" + "'", str13, "07 h 12 UTC");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=36,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=133,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test05567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05567");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        boolean boolean10 = calendar7.isWeekDateSupported();
        int int11 = calendar7.getMinimalDaysInFirstWeek();
        calendar7.setTimeInMillis(100L);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:07:41 GMT");
        calendar7.setTimeZone(timeZone15);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        boolean boolean20 = locale18.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale18);
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        calendar31.clear(7);
        calendar31.set(16, (int) (byte) 0);
        java.time.Instant instant37 = calendar31.toInstant();
        boolean boolean39 = calendar31.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str40 = fastDateFormat24.format(calendar31);
        java.lang.Object obj41 = fastDateFormat24.clone();
        java.util.Locale locale42 = fastDateFormat24.getLocale();
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.lang.String str50 = locale46.getDisplayLanguage();
        java.lang.String str51 = locale46.getDisplayLanguage();
        java.lang.String str52 = locale42.getDisplayLanguage(locale46);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.lang.String str54 = locale53.getVariant();
        java.lang.String str55 = locale42.getDisplayLanguage(locale53);
        java.lang.String str56 = locale18.getDisplayCountry(locale42);
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale61 = new java.util.Locale("", "hi!", "");
        java.lang.String str62 = locale57.getDisplayVariant(locale61);
        java.lang.String str63 = locale42.getDisplayLanguage(locale61);
        java.lang.String str64 = locale61.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(49, timeZone15, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 49");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=100,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=197,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645513927098,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=195,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr" + "'", str43, "fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh" + "'", str47, "zh");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "chinois" + "'", str50, "chinois");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "chinois" + "'", str51, "chinois");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u6cd5\u6587" + "'", str52, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "francese" + "'", str55, "francese");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale61.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "French" + "'", str63, "French");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "HI!" + "'", str64, "HI!");
    }

    @Test
    public void test05568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05568");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Set<java.lang.String> strSet25 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet25.parallelStream();
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet25, filteringMode27);
        java.util.Locale.LanguageRange languageRange29 = null;
        boolean boolean30 = languageRangeList13.add(languageRange29);
        java.util.Locale.LanguageRange languageRange33 = new java.util.Locale.LanguageRange("France");
        double double34 = languageRange33.getWeight();
        languageRangeList13.add(0, languageRange33);
        java.util.Calendar.Builder builder36 = new java.util.Calendar.Builder();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getSeconds();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getTimezoneOffset();
        date39.setMinutes(6);
        boolean boolean43 = date37.after(date39);
        java.util.Calendar.Builder builder44 = builder36.setInstant(date39);
        int int45 = date39.getMonth();
        int int46 = languageRangeList13.indexOf((java.lang.Object) int45);
        java.lang.Object[][] objArray47 = new java.lang.Object[][] {};
        java.lang.Object[][] objArray48 = new java.lang.Object[][] {};
        java.lang.Object[][] objArray49 = new java.lang.Object[][] {};
        java.lang.Object[][] objArray50 = new java.lang.Object[][] {};
        java.lang.Object[][] objArray51 = new java.lang.Object[][] {};
        java.lang.Object[][][] objArray52 = new java.lang.Object[][][] { objArray47, objArray48, objArray49, objArray50, objArray51 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][][] objArray53 = languageRangeList13.toArray(objArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0d + "'", double34 == 1.0d);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
    }

    @Test
    public void test05569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05569");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.Locale locale21 = fastDateFormat2.getLocale();
        java.lang.String str22 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone24 = fastDateFormat2.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = timeZone24.getOffset(58, (int) (byte) 1, 55, 21, 2, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513927154,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=251,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[]" + "'", str20, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05570");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.Calendar.Builder builder32 = builder28.setDate((int) (short) -1, 69, 6);
        java.util.Calendar.Builder builder36 = builder32.setWeekDate(14, 27, 12);
        java.util.Calendar.Builder builder38 = builder36.setLenient(false);
        java.util.Locale locale41 = new java.util.Locale("2/22/22 7:08 AM", "22 Feb 2022 07:07:44 GMT");
        java.util.Locale locale43 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale44 = null;
        java.lang.String str45 = locale43.getDisplayScript(locale44);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("Feb 22, 2022 7:06:39 AM");
        java.lang.String str49 = locale43.getDisplayCountry(locale48);
        java.lang.String str50 = locale41.getDisplayCountry(locale43);
        java.util.Calendar.Builder builder51 = builder36.setLocale(locale41);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone53.hasSameRules(timeZone55);
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55, locale57);
        calendar58.clear(7);
        calendar58.set(16, (int) (byte) 0);
        java.time.Instant instant64 = calendar58.toInstant();
        boolean boolean66 = calendar58.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar58.set(17, 9, (int) '#', 0, 10, 17);
        int int74 = calendar58.getWeekYear();
        long long75 = calendar58.getTimeInMillis();
        java.util.Date date76 = calendar58.getTime();
        java.time.Instant instant77 = calendar58.toInstant();
        java.util.Date date78 = java.util.Date.from(instant77);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder79 = builder51.setInstant(date78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals(locale41.toString(), "2/22/22 7:08 am_22 FEB 2022 07:07:44 GMT");
        org.junit.Assert.assertEquals(locale43.toString(), "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "22 FEB 2022 07:07:44 GMT" + "'", str50, "22 FEB 2022 07:07:44 GMT");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=-61604322582779,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=318,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 17 + "'", int74 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-61604322582779L) + "'", long75 == (-61604322582779L));
        org.junit.Assert.assertNotNull(date76);
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Thu Nov 04 00:10:17 GMT+00:00 17");
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Thu Nov 04 00:10:17 GMT+00:00 17");
    }

    @Test
    public void test05571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05571");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.lang.String str10 = locale1.getDisplayName(locale8);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale18 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale18.getScript();
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.lang.String str25 = locale18.getDisplayVariant(locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone13, locale24);
        java.lang.String str27 = locale24.getDisplayCountry();
        java.lang.String str28 = locale24.getVariant();
        java.lang.String str29 = locale8.getDisplayCountry(locale24);
        java.lang.String str30 = locale24.getScript();
        java.util.Locale locale31 = locale24.stripExtensions();
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:09:00 AM", locale32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513927277,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=374,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e2d\u6587" + "'", str10, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals(locale18.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "HI!" + "'", str27, "HI!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "China" + "'", str29, "China");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(charSet33);
    }

    @Test
    public void test05572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05572");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.lang.String str10 = locale1.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale1);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) 'u');
        java.lang.Object obj15 = fastDateFormat11.parseObject("7:08:06 AM GMT+00:00", parsePosition14);
        parsePosition14.setErrorIndex(19);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test05573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05573");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder5 = builder1.setLocale(locale4);
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getSeconds();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getTimezoneOffset();
        date9.setMinutes(6);
        boolean boolean13 = date7.after(date9);
        java.util.Calendar.Builder builder14 = builder6.setInstant(date9);
        java.util.Calendar.Builder builder16 = builder14.setInstant((long) 36);
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder18 = builder16.setLocale(locale17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.util.Calendar.Builder builder24 = builder16.setTimeZone(timeZone21);
        java.util.Calendar.Builder builder26 = builder16.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        int int32 = timeZone28.getOffset(1645513657024L);
        timeZone28.setID("fra");
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone28.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayCountry();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone28, locale37);
        boolean boolean42 = fastDateFormat27.equals((java.lang.Object) locale37);
        java.util.Calendar.Builder builder43 = builder26.setLocale(locale37);
        java.lang.String str44 = locale37.getScript();
        java.util.Locale.Builder builder45 = builder1.setLocale(locale37);
        java.util.Locale.setDefault(locale37);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(builder5);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645513927382,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=479,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test05574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05574");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale locale3 = builder2.build();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = calendar4.getMinimum(24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645513927416,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=513,ZONE_OFFSET=97,DST_OFFSET=0]");
    }

    @Test
    public void test05575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05575");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguage("Mon Feb 22 07:11:04 GMT+00:00 2027");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Mon Feb 22 07:11:04 GMT+00:00 2027 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test05576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05576");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        int int19 = fastDateFormat2.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513927604,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=701,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05577");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.String str19 = calendar9.getCalendarType();
        boolean boolean20 = calendar9.isWeekDateSupported();
        calendar9.setTimeInMillis((long) 14);
        int int24 = calendar9.getGreatestMinimum(0);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = calendar9.getActualMaximum(42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 42");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=14,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=111,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test05578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05578");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        int int24 = parsePosition23.getErrorIndex();
        java.lang.String str25 = parsePosition23.toString();
        java.lang.Object obj26 = null;
        boolean boolean27 = parsePosition23.equals(obj26);
        int int28 = parsePosition23.getIndex();
        boolean boolean30 = parsePosition23.equals((java.lang.Object) 1645513657332L);
        java.lang.String str31 = parsePosition23.toString();
        int int32 = parsePosition23.getErrorIndex();
        int int33 = parsePosition23.getErrorIndex();
        java.lang.String str34 = parsePosition23.toString();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Date date36 = new java.util.Date();
        int int37 = date36.getSeconds();
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getTimezoneOffset();
        date38.setMinutes(6);
        boolean boolean42 = date36.after(date38);
        java.util.Calendar.Builder builder43 = builder35.setInstant(date38);
        java.util.Calendar.Builder builder45 = builder43.setInstant((long) 36);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder47 = builder45.setLocale(locale46);
        java.util.Calendar.Builder builder49 = builder47.setLenient(false);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        timeZone52.setRawOffset((int) (byte) 1);
        boolean boolean57 = timeZone52.observesDaylightTime();
        java.util.Calendar.Builder builder58 = builder47.setTimeZone(timeZone52);
        java.util.Date date62 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date62.setMonth(4);
        java.util.Calendar.Builder builder65 = builder47.setInstant(date62);
        boolean boolean66 = parsePosition23.equals((java.lang.Object) builder47);
        java.lang.Object obj67 = fastDateFormat2.parseObject("2022-02-22 08:37:00", parsePosition23);
        java.util.TimeZone timeZone68 = fastDateFormat2.getTimeZone();
        java.util.TimeZone.setDefault(timeZone68);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513927658,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=755,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str25, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str31, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str34, "java.text.ParsePosition[index=16,errorIndex=-1]");
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05579");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(6);
        parsePosition6.setErrorIndex(24);
        java.lang.Object obj9 = fastDateFormat2.parseObject("22 Feb 2022 07:08:35 GMT", parsePosition6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = fastDateFormat2.parseObject("\u4e0a\u5348\u65f6\u5206\u79d2");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test05580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05580");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar calendar15 = builder10.build();
        java.util.Calendar.Builder builder17 = builder10.setLenient(true);
        java.util.Locale locale19 = new java.util.Locale("feb 22, 2022 7:07:42 am");
        java.util.Calendar.Builder builder20 = builder17.setLocale(locale19);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        java.time.Instant instant36 = calendar30.toInstant();
        boolean boolean38 = calendar30.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str39 = fastDateFormat23.format(calendar30);
        java.lang.Object obj40 = fastDateFormat23.clone();
        java.util.Locale locale41 = fastDateFormat23.getLocale();
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.lang.String str49 = locale45.getDisplayLanguage();
        java.lang.String str50 = locale45.getDisplayLanguage();
        java.lang.String str51 = locale41.getDisplayLanguage(locale45);
        java.util.Locale locale52 = java.util.Locale.ITALY;
        java.lang.String str53 = locale52.getVariant();
        java.lang.String str54 = locale41.getDisplayLanguage(locale52);
        java.util.Calendar.Builder builder55 = builder17.setLocale(locale52);
        java.util.Calendar.Builder builder57 = builder55.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder59 = builder57.setCalendarType("10-feb-1956 0.00.00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 10-feb-1956 0.00.00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-61609075200097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=253,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals(locale19.toString(), "feb 22, 2022 7:07:42 am");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645513927731,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=828,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587" + "'", str49, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587" + "'", str50, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u6587" + "'", str51, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "cinese" + "'", str54, "cinese");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test05581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05581");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder12 = builder10.setLenient(true);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        long long17 = date15.getTime();
        date15.setTime((long) 37);
        date15.setDate((int) (short) 0);
        int int22 = date15.getMonth();
        date15.setDate(16);
        java.util.Calendar.Builder builder25 = builder14.setInstant(date15);
        java.util.Calendar.Builder builder29 = builder25.setWeekDate(24, 32770, 55);
        java.util.Calendar.Builder builder33 = builder29.setTimeOfDay(32770, 14, 0);
        java.util.Calendar.Builder builder35 = builder29.setLenient(false);
        java.util.Calendar.Builder builder39 = builder35.setTimeOfDay(15, (int) 'u', 134);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Dec 16 00:00:00 GMT+00:00 1969");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645513927761L + "'", long17 == 1645513927761L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test05582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05582");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1);
        java.util.TimeZone timeZone2 = fastDateFormat1.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05583");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clear();
        java.util.Locale.Builder builder16 = builder14.clear();
        java.util.Locale locale17 = builder14.build();
        java.util.Locale.Builder builder18 = builder14.clear();
        java.util.Locale.Builder builder20 = builder14.setLanguageTag("CHN");
        java.util.Locale locale21 = builder20.build();
        boolean boolean22 = date13.equals((java.lang.Object) builder20);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513927812,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=909,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:12:07 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "chn");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05584");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        calendar32.clear(7);
        boolean boolean35 = calendar32.isWeekDateSupported();
        java.util.TimeZone timeZone36 = calendar32.getTimeZone();
        int int38 = calendar32.getMaximum(3);
        java.lang.String str39 = fastDateFormat2.format(calendar32);
        int int40 = calendar32.getWeekYear();
        long long41 = calendar32.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = calendar32.getMinimum(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146872161,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=936,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:07 AM GMT+00:00" + "'", str20, "7:12:07 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:07 AM GMT+00:00" + "'", str25, "7:12:07 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645513927839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=936,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53 + "'", int38 == 53);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:12:07 AM GMT+00:00" + "'", str39, "7:12:07 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645513927839L + "'", long41 == 1645513927839L);
    }

    @Test
    public void test05585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05585");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.lang.String str5 = locale0.getISO3Country();
        java.lang.String str6 = locale0.getLanguage();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale0);
        java.lang.String str8 = calendar7.getCalendarType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645513927886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=983,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GB" + "'", str3, "GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u82f1\u56fd" + "'", str4, "\u82f1\u56fd");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GBR" + "'", str5, "GBR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513927886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=983,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
    }

    @Test
    public void test05586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05586");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        calendar7.setMinimalDaysInFirstWeek(69);
        boolean boolean13 = calendar7.after((java.lang.Object) (byte) 10);
        calendar7.add((int) (byte) 1, 39);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale locale28 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor30 = languageRangeList18.listIterator(0);
        boolean boolean31 = languageRangeList18.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Set<java.lang.String> strSet35 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.parallelStream();
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.lang.String>) strSet35);
        boolean boolean38 = languageRangeList18.retainAll((java.util.Collection<java.lang.String>) strList37);
        int int39 = languageRangeList18.size();
        boolean boolean40 = calendar7.after((java.lang.Object) int39);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.toString();
        boolean boolean45 = fastDateFormat43.getTimeZoneOverridesCalendar();
        java.lang.String str46 = fastDateFormat43.getPattern();
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj50 = fastDateFormat43.parseObject("22 Feb 2022 07:07:38 GMT", parsePosition49);
        java.util.TimeZone timeZone51 = fastDateFormat43.getTimeZone();
        calendar7.setTimeZone(timeZone51);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:07:48 GMT");
        java.util.Locale locale58 = new java.util.Locale("java.text.FieldPosition[field=7,attribute=null,beginIndex=7,endIndex=0]", "22 Feb 2022 07:07:43 GMT", "java.text.AttributedCharacterIterator$Attribute(reading)");
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone54, locale58);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) -1, timeZone51, locale58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=69,ERA=1,YEAR=2061,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=993,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertNotNull(languageRangeItor30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str44, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "h:mm:ss a z" + "'", str46, "h:mm:ss a z");
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals(locale58.toString(), "java.text.fieldposition[field=7,attribute=null,beginindex=7,endindex=0]_22 FEB 2022 07:07:43 GMT_java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645513927897,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=7,MILLISECOND=897,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05587");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Set<java.lang.String> strSet27 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet27);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.lang.String str34 = fastDateFormat31.format((long) '#');
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        calendar44.clear(7);
        calendar44.set(16, (int) (byte) 0);
        int int50 = calendar44.getFirstDayOfWeek();
        java.lang.String str51 = fastDateFormat37.format(calendar44);
        java.util.TimeZone timeZone52 = calendar44.getTimeZone();
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getTimezoneOffset();
        java.util.Date date55 = new java.util.Date();
        java.lang.String str56 = date55.toGMTString();
        boolean boolean57 = date53.before(date55);
        boolean boolean58 = calendar44.after((java.lang.Object) date55);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone60.hasSameRules(timeZone62);
        java.util.Locale locale64 = java.util.Locale.CHINA;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone62, locale64);
        calendar65.clear(7);
        calendar65.set(16, (int) (byte) 0);
        java.time.Instant instant71 = calendar65.toInstant();
        java.util.Date date72 = java.util.Date.from(instant71);
        boolean boolean73 = date55.before(date72);
        java.lang.String str74 = fastDateFormat31.format(date55);
        int int75 = languageRangeList13.lastIndexOf((java.lang.Object) fastDateFormat31);
        boolean boolean76 = fastDateFormat31.getTimeZoneOverridesCalendar();
        java.lang.Object obj77 = fastDateFormat31.clone();
        java.util.Date date78 = new java.util.Date();
        long long79 = date78.getTime();
        java.util.Date date80 = new java.util.Date();
        int int81 = date80.getTimezoneOffset();
        int int82 = date80.getSeconds();
        int int83 = date80.getMinutes();
        long long84 = date80.getTime();
        java.lang.String str85 = date80.toLocaleString();
        boolean boolean86 = date78.before(date80);
        java.time.Instant instant87 = date78.toInstant();
        java.util.Date date88 = java.util.Date.from(instant87);
        int int89 = date88.getDate();
        date88.setYear(28);
        boolean boolean92 = fastDateFormat31.equals((java.lang.Object) date88);
        date88.setMonth(32769);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "h:mm:ss a z" + "'", str32, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str34, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645513927923,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=20,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str51, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "22 Feb 2022 07:12:07 GMT" + "'", str56, "22 Feb 2022 07:12:07 GMT");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645513927923,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=20,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str74, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645513927923L + "'", long79 == 1645513927923L);
        org.junit.Assert.assertEquals(date80.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1645513927923L + "'", long84 == 1645513927923L);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Feb 22, 2022 7:12:08 AM" + "'", str85, "Feb 22, 2022 7:12:08 AM");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(date88);
        org.junit.Assert.assertEquals(date88.toString(), "Fri Oct 22 07:12:08 GMT+00:00 4658");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 22 + "'", int89 == 22);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test05588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05588");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.toString();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        calendar20.set(16, (int) (byte) 0);
        int int26 = calendar20.getFirstDayOfWeek();
        java.lang.String str27 = fastDateFormat13.format(calendar20);
        calendar20.set((int) (short) 100, 37, 2);
        java.lang.String str32 = fastDateFormat9.format(calendar20);
        java.util.Locale locale33 = fastDateFormat9.getLocale();
        boolean boolean34 = fastDateFormat9.getTimeZoneOverridesCalendar();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition(16);
        parsePosition37.setErrorIndex(5);
        int int40 = parsePosition37.getErrorIndex();
        int int41 = parsePosition37.getErrorIndex();
        java.lang.Object obj42 = fastDateFormat9.parseObject("7:07:43 AM UTC", parsePosition37);
        java.lang.Object obj43 = fastDateFormat2.parseObject("22 Feb 2022 07:07:50 GMT", parsePosition37);
        java.util.TimeZone timeZone44 = fastDateFormat2.getTimeZone();
        boolean boolean45 = timeZone44.observesDaylightTime();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        boolean boolean48 = timeZone47.observesDaylightTime();
        java.time.ZoneId zoneId49 = timeZone47.toZoneId();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone(zoneId49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone(zoneId49);
        boolean boolean52 = timeZone44.hasSameRules(timeZone51);
        java.lang.Object obj53 = timeZone44.clone();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str5, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str10, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-58914146872024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=73,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str27, "7:12:08 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str32, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 5 + "'", int40 == 5);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(zoneId49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj53);
// flaky:         org.junit.Assert.assertEquals(obj53.toString(), "sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05589");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale8.getDisplayCountry(locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale8);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale15.getDisplayName(locale22);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale22.getDisplayName(locale25);
        java.lang.String str28 = locale22.getISO3Language();
        boolean boolean29 = fastDateFormat14.equals((java.lang.Object) locale22);
        java.util.Locale locale30 = locale22.stripExtensions();
        java.util.Locale.Builder builder31 = builder3.setLocale(locale30);
        java.util.Locale.Builder builder32 = builder3.clear();
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale33.getDisplayCountry(locale37);
        java.lang.String str39 = locale33.toLanguageTag();
        java.lang.String str40 = locale33.getScript();
        java.lang.String str42 = locale33.getExtension('a');
        java.lang.String str43 = locale33.getScript();
        java.util.Locale.Builder builder44 = builder32.setLocale(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = locale33.getUnicodeLocaleType("7.09.37 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 7.09.37 GMT");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513928019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=116,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str27, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "China" + "'", str38, "China");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-CN" + "'", str39, "zh-CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test05590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05590");
        java.util.Locale locale1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone3);
        java.util.Date date5 = calendar4.getTime();
        calendar4.clear(8);
        calendar4.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar4.set((int) 'x', 24358801);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
    }

    @Test
    public void test05591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05591");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        boolean boolean9 = fastDateFormat8.getTimeZoneOverridesCalendar();
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getTimezoneOffset();
        java.util.Date date12 = new java.util.Date();
        java.lang.String str13 = date12.toGMTString();
        boolean boolean14 = date10.before(date12);
        date10.setMinutes(17);
        date10.setDate(42);
        java.lang.String str19 = fastDateFormat8.format(date10);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "China" + "'", str7, "China");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Mar 14 07:17:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "22 Feb 2022 07:12:08 GMT" + "'", str13, "22 Feb 2022 07:12:08 GMT");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u5e74\u6708\u65e5\u4e0a\u53487:17" + "'", str19, "\u5e74\u6708\u65e5\u4e0a\u53487:17");
    }

    @Test
    public void test05592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05592");
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray9 = new java.util.Locale[] { locale4, locale5, locale6, locale7, locale8 };
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale locale12 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale16, locale17, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList22);
        int int25 = languageRangeList2.lastIndexOf((java.lang.Object) languageRangeList14);
        java.util.Locale.Category category26 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category26, locale28);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getSeconds();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getTimezoneOffset();
        date33.setMinutes(6);
        boolean boolean37 = date31.after(date33);
        java.util.Calendar.Builder builder38 = builder30.setInstant(date33);
        java.util.Calendar.Builder builder40 = builder38.setInstant((long) 36);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder42 = builder40.setLocale(locale41);
        java.lang.String str43 = locale41.toLanguageTag();
        java.lang.String str44 = locale41.getScript();
        java.lang.String str45 = locale41.getISO3Language();
        java.lang.String str46 = locale41.getLanguage();
        java.util.Locale.setDefault(category26, locale41);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone53.hasSameRules(timeZone55);
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55, locale57);
        java.lang.String str59 = locale57.getDisplayVariant();
        boolean boolean60 = locale57.hasExtensions();
        java.lang.String str61 = locale48.getDisplayLanguage(locale57);
        java.util.Locale.setDefault(category26, locale48);
        java.util.Locale locale63 = java.util.Locale.ENGLISH;
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = locale64.getLanguage();
        boolean boolean66 = locale64.hasExtensions();
        java.lang.String str67 = locale64.getDisplayCountry();
        java.lang.String str68 = locale64.getDisplayLanguage();
        java.lang.String str69 = locale64.getDisplayLanguage();
        java.lang.String str70 = locale64.toLanguageTag();
        java.lang.String str71 = locale63.getDisplayCountry(locale64);
        java.util.Locale.setDefault(category26, locale64);
        boolean boolean73 = languageRangeList14.contains((java.lang.Object) locale64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(39, locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 39");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.FORMAT + "'", category26.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "fr-FR" + "'", str43, "fr-FR");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "fra" + "'", str45, "fra");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fr" + "'", str46, "fr");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645513928084,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=181,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e2d\u6587" + "'", str61, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh" + "'", str65, "zh");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u4e2d\u6587" + "'", str68, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u4e2d\u6587" + "'", str69, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "zh" + "'", str70, "zh");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test05593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05593");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        int int39 = calendar33.getFirstDayOfWeek();
        java.lang.String str40 = fastDateFormat26.format(calendar33);
        calendar33.set((int) (short) 100, 37, 2);
        java.lang.String str45 = fastDateFormat22.format(calendar33);
        java.util.Locale locale46 = fastDateFormat22.getLocale();
        boolean boolean47 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.String str48 = fastDateFormat22.getPattern();
        boolean boolean49 = languageRangeList1.remove((java.lang.Object) fastDateFormat22);
        boolean boolean50 = languageRangeList1.isEmpty();
        java.lang.Object[] objArray51 = languageRangeList1.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale55, locale56, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale67, locale68, locale69, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList73);
        int int76 = languageRangeList53.lastIndexOf((java.lang.Object) languageRangeList65);
        boolean boolean77 = languageRangeList53.isEmpty();
        languageRangeList53.clear();
        java.util.Set<java.lang.String> strSet79 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream80 = strSet79.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream81 = strSet79.parallelStream();
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strSet79);
        boolean boolean83 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strList82);
        java.util.stream.Stream<java.lang.String> strStream84 = strList82.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str23, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58914146871863,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=234,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str40, "7:12:08 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str45, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "h:mm:ss a z" + "'", str48, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(strStream81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strStream84);
    }

    @Test
    public void test05594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05594");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar10.clear(7);
        calendar10.set(16, (int) (byte) 0);
        java.time.Instant instant16 = calendar10.toInstant();
        boolean boolean18 = calendar10.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str19 = fastDateFormat3.format(calendar10);
        java.lang.String str20 = calendar10.getCalendarType();
        boolean boolean21 = calendar10.isWeekDateSupported();
        calendar10.add(10, 8);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone26.hasSameRules(timeZone28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone28);
        int int32 = timeZone28.getOffset(1645513656868L);
        calendar10.setTimeZone(timeZone28);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone28);
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.lang.String str40 = locale35.getDisplayCountry(locale39);
        java.util.Locale locale44 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str45 = locale44.getDisplayScript();
        java.lang.String str46 = locale35.getDisplayName(locale44);
        java.lang.String str47 = locale44.getDisplayCountry();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.getDefault(category48);
        java.util.Locale locale50 = java.util.Locale.getDefault(category48);
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getSeconds();
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getTimezoneOffset();
        date54.setMinutes(6);
        boolean boolean58 = date52.after(date54);
        java.util.Calendar.Builder builder59 = builder51.setInstant(date54);
        java.util.Calendar.Builder builder61 = builder59.setInstant((long) 36);
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder63 = builder61.setLocale(locale62);
        java.util.Calendar.Builder builder65 = builder63.setLenient(false);
        java.util.Calendar.Builder builder67 = builder63.setLenient(false);
        java.util.Calendar.Builder builder71 = builder63.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale72 = java.util.Locale.CHINA;
        java.lang.String str73 = locale72.toLanguageTag();
        java.util.Calendar.Builder builder74 = builder71.setLocale(locale72);
        java.lang.String str75 = locale72.getISO3Country();
        java.lang.String str76 = locale72.getDisplayName();
        java.lang.String str77 = locale72.getDisplayScript();
        java.util.Locale.setDefault(category48, locale72);
        java.util.Locale locale80 = new java.util.Locale("31-dic-2000 17.07.10");
        java.lang.String str81 = locale72.getDisplayCountry(locale80);
        java.lang.String str82 = locale44.getDisplayLanguage(locale80);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone28, locale44);
        java.lang.String str84 = locale44.getDisplayVariant();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645542728229,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=12,SECOND=8,MILLISECOND=326,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645513928229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=326,ZONE_OFFSET=97,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513928229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=326,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "China" + "'", str40, "China");
        org.junit.Assert.assertEquals(locale44.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese (China)" + "'", str46, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1/1/70 12:00 AM" + "'", str47, "1/1/70 12:00 AM");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8 + "'", int53 == 8);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "zh-CN" + "'", str73, "zh-CN");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CHN" + "'", str75, "CHN");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str76, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals(locale80.toString(), "31-dic-2000 17.07.10");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "China" + "'", str81, "China");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(fastDateFormat83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
    }

    @Test
    public void test05595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05595");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("7:08:27 AM GMT+00:00", (double) 1645513898660L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.64551389866E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05596");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str6 = fastDateFormat2.getPattern();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor10 = languageRangeList8.listIterator();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor11 = languageRangeList8.iterator();
        java.util.Date date13 = new java.util.Date((long) (short) 100);
        date13.setDate(32770);
        int int16 = languageRangeList8.lastIndexOf((java.lang.Object) date13);
        java.time.Instant instant17 = date13.toInstant();
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getSeconds();
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getTimezoneOffset();
        date21.setMinutes(6);
        boolean boolean25 = date19.after(date21);
        java.util.Calendar.Builder builder26 = builder18.setInstant(date21);
        int int27 = date21.getDay();
        int int28 = date21.getTimezoneOffset();
        boolean boolean29 = date13.before(date21);
        date13.setYear((int) (short) -1);
        java.time.Instant instant32 = date13.toInstant();
        java.lang.String str33 = fastDateFormat2.format(date13);
        java.lang.Object obj34 = date13.clone();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "h:mm:ss a z" + "'", str6, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeItor10);
        org.junit.Assert.assertNotNull(languageRangeItor11);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Sep 20 00:00:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(instant17);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str33, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "Wed Sep 20 00:00:00 GMT+00:00 1899");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "Wed Sep 20 00:00:00 GMT+00:00 1899");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "Wed Sep 20 00:00:00 GMT+00:00 1899");
    }

    @Test
    public void test05597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05597");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar23.clear(7);
        boolean boolean26 = calendar23.isWeekDateSupported();
        java.util.TimeZone timeZone27 = calendar23.getTimeZone();
        int int29 = calendar23.getMaximum(3);
        java.lang.String str30 = fastDateFormat2.format(calendar23);
        java.util.Locale locale31 = fastDateFormat2.getLocale();
        int int32 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.Object obj33 = fastDateFormat2.clone();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        calendar40.clear(7);
        boolean boolean43 = calendar40.isWeekDateSupported();
        int int45 = calendar40.getMinimum(4);
        java.util.TimeZone timeZone46 = calendar40.getTimeZone();
        timeZone46.setRawOffset(7);
        boolean boolean49 = fastDateFormat2.equals((java.lang.Object) 7);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone51.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone53, locale55);
        calendar56.clear(7);
        calendar56.set(16, (int) (byte) 0);
        java.time.Instant instant62 = calendar56.toInstant();
        boolean boolean64 = calendar56.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar56.set(17, 9, (int) '#', 0, 10, 17);
        int int72 = calendar56.getWeekYear();
        long long73 = calendar56.getTimeInMillis();
        calendar56.set(7, (int) 'x', 4);
        int int79 = calendar56.getActualMinimum((int) (byte) 0);
        java.lang.StringBuffer stringBuffer80 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer81 = fastDateFormat2.format(calendar56, stringBuffer80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513928288,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=385,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str16, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513928288,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=385,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str30, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 18 + "'", int32 == 18);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=7,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=385,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-61630588182712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=4,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=385,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 17 + "'", int72 == 17);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-61604322582712L) + "'", long73 == (-61604322582712L));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test05598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05598");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar10.clear(7);
        calendar10.set(16, (int) (byte) 0);
        java.time.Instant instant16 = calendar10.toInstant();
        boolean boolean18 = calendar10.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str19 = fastDateFormat3.format(calendar10);
        java.lang.Object obj20 = fastDateFormat3.clone();
        java.util.Locale locale21 = fastDateFormat3.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale21);
        java.lang.String str23 = locale21.getLanguage();
        java.lang.String str24 = locale21.getVariant();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513928318,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=415,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test05599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05599");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str4 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        parsePosition7.setErrorIndex(5);
        parsePosition7.setErrorIndex(1);
        java.lang.Object obj12 = fastDateFormat2.parseObject("22 Feb 2022 07:07:39 GMT", parsePosition7);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale20 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale20.getScript();
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale20.getDisplayVariant(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone15, locale26);
        java.lang.String str29 = locale26.getLanguage();
        boolean boolean30 = fastDateFormat2.equals((java.lang.Object) str29);
        java.lang.String str32 = fastDateFormat2.format((long) (byte) 0);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        java.lang.String str37 = fastDateFormat36.toString();
        java.text.ParsePosition parsePosition40 = new java.text.ParsePosition(53);
        java.lang.Object obj41 = fastDateFormat36.parseObject("h:mm:ss a z", parsePosition40);
        java.lang.String str42 = parsePosition40.toString();
        java.lang.Object obj43 = fastDateFormat2.parseObject("java.text.FieldPosition[field=49,attribute=null,beginIndex=0,endIndex=0]", parsePosition40);
        java.lang.Class<?> wildcardClass44 = fastDateFormat2.getClass();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale20.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str32, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str37, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str42, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test05600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05600");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.setLanguageTag("CHN");
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Locale locale14 = new java.util.Locale("", "hi!", "");
        java.lang.String str15 = locale10.getDisplayVariant(locale14);
        java.lang.String str16 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale10);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale10);
        java.util.Set<java.lang.String> strSet19 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale10.getLanguage();
        java.util.Locale.Builder builder21 = builder0.setLocale(locale10);
        java.util.Locale.Builder builder22 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder0.addUnicodeLocaleAttribute("7:11:45 AM GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 7:11:45 AM GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale14.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645513928472,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=569,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test05601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05601");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "france" + "'", str2, "france");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "france" + "'", str4, "france");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "france" + "'", str5, "france");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test05602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05602");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar calendar15 = builder10.build();
        java.util.Calendar.Builder builder17 = builder10.setLenient(true);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(7);
        calendar27.set(16, (int) (byte) 0);
        int int33 = calendar27.getFirstDayOfWeek();
        java.lang.String str34 = fastDateFormat20.format(calendar27);
        calendar27.set((int) (short) 100, 37, 2);
        java.util.TimeZone timeZone39 = calendar27.getTimeZone();
        int int40 = timeZone39.getRawOffset();
        int int41 = timeZone39.getRawOffset();
        java.util.Calendar.Builder builder42 = builder10.setTimeZone(timeZone39);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder44 = builder42.setInstant(35L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-61609075200097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=253,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=37,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=2,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=640,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str34, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test05603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05603");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder18 = builder10.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Calendar.Builder builder27 = builder18.setTimeOfDay(39, (int) (byte) 100, 42, 52);
        java.util.Calendar.Builder builder31 = builder18.setDate(18, 59, 17);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getSeconds();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        date35.setMinutes(6);
        boolean boolean39 = date33.after(date35);
        java.util.Calendar.Builder builder40 = builder32.setInstant(date35);
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 36);
        java.util.Calendar.Builder builder46 = builder42.setWeekDate(2, 0, 2022);
        int[] intArray47 = new int[] {};
        java.util.Calendar.Builder builder48 = builder42.setFields(intArray47);
        java.util.Calendar.Builder builder49 = builder18.setFields(intArray47);
        java.util.Calendar.Builder builder54 = builder49.setTimeOfDay(3, 2, 0, 6);
        java.util.Calendar.Builder builder56 = builder49.setLenient(true);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone59);
        int int62 = timeZone59.getRawOffset();
        java.util.Calendar.Builder builder63 = builder49.setTimeZone(timeZone59);
        java.util.Calendar.Builder builder68 = builder63.setTimeOfDay(25, 3, 25, 49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder71 = builder63.set(1969, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(fastDateFormat61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test05604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05604");
        java.util.Locale locale1 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale2 = null;
        java.lang.String str3 = locale1.getDisplayScript(locale2);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("Feb 22, 2022 7:06:39 AM");
        java.lang.String str7 = locale1.getDisplayCountry(locale6);
        java.lang.String str8 = locale1.toLanguageTag();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String str14 = locale12.getDisplayLanguage();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category15, locale17);
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Date date20 = new java.util.Date();
        int int21 = date20.getSeconds();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        date22.setMinutes(6);
        boolean boolean26 = date20.after(date22);
        java.util.Calendar.Builder builder27 = builder19.setInstant(date22);
        java.util.Calendar.Builder builder29 = builder27.setInstant((long) 36);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder31 = builder29.setLocale(locale30);
        java.lang.String str32 = locale30.toLanguageTag();
        java.lang.String str33 = locale30.getScript();
        java.lang.String str34 = locale30.getISO3Language();
        java.lang.String str35 = locale30.getLanguage();
        java.util.Locale.setDefault(category15, locale30);
        java.util.Locale locale37 = java.util.Locale.getDefault(category15);
        java.util.Locale locale38 = java.util.Locale.getDefault(category15);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale43 = new java.util.Locale("", "hi!", "");
        java.lang.String str44 = locale39.getDisplayVariant(locale43);
        java.lang.String str45 = locale39.getISO3Language();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone50.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone52, locale54);
        calendar55.clear(7);
        calendar55.set(16, (int) (byte) 0);
        java.time.Instant instant61 = calendar55.toInstant();
        boolean boolean63 = calendar55.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str64 = fastDateFormat48.format(calendar55);
        java.lang.Object obj65 = fastDateFormat48.clone();
        java.util.Locale locale66 = fastDateFormat48.getLocale();
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = locale66.getDisplayName();
        java.lang.String str69 = locale39.getDisplayCountry(locale66);
        java.lang.String str70 = locale38.getDisplayName(locale66);
        java.lang.String str71 = locale12.getDisplayVariant(locale38);
        java.lang.String str72 = locale1.getDisplayScript(locale38);
        java.lang.String str73 = locale38.getISO3Language();
        org.junit.Assert.assertEquals(locale1.toString(), "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "und" + "'", str8, "und");
        org.junit.Assert.assertEquals(locale12.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "7:07:39 am utc" + "'", str14, "7:07:39 am utc");
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr-FR" + "'", str32, "fr-FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "fr" + "'", str35, "fr");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale43.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zho" + "'", str45, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645513928579,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=676,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zh" + "'", str67, "zh");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u4e2d\u6587" + "'", str68, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u4e2d\u56fd" + "'", str69, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u6cd5\u6587\u6cd5\u56fd)" + "'", str70, "\u6cd5\u6587\u6cd5\u56fd)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "fra" + "'", str73, "fra");
    }

    @Test
    public void test05605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05605");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Date date27 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date27.setMonth(4);
        java.util.Calendar.Builder builder30 = builder12.setInstant(date27);
        java.util.Calendar.Builder builder32 = builder12.setInstant(1645513674789L);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone36);
        int int40 = timeZone36.getOffset(1645513656868L);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        boolean boolean46 = timeZone36.hasSameRules(timeZone42);
        java.util.Calendar.Builder builder47 = builder12.setTimeZone(timeZone36);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone36);
        calendar48.set(800302, 38, (int) (byte) 100);
        java.util.TimeZone timeZone53 = calendar48.getTimeZone();
        boolean boolean54 = timeZone53.observesDaylightTime();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645513928605,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=702,ZONE_OFFSET=97,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=800302,MONTH=38,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=100,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=702,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test05606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05606");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        java.util.Date date27 = new java.util.Date();
        java.lang.String str28 = date27.toGMTString();
        boolean boolean29 = date25.before(date27);
        int int30 = date25.getHours();
        java.lang.String str31 = date25.toGMTString();
        int int32 = date25.getDay();
        boolean boolean33 = languageRangeList13.remove((java.lang.Object) date25);
        java.util.Locale locale35 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale35.getScript();
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.lang.String str42 = locale35.getDisplayVariant(locale41);
        java.util.Set<java.lang.String> strSet43 = locale35.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet43);
        languageRangeList13.clear();
        java.util.Locale locale47 = new java.util.Locale("February 22, 2022");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        boolean boolean49 = languageRangeList13.containsAll((java.util.Collection<java.lang.String>) strSet48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange51 = languageRangeList13.remove(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22 Feb 2022 07:12:08 GMT" + "'", str28, "22 Feb 2022 07:12:08 GMT");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "22 Feb 2022 07:12:08 GMT" + "'", str31, "22 Feb 2022 07:12:08 GMT");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertEquals(locale47.toString(), "february 22, 2022");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test05607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05607");
        java.text.AttributedCharacterIterator.Attribute attribute1 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = attribute1.equals((java.lang.Object) timeZone2);
        java.lang.String str4 = attribute1.toString();
        java.lang.String str5 = attribute1.toString();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        int int10 = timeZone6.getOffset(1645513657024L);
        timeZone6.setID("fra");
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone6.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone6, locale15);
        boolean boolean20 = attribute1.equals((java.lang.Object) calendar19);
        java.util.Date date21 = calendar19.getTime();
        java.text.AttributedCharacterIterator.Attribute attribute22 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = attribute22.equals((java.lang.Object) timeZone23);
        java.lang.String str25 = timeZone23.getID();
        calendar19.setTimeZone(timeZone23);
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        boolean boolean29 = locale27.hasExtensions();
        java.lang.String str30 = locale27.getDisplayCountry();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.lang.String str32 = locale27.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((-46800000), timeZone23, locale27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style -46800000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str4, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str5, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645513928676,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=773,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(attribute22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2 f\351vr. 2022 07:09:37" + "'", str25, "2 f\351vr. 2022 07:09:37");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh" + "'", str28, "zh");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u6587" + "'", str32, "\u4e2d\u6587");
    }

    @Test
    public void test05608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05608");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) 10);
        java.lang.String str2 = parsePosition1.toString();
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getSeconds();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        date6.setMinutes(6);
        boolean boolean10 = date4.after(date6);
        java.util.Calendar.Builder builder11 = builder3.setInstant(date6);
        java.util.Calendar.Builder builder13 = builder11.setInstant((long) 36);
        java.util.Calendar.Builder builder17 = builder13.setWeekDate(17, 37, 6);
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        java.lang.String str27 = locale18.getDisplayName(locale25);
        java.lang.String str28 = locale25.getDisplayCountry();
        java.util.Calendar.Builder builder29 = builder13.setLocale(locale25);
        boolean boolean30 = parsePosition1.equals((java.lang.Object) locale25);
        boolean boolean31 = locale25.hasExtensions();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=10,errorIndex=-1]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645513928760,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=857,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587" + "'", str27, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u56fd" + "'", str28, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05609");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.clear(7);
        boolean boolean19 = calendar9.isWeekDateSupported();
        calendar9.setFirstDayOfWeek(30);
        java.lang.String str22 = calendar9.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar9.roll(124, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=30,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=877,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str16, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "gregory" + "'", str22, "gregory");
    }

    @Test
    public void test05610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05610");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        int int39 = calendar33.getFirstDayOfWeek();
        java.lang.String str40 = fastDateFormat26.format(calendar33);
        calendar33.set((int) (short) 100, 37, 2);
        java.lang.String str45 = fastDateFormat22.format(calendar33);
        java.util.Locale locale46 = fastDateFormat22.getLocale();
        boolean boolean47 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.String str48 = fastDateFormat22.getPattern();
        boolean boolean49 = languageRangeList1.remove((java.lang.Object) fastDateFormat22);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap50 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList51 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap50);
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream54 = strSet53.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet53.parallelStream();
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags(languageRangeList51, (java.util.Collection<java.lang.String>) strSet53);
        java.util.Date date57 = new java.util.Date();
        long long58 = date57.getTime();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getTimezoneOffset();
        int int61 = date59.getSeconds();
        int int62 = date59.getMinutes();
        long long63 = date59.getTime();
        java.lang.String str64 = date59.toLocaleString();
        boolean boolean65 = date57.before(date59);
        java.time.Instant instant66 = date57.toInstant();
        boolean boolean67 = languageRangeList51.remove((java.lang.Object) instant66);
        java.util.Locale.LanguageRange languageRange69 = new java.util.Locale.LanguageRange("France");
        double double70 = languageRange69.getWeight();
        java.lang.String str71 = languageRange69.getRange();
        boolean boolean72 = languageRangeList51.add(languageRange69);
        boolean boolean74 = languageRange69.equals((java.lang.Object) "22 Feb 2022 07:11:10 GMT");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str23, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58914146871204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=893,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str40, "7:12:08 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:12:08 AM GMT+00:00" + "'", str45, "7:12:08 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "h:mm:ss a z" + "'", str48, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeList51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(strList56);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645513928796L + "'", long58 == 1645513928796L);
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 12 + "'", int62 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645513928796L + "'", long63 == 1645513928796L);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "22 f\351vr. 2022 07:12:08" + "'", str64, "22 f\351vr. 2022 07:12:08");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 1.0d + "'", double70 == 1.0d);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "france" + "'", str71, "france");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test05611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05611");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        date0.setMinutes(6);
        int int4 = date0.getMinutes();
        java.util.Date date11 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean12 = date0.before(date11);
        int int13 = date0.getDate();
        int int14 = date0.getMonth();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 6 + "'", int4 == 6);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test05612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05612");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.Locale locale22 = new java.util.Locale("", "hi!", "");
        java.util.Calendar.Builder builder23 = builder18.setLocale(locale22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale22);
        calendar24.setLenient(true);
        java.util.Calendar.Builder builder29 = new java.util.Calendar.Builder();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getSeconds();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        date32.setMinutes(6);
        boolean boolean36 = date30.after(date32);
        java.util.Calendar.Builder builder37 = builder29.setInstant(date32);
        java.util.Calendar.Builder builder39 = builder37.setInstant((long) 36);
        java.util.Calendar.Builder builder43 = builder39.setWeekDate(17, 37, 6);
        java.util.Calendar calendar44 = builder39.build();
        java.util.Calendar.Builder builder48 = builder39.setDate(48, (int) '4', 130);
        java.util.Calendar.Builder builder50 = builder39.setLenient(true);
        java.util.Calendar.Builder builder54 = builder50.setTimeOfDay(1969, 35, 0);
        java.util.Calendar.Builder builder56 = builder54.setLenient(true);
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone59);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone62.hasSameRules(timeZone64);
        java.util.Locale locale66 = java.util.Locale.CHINA;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone64, locale66);
        calendar67.clear(7);
        calendar67.set(16, (int) (byte) 0);
        java.time.Instant instant73 = calendar67.toInstant();
        boolean boolean75 = calendar67.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str76 = fastDateFormat60.format(calendar67);
        java.lang.Object obj77 = fastDateFormat60.clone();
        java.util.Locale locale78 = fastDateFormat60.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale78);
        java.lang.String str80 = locale78.getLanguage();
        java.util.Calendar.Builder builder81 = builder56.setLocale(locale78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = calendar24.getDisplayName((-46800000), 100, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals(locale22.toString(), "_HI!");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645513928839,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=936,ZONE_OFFSET=97,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Feb 22 07:12:08 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:06:08 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-61609075200097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=253,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(timeZone64);
// flaky:         org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645513928839,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=936,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "zh" + "'", str80, "zh");
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test05613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05613");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.lang.String str21 = timeZone18.getID();
        java.util.TimeZone.setDefault(timeZone18);
        java.util.Locale locale26 = new java.util.Locale("Feb 22, 2022 7:06:49 AM", "7:07:49 AM UTC", "22 Feb 2022 07:07:44 GMT");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(56, timeZone18, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 56");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513928884,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=981,ZONE_OFFSET=97,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2 f\351vr. 2022 07:09:37" + "'", str21, "2 f\351vr. 2022 07:09:37");
        org.junit.Assert.assertEquals(locale26.toString(), "feb 22, 2022 7:06:49 am_7:07:49 AM UTC_22 Feb 2022 07:07:44 GMT");
    }

    @Test
    public void test05614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05614");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("22 Feb 2022 07:09:47 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05615");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor3 = languageRangeList1.listIterator();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        java.lang.String str8 = date4.toLocaleString();
        int int9 = languageRangeList1.lastIndexOf((java.lang.Object) date4);
        java.lang.String str10 = date4.toLocaleString();
        java.util.Date date11 = new java.util.Date();
        int int12 = date11.getTimezoneOffset();
        int int13 = date11.getSeconds();
        int int14 = date11.getMinutes();
        int int15 = date11.getDay();
        java.lang.String str16 = date11.toGMTString();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        calendar26.clear(7);
        calendar26.set(16, (int) (byte) 0);
        java.time.Instant instant32 = calendar26.toInstant();
        boolean boolean34 = calendar26.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str35 = fastDateFormat19.format(calendar26);
        java.lang.Object obj36 = fastDateFormat19.clone();
        java.lang.String str37 = fastDateFormat19.toString();
        java.util.Locale locale38 = fastDateFormat19.getLocale();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getTimezoneOffset();
        java.util.Date date41 = new java.util.Date();
        java.lang.String str42 = date41.toGMTString();
        boolean boolean43 = date39.before(date41);
        java.lang.String str44 = date41.toLocaleString();
        int int45 = date41.getTimezoneOffset();
        date41.setDate(292278994);
        java.lang.StringBuffer stringBuffer48 = null;
        java.lang.StringBuffer stringBuffer49 = fastDateFormat19.format(date41, stringBuffer48);
        int int50 = date41.getDay();
        boolean boolean51 = date11.after(date41);
        boolean boolean52 = date4.before(date41);
        date41.setMonth(130);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeItor3);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:06:09 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 f\351vr. 2022 07:06:09" + "'", str8, "22 f\351vr. 2022 07:06:09");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "22 f\351vr. 2022 07:06:09" + "'", str10, "22 f\351vr. 2022 07:06:09");
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Feb 22 07:12:09 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "22 Feb 2022 07:12:08 GMT" + "'", str16, "22 Feb 2022 07:12:08 GMT");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645513928924,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=21,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "FastDateFormat[]" + "'", str37, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Feb 22 07:12:09 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Wed Nov 16 07:12:09 GMT+00:00 802264");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "22 Feb 2022 07:12:08 GMT" + "'", str42, "22 Feb 2022 07:12:08 GMT");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22 f\351vr. 2022 07:12:09" + "'", str44, "22 f\351vr. 2022 07:12:09");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(stringBuffer49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test05616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05616");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "ITA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setVariant("7:10:28 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 7:10:28 AM GMT+00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05617");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.lang.String str3 = timeZone1.getID();
        timeZone1.setRawOffset(10);
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale.Builder builder9 = builder6.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale10 = builder6.build();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone1, locale10);
        boolean boolean12 = timeZone1.observesDaylightTime();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getISO3Language();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone1, locale13);
        int int20 = timeZone1.getOffset(1645513763957L);
        java.lang.Object obj21 = timeZone1.clone();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str3, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645513928974,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=984,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645513928974,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=8,MILLISECOND=984,ZONE_OFFSET=10,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05618");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("en");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:10:10 AM GMT+00:00", timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test05619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05619");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format(1645513657001L);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        java.util.TimeZone timeZone17 = calendar16.getTimeZone();
        calendar16.set(5, 16);
        boolean boolean21 = parsePosition10.equals((java.lang.Object) 5);
        java.lang.Object obj22 = fastDateFormat2.parseObject("2022-02-22 08:37:55", parsePosition10);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayCountry(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale26);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.lang.String str42 = locale33.getDisplayName(locale40);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.lang.String str45 = locale40.getDisplayName(locale43);
        java.lang.String str46 = locale40.getISO3Language();
        boolean boolean47 = fastDateFormat32.equals((java.lang.Object) locale40);
        java.lang.String str48 = fastDateFormat32.getPattern();
        java.lang.String str49 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.lang.String str55 = fastDateFormat53.toString();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition(16);
        parsePosition58.setErrorIndex(5);
        parsePosition58.setErrorIndex(1);
        java.lang.Object obj63 = fastDateFormat53.parseObject("22 Feb 2022 07:07:39 GMT", parsePosition58);
        java.lang.Object obj64 = fastDateFormat32.parseObject("java.text.ParsePosition[index=52,errorIndex=0]", parsePosition58);
        java.lang.Object obj65 = fastDateFormat2.parseObject("java.text.ParsePosition[index=16,errorIndex=5]", parsePosition58);
        boolean boolean67 = fastDateFormat2.equals((java.lang.Object) "7:10:35 AM");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:07:37 AM GMT+00:00" + "'", str7, "7:07:37 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=102,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "China" + "'", str31, "China");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645513929005,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=102,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str45, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zho" + "'", str46, "zho");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u5e74\u6708\u65e5' ah:mm" + "'", str48, "\u5e74\u6708\u65e5' ah:mm");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5e74\u6708\u65e5' ah:mm" + "'", str49, "\u5e74\u6708\u65e5' ah:mm");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "h:mm:ss a z" + "'", str54, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str55, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test05620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05620");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.lang.String[] strArray43 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        boolean boolean46 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean48 = languageRangeList13.remove((java.lang.Object) false);
        java.util.Collection<java.lang.String> strCollection49 = null;
        java.lang.String str50 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strCollection49);
        int int52 = languageRangeList13.indexOf((java.lang.Object) "java.text.FieldPosition[field=10,attribute=null,beginIndex=0,endIndex=16]");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test05621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05621");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.lang.String str15 = timeZone4.getID();
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.lang.String str18 = locale17.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale17);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone4, locale17);
        calendar20.setMinimalDaysInFirstWeek(44);
        calendar20.setTimeInMillis(1645513672289L);
        boolean boolean25 = attribute0.equals((java.lang.Object) calendar20);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        calendar32.clear(7);
        calendar32.set(16, (int) (byte) 0);
        java.time.Instant instant38 = calendar32.toInstant();
        boolean boolean40 = calendar32.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar32.set(17, 9, (int) '#', 0, 10, 17);
        int int48 = calendar32.getWeekYear();
        long long49 = calendar32.getTimeInMillis();
        java.util.Date date50 = calendar32.getTime();
        calendar32.clear();
        calendar32.set(1969, 69, 43, 0, 2022, (int) (byte) 10);
        calendar32.set(41, 6, 117, 43, 46);
        boolean boolean65 = calendar20.equals((java.lang.Object) 117);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513929053,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=150,ZONE_OFFSET=97,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str15, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "fra" + "'", str18, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645513672289,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=44,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=52,MILLISECOND=386,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=41,MONTH=6,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=117,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=43,MINUTE=46,SECOND=10,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 17 + "'", int48 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-61604322582947L) + "'", long49 == (-61604322582947L));
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Thu Nov 04 00:10:17 GMT+00:00 17");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test05622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05622");
        java.util.Date date6 = new java.util.Date(1910, 3, 292269054, 1969, 20, 32769);
        date6.setSeconds(292278994);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Mar 22 07:02:34 GMT+00:00 804025");
    }

    @Test
    public void test05623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05623");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.lang.String[] strArray43 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        boolean boolean46 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strList44);
        int int47 = languageRangeList13.size();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        calendar54.clear(7);
        calendar54.set(16, (int) (byte) 0);
        java.time.Instant instant60 = calendar54.toInstant();
        int int61 = calendar54.getMinimalDaysInFirstWeek();
        int int62 = calendar54.getMinimalDaysInFirstWeek();
        java.text.AttributedCharacterIterator.Attribute attribute63 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.lang.String str64 = attribute63.toString();
        boolean boolean65 = calendar54.before((java.lang.Object) str64);
        int int66 = languageRangeList13.indexOf((java.lang.Object) calendar54);
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone68);
        java.lang.String str70 = fastDateFormat69.toString();
        boolean boolean71 = fastDateFormat69.getTimeZoneOverridesCalendar();
        int int72 = languageRangeList13.indexOf((java.lang.Object) boolean71);
        java.lang.Object[] objArray73 = languageRangeList13.toArray();
        languageRangeList13.clear();
        languageRangeList13.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor77 = languageRangeList13.listIterator(2744);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2744");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645513929091,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=188,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(attribute63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str64, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str70, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
    }

    @Test
    public void test05624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05624");
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        java.time.Instant instant19 = calendar13.toInstant();
        boolean boolean21 = calendar13.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str22 = fastDateFormat6.format(calendar13);
        java.lang.Object obj23 = fastDateFormat6.clone();
        java.util.Locale locale24 = fastDateFormat6.getLocale();
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale locale26 = null;
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale28.getDisplayCountry();
        java.lang.String str32 = locale28.getDisplayLanguage();
        java.lang.String str33 = locale28.getDisplayLanguage();
        java.lang.String str34 = locale24.getDisplayLanguage(locale28);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.lang.String str36 = locale35.getVariant();
        java.lang.String str37 = locale24.getDisplayLanguage(locale35);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.lang.String str43 = locale38.getDisplayVariant(locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale38);
        java.lang.String str45 = locale38.getDisplayVariant();
        java.lang.String str46 = locale38.getDisplayVariant();
        java.lang.String str47 = locale24.getDisplayScript(locale38);
        java.util.Locale.setDefault(category2, locale38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(55, 24228570, locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 24228570");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513929131,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=228,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u6587" + "'", str32, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587" + "'", str33, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "cinese" + "'", str37, "cinese");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645513929131,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=228,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test05625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05625");
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Locale locale9 = new java.util.Locale("", "hi!", "");
        java.lang.String str10 = locale5.getDisplayVariant(locale9);
        java.lang.String str11 = locale3.getDisplayVariant(locale5);
        java.lang.String str13 = locale5.getExtension('x');
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, locale5);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(38, locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 38");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale9.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645513929178,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=275,ZONE_OFFSET=97,DST_OFFSET=0]");
    }

    @Test
    public void test05626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05626");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        boolean boolean14 = calendar6.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar6.set(17, 9, (int) '#', 0, 10, 17);
        int int22 = calendar6.getWeekYear();
        long long23 = calendar6.getTimeInMillis();
        java.util.Date date24 = calendar6.getTime();
        calendar6.clear();
        java.util.TimeZone timeZone26 = calendar6.getTimeZone();
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        calendar36.clear(7);
        calendar36.set(16, (int) (byte) 0);
        java.time.Instant instant42 = calendar36.toInstant();
        boolean boolean44 = calendar36.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str45 = fastDateFormat29.format(calendar36);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray54 = new java.util.Locale[] { locale49, locale50, locale51, locale52, locale53 };
        java.util.ArrayList<java.util.Locale> localeList55 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList55, localeArray54);
        java.util.Locale locale57 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, (java.util.Collection<java.util.Locale>) localeList55);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = java.util.Locale.FRANCE;
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale61, locale62, locale63, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList67);
        int int70 = languageRangeList47.lastIndexOf((java.lang.Object) languageRangeList59);
        boolean boolean71 = languageRangeList47.isEmpty();
        java.util.Date date72 = new java.util.Date();
        int int73 = date72.getTimezoneOffset();
        java.util.Date date74 = new java.util.Date();
        java.lang.String str75 = date74.toGMTString();
        boolean boolean76 = date72.before(date74);
        int int77 = languageRangeList47.lastIndexOf((java.lang.Object) date74);
        date74.setMinutes(36);
        java.lang.String str80 = fastDateFormat29.format(date74);
        date74.setSeconds(52);
        date74.setMinutes((int) (byte) -1);
        long long85 = date74.getTime();
        boolean boolean86 = calendar6.after((java.lang.Object) date74);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 17 + "'", int22 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61604322582808L) + "'", long23 == (-61604322582808L));
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Thu Nov 04 00:10:17 GMT+00:00 17");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645513929193,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=290,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(locale57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Tue Feb 22 07:12:09 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Tue Feb 22 06:59:52 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "22 Feb 2022 07:12:09 GMT" + "'", str75, "22 Feb 2022 07:12:09 GMT");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645513192193L + "'", long85 == 1645513192193L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test05627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05627");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        java.util.Date date28 = new java.util.Date();
        java.lang.String str29 = date28.toGMTString();
        boolean boolean30 = date26.before(date28);
        int int31 = languageRangeList1.lastIndexOf((java.lang.Object) date28);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale35, locale36, locale37, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList53);
        int int56 = languageRangeList33.lastIndexOf((java.lang.Object) languageRangeList45);
        boolean boolean57 = languageRangeList33.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strMap61);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale66, locale67, locale68, locale69, locale70 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.Locale.FilteringMode filteringMode75 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList72, filteringMode75);
        java.util.Locale locale77 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.Locale locale78 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList76);
        int int79 = languageRangeList1.size();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap80);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:12:09 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Feb 22 07:12:09 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22 Feb 2022 07:12:09 GMT" + "'", str29, "22 Feb 2022 07:12:09 GMT");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertTrue("'" + filteringMode75 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode75.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNull(locale77);
        org.junit.Assert.assertNull(locale78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(languageRangeList81);
    }

    @Test
    public void test05628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05628");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition(16);
        parsePosition28.setErrorIndex(5);
        parsePosition28.setErrorIndex(1);
        java.lang.Object obj33 = fastDateFormat2.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition28);
        java.lang.Object obj34 = null;
        boolean boolean35 = parsePosition28.equals(obj34);
        parsePosition28.setErrorIndex(39);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146870682,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=415,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str20, "7:12:09 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str25, "7:12:09 AM GMT+00:00");
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05629");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        java.lang.String str2 = locale1.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale1);
        java.util.Locale locale4 = java.util.Locale.TAIWAN;
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.lang.String str6 = locale1.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        calendar7.set((-1), (int) (byte) 0, 12, 12, 43, 1);
        int int15 = calendar7.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone16 = calendar7.getTimeZone();
        timeZone16.setRawOffset(30);
        int int19 = timeZone16.getDSTSavings();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str5, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u6cd5\u56fd" + "'", str6, "\u6cd5\u56fd");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=30,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=-1,MONTH=0,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=12,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=12,MINUTE=43,SECOND=1,MILLISECOND=431,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05630");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Date date10 = new java.util.Date((int) '4', 100, 59, 0, 27, 0);
        boolean boolean11 = timeZone1.inDaylightTime(date10);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jun 28 00:27:00 GMT+00:00 1960");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test05631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05631");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar23.clear(7);
        boolean boolean26 = calendar23.isWeekDateSupported();
        java.util.TimeZone timeZone27 = calendar23.getTimeZone();
        int int29 = calendar23.getMaximum(3);
        java.lang.String str30 = fastDateFormat2.format(calendar23);
        java.util.Locale locale31 = fastDateFormat2.getLocale();
        int int32 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.Object obj33 = fastDateFormat2.clone();
        java.lang.String str34 = fastDateFormat2.toString();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        calendar41.clear(7);
        calendar41.set(16, (int) (byte) 0);
        java.time.Instant instant47 = calendar41.toInstant();
        boolean boolean49 = calendar41.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar41.set(17, 9, (int) '#', 0, 10, 17);
        calendar41.roll(5, 14);
        int int60 = calendar41.getWeeksInWeekYear();
        java.time.Instant instant61 = calendar41.toInstant();
        java.util.Date date62 = java.util.Date.from(instant61);
        java.util.Date date63 = java.util.Date.from(instant61);
        java.lang.StringBuffer stringBuffer64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer65 = fastDateFormat2.format(date63, stringBuffer64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513929352,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=449,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str16, "7:12:09 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513929353,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=450,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str30, "7:12:09 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 18 + "'", int32 == 18);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str34, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-61603112982647,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=322,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=450,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 52 + "'", int60 == 52);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Thu Nov 18 00:10:17 GMT+00:00 17");
        org.junit.Assert.assertNotNull(date63);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Thu Nov 18 00:10:17 GMT+00:00 17");
    }

    @Test
    public void test05632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05632");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        int int36 = calendar30.getFirstDayOfWeek();
        java.lang.String str37 = fastDateFormat23.format(calendar30);
        calendar30.set((int) (short) 100, 37, 2);
        java.util.TimeZone timeZone42 = calendar30.getTimeZone();
        int int43 = timeZone42.getRawOffset();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        int int49 = timeZone45.getOffset(1645513657024L);
        timeZone45.setID("fra");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone45.hasSameRules(timeZone52);
        timeZone52.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone52);
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale57.getLanguage();
        boolean boolean59 = locale57.hasExtensions();
        java.lang.String str60 = locale57.getDisplayCountry();
        java.lang.String str61 = locale57.getDisplayLanguage();
        java.lang.String str62 = locale57.getDisplayLanguage();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone52, locale57);
        boolean boolean64 = timeZone42.hasSameRules(timeZone52);
        java.util.Calendar.Builder builder65 = builder20.setTimeZone(timeZone52);
        java.util.Calendar.Builder builder69 = builder65.setTimeOfDay(40, 53, 103);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone71.hasSameRules(timeZone73);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone73);
        java.util.TimeZone timeZone76 = calendar75.getTimeZone();
        java.time.Instant instant77 = calendar75.toInstant();
        calendar75.clear();
        java.util.Date date79 = calendar75.getTime();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder80 = builder65.setInstant(date79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:09 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:09 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=37,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=2,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=477,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str37, "7:12:09 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "zh" + "'", str58, "zh");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e2d\u6587" + "'", str61, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e2d\u6587" + "'", str62, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645513929380,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=449,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(calendar75);
        org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=-97,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
    }

    @Test
    public void test05633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05633");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.lang.String[] strArray43 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        boolean boolean46 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale62, locale63, locale64, locale65, locale66 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale locale70 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList60, (java.util.Collection<java.util.Locale>) localeList68);
        int int71 = languageRangeList48.lastIndexOf((java.lang.Object) languageRangeList60);
        boolean boolean72 = languageRangeList48.isEmpty();
        int int73 = languageRangeList48.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor74 = languageRangeList48.iterator();
        languageRangeList48.clear();
        boolean boolean76 = languageRangeList13.equals((java.lang.Object) languageRangeList48);
        languageRangeList48.clear();
        java.lang.Object[] objArray78 = languageRangeList48.toArray();
        languageRangeList48.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
    }

    @Test
    public void test05634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05634");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.set(13, 32772, (int) (byte) 10, (int) (byte) 0, 0);
        int int14 = calendar6.getMaximum((int) (short) 10);
        int int16 = calendar6.getActualMaximum(0);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Locale locale21 = new java.util.Locale("", "hi!", "");
        java.lang.String str22 = locale17.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale17);
        java.lang.String str24 = locale17.getDisplayVariant();
        java.lang.String str25 = locale17.getDisplayVariant();
        java.util.Locale locale27 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.lang.String str30 = locale28.getDisplayLanguage(locale29);
        java.lang.String str31 = locale17.getDisplayLanguage(locale29);
        boolean boolean32 = calendar6.before((java.lang.Object) locale17);
        int int34 = calendar6.getActualMinimum(5);
        calendar6.setMinimalDaysInFirstWeek(7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=7,ERA=1,YEAR=13,MONTH=32772,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=10,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=0,MINUTE=0,SECOND=9,MILLISECOND=609,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 11 + "'", int14 == 11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale21.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513929512,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=609,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale27.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7:07:37 am utc" + "'", str30, "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e2d\u6587" + "'", str31, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test05635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05635");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange languageRange6 = null;
        boolean boolean7 = languageRangeList1.add(languageRange6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str10 = fastDateFormat8.format((long) ' ');
        java.util.Locale locale11 = fastDateFormat8.getLocale();
        boolean boolean12 = languageRangeList1.equals((java.lang.Object) locale11);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder13.clearExtensions();
        boolean boolean16 = languageRangeList1.contains((java.lang.Object) builder13);
        int int17 = languageRangeList1.size();
        java.util.Set<java.lang.String> strSet18 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Locale.FilteringMode filteringMode19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet18, filteringMode19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(fastDateFormat8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u4e0a\u5348" + "'", str10, "\u4e0a\u5348");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test05636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05636");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        java.util.TimeZone timeZone12 = calendar6.getTimeZone();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        timeZone15.setRawOffset((int) (byte) 1);
        boolean boolean20 = timeZone15.observesDaylightTime();
        boolean boolean21 = timeZone15.observesDaylightTime();
        boolean boolean22 = timeZone12.hasSameRules(timeZone15);
        int int24 = timeZone15.getOffset((-60388591703000L));
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28);
        java.lang.String str30 = fastDateFormat29.toString();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        calendar40.clear(7);
        calendar40.set(16, (int) (byte) 0);
        int int46 = calendar40.getFirstDayOfWeek();
        java.lang.String str47 = fastDateFormat33.format(calendar40);
        calendar40.set((int) (short) 100, 37, 2);
        java.lang.String str52 = fastDateFormat29.format(calendar40);
        java.util.Locale locale53 = fastDateFormat29.getLocale();
        boolean boolean54 = fastDateFormat29.getTimeZoneOverridesCalendar();
        java.lang.String str56 = fastDateFormat29.format(1645513673568L);
        java.util.Locale locale57 = fastDateFormat29.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = timeZone15.getDisplayName(true, 29, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 29");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=709,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str30, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=-58914146870388,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=709,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str47, "7:12:09 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str52, "7:12:09 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "7:07:53 AM GMT+00:00" + "'", str56, "7:07:53 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
    }

    @Test
    public void test05637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05637");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.Calendar.Builder builder32 = builder26.setWeekDate(69, 13, 0);
        java.util.Locale locale34 = new java.util.Locale("feb 22, 2022 7:07:42 am");
        java.util.Calendar.Builder builder35 = builder32.setLocale(locale34);
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.toString();
        boolean boolean40 = fastDateFormat38.getTimeZoneOverridesCalendar();
        java.lang.String str41 = fastDateFormat38.getPattern();
        java.lang.String str42 = fastDateFormat38.getPattern();
        java.lang.String str44 = fastDateFormat38.format(0L);
        java.util.TimeZone timeZone45 = fastDateFormat38.getTimeZone();
        java.util.Calendar.Builder builder46 = builder35.setTimeZone(timeZone45);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:09 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:09 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals(locale34.toString(), "feb 22, 2022 7:07:42 am");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str39, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "h:mm:ss a z" + "'", str41, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "h:mm:ss a z" + "'", str42, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str44, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test05638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05638");
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale5 = new java.util.Locale("");
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.lang.String str15 = locale6.getDisplayName(locale13);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.lang.String str18 = locale13.getDisplayName(locale16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale16);
        java.lang.String str20 = locale5.getDisplayCountry(locale16);
        java.lang.String str21 = locale3.getDisplayVariant(locale16);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Feb 22, 2022 7:07:56 AM", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645513929660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=757,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u4e2d\u6587" + "'", str15, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str18, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645513929660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=757,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513929660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=757,ZONE_OFFSET=97,DST_OFFSET=0]");
    }

    @Test
    public void test05639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05639");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.lang.String str28 = locale24.getDisplayLanguage();
        java.lang.String str29 = locale24.getDisplayLanguage();
        java.lang.String str30 = locale20.getDisplayLanguage(locale24);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Locale locale37 = new java.util.Locale("", "hi!", "");
        java.lang.String str38 = locale33.getDisplayVariant(locale37);
        java.lang.String str39 = locale31.getDisplayVariant(locale33);
        java.lang.String str40 = locale24.getDisplayScript(locale31);
        java.lang.String str41 = locale24.getScript();
        java.util.Locale locale42 = locale24.stripExtensions();
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream44 = strSet43.parallelStream();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513929707,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=804,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u6587" + "'", str28, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587" + "'", str29, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587" + "'", str30, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale37.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(strStream44);
    }

    @Test
    public void test05640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05640");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.util.Date date3 = new java.util.Date(1645513683454L);
        java.lang.String str4 = fastDateFormat1.format(date3);
        date3.setHours(29);
        int int7 = date3.getDate();
        org.junit.Assert.assertNotNull(fastDateFormat1);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Feb 23 05:08:03 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "7:08:03 AM GMT+00:00" + "'", str4, "7:08:03 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
    }

    @Test
    public void test05641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05641");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        int int36 = calendar30.getFirstDayOfWeek();
        java.lang.String str37 = fastDateFormat23.format(calendar30);
        java.util.TimeZone timeZone38 = calendar30.getTimeZone();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone38);
        int int41 = calendar39.getActualMinimum(13);
        java.lang.String str42 = fastDateFormat2.format(calendar39);
        java.util.Locale locale43 = fastDateFormat2.getLocale();
        java.lang.String str45 = fastDateFormat2.format(1645513802205L);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513929739,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=836,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[]" + "'", str20, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645513929739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=836,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "7:12:09 AM GMT+00:00" + "'", str37, "7:12:09 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645513929739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=836,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test05642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05642");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.lang.String str29 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet28);
        java.lang.Object[] objArray30 = languageRangeList13.toArray();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList13.iterator();
        boolean boolean33 = languageRangeList13.equals((java.lang.Object) "22 Feb 2022 07:08:51 GMT");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale37, locale38, locale39, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor47 = languageRangeList35.listIterator(0);
        boolean boolean48 = languageRangeList35.isEmpty();
        java.util.Locale.LanguageRange languageRange49 = null;
        boolean boolean50 = languageRangeList35.add(languageRange49);
        java.util.Locale.LanguageRange[] languageRangeArray51 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList52 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList52, languageRangeArray51);
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray59 = new java.util.Locale[] { locale54, locale55, locale56, locale57, locale58 };
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.Locale locale62 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList52, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale locale66 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale66, locale67, locale68, locale69, locale70 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList72);
        int int75 = languageRangeList52.lastIndexOf((java.lang.Object) languageRangeList64);
        int int77 = languageRangeList64.indexOf((java.lang.Object) '4');
        java.util.Set<java.lang.String> strSet78 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strSet78);
        java.util.stream.Stream<java.lang.String> strStream80 = strList79.stream();
        java.util.Locale.FilteringMode filteringMode81 = null;
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList79, filteringMode81);
        java.util.Locale.LanguageRange languageRange84 = new java.util.Locale.LanguageRange("France");
        java.lang.String str85 = languageRange84.getRange();
        boolean boolean86 = languageRangeList35.add(languageRange84);
        double double87 = languageRange84.getWeight();
        boolean boolean88 = languageRangeList13.add(languageRange84);
        java.lang.Object[] objArray89 = languageRangeList13.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(languageRangeItor31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertNotNull(languageRangeItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(languageRangeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "france" + "'", str85, "france");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 1.0d + "'", double87 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objArray89);
    }

    @Test
    public void test05643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05643");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        long long14 = calendar6.getTimeInMillis();
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513929892,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=9,MILLISECOND=989,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513929892L + "'", long14 == 1645513929892L);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05644");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("7:08:57 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05645");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ita", (double) 1645513779791L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645513779791E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05646");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        java.lang.String str13 = calendar6.getCalendarType();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(7);
        calendar27.set(16, (int) (byte) 0);
        int int33 = calendar27.getFirstDayOfWeek();
        java.lang.String str34 = fastDateFormat20.format(calendar27);
        calendar27.set((int) (short) 100, 37, 2);
        java.lang.String str39 = fastDateFormat16.format(calendar27);
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getTimezoneOffset();
        date40.setMinutes(6);
        int int44 = date40.getMinutes();
        java.util.Date date51 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean52 = date40.before(date51);
        java.util.Date date58 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean59 = date40.before(date58);
        boolean boolean60 = calendar27.after((java.lang.Object) date58);
        java.util.TimeZone timeZone61 = calendar27.getTimeZone();
        int int62 = timeZone61.getRawOffset();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        calendar72.clear(7);
        calendar72.set(16, (int) (byte) 0);
        int int78 = calendar72.getFirstDayOfWeek();
        java.lang.String str79 = fastDateFormat65.format(calendar72);
        java.util.TimeZone timeZone80 = calendar72.getTimeZone();
        java.util.Date date81 = new java.util.Date();
        int int82 = date81.getTimezoneOffset();
        java.util.Date date83 = new java.util.Date();
        java.lang.String str84 = date83.toGMTString();
        boolean boolean85 = date81.before(date83);
        boolean boolean86 = calendar72.after((java.lang.Object) date83);
        java.util.Date date87 = calendar72.getTime();
        java.util.TimeZone timeZone88 = calendar72.getTimeZone();
        boolean boolean89 = timeZone61.hasSameRules(timeZone88);
        calendar6.setTimeZone(timeZone88);
        timeZone88.setID("Jan 24, 1921 5:10:00 AM");
        // The following exception was thrown during execution in test generation
        try {
            int int99 = timeZone88.getOffset(13, 7, 365, 5, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Jan 24, 1921 5:10:00 AM\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=80,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gregory" + "'", str13, "gregory");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-58914146870017,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=80,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "7:12:10 AM GMT+00:00" + "'", str34, "7:12:10 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:12:10 AM GMT+00:00" + "'", str39, "7:12:10 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Feb 22 07:06:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645513929983,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Jan 24, 1921 5:10:00 AM\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=80,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "7:12:10 AM GMT+00:00" + "'", str79, "7:12:10 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(date81.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertEquals(date83.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "22 Feb 2022 07:12:09 GMT" + "'", str84, "22 Feb 2022 07:12:09 GMT");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeZone88);
        org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test05647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05647");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(38);
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale3);
        java.lang.Object obj5 = fastDateFormat4.clone();
        java.util.Date date6 = new java.util.Date();
        long long7 = date6.getTime();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        int int10 = date8.getSeconds();
        int int11 = date8.getMinutes();
        long long12 = date8.getTime();
        java.lang.String str13 = date8.toLocaleString();
        boolean boolean14 = date6.before(date8);
        java.lang.String str15 = fastDateFormat4.format(date6);
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getSeconds();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        date19.setMinutes(6);
        boolean boolean23 = date17.after(date19);
        java.util.Calendar.Builder builder24 = builder16.setInstant(date19);
        java.util.Calendar.Builder builder26 = builder24.setInstant((long) 36);
        java.util.Calendar.Builder builder28 = builder26.setLenient(true);
        boolean boolean29 = fastDateFormat4.equals((java.lang.Object) builder26);
        java.util.Calendar calendar30 = builder26.build();
        int int31 = calendar30.getFirstDayOfWeek();
        java.lang.String str32 = calendar30.getCalendarType();
        boolean boolean33 = parsePosition1.equals((java.lang.Object) calendar30);
        calendar30.setFirstDayOfWeek(4202733);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645513930043L + "'", long7 == 1645513930043L);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645513930043L + "'", long12 == 1645513930043L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Feb 22, 2022 7:12:10 AM" + "'", str13, "Feb 22, 2022 7:12:10 AM");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "07 h 12 UTC" + "'", str15, "07 h 12 UTC");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:06:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=36,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=4202733,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=133,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "gregory" + "'", str32, "gregory");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05648");
        java.util.Date date6 = new java.util.Date(0, 53, 57, 58, 1970, 97);
        int int7 = date6.getMinutes();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Jul 30 18:51:37 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 51 + "'", int7 == 51);
    }

    @Test
    public void test05649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05649");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.Object obj1 = null;
        boolean boolean2 = attribute0.equals(obj1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale6, locale7, locale8, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor16 = languageRangeList4.listIterator(0);
        java.lang.Class<?> wildcardClass17 = languageRangeItor16.getClass();
        boolean boolean18 = attribute0.equals((java.lang.Object) wildcardClass17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayVariant();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        java.time.Instant instant43 = calendar37.toInstant();
        boolean boolean45 = calendar37.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str46 = fastDateFormat30.format(calendar37);
        java.lang.Object obj47 = fastDateFormat30.clone();
        java.util.Locale locale48 = fastDateFormat30.getLocale();
        java.lang.String str49 = locale48.getLanguage();
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale52.getDisplayCountry();
        java.lang.String str56 = locale52.getDisplayLanguage();
        java.lang.String str57 = locale52.getDisplayLanguage();
        java.lang.String str58 = locale48.getDisplayLanguage(locale52);
        java.lang.String str59 = locale24.getDisplayCountry(locale52);
        java.lang.String str60 = locale24.getDisplayName();
        java.util.Set<java.lang.String> strSet61 = locale24.getUnicodeLocaleKeys();
        boolean boolean62 = attribute0.equals((java.lang.Object) locale24);
        boolean boolean64 = attribute0.equals((java.lang.Object) 1645513690955L);
        java.lang.String str65 = attribute0.toString();
        java.lang.String str66 = attribute0.toString();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(languageRangeItor16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645513930083,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=180,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513930083,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=180,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh" + "'", str53, "zh");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587" + "'", str56, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u4e2d\u6587" + "'", str57, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u6587" + "'", str58, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u56fd" + "'", str59, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str60, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str65, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str66, "java.text.AttributedCharacterIterator$Attribute(language)");
    }

    @Test
    public void test05650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05650");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.time.Instant instant14 = calendar13.toInstant();
        java.util.Date date15 = calendar13.getTime();
        int int16 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.String str17 = calendar13.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar13.set((-405), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 97 + "'", int4 == 97);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513930121,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=218,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
    }

    @Test
    public void test05651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05651");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray25 = new java.util.Locale[] { locale20, locale21, locale22, locale23, locale24 };
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale locale28 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList26);
        int int29 = languageRangeList6.lastIndexOf((java.lang.Object) languageRangeList18);
        java.lang.String[] strArray48 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        boolean boolean51 = languageRangeList18.retainAll((java.util.Collection<java.lang.String>) strList49);
        boolean boolean52 = languageRangeList4.removeAll((java.util.Collection<java.lang.String>) strList49);
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("it-IT");
        boolean boolean55 = languageRangeList4.equals((java.lang.Object) locale54);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, strMap59);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale65 = java.util.Locale.FRANCE;
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.util.Locale locale67 = java.util.Locale.FRANCE;
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale64, locale65, locale66, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale locale72 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList70, filteringMode73);
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.Locale locale78 = new java.util.Locale("Chinese (China)", "java.util.GregorianCalendar[time=1645513665356,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale80 = java.util.Locale.FRANCE;
        java.lang.String str81 = locale80.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale80);
        java.lang.String str83 = locale78.getDisplayScript(locale80);
        java.lang.String str84 = locale78.getDisplayName();
        int int85 = languageRangeList4.indexOf((java.lang.Object) locale78);
        java.util.Collection<java.lang.String> strCollection86 = null;
        java.lang.String str87 = java.util.Locale.lookupTag(languageRangeList4, strCollection86);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange89 = languageRangeList4.get(21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 21, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(locale72);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode73.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertEquals(locale78.toString(), "chinese (china)_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "fra" + "'", str81, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "chinese (china) (JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0])" + "'", str84, "chinese (china) (JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0])");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test05652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05652");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Date date27 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date27.setMonth(4);
        java.util.Calendar.Builder builder30 = builder12.setInstant(date27);
        java.util.Calendar.Builder builder32 = builder12.setInstant(1645513674789L);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone36);
        int int40 = timeZone36.getOffset(1645513656868L);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        boolean boolean46 = timeZone36.hasSameRules(timeZone42);
        java.util.Calendar.Builder builder47 = builder12.setTimeZone(timeZone36);
        timeZone36.setID("7.08.13");
        int int50 = timeZone36.getRawOffset();
        java.lang.Object obj51 = timeZone36.clone();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645513930192,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"7.08.13\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=289,ZONE_OFFSET=97,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "sun.util.calendar.ZoneInfo[id=\"7.08.13\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "sun.util.calendar.ZoneInfo[id=\"7.08.13\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "sun.util.calendar.ZoneInfo[id=\"7.08.13\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05653");
        java.util.Date date5 = new java.util.Date(1, 58, 4, 41, 36);
        date5.setTime((long) 21);
        long long8 = date5.getTime();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 21L + "'", long8 == 21L);
    }

    @Test
    public void test05654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05654");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        int int7 = timeZone4.getRawOffset();
        java.util.TimeZone.setDefault(timeZone4);
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(292278994, (int) 'u', timeZone4, locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 117");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(fastDateFormat6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test05655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05655");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        timeZone8.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone8);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone8, locale13);
        java.util.Date date20 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = timeZone8.inDaylightTime(date20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 97 + "'", int5 == 97);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645513930314,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=383,ZONE_OFFSET=69,DST_OFFSET=0]");
    }

    @Test
    public void test05656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05656");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.util.TimeZone timeZone17 = calendar9.getTimeZone();
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        java.util.Date date20 = new java.util.Date();
        java.lang.String str21 = date20.toGMTString();
        boolean boolean22 = date18.before(date20);
        boolean boolean23 = calendar9.after((java.lang.Object) date20);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        java.time.Instant instant36 = calendar30.toInstant();
        java.util.Date date37 = java.util.Date.from(instant36);
        boolean boolean38 = date20.before(date37);
        int int39 = date20.getDay();
        int int40 = date20.getMinutes();
        java.lang.String str41 = date20.toGMTString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513930333,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=430,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:10 AM GMT+00:00" + "'", str16, "7:12:10 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22 Feb 2022 07:12:10 GMT" + "'", str21, "22 Feb 2022 07:12:10 GMT");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645513930333,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=430,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22 Feb 2022 07:12:10 GMT" + "'", str41, "22 Feb 2022 07:12:10 GMT");
    }

    @Test
    public void test05657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05657");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getSeconds();
        long long2 = date0.getTime();
        date0.setTime((long) 37);
        date0.setDate((int) (short) 0);
        int int7 = date0.getDay();
        date0.setYear(22);
        java.time.Instant instant10 = date0.toInstant();
        java.lang.String str11 = date0.toGMTString();
        int int12 = date0.getDate();
        int int13 = date0.getDay();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sun Dec 31 00:00:00 GMT+00:00 1922");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513930358L + "'", long2 == 1645513930358L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "31 Dec 1922 00:00:00 GMT" + "'", str11, "31 Dec 1922 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05658");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale9.getDisplayName(locale16);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale16.getDisplayName(locale19);
        java.lang.String str22 = locale16.getISO3Language();
        boolean boolean23 = fastDateFormat8.equals((java.lang.Object) locale16);
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale28 = new java.util.Locale("", "hi!", "");
        java.lang.String str29 = locale24.getDisplayCountry(locale28);
        java.util.Locale locale30 = java.util.Locale.CHINA;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.lang.String str36 = locale30.getISO3Language();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        calendar46.clear(7);
        calendar46.set(16, (int) (byte) 0);
        java.time.Instant instant52 = calendar46.toInstant();
        boolean boolean54 = calendar46.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str55 = fastDateFormat39.format(calendar46);
        java.lang.Object obj56 = fastDateFormat39.clone();
        java.util.Locale locale57 = fastDateFormat39.getLocale();
        java.lang.String str58 = locale57.getLanguage();
        java.lang.String str59 = locale57.getDisplayName();
        java.lang.String str60 = locale30.getDisplayCountry(locale57);
        java.lang.String str61 = locale28.getDisplayCountry(locale30);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale.Builder builder64 = builder62.clear();
        java.util.Locale locale65 = builder62.build();
        java.lang.String str66 = locale65.getLanguage();
        java.lang.String str67 = locale28.getDisplayScript(locale65);
        java.lang.String str68 = locale16.getDisplayName(locale28);
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone70);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone73.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        calendar78.clear(7);
        calendar78.set(16, (int) (byte) 0);
        java.time.Instant instant84 = calendar78.toInstant();
        boolean boolean86 = calendar78.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str87 = fastDateFormat71.format(calendar78);
        java.lang.Object obj88 = fastDateFormat71.clone();
        java.util.Locale locale89 = fastDateFormat71.getLocale();
        java.lang.String str90 = locale89.getLanguage();
        java.lang.String str91 = locale28.getDisplayName(locale89);
        java.lang.String str92 = locale89.getISO3Language();
        java.lang.String str94 = locale89.getExtension('a');
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "China" + "'", str7, "China");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645513930397,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=494,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str21, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zho" + "'", str22, "zho");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale28.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "China" + "'", str29, "China");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zho" + "'", str36, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645513930397,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=494,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "China" + "'", str60, "China");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "HI!" + "'", str61, "HI!");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Chinese (China)" + "'", str68, "Chinese (China)");
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertNotNull(timeZone72);
// flaky:         org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone73);
// flaky:         org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(timeZone75);
// flaky:         org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1645513930397,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=494,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "HI!" + "'", str91, "HI!");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNull(str94);
    }

    @Test
    public void test05659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05659");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        int int6 = date4.getSeconds();
        int int7 = date4.getMinutes();
        long long8 = date4.getTime();
        long long9 = date4.getTime();
        date4.setHours(122);
        java.lang.String str12 = fastDateFormat2.format(date4);
        java.util.TimeZone timeZone13 = fastDateFormat2.getTimeZone();
        boolean boolean14 = timeZone13.useDaylightTime();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 27 02:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513930433L + "'", long8 == 1645513930433L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645513930433L + "'", long9 == 1645513930433L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "02 h 12 UTC" + "'", str12, "02 h 12 UTC");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05660");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        languageRangeList1.clear();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        java.time.Instant instant19 = calendar13.toInstant();
        boolean boolean21 = calendar13.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        int int27 = timeZone23.getOffset(1645513657024L);
        timeZone23.setID("fra");
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone23.hasSameRules(timeZone30);
        timeZone30.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone30);
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getSeconds();
        int int37 = date35.getSeconds();
        int int38 = date35.getSeconds();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getTimezoneOffset();
        java.util.Date date41 = new java.util.Date();
        java.lang.String str42 = date41.toGMTString();
        boolean boolean43 = date39.before(date41);
        long long44 = date41.getTime();
        boolean boolean45 = date35.after(date41);
        java.lang.String str46 = fastDateFormat34.format(date35);
        calendar13.setTime(date35);
        int int49 = calendar13.getLeastMaximum(0);
        int int50 = languageRangeList1.indexOf((java.lang.Object) calendar13);
        int int52 = calendar13.getActualMaximum(16);
        int int53 = calendar13.getMinimalDaysInFirstWeek();
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder54.clear();
        java.util.Locale.Builder builder56 = builder54.clear();
        java.util.Locale locale57 = builder54.build();
        java.util.Locale.Builder builder58 = builder54.clear();
        java.util.Locale locale59 = builder58.build();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone62.hasSameRules(timeZone63);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone63.hasSameRules(timeZone65);
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone65, locale67);
        java.lang.String str69 = locale60.getDisplayName(locale67);
        java.util.Locale.Builder builder70 = builder58.setLocale(locale60);
        java.util.Locale locale71 = builder58.build();
        java.util.Locale.Builder builder73 = builder58.setScript("");
        boolean boolean74 = calendar13.after((java.lang.Object) "");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513930492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=589,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(fastDateFormat34);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "22 Feb 2022 07:12:10 GMT" + "'", str42, "22 Feb 2022 07:12:10 GMT");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645513930492L + "'", long44 == 1645513930492L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7.12.10" + "'", str46, "7.12.10");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7200000 + "'", int52 == 7200000);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh" + "'", str61, "zh");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1645513930492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=589,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u4e2d\u6587" + "'", str69, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test05661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05661");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        java.lang.String str7 = timeZone2.getID();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale16, locale17, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale28, locale29, locale30, locale31, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList34);
        int int37 = languageRangeList14.lastIndexOf((java.lang.Object) languageRangeList26);
        java.lang.String[] strArray56 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = languageRangeList26.retainAll((java.util.Collection<java.lang.String>) strList57);
        boolean boolean60 = languageRangeList12.removeAll((java.util.Collection<java.lang.String>) strList57);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("it-IT");
        boolean boolean63 = languageRangeList12.equals((java.lang.Object) locale62);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone2, locale62);
        java.util.TimeZone timeZone65 = calendar64.getTimeZone();
        boolean boolean66 = timeZone65.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str7, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645513930529,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=530,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test05662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05662");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        java.util.Date date28 = new java.util.Date();
        java.lang.String str29 = date28.toGMTString();
        boolean boolean30 = date26.before(date28);
        int int31 = languageRangeList1.lastIndexOf((java.lang.Object) date28);
        languageRangeList1.clear();
        java.lang.Object[] objArray33 = languageRangeList1.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Set<java.lang.String> strSet37 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream38 = strSet37.parallelStream();
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList49);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor53 = languageRangeList41.listIterator(0);
        boolean boolean54 = languageRangeList41.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Set<java.lang.String> strSet58 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream59 = strSet58.parallelStream();
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet58);
        boolean boolean61 = languageRangeList41.retainAll((java.util.Collection<java.lang.String>) strList60);
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList60);
        java.lang.String str63 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList60);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap64);
        java.util.Locale locale68 = new java.util.Locale("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=8,SECOND=3,MILLISECOND=252,ZONE_OFFSET=0,DST_OFFSET=0]", "1932-12-04 18:41:09");
        java.util.Set<java.lang.Character> charSet69 = locale68.getExtensionKeys();
        java.util.Set<java.lang.String> strSet70 = locale68.getUnicodeLocaleAttributes();
        boolean boolean71 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet70);
        java.lang.Object[] objArray72 = languageRangeList1.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22 Feb 2022 07:12:10 GMT" + "'", str29, "22 Feb 2022 07:12:10 GMT");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNotNull(languageRangeItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertEquals(locale68.toString(), "java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=3,month=38,week_of_year=9,week_of_month=4,day_of_month=0,day_of_year=53,day_of_week=?,day_of_week_in_month=4,am_pm=0,hour=7,hour_of_day=100,minute=36,second=5,millisecond=548,zone_offset=0,dst_offset=0]\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=9,week_of_month=4,day_of_month=22,day_of_year=53,day_of_week=?,day_of_week_in_month=4,am_pm=0,hour=7,hour_of_day=7,minute=8,second=3,millisecond=252,zone_offset=0,dst_offset=0]_1932-12-04 18:41:09");
        org.junit.Assert.assertNotNull(charSet69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
    }

    @Test
    public void test05663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05663");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 39");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05664");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(53);
        java.lang.Object obj7 = fastDateFormat2.parseObject("h:mm:ss a z", parsePosition6);
        boolean boolean8 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str9 = fastDateFormat2.getPattern();
        java.util.Date date15 = new java.util.Date(1, 58, 4, 41, 36);
        date15.setTime((long) 21);
        java.lang.String str18 = fastDateFormat2.format(date15);
        java.lang.String str20 = fastDateFormat2.format(0L);
        java.lang.String str22 = fastDateFormat2.format(1645513794225L);
        int int23 = fastDateFormat2.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "h:mm:ss a z" + "'", str9, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str18, "12:00:00 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str20, "12:00:00 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7:09:54 AM GMT+00:00" + "'", str22, "7:09:54 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 18 + "'", int23 == 18);
    }

    @Test
    public void test05665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05665");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 4202733);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=4202733.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05666");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.setMinimalDaysInFirstWeek(69);
        int int11 = calendar6.getFirstDayOfWeek();
        calendar6.add(0, 292278994);
        calendar6.set(6, 0);
        java.time.Instant instant18 = calendar6.toInstant();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        timeZone21.setRawOffset((int) (byte) 1);
        boolean boolean26 = timeZone21.observesDaylightTime();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone21);
        java.util.Locale locale28 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        boolean boolean30 = locale28.hasExtensions();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone21, locale28);
        java.util.Date date32 = calendar31.getTime();
        calendar31.setLenient(true);
        int int35 = calendar31.getFirstDayOfWeek();
        boolean boolean36 = calendar31.isWeekDateSupported();
        java.util.TimeZone timeZone37 = calendar31.getTimeZone();
        calendar6.setTimeZone(timeZone37);
        java.util.TimeZone.setDefault(timeZone37);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1640934730661,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=69,ERA=1,YEAR=2021,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=758,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645513930661,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=662,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645513930661,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=662,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05667");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getFirstDayOfWeek();
        calendar6.set(48, 44, 31, 16, (int) (short) 0);
        calendar6.setMinimalDaysInFirstWeek(23);
        // The following exception was thrown during execution in test generation
        try {
            calendar6.clear((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=23,ERA=1,YEAR=48,MONTH=44,WEEK_OF_YEAR=39,WEEK_OF_MONTH=0,DAY_OF_MONTH=31,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=16,MINUTE=0,SECOND=10,MILLISECOND=682,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test05668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05668");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str4 = fastDateFormat2.toString();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.Object obj6 = fastDateFormat2.clone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone10);
        java.util.TimeZone timeZone13 = calendar12.getTimeZone();
        calendar12.set(5, 16);
        java.time.Instant instant17 = calendar12.toInstant();
        java.lang.StringBuffer stringBuffer18 = null;
        java.text.FieldPosition fieldPosition20 = new java.text.FieldPosition((int) (byte) 100);
        fieldPosition20.setBeginIndex(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer23 = fastDateFormat2.format((java.lang.Object) calendar12, stringBuffer18, fieldPosition20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644995530704,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=47,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=705,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test05669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05669");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("IT");
        languageRangeList1.clear();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange languageRange6 = null;
        boolean boolean7 = languageRangeList4.add(languageRange6);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor8 = languageRangeList4.iterator();
        java.util.Set<java.lang.String> strSet9 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet9.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet9.parallelStream();
        boolean boolean12 = languageRangeList4.retainAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale.LanguageRange languageRange13 = null;
        boolean boolean14 = languageRangeList4.add(languageRange13);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor15 = languageRangeList4.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator16 = languageRangeList4.spliterator();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        int int19 = languageRangeList4.lastIndexOf((java.lang.Object) locale17);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator20 = languageRangeList4.spliterator();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale22);
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale22.getDisplayVariant(locale24);
        java.util.Set<java.lang.String> strSet26 = locale22.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.parallelStream();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet26);
        boolean boolean29 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor30 = languageRangeList1.iterator();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.lang.String str40 = locale31.getDisplayName(locale38);
        java.lang.String str41 = locale31.getScript();
        java.util.Set<java.lang.String> strSet42 = locale31.getUnicodeLocaleKeys();
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet42);
        int int44 = languageRangeList1.size();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeItor8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeItor15);
        org.junit.Assert.assertNotNull(languageRangeSpliterator16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(languageRangeSpliterator20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645513930723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=724,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test05670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05670");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getDay();
        date0.setDate(2);
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        int int8 = date4.getMinutes();
        boolean boolean9 = date0.after(date4);
        date4.setMinutes((int) 'a');
        date4.setMonth(120);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Wed Feb 02 07:12:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Jan 22 08:37:10 GMT+00:00 2032");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05671");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayVariant();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        calendar38.clear(7);
        calendar38.set(16, (int) (byte) 0);
        java.time.Instant instant44 = calendar38.toInstant();
        boolean boolean46 = calendar38.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str47 = fastDateFormat31.format(calendar38);
        java.lang.Object obj48 = fastDateFormat31.clone();
        java.util.Locale locale49 = fastDateFormat31.getLocale();
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale49.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry();
        java.lang.String str57 = locale53.getDisplayLanguage();
        java.lang.String str58 = locale53.getDisplayLanguage();
        java.lang.String str59 = locale49.getDisplayLanguage(locale53);
        java.lang.String str60 = locale25.getDisplayCountry(locale53);
        java.lang.String str61 = locale25.getDisplayName();
        boolean boolean62 = languageRangeList1.equals((java.lang.Object) locale25);
        languageRangeList1.clear();
        boolean boolean64 = languageRangeList1.isEmpty();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor65 = languageRangeList1.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645513930864,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=865,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645513930864,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=865,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese" + "'", str57, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese" + "'", str58, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u56fd" + "'", str60, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Chinese (China)" + "'", str61, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(languageRangeItor65);
    }

    @Test
    public void test05672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05672");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(10);
        int int10 = parsePosition9.getErrorIndex();
        int int11 = parsePosition9.getErrorIndex();
        java.lang.String str12 = parsePosition9.toString();
        parsePosition9.setErrorIndex((int) (byte) 0);
        java.lang.Object obj15 = fastDateFormat4.parseObject("Tue Feb 22 07:02:55 UTC 2022", parsePosition9);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        calendar22.clear(7);
        boolean boolean25 = calendar22.isWeekDateSupported();
        java.util.TimeZone timeZone26 = calendar22.getTimeZone();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone26);
        java.lang.StringBuffer stringBuffer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer29 = fastDateFormat4.format(calendar27, stringBuffer28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u65f6\u5206\u79d2'" + "'", str5, "\u65f6\u5206\u79d2'");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65f6\u5206\u79d2'" + "'", str6, "\u65f6\u5206\u79d2'");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=-1]" + "'", str12, "java.text.ParsePosition[index=10,errorIndex=-1]");
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=919,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1645513930918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=919,ZONE_OFFSET=1,DST_OFFSET=0]");
    }

    @Test
    public void test05673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05673");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        int int13 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.roll(6, true);
        java.time.Instant instant17 = calendar6.toInstant();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        java.lang.String str21 = fastDateFormat20.toString();
        boolean boolean22 = fastDateFormat20.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone23 = fastDateFormat20.getTimeZone();
        java.lang.String str25 = fastDateFormat20.format(1645513738507L);
        boolean boolean26 = calendar6.after((java.lang.Object) 1645513738507L);
        java.lang.String str27 = calendar6.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar6.roll(35, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645600330966,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=10,MILLISECOND=967,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str21, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:08:58 AM GMT+00:00" + "'", str25, "7:08:58 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
    }

    @Test
    public void test05674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05674");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (byte) 1, 70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 70");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05675");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(45);
    }

    @Test
    public void test05676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05676");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(5752);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 5752");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05677");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        boolean boolean29 = timeZone17.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str32 = fastDateFormat30.format((long) ' ');
        java.util.Locale locale33 = fastDateFormat30.getLocale();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale33);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = timeZone25.getOffset((int) ' ', 2022, (int) (byte) 1, 122, 48, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fastDateFormat30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1/1/70 12:00 AM" + "'", str32, "1/1/70 12:00 AM");
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513931022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=31,ZONE_OFFSET=9,DST_OFFSET=0]");
    }

    @Test
    public void test05678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05678");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        calendar6.clear();
        calendar6.set(59, 292278994, 24228570);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayVariant();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        calendar38.clear(7);
        calendar38.set(16, (int) (byte) 0);
        java.time.Instant instant44 = calendar38.toInstant();
        boolean boolean46 = calendar38.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str47 = fastDateFormat31.format(calendar38);
        java.lang.Object obj48 = fastDateFormat31.clone();
        java.util.Locale locale49 = fastDateFormat31.getLocale();
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale49.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry();
        java.lang.String str57 = locale53.getDisplayLanguage();
        java.lang.String str58 = locale53.getDisplayLanguage();
        java.lang.String str59 = locale49.getDisplayLanguage(locale53);
        java.lang.String str60 = locale25.getDisplayCountry(locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = calendar6.getDisplayName(53, 292278994, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=59,MONTH=292278994,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24228570,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645513931050,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=59,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645513931050,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=59,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese" + "'", str57, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Chinese" + "'", str58, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u56fd" + "'", str60, "\u4e2d\u56fd");
    }

    @Test
    public void test05679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05679");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        int int6 = timeZone2.getOffset(1645513657024L);
        timeZone2.setID("fra");
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone2.hasSameRules(timeZone9);
        timeZone9.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.lang.String str18 = locale14.getDisplayLanguage();
        java.lang.String str19 = locale14.getDisplayLanguage();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone9, locale14);
        timeZone9.setRawOffset((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:11:19 AM GMT+00:00", timeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese" + "'", str19, "Chinese");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645513931081,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=150,ZONE_OFFSET=69,DST_OFFSET=0]");
    }

    @Test
    public void test05680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05680");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder14 = builder12.setLocale(locale13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        int int22 = timeZone18.getOffset(1645513656868L);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        boolean boolean28 = timeZone18.hasSameRules(timeZone24);
        timeZone24.setRawOffset(6);
        timeZone24.setRawOffset((int) '#');
        java.util.Calendar.Builder builder33 = builder14.setTimeZone(timeZone24);
        java.util.TimeZone timeZone34 = null;
        boolean boolean35 = timeZone24.hasSameRules(timeZone34);
        java.lang.String str36 = timeZone24.getID();
        boolean boolean37 = timeZone24.observesDaylightTime();
        java.util.Calendar.Builder builder38 = new java.util.Calendar.Builder();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getSeconds();
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getTimezoneOffset();
        date41.setMinutes(6);
        boolean boolean45 = date39.after(date41);
        java.util.Calendar.Builder builder46 = builder38.setInstant(date41);
        java.util.Calendar.Builder builder48 = builder46.setInstant((long) 36);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder50 = builder48.setLocale(locale49);
        java.util.Calendar.Builder builder52 = builder50.setLenient(false);
        java.util.Calendar.Builder builder54 = builder50.setLenient(false);
        java.util.Calendar.Builder builder56 = builder54.setLenient(false);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.lang.String str61 = fastDateFormat59.toString();
        java.lang.String str62 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone63 = fastDateFormat59.getTimeZone();
        java.util.Calendar.Builder builder64 = builder56.setTimeZone(timeZone63);
        boolean boolean65 = timeZone24.hasSameRules(timeZone63);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(2022, 124, timeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 124");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645513931132,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=141,ZONE_OFFSET=9,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str36, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 11 + "'", int40 == 11);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "h:mm:ss a z" + "'", str60, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str61, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "h:mm:ss a z" + "'", str62, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test05681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05681");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Date date27 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date27.setMonth(4);
        java.util.Calendar.Builder builder30 = builder12.setInstant(date27);
        date27.setSeconds(56);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Sat May 10 00:00:56 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test05682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05682");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone6 = calendar5.getTimeZone();
        java.util.Locale locale10 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale10);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getSeconds();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        date16.setMinutes(6);
        boolean boolean20 = date14.after(date16);
        java.util.Calendar.Builder builder21 = builder13.setInstant(date16);
        java.util.Calendar.Builder builder23 = builder21.setInstant((long) 36);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder25 = builder23.setLocale(locale24);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28);
        java.util.Calendar.Builder builder31 = builder23.setTimeZone(timeZone28);
        java.util.Calendar.Builder builder33 = builder23.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        int int39 = timeZone35.getOffset(1645513657024L);
        timeZone35.setID("fra");
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone35.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale44.getDisplayCountry();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone35, locale44);
        boolean boolean49 = fastDateFormat34.equals((java.lang.Object) locale44);
        java.util.Calendar.Builder builder50 = builder33.setLocale(locale44);
        java.lang.String str51 = locale44.getScript();
        boolean boolean52 = locale44.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale44);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone6, locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = timeZone6.getDisplayName(false, 38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 38");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645513931213,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=222,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale10.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645513931213,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=222,ZONE_OFFSET=9,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645513931213,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=222,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645513931213,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=222,ZONE_OFFSET=9,DST_OFFSET=0]");
    }

    @Test
    public void test05683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05683");
        java.util.Locale locale1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition((int) 'a');
        int int8 = parsePosition7.getErrorIndex();
        java.lang.Object obj9 = fastDateFormat2.parseObject("italiano (italia) (2022-02-02 07:08:13,en)", parsePosition7);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        calendar16.setMinimalDaysInFirstWeek(69);
        calendar16.setLenient(true);
        calendar16.setLenient(false);
        int int25 = calendar16.getFirstDayOfWeek();
        calendar16.setFirstDayOfWeek(19);
        java.util.TimeZone timeZone28 = calendar16.getTimeZone();
        java.util.TimeZone timeZone29 = calendar16.getTimeZone();
        int int30 = calendar16.getMinimalDaysInFirstWeek();
        java.lang.String str31 = fastDateFormat2.format((java.lang.Object) calendar16);
        java.util.Date date35 = new java.util.Date((int) 'a', (int) 'u', 45);
        java.time.Instant instant36 = date35.toInstant();
        java.time.Instant instant37 = date35.toInstant();
        java.util.Date date38 = java.util.Date.from(instant37);
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator39 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) instant37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513931279,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=19,minimalDaysInFirstWeek=69,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=288,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 69 + "'", int30 == 69);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "7:12:11 AM GMT+00:00" + "'", str31, "7:12:11 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Nov 14 00:00:00 GMT+00:00 2006");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Nov 14 00:00:00 GMT+00:00 2006");
    }

    @Test
    public void test05684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05684");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.toString();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        int int27 = calendar21.getFirstDayOfWeek();
        java.lang.String str28 = fastDateFormat14.format(calendar21);
        calendar21.set((int) (short) 100, 37, 2);
        java.lang.String str33 = fastDateFormat10.format(calendar21);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(16);
        parsePosition36.setErrorIndex(5);
        parsePosition36.setErrorIndex(1);
        java.lang.Object obj41 = fastDateFormat10.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition36);
        java.lang.String str42 = parsePosition36.toString();
        java.lang.Object obj43 = fastDateFormat2.parseObject("7:08:05 AM GMT+00:00", parsePosition36);
        java.lang.Object obj44 = fastDateFormat2.clone();
        java.lang.Object obj45 = fastDateFormat2.clone();
        java.lang.String str47 = fastDateFormat2.format((-58914147139375L));
        java.lang.Object obj48 = fastDateFormat2.clone();
        int int49 = fastDateFormat2.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-58914146868648,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=361,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:11 AM GMT+00:00" + "'", str28, "7:12:11 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7:12:11 AM GMT+00:00" + "'", str33, "7:12:11 AM GMT+00:00");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str42, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7:07:40 AM GMT+00:00" + "'", str47, "7:07:40 AM GMT+00:00");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 18 + "'", int49 == 18);
    }

    @Test
    public void test05685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05685");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.lang.String str6 = calendar5.getCalendarType();
        calendar5.set(20, 41, 22, 32, 1, 41);
        calendar5.set(70, 35, 365);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=70,MONTH=35,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=365,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=32,MINUTE=1,SECOND=41,MILLISECOND=379,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "gregory" + "'", str6, "gregory");
    }

    @Test
    public void test05686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05686");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        calendar34.roll(8, 0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513931426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=435,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "h:mm:ss a z" + "'", str16, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str18, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7:07:39 am utc" + "'", str33, "7:07:39 am utc");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513931426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05687");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(7);
        fieldPosition1.setEndIndex(8);
        fieldPosition1.setEndIndex(8);
        fieldPosition1.setEndIndex(11);
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        boolean boolean11 = fastDateFormat10.getTimeZoneOverridesCalendar();
        java.lang.String str13 = fastDateFormat10.format((-838185410000L));
        boolean boolean14 = fieldPosition1.equals((java.lang.Object) fastDateFormat10);
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getTimezoneOffset();
        int int17 = date15.getSeconds();
        java.time.Instant instant18 = date15.toInstant();
        java.util.Date date19 = java.util.Date.from(instant18);
        date19.setMinutes(14);
        java.lang.String str22 = fastDateFormat10.format(date19);
        date19.setHours(32);
        int int25 = date19.getTimezoneOffset();
        int int26 = date19.getTimezoneOffset();
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "6:43:10 PM GMT+00:00" + "'", str13, "6:43:10 PM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Wed Feb 23 08:14:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7:14:11 AM GMT+00:00" + "'", str22, "7:14:11 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test05688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05688");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.lang.String str8 = fastDateFormat6.toString();
        java.lang.String str9 = fastDateFormat6.getPattern();
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        parsePosition12.setErrorIndex(5);
        int int15 = parsePosition12.getErrorIndex();
        java.lang.Object obj16 = fastDateFormat6.parseObject("7:07:41 AM UTC", parsePosition12);
        java.lang.Object obj17 = fastDateFormat2.parseObject("h:mm:ss a z", parsePosition12);
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        date18.setMinutes(6);
        int int22 = date18.getMinutes();
        java.util.Date date29 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean30 = date18.before(date29);
        java.util.Date date36 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean37 = date18.before(date36);
        java.time.Instant instant38 = date18.toInstant();
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDateFormat2.format(date18, stringBuffer39);
        java.util.Date date42 = new java.util.Date((-61604322582115L));
        java.lang.String str43 = fastDateFormat2.format(date42);
        java.lang.String str44 = date42.toGMTString();
        date42.setTime(1645513669460L);
        java.lang.Object obj47 = date42.clone();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "h:mm:ss a z" + "'", str7, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str8, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "h:mm:ss a z" + "'", str9, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNull(stringBuffer40);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Feb 22 07:07:49 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "4 Nov 17 00:10:17 GMT" + "'", str44, "4 Nov 17 00:10:17 GMT");
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "Tue Feb 22 07:07:49 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "Tue Feb 22 07:07:49 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "Tue Feb 22 07:07:49 GMT+00:00 2022");
    }

    @Test
    public void test05689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05689");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer5 = null;
        java.lang.StringBuffer stringBuffer6 = fastDateFormat2.format(date3, stringBuffer5);
        java.lang.String str8 = fastDateFormat2.format((-601772460000L));
        boolean boolean9 = fastDateFormat2.getTimeZoneOverridesCalendar();
        org.junit.Assert.assertNotNull(fastDateFormat2);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
        org.junit.Assert.assertNull(stringBuffer6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test05690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05690");
        java.util.Locale locale3 = new java.util.Locale("7:08:16 AM UTC", "10 Dec 1952 00:00:00 GMT", "7:08:04 AM GMT+00:00");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category4, locale6);
        java.util.Locale locale8 = locale6.stripExtensions();
        boolean boolean9 = locale8.hasExtensions();
        java.lang.String str10 = locale3.getDisplayScript(locale8);
        java.util.Set<java.lang.Character> charSet11 = locale8.getExtensionKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "7:08:16 am utc_10 DEC 1952 00:00:00 GMT_7:08:04 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
    }

    @Test
    public void test05691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05691");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.set(16, (int) (byte) 0);
        java.time.Instant instant14 = calendar8.toInstant();
        boolean boolean16 = calendar8.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar8.set(17, 9, (int) '#', 0, 10, 17);
        int int24 = calendar8.getWeekYear();
        long long25 = calendar8.getTimeInMillis();
        java.util.Date date26 = calendar8.getTime();
        calendar8.clear();
        calendar8.set((int) 'a', 5, 0, 53, 44);
        boolean boolean34 = calendar8.isWeekDateSupported();
        java.util.TimeZone timeZone35 = calendar8.getTimeZone();
        java.util.TimeZone.setDefault(timeZone35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (byte) 10, 100, timeZone35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=97,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=53,MINUTE=44,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 17 + "'", int24 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-61604322582357L) + "'", long25 == (-61604322582357L));
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Nov 04 00:10:17 GMT+00:00 17");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05692");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.lang.String str10 = locale1.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale1);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        java.time.Instant instant27 = calendar21.toInstant();
        boolean boolean29 = calendar21.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str30 = fastDateFormat14.format(calendar21);
        java.lang.String str31 = calendar21.getCalendarType();
        boolean boolean32 = calendar21.isWeekDateSupported();
        calendar21.setTimeInMillis((long) 14);
        calendar21.setFirstDayOfWeek(9);
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getDay();
        date37.setDate(2);
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getTimezoneOffset();
        date41.setMinutes(6);
        int int45 = date41.getMinutes();
        boolean boolean46 = date37.after(date41);
        java.lang.String str47 = date37.toLocaleString();
        calendar21.setTime(date37);
        java.lang.String str49 = fastDateFormat11.format(date37);
        java.lang.String str50 = fastDateFormat11.getPattern();
        java.lang.String str51 = fastDateFormat11.toString();
        java.lang.String str52 = fastDateFormat11.getPattern();
        java.util.Date date58 = new java.util.Date(122, 292278994, (-46800000), 25, (int) '4');
        long long59 = date58.getTime();
        int int60 = date58.getDate();
        date58.setMinutes(365);
        java.lang.StringBuffer stringBuffer63 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer64 = fastDateFormat11.format(date58, stringBuffer63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1643785931665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=9,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=674,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gregory" + "'", str31, "gregory");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Wed Feb 02 07:12:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 6 + "'", int45 == 6);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Feb 2, 2022 7:12:11 AM" + "'", str47, "Feb 2, 2022 7:12:11 AM");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str49, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str50, "\u4e2d\u6587\u4e2d\u56fd)");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)]" + "'", str51, "\u4e2d\u6587\u4e2d\u56fd)]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str52, "\u4e2d\u6587\u4e2d\u56fd)");
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Oct 14 07:05:00 GMT+00:00 24230470");
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 764577636313919991L + "'", long59 == 764577636313919991L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 14 + "'", int60 == 14);
    }

    @Test
    public void test05693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05693");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        boolean boolean14 = calendar6.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar6.set(17, 9, (int) '#', 0, 10, 17);
        calendar6.roll(5, 14);
        int int25 = calendar6.getWeeksInWeekYear();
        int int27 = calendar6.getActualMinimum(12);
        java.text.AttributedCharacterIterator.Attribute attribute28 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = attribute28.equals((java.lang.Object) timeZone29);
        java.lang.String str31 = timeZone29.getID();
        boolean boolean32 = timeZone29.observesDaylightTime();
        calendar6.setTimeZone(timeZone29);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone29);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=18,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=722,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 52 + "'", int25 == 52);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(attribute28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str31, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513931713,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=722,ZONE_OFFSET=9,DST_OFFSET=0]");
    }

    @Test
    public void test05694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05694");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Calendar.Builder builder27 = builder12.setWeekDate((int) ' ', 56, 7200000);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar28 = builder27.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 7200000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test05695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05695");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(6);
        parsePosition1.setErrorIndex(24);
        java.lang.String str4 = parsePosition1.toString();
        parsePosition1.setErrorIndex(292278994);
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        calendar16.set(16, (int) (byte) 0);
        int int22 = calendar16.getFirstDayOfWeek();
        java.lang.String str23 = fastDateFormat9.format(calendar16);
        java.util.TimeZone timeZone24 = calendar16.getTimeZone();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        java.util.Date date27 = new java.util.Date();
        java.lang.String str28 = date27.toGMTString();
        boolean boolean29 = date25.before(date27);
        boolean boolean30 = calendar16.after((java.lang.Object) date27);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        java.time.Instant instant43 = calendar37.toInstant();
        java.util.Date date44 = java.util.Date.from(instant43);
        boolean boolean45 = date27.before(date44);
        int int46 = date27.getMinutes();
        int int47 = date27.getDay();
        java.time.Instant instant48 = date27.toInstant();
        boolean boolean49 = parsePosition1.equals((java.lang.Object) date27);
        int int50 = parsePosition1.getIndex();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone54, locale56);
        calendar57.clear(7);
        boolean boolean60 = calendar57.isWeekDateSupported();
        calendar57.setLenient(true);
        boolean boolean63 = parsePosition1.equals((java.lang.Object) calendar57);
        int int65 = calendar57.getMinimum((int) (short) 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.text.ParsePosition[index=6,errorIndex=24]" + "'", str4, "java.text.ParsePosition[index=6,errorIndex=24]");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513931740,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=749,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7:12:11 AM GMT+00:00" + "'", str23, "7:12:11 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22 Feb 2022 07:12:11 GMT" + "'", str28, "22 Feb 2022 07:12:11 GMT");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513931740,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=749,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(date44);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=749,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test05696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05696");
        java.util.Date date1 = new java.util.Date(1645513662388L);
        date1.setYear(11);
        date1.setTime((long) 58);
        java.lang.String str6 = date1.toGMTString();
        date1.setMonth(5);
        int int9 = date1.getTimezoneOffset();
        int int10 = date1.getTimezoneOffset();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Mon Jun 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str6, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test05697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05697");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange10 = null;
        boolean boolean11 = languageRangeList1.add(languageRange10);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor12 = languageRangeList1.listIterator();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.Locale locale18 = java.util.Locale.CHINA;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16, locale18);
        calendar19.clear(7);
        calendar19.set(16, (int) (byte) 0);
        java.time.Instant instant25 = calendar19.toInstant();
        boolean boolean27 = calendar19.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar19.set(17, 9, (int) '#', 0, 10, 17);
        calendar19.roll(5, 14);
        long long38 = calendar19.getTimeInMillis();
        boolean boolean39 = languageRangeList1.equals((java.lang.Object) long38);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor40 = languageRangeList1.listIterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(languageRangeItor12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=-61603112982205,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=10,WEEK_OF_YEAR=47,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=322,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=804,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-61603112982205L) + "'", long38 == (-61603112982205L));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(languageRangeItor40);
    }

    @Test
    public void test05698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05698");
        java.util.Date date1 = new java.util.Date((long) 34);
        date1.setMinutes(0);
        int int4 = date1.getHours();
        java.util.Date date8 = new java.util.Date(32770, 36, 3);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getSeconds();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        date12.setMinutes(6);
        boolean boolean16 = date10.after(date12);
        java.util.Calendar.Builder builder17 = builder9.setInstant(date12);
        java.util.Calendar.Builder builder19 = builder17.setInstant((long) 36);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder21 = builder19.setLocale(locale20);
        java.util.Calendar.Builder builder23 = builder21.setLenient(false);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone26);
        timeZone26.setRawOffset((int) (byte) 1);
        boolean boolean31 = timeZone26.observesDaylightTime();
        java.util.Calendar.Builder builder32 = builder21.setTimeZone(timeZone26);
        java.util.Date date36 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date36.setMonth(4);
        java.util.Calendar.Builder builder39 = builder21.setInstant(date36);
        java.util.Date date46 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date46.setMonth(50400000);
        date46.setMonth(32769);
        java.util.Calendar.Builder builder51 = builder21.setInstant(date46);
        boolean boolean52 = date8.after(date46);
        int int53 = date1.compareTo(date8);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 03 00:00:00 GMT+00:00 34673");
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 22 07:12:11 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11 + "'", int11 == 11);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:06:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder39);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Thu Oct 31 15:13:15 GMT+00:00 4204633");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test05699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05699");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("22 Feb 2022 07:08:43 GMT");
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category3, locale5);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = locale5.getDisplayScript(locale7);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale7);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:08:37 AM GMT+00:00", timeZone2, locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513931852,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=861,ZONE_OFFSET=9,DST_OFFSET=0]");
    }

    @Test
    public void test05700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05700");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        calendar6.setMinimalDaysInFirstWeek(15);
        int int14 = calendar6.getWeeksInWeekYear();
        int int15 = calendar6.getMinimalDaysInFirstWeek();
        int int17 = calendar6.getActualMinimum(7);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=901,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test05701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05701");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        java.time.Instant instant27 = calendar21.toInstant();
        int int28 = calendar21.getMinimalDaysInFirstWeek();
        calendar21.set(49, 6, (int) (byte) 10, 3, 40);
        java.lang.String str35 = fastDateFormat14.format(calendar21);
        calendar21.set(1969, (-405), (-1899), (int) (byte) 10, (-1));
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder44.clear();
        java.util.Locale.Builder builder46 = builder44.clear();
        java.util.Locale locale47 = builder44.build();
        java.util.Locale.Builder builder48 = builder44.clear();
        java.util.Locale locale49 = builder48.build();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone53.hasSameRules(timeZone55);
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55, locale57);
        java.lang.String str59 = locale50.getDisplayName(locale57);
        java.util.Locale.Builder builder60 = builder48.setLocale(locale50);
        java.util.Locale locale61 = builder48.build();
        java.lang.String str62 = locale61.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = calendar21.getDisplayName(127, 4202733, locale61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513931926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=935,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale12.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513931926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=935,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=-405,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=-1899,DAY_OF_YEAR=191,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=3,HOUR_OF_DAY=10,MINUTE=-1,SECOND=11,MILLISECOND=935,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Thursday, July 10, 0049 3:40:11 AM GMT+00:00" + "'", str35, "Thursday, July 10, 0049 3:40:11 AM GMT+00:00");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh" + "'", str51, "zh");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645513931926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=11,MILLISECOND=935,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u6587" + "'", str59, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
    }

    @Test
    public void test05702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05702");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 20");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05703");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder18 = builder14.setWeekDate(0, 1, (int) 'x');
        java.util.Calendar.Builder builder22 = builder14.setDate(17, 42, 39);
        java.util.Calendar.Builder builder27 = builder14.setTimeOfDay((int) (short) 10, 14, 19, 57);
        java.util.Calendar.Builder builder31 = builder14.setTimeOfDay(8, 70, 24);
        java.util.Calendar.Builder builder34 = builder14.set(1, 32);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 12 + "'", int2 == 12);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test05704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05704");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("zho");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.addUnicodeLocaleAttribute("cinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("\u4e0a\u5348 GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 7:06:51 ?? GMT+00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test05705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05705");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.lang.String str15 = locale14.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale14);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.lang.String str18 = locale14.getDisplayName(locale17);
        java.lang.String str19 = locale14.getDisplayCountry();
        java.lang.String str20 = locale14.getDisplayScript();
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Locale.setDefault(locale21);
        java.lang.String str24 = locale14.getDisplayName(locale21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str27 = fastDateFormat25.format((long) ' ');
        java.lang.String str29 = fastDateFormat25.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj30 = fastDateFormat25.clone();
        java.util.Locale locale31 = fastDateFormat25.getLocale();
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale33);
        java.lang.Object obj35 = fastDateFormat34.clone();
        java.util.Locale locale36 = fastDateFormat34.getLocale();
        java.lang.String str37 = locale31.getDisplayScript(locale36);
        java.lang.String str38 = locale21.getDisplayScript(locale31);
        java.util.Calendar.Builder builder39 = builder10.setLocale(locale21);
        java.lang.String str40 = locale21.getLanguage();
        java.lang.String str41 = locale21.getDisplayVariant();
        java.util.Locale locale43 = new java.util.Locale("Chinese (China)");
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Set<java.lang.Character> charSet45 = locale43.getExtensionKeys();
        java.util.Locale locale46 = locale43.stripExtensions();
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale21.getDisplayCountry(locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 42, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 42");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 12 + "'", int4 == 12);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:06:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "fra" + "'", str15, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str18, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u6cd5\u56fd" + "'", str19, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it-IT" + "'", str22, "it-IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "francese (Francia)" + "'", str24, "francese (Francia)");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1/1/70 12:00 AM" + "'", str27, "1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2/22/22 7:07 AM" + "'", str29, "2/22/22 7:07 AM");
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "FastDateFormat[M/d/yy h:mm a]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "FastDateFormat[M/d/yy h:mm a]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "FastDateFormat[M/d/yy h:mm a]");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "it" + "'", str40, "it");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale43.toString(), "chinese (china)");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "chinese (china)");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "chinese (china)");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Italy" + "'", str49, "Italy");
    }

    @Test
    public void test05706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05706");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange languageRange6 = null;
        boolean boolean7 = languageRangeList1.add(languageRange6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str10 = fastDateFormat8.format((long) ' ');
        java.util.Locale locale11 = fastDateFormat8.getLocale();
        boolean boolean12 = languageRangeList1.equals((java.lang.Object) locale11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale16, locale17, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale28, locale29, locale30, locale31, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList34);
        int int37 = languageRangeList14.lastIndexOf((java.lang.Object) languageRangeList26);
        boolean boolean38 = languageRangeList14.isEmpty();
        int int39 = languageRangeList14.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor40 = languageRangeList14.iterator();
        languageRangeList14.clear();
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap45 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList46 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strMap45);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList56, filteringMode59);
        java.util.Locale.FilteringMode filteringMode61 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList56, filteringMode61);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale67, locale68, locale69, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor77 = languageRangeList65.listIterator(0);
        boolean boolean78 = languageRangeList65.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Set<java.lang.String> strSet82 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream83 = strSet82.parallelStream();
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.lang.String>) strSet82);
        boolean boolean85 = languageRangeList65.retainAll((java.util.Collection<java.lang.String>) strList84);
        java.util.stream.Stream<java.lang.String> strStream86 = strList84.parallelStream();
        boolean boolean87 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strList84);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange89 = languageRangeList1.get(70);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 70, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1/1/70 12:00 AM" + "'", str10, "1/1/70 12:00 AM");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor40);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(languageRangeList46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList60);
        org.junit.Assert.assertTrue("'" + filteringMode61 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode61.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNotNull(languageRangeItor77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test05707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05707");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor13 = languageRangeList1.listIterator(0);
        boolean boolean14 = languageRangeList1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Set<java.lang.String> strSet18 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet18.parallelStream();
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet18);
        boolean boolean21 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale26 = java.util.Locale.getDefault(category22);
        int int27 = languageRangeList1.lastIndexOf((java.lang.Object) locale26);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor28 = languageRangeList1.listIterator();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor29 = languageRangeList1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList1.listIterator(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 43");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(languageRangeItor28);
        org.junit.Assert.assertNotNull(languageRangeItor29);
    }

    @Test
    public void test05708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05708");
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        java.lang.String str11 = locale2.getDisplayName(locale9);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone14.hasSameRules(timeZone16);
        java.util.Locale locale19 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale19.getScript();
        java.util.Locale locale25 = new java.util.Locale("", "hi!", "");
        java.lang.String str26 = locale19.getDisplayVariant(locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone14, locale25);
        java.lang.String str28 = locale25.getDisplayCountry();
        java.lang.String str29 = locale25.getVariant();
        java.lang.String str30 = locale9.getDisplayCountry(locale25);
        java.lang.String str31 = locale25.getScript();
        java.util.Locale locale32 = locale25.stripExtensions();
        java.util.Locale locale33 = locale32.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(5, 4, locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513932298,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=307,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals(locale19.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "HI!" + "'", str28, "HI!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "China" + "'", str30, "China");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
    }

    @Test
    public void test05709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05709");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        timeZone3.setRawOffset(21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(9, timeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 9");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(fastDateFormat5);
    }

    @Test
    public void test05710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05710");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        int int26 = languageRangeList1.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor27 = languageRangeList1.iterator();
        languageRangeList1.clear();
        int int29 = languageRangeList1.size();
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream32 = strSet31.stream();
        boolean boolean33 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet31);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor34 = languageRangeList1.iterator();
        java.util.Collection<java.util.Locale> localeCollection35 = null;
        java.util.List<java.util.Locale> localeList36 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange38 = languageRangeList1.remove(24228570);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 24228570, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeItor34);
        org.junit.Assert.assertNotNull(localeList36);
    }

    @Test
    public void test05711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05711");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        int int6 = timeZone2.getOffset(1645513657024L);
        timeZone2.setID("fra");
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone2.hasSameRules(timeZone9);
        int int11 = timeZone9.getRawOffset();
        java.util.TimeZone.setDefault(timeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(58, 120, timeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 120");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
    }

    @Test
    public void test05712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05712");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        boolean boolean5 = fastDateFormat3.getTimeZoneOverridesCalendar();
        java.lang.String str6 = fastDateFormat3.getPattern();
        java.lang.String str8 = fastDateFormat3.format(1645513657001L);
        java.util.Date date14 = new java.util.Date(58, 41, 39, 31, 41);
        java.lang.String str15 = fastDateFormat3.format(date14);
        java.util.TimeZone timeZone16 = fastDateFormat3.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(47, timeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 47");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "h:mm:ss a z" + "'", str6, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7:07:37 AM GMT+00:00" + "'", str8, "7:07:37 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Jul 10 07:41:00 GMT+00:00 1961");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "7:41:00 AM GMT+00:00" + "'", str15, "7:41:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05713");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1905-11-5 17:36:00");
        int int2 = fastDateFormat1.getMaxLengthEstimate();
        java.lang.String str4 = fastDateFormat1.format(1645513719916L);
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1905-11-5 17:36:00" + "'", str4, "1905-11-5 17:36:00");
    }

    @Test
    public void test05714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05714");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder18 = builder14.setWeekDate(0, 2, (-1));
        java.util.Calendar.Builder builder19 = new java.util.Calendar.Builder();
        java.util.Date date20 = new java.util.Date();
        int int21 = date20.getSeconds();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        date22.setMinutes(6);
        boolean boolean26 = date20.after(date22);
        java.util.Calendar.Builder builder27 = builder19.setInstant(date22);
        java.util.Calendar.Builder builder29 = builder27.setInstant((long) 36);
        java.util.Calendar.Builder builder33 = builder29.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder38 = builder33.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder43 = builder38.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder45 = builder38.setLenient(true);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        int int50 = timeZone46.getOffset(1645513657024L);
        timeZone46.setID("fra");
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone46.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone46, locale55);
        java.util.Calendar.Builder builder60 = builder45.setTimeZone(timeZone46);
        timeZone46.setRawOffset(0);
        timeZone46.setRawOffset(27);
        java.util.Calendar.Builder builder65 = builder18.setTimeZone(timeZone46);
        // The following exception was thrown during execution in test generation
        try {
            int int72 = timeZone46.getOffset(28, 49, 14, 0, 8, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 12 + "'", int2 == 12);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 07:06:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh" + "'", str56, "zh");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645513932470,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=27,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=479,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test05715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05715");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getSeconds();
        int int9 = date6.getMinutes();
        long long10 = date6.getTime();
        java.lang.String str11 = date6.toLocaleString();
        boolean boolean12 = date4.before(date6);
        java.lang.String str13 = fastDateFormat2.format(date4);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        boolean boolean27 = fastDateFormat2.equals((java.lang.Object) builder24);
        java.util.Calendar calendar28 = builder24.build();
        calendar28.set(292278994, 0, (-46800000), 0, 32772);
        calendar28.setLenient(false);
        int int37 = calendar28.getFirstDayOfWeek();
        int int38 = calendar28.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645513932487L + "'", long5 == 1645513932487L);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513932487L + "'", long10 == 1645513932487L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Feb 22, 2022 7:12:12 AM" + "'", str11, "Feb 22, 2022 7:12:12 AM");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "07 h 12 UTC" + "'", str13, "07 h 12 UTC");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:06:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=292278994,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=-46800000,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=32772,SECOND=0,MILLISECOND=45,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test05716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05716");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(32770);
        int int2 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test05717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05717");
        java.util.Locale locale3 = new java.util.Locale("7:07:37 AM UTC");
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale locale5 = locale3.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100, 14, locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 14");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "7:07:37 am utc");
    }

    @Test
    public void test05718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05718");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) 0);
        int int2 = fieldPosition1.getEndIndex();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        boolean boolean5 = locale3.hasExtensions();
        java.lang.String str6 = locale3.getDisplayCountry();
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) locale3);
        int int8 = fieldPosition1.getBeginIndex();
        fieldPosition1.setEndIndex((-46800000));
        fieldPosition1.setBeginIndex(26);
        int int13 = fieldPosition1.getEndIndex();
        int int14 = fieldPosition1.getEndIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-46800000) + "'", int13 == (-46800000));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-46800000) + "'", int14 == (-46800000));
    }

    @Test
    public void test05719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05719");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Locale locale26 = fastDateFormat2.getLocale();
        boolean boolean27 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str28 = fastDateFormat2.getPattern();
        java.lang.String str29 = fastDateFormat2.getPattern();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        java.util.Date date32 = new java.util.Date();
        java.lang.String str33 = date32.toGMTString();
        boolean boolean34 = date30.before(date32);
        java.lang.String str35 = date32.toLocaleString();
        date32.setMonth(0);
        date32.setTime((long) 10);
        java.lang.String str40 = fastDateFormat2.format(date32);
        java.lang.String str42 = fastDateFormat2.format(1645513712372L);
        java.util.Date date43 = new java.util.Date();
        int int44 = date43.getTimezoneOffset();
        java.util.Date date45 = new java.util.Date();
        java.lang.String str46 = date45.toGMTString();
        boolean boolean47 = date43.before(date45);
        long long48 = date45.getTime();
        int int49 = date45.getSeconds();
        java.time.Instant instant50 = date45.toInstant();
        java.util.Date date51 = java.util.Date.from(instant50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = fastDateFormat2.format((java.lang.Object) instant50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146867371,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=638,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str20, "7:12:12 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str25, "7:12:12 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "h:mm:ss a z" + "'", str28, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "h:mm:ss a z" + "'", str29, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22 Feb 2022 07:12:12 GMT" + "'", str33, "22 Feb 2022 07:12:12 GMT");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Feb 22, 2022 7:12:12 AM" + "'", str35, "Feb 22, 2022 7:12:12 AM");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str40, "12:00:00 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "7:08:32 AM GMT+00:00" + "'", str42, "7:08:32 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "22 Feb 2022 07:12:12 GMT" + "'", str46, "22 Feb 2022 07:12:12 GMT");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645513932629L + "'", long48 == 1645513932629L);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 12 + "'", int49 == 12);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(date51);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
    }

    @Test
    public void test05720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05720");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        int int6 = fastDateFormat4.getMaxLengthEstimate();
        boolean boolean7 = fastDateFormat4.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("it");
        java.util.Locale locale15 = new java.util.Locale("hi!", "USA");
        java.lang.String str16 = locale12.getDisplayVariant(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = timeZone8.getDisplayName(false, 2022, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 2022");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!_USA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test05721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05721");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMinutes(6);
        int int30 = date26.getMinutes();
        java.util.Date date37 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean38 = date26.before(date37);
        java.util.Date date44 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean45 = date26.before(date44);
        boolean boolean46 = calendar13.after((java.lang.Object) date44);
        java.util.TimeZone timeZone47 = calendar13.getTimeZone();
        int int48 = timeZone47.getRawOffset();
        java.util.Calendar.Builder builder49 = new java.util.Calendar.Builder();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        date52.setMinutes(6);
        boolean boolean56 = date50.after(date52);
        java.util.Calendar.Builder builder57 = builder49.setInstant(date52);
        java.util.Calendar.Builder builder59 = builder57.setInstant((long) 36);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder61 = builder59.setLocale(locale60);
        java.lang.String str62 = locale60.getVariant();
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone47, locale60);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone47);
        boolean boolean65 = calendar64.isWeekDateSupported();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146867267,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=742,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str20, "7:12:12 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str25, "7:12:12 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:06:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Tue Feb 22 07:12:12 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Feb 22 07:06:12 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645513932734,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=743,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645513932734,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=743,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test05722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05722");
        java.util.Date date6 = new java.util.Date(27, 0, 456, 9, 800302, 5);
        java.lang.String str7 = date6.toLocaleString();
        java.lang.String str8 = date6.toString();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Oct 08 03:22:05 GMT+00:00 1929");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Oct 8, 1929 3:22:05 AM" + "'", str7, "Oct 8, 1929 3:22:05 AM");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Tue Oct 08 03:22:05 GMT+00:00 1929" + "'", str8, "Tue Oct 08 03:22:05 GMT+00:00 1929");
    }

    @Test
    public void test05723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05723");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.toString();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        int int27 = calendar21.getFirstDayOfWeek();
        java.lang.String str28 = fastDateFormat14.format(calendar21);
        calendar21.set((int) (short) 100, 37, 2);
        java.lang.String str33 = fastDateFormat10.format(calendar21);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(16);
        parsePosition36.setErrorIndex(5);
        parsePosition36.setErrorIndex(1);
        java.lang.Object obj41 = fastDateFormat10.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition36);
        java.lang.String str42 = parsePosition36.toString();
        java.lang.Object obj43 = fastDateFormat2.parseObject("7:08:05 AM GMT+00:00", parsePosition36);
        java.lang.Object obj44 = fastDateFormat2.clone();
        java.lang.StringBuffer stringBuffer46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer47 = fastDateFormat2.format(1645513868113L, stringBuffer46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-58914146867208,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=801,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str28, "7:12:12 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str33, "7:12:12 AM GMT+00:00");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str42, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "FastDateFormat[h:mm:ss a z]");
    }

    @Test
    public void test05724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05724");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("IT");
        languageRangeList1.clear();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange languageRange6 = null;
        boolean boolean7 = languageRangeList4.add(languageRange6);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor8 = languageRangeList4.iterator();
        java.util.Set<java.lang.String> strSet9 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet9.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet9.parallelStream();
        boolean boolean12 = languageRangeList4.retainAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale.LanguageRange languageRange13 = null;
        boolean boolean14 = languageRangeList4.add(languageRange13);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor15 = languageRangeList4.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator16 = languageRangeList4.spliterator();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        int int19 = languageRangeList4.lastIndexOf((java.lang.Object) locale17);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator20 = languageRangeList4.spliterator();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale22);
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale22.getDisplayVariant(locale24);
        java.util.Set<java.lang.String> strSet26 = locale22.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.parallelStream();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet26);
        boolean boolean29 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strSet26);
        int int31 = languageRangeList1.lastIndexOf((java.lang.Object) "3:13:15 PM GMT+00:00");
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeItor8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeItor15);
        org.junit.Assert.assertNotNull(languageRangeSpliterator16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(languageRangeSpliterator20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test05725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05725");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Set<java.lang.String> strSet27 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet27);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator29 = languageRangeList13.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = languageRangeList13.subList(32772, 26);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 26");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(languageRangeSpliterator29);
    }

    @Test
    public void test05726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05726");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone5.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar10.clear(7);
        calendar10.set(16, (int) (byte) 0);
        java.time.Instant instant16 = calendar10.toInstant();
        boolean boolean18 = calendar10.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str19 = fastDateFormat3.format(calendar10);
        java.lang.Object obj20 = fastDateFormat3.clone();
        java.util.Locale locale21 = fastDateFormat3.getLocale();
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale locale23 = null;
        java.lang.String str24 = locale21.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayCountry();
        java.lang.String str29 = locale25.getDisplayLanguage();
        java.lang.String str30 = locale25.getDisplayLanguage();
        java.lang.String str31 = locale21.getDisplayLanguage(locale25);
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.lang.String str33 = locale32.getVariant();
        java.lang.String str34 = locale21.getDisplayLanguage(locale32);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.lang.String str40 = locale35.getDisplayVariant(locale39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale35);
        java.lang.String str42 = locale35.getDisplayVariant();
        java.lang.String str43 = locale35.getDisplayVariant();
        java.lang.String str44 = locale21.getDisplayScript(locale35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) '4', locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 52");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513932852,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=861,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese" + "'", str29, "cinese");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "cinese" + "'", str30, "cinese");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str31, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "italiano" + "'", str34, "italiano");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645513932852,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=861,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test05727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05727");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0);
        java.lang.String str3 = fastDateFormat1.format(1645513710735L);
        java.lang.Object obj4 = fastDateFormat1.clone();
        java.lang.Object obj5 = fastDateFormat1.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = fastDateFormat1.parseObject("22 Feb 2022 07:08:28 GMT");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "7.08.30 GMT+00:00" + "'", str3, "7.08.30 GMT+00:00");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[H.mm.ss z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[H.mm.ss z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[H.mm.ss z]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "FastDateFormat[H.mm.ss z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "FastDateFormat[H.mm.ss z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "FastDateFormat[H.mm.ss z]");
    }

    @Test
    public void test05728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05728");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayVariant(locale6);
        java.lang.String str8 = locale0.getDisplayVariant(locale2);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale2);
        boolean boolean10 = calendar9.isWeekDateSupported();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone19.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        calendar24.clear(7);
        calendar24.set(16, (int) (byte) 0);
        int int30 = calendar24.getFirstDayOfWeek();
        java.lang.String str31 = fastDateFormat17.format(calendar24);
        calendar24.set((int) (short) 100, 37, 2);
        java.lang.String str36 = fastDateFormat13.format(calendar24);
        java.util.TimeZone timeZone37 = fastDateFormat13.getTimeZone();
        calendar9.setTimeZone(timeZone37);
        java.util.TimeZone timeZone39 = calendar9.getTimeZone();
        calendar9.add(9, 30);
        calendar9.setMinimalDaysInFirstWeek(2022);
        int int45 = calendar9.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int47 = calendar9.getActualMinimum(800302);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 800302");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1646809932883,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=2022,ERA=1,YEAR=2022,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=9,DAY_OF_YEAR=68,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=980,ZONE_OFFSET=97,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str14, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-58914146867117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=892,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str31, "7:12:12 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str36, "7:12:12 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
    }

    @Test
    public void test05729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05729");
        java.util.Locale locale1 = new java.util.Locale("22 Feb 2022 07:07:39 GMT");
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str3 = locale1.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "22 feb 2022 07:07:39 gmt");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test05730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05730");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        calendar9.setMinimalDaysInFirstWeek((int) ' ');
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray36 = new java.util.Locale[] { locale31, locale32, locale33, locale34, locale35 };
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray48 = new java.util.Locale[] { locale43, locale44, locale45, locale46, locale47 };
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, (java.util.Collection<java.util.Locale>) localeList49);
        int int52 = languageRangeList29.lastIndexOf((java.lang.Object) languageRangeList41);
        java.lang.String[] strArray71 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        boolean boolean74 = languageRangeList41.retainAll((java.util.Collection<java.lang.String>) strList72);
        boolean boolean75 = languageRangeList27.removeAll((java.util.Collection<java.lang.String>) strList72);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone77.hasSameRules(timeZone79);
        java.util.Locale locale81 = java.util.Locale.CHINA;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone79, locale81);
        boolean boolean83 = languageRangeList27.remove((java.lang.Object) timeZone79);
        int int84 = timeZone79.getRawOffset();
        timeZone79.setRawOffset(1970);
        calendar9.setTimeZone(timeZone79);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId88 = timeZone79.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1970,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=32,ERA=1,YEAR=100,MONTH=37,WEEK_OF_YEAR=5,WEEK_OF_MONTH=0,DAY_OF_MONTH=2,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=976,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:12 AM GMT+00:00" + "'", str16, "7:12:12 AM GMT+00:00");
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar82);
// flaky:         org.junit.Assert.assertEquals(calendar82.toString(), "java.util.GregorianCalendar[time=1645513932968,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1970,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=12,MILLISECOND=977,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 9 + "'", int84 == 9);
    }

    @Test
    public void test05731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05731");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.util.Date date5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = fastDateFormat2.format(date5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_US");
    }

    @Test
    public void test05732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05732");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05733");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry();
        java.lang.String str8 = locale4.getDisplayLanguage();
        java.lang.String str9 = locale4.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet10 = locale4.getExtensionKeys();
        java.lang.String str11 = locale0.getDisplayName(locale4);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale4);
        calendar12.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cinese" + "'", str8, "cinese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese" + "'", str9, "cinese");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test05734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05734");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayVariant(locale30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale26);
        calendar32.add((int) (byte) 0, (int) (byte) 10);
        boolean boolean36 = fastDateFormat2.equals((java.lang.Object) (byte) 10);
        java.lang.Object obj37 = fastDateFormat2.clone();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        calendar44.clear(7);
        calendar44.set(16, (int) (byte) 0);
        java.time.Instant instant50 = calendar44.toInstant();
        boolean boolean52 = calendar44.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar44.set(17, 9, (int) '#', 0, 10, 17);
        java.util.Date date60 = new java.util.Date();
        int int61 = date60.getDay();
        date60.setDate(2);
        java.util.Date date64 = new java.util.Date();
        int int65 = date64.getTimezoneOffset();
        date64.setMinutes(6);
        int int68 = date64.getMinutes();
        boolean boolean69 = date60.after(date64);
        int int70 = date64.getSeconds();
        calendar44.setTime(date64);
        java.text.AttributedCharacterIterator attributedCharacterIterator72 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar44);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = calendar44.getMaximum(38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 38");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146866920,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=89,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str20, "7:12:13 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str25, "7:12:13 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=89,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645513573080,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=6,SECOND=13,MILLISECOND=89,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Wed Feb 02 07:12:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Tue Feb 22 07:06:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 13 + "'", int70 == 13);
        org.junit.Assert.assertNotNull(attributedCharacterIterator72);
    }

    @Test
    public void test05735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05735");
        java.util.Date date3 = new java.util.Date(15, 2022, 45);
        int int4 = date3.getMonth();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 14 00:00:00 GMT+00:00 2083");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
    }

    @Test
    public void test05736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05736");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        int int39 = calendar33.getFirstDayOfWeek();
        java.lang.String str40 = fastDateFormat26.format(calendar33);
        calendar33.set((int) (short) 100, 37, 2);
        java.lang.String str45 = fastDateFormat22.format(calendar33);
        java.util.Locale locale46 = fastDateFormat22.getLocale();
        boolean boolean47 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.String str48 = fastDateFormat22.getPattern();
        boolean boolean49 = languageRangeList1.remove((java.lang.Object) fastDateFormat22);
        boolean boolean50 = languageRangeList1.isEmpty();
        java.util.Locale locale54 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str55 = locale54.getDisplayCountry();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale54);
        int int57 = calendar56.getFirstDayOfWeek();
        boolean boolean58 = languageRangeList1.remove((java.lang.Object) calendar56);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone60);
        java.lang.String str62 = fastDateFormat61.toString();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        calendar72.clear(7);
        calendar72.set(16, (int) (byte) 0);
        int int78 = calendar72.getFirstDayOfWeek();
        java.lang.String str79 = fastDateFormat65.format(calendar72);
        calendar72.set((int) (short) 100, 37, 2);
        java.lang.String str84 = fastDateFormat61.format(calendar72);
        java.util.Locale locale85 = fastDateFormat61.getLocale();
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleKeys();
        boolean boolean87 = languageRangeList1.removeAll((java.util.Collection<java.lang.String>) strSet86);
        boolean boolean88 = languageRangeList1.isEmpty();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator89 = languageRangeList1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor91 = languageRangeList1.listIterator(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str23, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58914146866855,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=154,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str40, "7:12:13 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str45, "7:12:13 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "h:mm:ss a z" + "'", str48, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals(locale54.toString(), "feb 22, 2022 7:07:42 am_22 FEB 2022 07:07:38 GMT_22 Feb 2022 07:07:44 GMT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "22 FEB 2022 07:07:38 GMT" + "'", str55, "22 FEB 2022 07:07:38 GMT");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645513933145,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=154,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str62, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-58914146866855,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=154,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str79, "7:12:13 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str84, "7:12:13 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(languageRangeSpliterator89);
    }

    @Test
    public void test05737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05737");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        boolean boolean10 = calendar7.isWeekDateSupported();
        int int12 = calendar7.getMinimum(4);
        java.time.Instant instant13 = calendar7.toInstant();
        int int15 = calendar7.getMaximum(12);
        calendar7.setMinimalDaysInFirstWeek((int) 'u');
        int int19 = calendar7.getActualMinimum(7);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale24, locale25, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale35, locale36, locale37, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList41);
        int int44 = languageRangeList21.lastIndexOf((java.lang.Object) languageRangeList33);
        boolean boolean45 = languageRangeList21.isEmpty();
        java.util.Date date46 = new java.util.Date();
        int int47 = date46.getTimezoneOffset();
        java.util.Date date48 = new java.util.Date();
        java.lang.String str49 = date48.toGMTString();
        boolean boolean50 = date46.before(date48);
        int int51 = languageRangeList21.lastIndexOf((java.lang.Object) date48);
        languageRangeList21.clear();
        java.lang.Object[] objArray53 = languageRangeList21.toArray();
        languageRangeList21.clear();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        int int56 = languageRangeList21.lastIndexOf((java.lang.Object) timeZone55);
        timeZone55.setRawOffset(50);
        calendar7.setTimeZone(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7.09.14", timeZone55);
        java.util.Locale locale61 = fastDateFormat60.getLocale();
        java.lang.String str62 = locale61.getLanguage();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513933189,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=50,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=117,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=198,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "22 Feb 2022 07:12:13 GMT" + "'", str49, "22 Feb 2022 07:12:13 GMT");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "it" + "'", str62, "it");
    }

    @Test
    public void test05738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05738");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor13 = languageRangeList1.listIterator(0);
        boolean boolean14 = languageRangeList1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Set<java.lang.String> strSet18 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet18.parallelStream();
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.lang.String>) strSet18);
        boolean boolean21 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strList20);
        java.util.Locale.Category category22 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category22, locale24);
        java.util.Locale locale26 = java.util.Locale.getDefault(category22);
        int int27 = languageRangeList1.lastIndexOf((java.lang.Object) locale26);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor28 = languageRangeList1.listIterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap29);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList30.listIterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.FORMAT + "'", category22.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(languageRangeItor28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeItor31);
    }

    @Test
    public void test05739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05739");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        int int16 = calendar9.getMinimalDaysInFirstWeek();
        int int17 = calendar9.getMinimalDaysInFirstWeek();
        calendar9.add((int) (short) 0, 100);
        java.lang.String str21 = fastDateFormat2.format(calendar9);
        java.text.AttributedCharacterIterator attributedCharacterIterator23 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) 1645513703264L);
        java.lang.String str24 = fastDateFormat2.getPattern();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513933242,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=251,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00" + "'", str21, "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        org.junit.Assert.assertNotNull(attributedCharacterIterator23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u65f6\u5206\u79d2' z" + "'", str24, "\u65f6\u5206\u79d2' z");
    }

    @Test
    public void test05740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05740");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale.setDefault(locale0);
        java.lang.String str2 = locale0.getLanguage();
        java.lang.String str3 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fra" + "'", str3, "fra");
    }

    @Test
    public void test05741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05741");
        java.util.Date date6 = new java.util.Date(40, 59, (int) (short) -1, 35, (int) '#', 161);
        int int7 = date6.getHours();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Nov 30 11:37:41 GMT+00:00 1944");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
    }

    @Test
    public void test05742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05742");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor26 = languageRangeList1.iterator();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone29);
        int int32 = fastDateFormat31.getMaxLengthEstimate();
        java.lang.String str33 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        calendar40.clear(7);
        calendar40.set(16, (int) (byte) 0);
        java.time.Instant instant46 = calendar40.toInstant();
        int int47 = calendar40.getMinimalDaysInFirstWeek();
        int int48 = calendar40.getMinimalDaysInFirstWeek();
        calendar40.add((int) (short) 0, 100);
        calendar40.setMinimalDaysInFirstWeek(38);
        long long54 = calendar40.getTimeInMillis();
        java.lang.String str55 = fastDateFormat31.format(calendar40);
        java.lang.String str57 = fastDateFormat31.format(1645513743125L);
        boolean boolean58 = languageRangeList1.contains((java.lang.Object) 1645513743125L);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone60);
        java.lang.String str62 = fastDateFormat61.toString();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        calendar72.clear(7);
        calendar72.set(16, (int) (byte) 0);
        int int78 = calendar72.getFirstDayOfWeek();
        java.lang.String str79 = fastDateFormat65.format(calendar72);
        calendar72.set((int) (short) 100, 37, 2);
        java.lang.String str84 = fastDateFormat61.format(calendar72);
        java.util.Locale locale85 = fastDateFormat61.getLocale();
        boolean boolean86 = languageRangeList1.equals((java.lang.Object) fastDateFormat61);
        java.lang.Class<?> wildcardClass87 = languageRangeList1.getClass();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(languageRangeItor26);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(fastDateFormat31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "h:mm:ss a z" + "'", str33, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645513933288,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=38,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=297,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645513933288L + "'", long54 == 1645513933288L);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str55, "7:12:13 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "7:09:03 AM GMT+00:00" + "'", str57, "7:09:03 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str62, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-58914146866712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=297,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str79, "7:12:13 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str84, "7:12:13 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test05743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05743");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        int int29 = date27.getSeconds();
        int int30 = languageRangeList13.indexOf((java.lang.Object) date27);
        java.lang.Object[] objArray31 = languageRangeList13.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale35, locale36, locale37, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList53);
        int int56 = languageRangeList33.lastIndexOf((java.lang.Object) languageRangeList45);
        boolean boolean57 = languageRangeList33.isEmpty();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        java.util.Date date60 = new java.util.Date();
        java.lang.String str61 = date60.toGMTString();
        boolean boolean62 = date58.before(date60);
        int int63 = languageRangeList33.lastIndexOf((java.lang.Object) date60);
        languageRangeList33.clear();
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, strMap68);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale73, locale74, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList79, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList84);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor86 = languageRangeList13.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 13 + "'", int28 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 13 + "'", int29 == 13);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "22 Feb 2022 07:12:13 GMT" + "'", str61, "22 Feb 2022 07:12:13 GMT");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertNotNull(languageRangeItor86);
    }

    @Test
    public void test05744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05744");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        int int39 = calendar33.getFirstDayOfWeek();
        java.lang.String str40 = fastDateFormat26.format(calendar33);
        calendar33.set((int) (short) 100, 37, 2);
        java.lang.String str45 = fastDateFormat22.format(calendar33);
        java.util.Locale locale46 = fastDateFormat22.getLocale();
        boolean boolean47 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.String str48 = fastDateFormat22.getPattern();
        boolean boolean49 = languageRangeList1.remove((java.lang.Object) fastDateFormat22);
        boolean boolean50 = languageRangeList1.isEmpty();
        java.lang.Object[] objArray51 = languageRangeList1.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray60 = new java.util.Locale[] { locale55, locale56, locale57, locale58, locale59 };
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.util.Locale>) localeList61);
        java.util.Locale.LanguageRange[] languageRangeArray64 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList65 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList65, languageRangeArray64);
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray72 = new java.util.Locale[] { locale67, locale68, locale69, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList65, (java.util.Collection<java.util.Locale>) localeList73);
        int int76 = languageRangeList53.lastIndexOf((java.lang.Object) languageRangeList65);
        boolean boolean77 = languageRangeList53.isEmpty();
        languageRangeList53.clear();
        java.util.Set<java.lang.String> strSet79 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream80 = strSet79.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream81 = strSet79.parallelStream();
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strSet79);
        boolean boolean83 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strList82);
        int int84 = languageRangeList1.size();
        java.util.Date date86 = new java.util.Date(0L);
        boolean boolean87 = languageRangeList1.remove((java.lang.Object) 0L);
        java.util.Collection<java.lang.String> strCollection88 = null;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection88);
        languageRangeList1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList93 = languageRangeList1.subList(42, (-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(42) > toIndex(-46800000)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str23, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58914146866601,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=408,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str40, "7:12:13 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:12:13 AM GMT+00:00" + "'", str45, "7:12:13 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "h:mm:ss a z" + "'", str48, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertNotNull(languageRangeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(strStream81);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test05745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05745");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(5752);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 5752");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05746");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        parsePosition1.setErrorIndex(5);
        int int4 = parsePosition1.getErrorIndex();
        int int5 = parsePosition1.getErrorIndex();
        int int6 = parsePosition1.getIndex();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        calendar16.set(16, (int) (byte) 0);
        java.time.Instant instant22 = calendar16.toInstant();
        boolean boolean24 = calendar16.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str25 = fastDateFormat9.format(calendar16);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray34 = new java.util.Locale[] { locale29, locale30, locale31, locale32, locale33 };
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale locale37 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray46 = new java.util.Locale[] { locale41, locale42, locale43, locale44, locale45 };
        java.util.ArrayList<java.util.Locale> localeList47 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList47, localeArray46);
        java.util.Locale locale49 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.util.Locale>) localeList47);
        int int50 = languageRangeList27.lastIndexOf((java.lang.Object) languageRangeList39);
        boolean boolean51 = languageRangeList27.isEmpty();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        java.util.Date date54 = new java.util.Date();
        java.lang.String str55 = date54.toGMTString();
        boolean boolean56 = date52.before(date54);
        int int57 = languageRangeList27.lastIndexOf((java.lang.Object) date54);
        date54.setMinutes(36);
        java.lang.String str60 = fastDateFormat9.format(date54);
        java.text.AttributedCharacterIterator attributedCharacterIterator62 = fastDateFormat9.formatToCharacterIterator((java.lang.Object) 1645513673849L);
        boolean boolean63 = parsePosition1.equals((java.lang.Object) fastDateFormat9);
        java.util.Locale locale66 = new java.util.Locale("Chinese (China)", "java.util.GregorianCalendar[time=1645513665356,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale67 = locale66.stripExtensions();
        java.lang.String str68 = locale66.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator70 = fastDateFormat9.formatToCharacterIterator((java.lang.Object) strSet69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513933542,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=551,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 07:36:13 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "22 Feb 2022 07:12:13 GMT" + "'", str55, "22 Feb 2022 07:12:13 GMT");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(attributedCharacterIterator62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals(locale66.toString(), "chinese (china)_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "chinese (china)_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "chinese (china)" + "'", str68, "chinese (china)");
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test05747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05747");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale8.getDisplayCountry(locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale8);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale15.getDisplayName(locale22);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleKeys();
        java.lang.String str27 = locale22.getDisplayName(locale25);
        java.lang.String str28 = locale22.getISO3Language();
        boolean boolean29 = fastDateFormat14.equals((java.lang.Object) locale22);
        java.util.Locale locale30 = locale22.stripExtensions();
        java.util.Locale.Builder builder31 = builder3.setLocale(locale30);
        java.util.Locale.Builder builder32 = builder31.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder32.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513933675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=684,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str27, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test05748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05748");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getSeconds();
        int int9 = date6.getMinutes();
        long long10 = date6.getTime();
        java.lang.String str11 = date6.toLocaleString();
        boolean boolean12 = date4.before(date6);
        java.lang.String str13 = fastDateFormat2.format(date4);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        boolean boolean27 = fastDateFormat2.equals((java.lang.Object) builder24);
        java.util.TimeZone timeZone28 = fastDateFormat2.getTimeZone();
        boolean boolean29 = timeZone28.observesDaylightTime();
        boolean boolean30 = timeZone28.useDaylightTime();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645513933693L + "'", long5 == 1645513933693L);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 13 + "'", int8 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513933693L + "'", long10 == 1645513933693L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Feb 22, 2022 7:12:13 AM" + "'", str11, "Feb 22, 2022 7:12:13 AM");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "07 h 12 UTC" + "'", str13, "07 h 12 UTC");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:12:13 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 13 + "'", int16 == 13);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:06:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test05749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05749");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        java.lang.String str13 = calendar6.getCalendarType();
        boolean boolean14 = calendar6.isWeekDateSupported();
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        int int16 = calendar6.getMinimalDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar6.roll(43, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=722,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gregory" + "'", str13, "gregory");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test05750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05750");
        java.util.Date date3 = new java.util.Date((int) (byte) 10, (int) (byte) 100, 7200000);
        date3.setSeconds(11);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Apr 04 00:00:11 GMT+00:00 21631");
    }

    @Test
    public void test05751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05751");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.Object obj1 = null;
        boolean boolean2 = attribute0.equals(obj1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray11 = new java.util.Locale[] { locale6, locale7, locale8, locale9, locale10 };
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor16 = languageRangeList4.listIterator(0);
        java.lang.Class<?> wildcardClass17 = languageRangeItor16.getClass();
        boolean boolean18 = attribute0.equals((java.lang.Object) wildcardClass17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINA;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayVariant();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        java.time.Instant instant43 = calendar37.toInstant();
        boolean boolean45 = calendar37.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str46 = fastDateFormat30.format(calendar37);
        java.lang.Object obj47 = fastDateFormat30.clone();
        java.util.Locale locale48 = fastDateFormat30.getLocale();
        java.lang.String str49 = locale48.getLanguage();
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        boolean boolean54 = locale52.hasExtensions();
        java.lang.String str55 = locale52.getDisplayCountry();
        java.lang.String str56 = locale52.getDisplayLanguage();
        java.lang.String str57 = locale52.getDisplayLanguage();
        java.lang.String str58 = locale48.getDisplayLanguage(locale52);
        java.lang.String str59 = locale24.getDisplayCountry(locale52);
        java.lang.String str60 = locale24.getDisplayName();
        java.util.Set<java.lang.String> strSet61 = locale24.getUnicodeLocaleKeys();
        boolean boolean62 = attribute0.equals((java.lang.Object) locale24);
        java.util.Set<java.lang.Character> charSet63 = locale24.getExtensionKeys();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(languageRangeItor16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645513933865,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=874,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513933865,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=874,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "_22 FEB 2022 07:09:20 GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh" + "'", str53, "zh");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese" + "'", str56, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese" + "'", str57, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u56fd" + "'", str59, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Chinese (China)" + "'", str60, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(charSet63);
    }

    @Test
    public void test05752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05752");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor6 = languageRangeList1.listIterator();
        boolean boolean7 = languageRangeList1.isEmpty();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.lang.String str17 = locale8.getDisplayName(locale15);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone20.hasSameRules(timeZone22);
        java.util.Locale locale25 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale25.getScript();
        java.util.Locale locale31 = new java.util.Locale("", "hi!", "");
        java.lang.String str32 = locale25.getDisplayVariant(locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone20, locale31);
        java.lang.String str34 = locale31.getDisplayCountry();
        java.lang.String str35 = locale31.getVariant();
        java.lang.String str36 = locale15.getDisplayCountry(locale31);
        java.lang.String str37 = locale31.getScript();
        java.util.Locale locale38 = locale31.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.getDisplayCountry();
        java.lang.String str43 = locale39.getDisplayLanguage();
        java.lang.String str44 = locale39.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet45 = locale39.getExtensionKeys();
        java.lang.String str46 = locale38.getDisplayName(locale39);
        int int47 = languageRangeList1.indexOf((java.lang.Object) locale39);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("22 Feb 2022 07:08:00 GMT");
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Set<java.lang.Character> charSet53 = locale51.getExtensionKeys();
        java.lang.String str54 = locale49.getDisplayLanguage(locale51);
        java.lang.String str55 = locale39.getDisplayVariant(locale51);
        java.lang.String str56 = locale39.getDisplayLanguage();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513933905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=13,MILLISECOND=914,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals(locale25.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale31.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "HI!" + "'", str34, "HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "China" + "'", str36, "China");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese" + "'", str43, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese" + "'", str44, "Chinese");
        org.junit.Assert.assertNotNull(charSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "HI!" + "'", str46, "HI!");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh" + "'", str52, "zh");
        org.junit.Assert.assertNotNull(charSet53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese" + "'", str56, "Chinese");
    }

    @Test
    public void test05753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05753");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.lang.String str8 = fastDateFormat6.toString();
        java.lang.String str9 = fastDateFormat6.getPattern();
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        parsePosition12.setErrorIndex(5);
        int int15 = parsePosition12.getErrorIndex();
        java.lang.Object obj16 = fastDateFormat6.parseObject("7:07:41 AM UTC", parsePosition12);
        java.lang.Object obj17 = fastDateFormat2.parseObject("h:mm:ss a z", parsePosition12);
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        date18.setMinutes(6);
        int int22 = date18.getMinutes();
        java.util.Date date29 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean30 = date18.before(date29);
        java.util.Date date36 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean37 = date18.before(date36);
        java.time.Instant instant38 = date18.toInstant();
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDateFormat2.format(date18, stringBuffer39);
        java.util.Date date42 = new java.util.Date((-61604322582115L));
        java.lang.String str43 = fastDateFormat2.format(date42);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale45);
        java.lang.String str49 = fastDateFormat48.toString();
        java.lang.String str50 = fastDateFormat48.getPattern();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getDay();
        date51.setDate(2);
        java.util.Date date55 = new java.util.Date();
        int int56 = date55.getTimezoneOffset();
        date55.setMinutes(6);
        int int59 = date55.getMinutes();
        boolean boolean60 = date51.after(date55);
        int int61 = date55.getSeconds();
        java.lang.String str62 = fastDateFormat48.format(date55);
        java.lang.StringBuffer stringBuffer63 = null;
        java.lang.StringBuffer stringBuffer64 = fastDateFormat2.format(date55, stringBuffer63);
        java.lang.String str65 = fastDateFormat2.toString();
        java.lang.String str67 = fastDateFormat2.format(1645513740675L);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "h:mm:ss a z" + "'", str7, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str8, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "h:mm:ss a z" + "'", str9, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Feb 22 07:06:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNull(stringBuffer40);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Thu Nov 04 00:10:17 GMT+00:00 17");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str49, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "h:mm:ss a z" + "'", str50, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Wed Feb 02 07:12:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Tue Feb 22 07:06:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 13 + "'", int61 == 13);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e0a\u5348 GMT+00:00" + "'", str62, "\u4e0a\u5348 GMT+00:00");
        org.junit.Assert.assertNull(stringBuffer64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "FastDateFormat[]" + "'", str65, "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test05754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05754");
        java.util.Date date1 = new java.util.Date("22 Feb 2022 07:11:40 GMT");
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:11:40 GMT+00:00 2022");
    }

    @Test
    public void test05755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05755");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1921-01-24 05:10:00", timeZone1);
        java.lang.StringBuffer stringBuffer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer9 = fastDateFormat6.format(1645513932724L, stringBuffer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(fastDateFormat6);
    }

    @Test
    public void test05756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05756");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.lang.String str10 = locale1.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale1);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) 'u');
        java.lang.Object obj15 = fastDateFormat11.parseObject("7:08:06 AM GMT+00:00", parsePosition14);
        java.util.TimeZone timeZone16 = fastDateFormat11.getTimeZone();
        java.util.Locale locale18 = new java.util.Locale("7:09:32 AM GMT");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = fastDateFormat11.format((java.lang.Object) locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale18.toString(), "7:09:32 am gmt");
    }

    @Test
    public void test05757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05757");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        java.util.TimeZone timeZone14 = calendar6.getTimeZone();
        calendar6.setMinimalDaysInFirstWeek((int) (short) 1);
        int int17 = calendar6.getWeeksInWeekYear();
        boolean boolean18 = calendar6.isWeekDateSupported();
        calendar6.set((int) 'u', 24358801, 24228570, 15, 17, 100);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=117,MONTH=24358801,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=24228570,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=15,MINUTE=17,SECOND=100,MILLISECOND=81,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test05758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05758");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.lang.String str10 = locale1.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale1);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition((int) 'u');
        java.lang.Object obj15 = fastDateFormat11.parseObject("7:08:06 AM GMT+00:00", parsePosition14);
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        java.lang.String str20 = fastDateFormat19.toString();
        boolean boolean21 = fastDateFormat19.getTimeZoneOverridesCalendar();
        java.lang.String str22 = fastDateFormat19.getPattern();
        java.text.ParsePosition parsePosition25 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj26 = fastDateFormat19.parseObject("22 Feb 2022 07:07:38 GMT", parsePosition25);
        int int27 = parsePosition25.getErrorIndex();
        java.util.Calendar.Builder builder28 = new java.util.Calendar.Builder();
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getSeconds();
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getTimezoneOffset();
        date31.setMinutes(6);
        boolean boolean35 = date29.after(date31);
        java.util.Calendar.Builder builder36 = builder28.setInstant(date31);
        java.util.Calendar.Builder builder38 = builder36.setInstant((long) 36);
        java.util.Calendar.Builder builder42 = builder38.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder46 = builder42.setWeekDate(0, 2, (-1));
        boolean boolean47 = parsePosition25.equals((java.lang.Object) 0);
        java.lang.Object obj48 = fastDateFormat11.parseObject("1970-1-1 2:00:00", parsePosition25);
        java.util.Date date50 = new java.util.Date((long) 18);
        date50.setTime((-61604322582992L));
        java.lang.StringBuffer stringBuffer53 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer54 = fastDateFormat11.format(date50, stringBuffer53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str20, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "h:mm:ss a z" + "'", str22, "h:mm:ss a z");
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 14 + "'", int30 == 14);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Feb 22 07:06:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj48);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Thu Nov 04 00:10:17 GMT+00:00 17");
    }

    @Test
    public void test05759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05759");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer5 = null;
        java.lang.StringBuffer stringBuffer6 = fastDateFormat2.format(date3, stringBuffer5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        boolean boolean16 = calendar13.isWeekDateSupported();
        java.util.TimeZone timeZone17 = calendar13.getTimeZone();
        int int19 = calendar13.getMaximum(3);
        java.lang.StringBuffer stringBuffer20 = null;
        java.lang.StringBuffer stringBuffer21 = fastDateFormat2.format(calendar13, stringBuffer20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        calendar28.clear(7);
        calendar28.set(16, (int) (byte) 0);
        java.time.Instant instant34 = calendar28.toInstant();
        boolean boolean36 = calendar28.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        int int42 = timeZone38.getOffset(1645513657024L);
        timeZone38.setID("fra");
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone38.hasSameRules(timeZone45);
        timeZone45.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone45);
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        int int52 = date50.getSeconds();
        int int53 = date50.getSeconds();
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getTimezoneOffset();
        java.util.Date date56 = new java.util.Date();
        java.lang.String str57 = date56.toGMTString();
        boolean boolean58 = date54.before(date56);
        long long59 = date56.getTime();
        boolean boolean60 = date50.after(date56);
        java.lang.String str61 = fastDateFormat49.format(date50);
        calendar28.setTime(date50);
        java.lang.String str63 = fastDateFormat2.format(calendar28);
        int int64 = calendar28.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar28.set((int) 'u', 36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 14 + "'", int4 == 14);
        org.junit.Assert.assertNull(stringBuffer6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=226,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNull(stringBuffer21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645513934218,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=227,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 9 + "'", int42 == 9);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(fastDateFormat49);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 14 + "'", int53 == 14);
        org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertEquals(date56.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "22 Feb 2022 07:12:14 GMT" + "'", str57, "22 Feb 2022 07:12:14 GMT");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645513934218L + "'", long59 == 1645513934218L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "7.12.14" + "'", str61, "7.12.14");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test05760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05760");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getSeconds();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMinutes(6);
        boolean boolean8 = date2.after(date4);
        java.util.Calendar.Builder builder9 = builder1.setInstant(date4);
        java.util.Calendar.Builder builder11 = builder9.setInstant((long) 36);
        java.util.Calendar.Builder builder15 = builder11.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder20 = builder15.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder22 = builder15.setLenient(true);
        java.util.Calendar.Builder builder26 = builder15.setDate((int) 'a', 1, 53);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone31);
        int int35 = timeZone31.getOffset(1645513656868L);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        boolean boolean41 = timeZone31.hasSameRules(timeZone37);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone43.hasSameRules(timeZone45);
        boolean boolean47 = timeZone37.hasSameRules(timeZone45);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone50);
        boolean boolean53 = timeZone45.hasSameRules(timeZone50);
        timeZone45.setID("22 Feb 2022 07:07:53 GMT");
        java.util.Locale locale57 = new java.util.Locale("February 22, 2022");
        java.lang.String str58 = locale57.getScript();
        java.util.Locale locale62 = new java.util.Locale("7:07:38 AM UTC", "java.text.ParsePosition[index=52,errorIndex=0]", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str63 = locale57.getDisplayLanguage(locale62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone45, locale57);
        java.util.Calendar.Builder builder65 = builder26.setTimeZone(timeZone45);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(7, timeZone45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 14 + "'", int3 == 14);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:06:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645513934266,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=275,ZONE_OFFSET=9,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertEquals(locale57.toString(), "february 22, 2022");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals(locale62.toString(), "7:07:38 am utc_JAVA.TEXT.PARSEPOSITION[INDEX=52,ERRORINDEX=0]_22 Feb 2022 07:07:44 GMT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "february 22, 2022" + "'", str63, "february 22, 2022");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test05761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05761");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645513814361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=14,MILLISECOND=369,ZONE_OFFSET=8,DST_OFFSET=0]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(34, timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 34");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test05762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05762");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05763");
        java.util.Date date3 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date3.setMonth(49);
        int int6 = date3.getDate();
        int int7 = date3.getDate();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        int int10 = date8.getSeconds();
        java.time.Instant instant11 = date8.toInstant();
        date8.setMinutes(16);
        date8.setMonth((int) (short) 10);
        boolean boolean16 = date3.before(date8);
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition((int) (byte) 0);
        int int19 = fieldPosition18.getEndIndex();
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getSeconds();
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getTimezoneOffset();
        date23.setMinutes(6);
        boolean boolean27 = date21.after(date23);
        java.util.Calendar.Builder builder28 = builder20.setInstant(date23);
        java.util.Calendar.Builder builder30 = builder28.setInstant((long) 36);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder32 = builder30.setLocale(locale31);
        java.util.Calendar.Builder builder34 = builder32.setLenient(false);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        timeZone37.setRawOffset((int) (byte) 1);
        boolean boolean42 = timeZone37.observesDaylightTime();
        java.util.Calendar.Builder builder43 = builder32.setTimeZone(timeZone37);
        java.util.Date date47 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date47.setMonth(4);
        java.util.Calendar.Builder builder50 = builder32.setInstant(date47);
        java.util.Calendar.Builder builder52 = builder32.setInstant(1645513674789L);
        boolean boolean53 = fieldPosition18.equals((java.lang.Object) builder52);
        java.util.Calendar calendar54 = builder52.build();
        java.time.Instant instant55 = calendar54.toInstant();
        calendar54.setMinimalDaysInFirstWeek(7200000);
        java.util.Date date58 = calendar54.getTime();
        int int59 = date8.compareTo(date58);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 10 00:00:00 GMT+00:00 1956");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Nov 22 07:16:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 14 + "'", int10 == 14);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Feb 22 07:06:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645513674789,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=7200000,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=54,MILLISECOND=790,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Feb 22 07:07:54 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test05764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05764");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        long long2 = date0.getTime();
        long long3 = date0.getTime();
        int int4 = date0.getMinutes();
        int int5 = date0.getDay();
        date0.setMinutes(47);
        java.lang.String str8 = date0.toString();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 07:47:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645513934400L + "'", long2 == 1645513934400L);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645513934400L + "'", long3 == 1645513934400L);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 12 + "'", int4 == 12);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Tue Feb 22 07:47:14 GMT+00:00 2022" + "'", str8, "Tue Feb 22 07:47:14 GMT+00:00 2022");
    }

    @Test
    public void test05765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05765");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        long long26 = calendar13.getTimeInMillis();
        calendar13.set(11, 50, 38);
        calendar13.roll(18, 0);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale.Builder builder37 = builder34.addUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder38 = builder34.clear();
        java.util.Locale locale39 = builder34.build();
        boolean boolean40 = calendar13.after((java.lang.Object) builder34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder34.setLanguageTag("7:09:37 AM GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 7:09:37 AM GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=11,MONTH=50,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=38,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=425,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:14 AM GMT+00:00" + "'", str20, "7:12:14 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:14 AM GMT+00:00" + "'", str25, "7:12:14 AM GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-58914146865584L) + "'", long26 == (-58914146865584L));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test05766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05766");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str4 = fastDateFormat2.format((long) ' ');
        java.util.Locale locale5 = fastDateFormat2.getLocale();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        int int11 = timeZone7.getOffset(1645513657024L);
        timeZone7.setID("fra");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone7.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone7, locale16);
        boolean boolean21 = fastDateFormat6.equals((java.lang.Object) locale16);
        java.lang.String str22 = locale16.getCountry();
        java.lang.String str23 = locale5.getDisplayCountry(locale16);
        boolean boolean24 = locale5.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(24358801, (-46800000), locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style -46800000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1/1/70 12:00 AM" + "'", str4, "1/1/70 12:00 AM");
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645513934436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=445,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u610f\u5927\u5229" + "'", str23, "\u610f\u5927\u5229");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05767");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        boolean boolean4 = fastDateFormat3.getTimeZoneOverridesCalendar();
        java.lang.String str6 = fastDateFormat3.format((-838185410000L));
        java.lang.Object obj7 = fastDateFormat3.clone();
        java.util.TimeZone timeZone8 = fastDateFormat3.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(37, timeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 37");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "6:43:10 PM GMT+00:00" + "'", str6, "6:43:10 PM GMT+00:00");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05768");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        boolean boolean6 = languageRangeList1.isEmpty();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor7 = languageRangeList1.listIterator();
        java.util.Locale.LanguageRange languageRange9 = new java.util.Locale.LanguageRange("France");
        java.lang.String str10 = languageRange9.getRange();
        boolean boolean11 = languageRangeList1.add(languageRange9);
        boolean boolean12 = languageRangeList1.isEmpty();
        boolean boolean14 = languageRangeList1.contains((java.lang.Object) "3 Nov 4671 23:59:59 GMT");
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeItor7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "france" + "'", str10, "france");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05769");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.lang.String str1 = attribute0.toString();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange languageRange5 = null;
        boolean boolean6 = languageRangeList3.add(languageRange5);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor7 = languageRangeList3.iterator();
        java.util.Set<java.lang.String> strSet8 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet8.parallelStream();
        boolean boolean11 = languageRangeList3.retainAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange languageRange12 = null;
        boolean boolean13 = languageRangeList3.add(languageRange12);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor14 = languageRangeList3.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator15 = languageRangeList3.spliterator();
        boolean boolean16 = attribute0.equals((java.lang.Object) languageRangeList3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor17 = languageRangeList3.iterator();
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        int int20 = date18.getSeconds();
        int int21 = date18.getMinutes();
        int int22 = date18.getDay();
        java.lang.String str23 = date18.toGMTString();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.lang.String str44 = fastDateFormat26.toString();
        java.util.Locale locale45 = fastDateFormat26.getLocale();
        java.util.Date date46 = new java.util.Date();
        int int47 = date46.getTimezoneOffset();
        java.util.Date date48 = new java.util.Date();
        java.lang.String str49 = date48.toGMTString();
        boolean boolean50 = date46.before(date48);
        java.lang.String str51 = date48.toLocaleString();
        int int52 = date48.getTimezoneOffset();
        date48.setDate(292278994);
        java.lang.StringBuffer stringBuffer55 = null;
        java.lang.StringBuffer stringBuffer56 = fastDateFormat26.format(date48, stringBuffer55);
        int int57 = date48.getDay();
        boolean boolean58 = date18.after(date48);
        int int59 = date48.getMinutes();
        boolean boolean60 = languageRangeList3.equals((java.lang.Object) int59);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeItor7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(languageRangeItor14);
        org.junit.Assert.assertNotNull(languageRangeSpliterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeItor17);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 12 + "'", int21 == 12);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "22 Feb 2022 07:12:14 GMT" + "'", str23, "22 Feb 2022 07:12:14 GMT");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645513934520,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=529,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "FastDateFormat[]" + "'", str44, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Mon Oct 16 07:12:14 GMT+00:00 802254");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "22 Feb 2022 07:12:14 GMT" + "'", str49, "22 Feb 2022 07:12:14 GMT");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22-feb-2022 7.12.14" + "'", str51, "22-feb-2022 7.12.14");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(stringBuffer56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test05770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05770");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        boolean boolean8 = locale6.hasExtensions();
        java.lang.String str9 = locale6.getDisplayLanguage();
        java.lang.String str10 = locale6.getISO3Country();
        java.util.Locale locale11 = locale6.stripExtensions();
        java.util.Locale.Builder builder12 = builder4.setLocale(locale11);
        java.util.Locale.Builder builder13 = builder4.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguageTag("Feb 2, 2022 7:09:56 AM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Feb 2, 2022 7:09:56 AM [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese" + "'", str9, "cinese");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test05771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05771");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.util.Calendar.Builder builder18 = builder10.setTimeZone(timeZone15);
        java.util.Calendar.Builder builder20 = builder10.setInstant((long) (byte) 0);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(103, 4, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar25 = builder20.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 14 + "'", int2 == 14);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test05772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05772");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayVariant(locale30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale26);
        calendar32.add((int) (byte) 0, (int) (byte) 10);
        boolean boolean36 = fastDateFormat2.equals((java.lang.Object) (byte) 10);
        java.lang.Object obj37 = fastDateFormat2.clone();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        calendar44.clear(7);
        calendar44.set(16, (int) (byte) 0);
        java.time.Instant instant50 = calendar44.toInstant();
        boolean boolean52 = calendar44.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar44.set(17, 9, (int) '#', 0, 10, 17);
        java.util.Date date60 = new java.util.Date();
        int int61 = date60.getDay();
        date60.setDate(2);
        java.util.Date date64 = new java.util.Date();
        int int65 = date64.getTimezoneOffset();
        date64.setMinutes(6);
        int int68 = date64.getMinutes();
        boolean boolean69 = date60.after(date64);
        int int70 = date64.getSeconds();
        calendar44.setTime(date64);
        java.text.AttributedCharacterIterator attributedCharacterIterator72 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar44);
        java.time.Instant instant73 = calendar44.toInstant();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146865417,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=592,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:14 AM GMT+00:00" + "'", str20, "7:12:14 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:14 AM GMT+00:00" + "'", str25, "7:12:14 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=592,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645513574584,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=6,SECOND=14,MILLISECOND=593,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Wed Feb 02 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Tue Feb 22 07:06:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 14 + "'", int70 == 14);
        org.junit.Assert.assertNotNull(attributedCharacterIterator72);
        org.junit.Assert.assertNotNull(instant73);
    }

    @Test
    public void test05773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05773");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        languageRangeList1.clear();
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition(28);
        boolean boolean9 = languageRangeList1.remove((java.lang.Object) fieldPosition8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale13, locale14, locale15, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList31);
        int int34 = languageRangeList11.lastIndexOf((java.lang.Object) languageRangeList23);
        boolean boolean35 = languageRangeList11.isEmpty();
        languageRangeList11.clear();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor37 = languageRangeList11.iterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator38 = languageRangeList11.spliterator();
        java.util.Locale locale40 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale40.getScript();
        java.util.Locale locale46 = new java.util.Locale("", "hi!", "");
        java.lang.String str47 = locale40.getDisplayVariant(locale46);
        java.util.Set<java.lang.String> strSet48 = locale46.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet48);
        boolean boolean50 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strSet48);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(languageRangeItor37);
        org.junit.Assert.assertNotNull(languageRangeSpliterator38);
        org.junit.Assert.assertEquals(locale40.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test05774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05774");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale locale4 = builder3.build();
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        calendar15.clear(7);
        calendar15.set(16, (int) (byte) 0);
        java.time.Instant instant21 = calendar15.toInstant();
        boolean boolean23 = calendar15.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str24 = fastDateFormat8.format(calendar15);
        java.lang.Object obj25 = fastDateFormat8.clone();
        java.util.Locale locale26 = fastDateFormat8.getLocale();
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale26.getVariant();
        java.lang.String str29 = locale4.getDisplayVariant(locale26);
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale34 = new java.util.Locale("", "hi!", "");
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale34.getDisplayLanguage();
        java.lang.String str38 = locale34.getCountry();
        java.lang.String str39 = locale4.getDisplayVariant(locale34);
        java.lang.String str40 = locale34.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645513934666,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=675,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it" + "'", str27, "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale34.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "China" + "'", str35, "China");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "HI!" + "'", str38, "HI!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "HI!" + "'", str40, "HI!");
    }

    @Test
    public void test05775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05775");
        java.util.Locale locale3 = new java.util.Locale("2022-2-22 7:06:34", "Chinese (Taiwan)", "java.util.GregorianCalendar[time=1645513741111,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=1,MILLISECOND=146,ZONE_OFFSET=35,DST_OFFSET=0]");
        java.lang.Object obj4 = null;
        boolean boolean5 = locale3.equals(obj4);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-2-22 7:06:34_CHINESE (TAIWAN)_java.util.GregorianCalendar[time=1645513741111,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=1,MILLISECOND=146,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05776");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.lang.String str6 = locale5.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale5);
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale5.getDisplayName(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale8);
        java.util.Locale.Builder builder11 = builder3.setLocale(locale8);
        java.lang.String str13 = locale8.getExtension('a');
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale8.getDisplayVariant(locale14);
        java.lang.String str16 = locale8.getLanguage();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fra" + "'", str6, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str9, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513934697,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=706,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
    }

    @Test
    public void test05777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05777");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone21.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINA;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayVariant();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.CHINA;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        calendar38.clear(7);
        calendar38.set(16, (int) (byte) 0);
        java.time.Instant instant44 = calendar38.toInstant();
        boolean boolean46 = calendar38.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str47 = fastDateFormat31.format(calendar38);
        java.lang.Object obj48 = fastDateFormat31.clone();
        java.util.Locale locale49 = fastDateFormat31.getLocale();
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = null;
        java.lang.String str52 = locale49.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry();
        java.lang.String str57 = locale53.getDisplayLanguage();
        java.lang.String str58 = locale53.getDisplayLanguage();
        java.lang.String str59 = locale49.getDisplayLanguage(locale53);
        java.lang.String str60 = locale25.getDisplayCountry(locale53);
        java.lang.String str61 = locale25.getDisplayName();
        boolean boolean62 = languageRangeList1.equals((java.lang.Object) locale25);
        languageRangeList1.clear();
        boolean boolean64 = languageRangeList1.isEmpty();
        int int65 = languageRangeList1.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange67 = languageRangeList1.get(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645513934808,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=817,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645513934808,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=817,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "it" + "'", str50, "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "cinese" + "'", str57, "cinese");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "cinese" + "'", str58, "cinese");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str59, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u56fd" + "'", str60, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "cinese (Cina)" + "'", str61, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test05778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05778");
        java.util.Locale locale2 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale3 = null;
        java.lang.String str4 = locale2.getDisplayScript(locale3);
        java.util.Set<java.lang.String> strSet5 = locale2.getUnicodeLocaleKeys();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("Feb 22, 2022 7:06:39 AM");
        java.lang.String str8 = locale2.getDisplayCountry(locale7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale.LanguageRange languageRange12 = null;
        boolean boolean13 = languageRangeList10.add(languageRange12);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor14 = languageRangeList10.iterator();
        java.util.Set<java.lang.String> strSet15 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream16 = strSet15.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream17 = strSet15.parallelStream();
        boolean boolean18 = languageRangeList10.retainAll((java.util.Collection<java.lang.String>) strSet15);
        java.util.Locale locale20 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        boolean boolean24 = languageRangeList10.contains((java.lang.Object) locale21);
        java.lang.String str25 = locale21.getVariant();
        java.lang.String str26 = locale2.getDisplayVariant(locale21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) ' ', locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(languageRangeItor14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale20.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test05779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05779");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale1);
        java.lang.String str5 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        timeZone10.setRawOffset((int) (byte) 1);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone10, locale15);
        int int18 = timeZone10.getOffset(1645513689942L);
        boolean boolean19 = timeZone10.observesDaylightTime();
        java.util.Locale locale23 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str24 = locale23.getDisplayScript();
        boolean boolean25 = locale23.hasExtensions();
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale23.getCountry();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone10, locale23);
        boolean boolean29 = fastDateFormat4.equals((java.lang.Object) locale23);
        boolean boolean30 = fastDateFormat4.getTimeZoneOverridesCalendar();
        java.lang.Object obj31 = fastDateFormat4.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(fastDateFormat4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u5e74\u6708\u65e5' EEEE" + "'", str5, "\u5e74\u6708\u65e5' EEEE");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FASTDATEFORMAT[]" + "'", str27, "FASTDATEFORMAT[]");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645513934856,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=857,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "\u5e74\u6708\u65e5' EEEE]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "\u5e74\u6708\u65e5' EEEE]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "\u5e74\u6708\u65e5' EEEE]");
    }

    @Test
    public void test05780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05780");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        java.util.Date date28 = new java.util.Date();
        java.lang.String str29 = date28.toGMTString();
        boolean boolean30 = date26.before(date28);
        int int31 = languageRangeList1.lastIndexOf((java.lang.Object) date28);
        languageRangeList1.clear();
        java.lang.Object[] objArray33 = languageRangeList1.toArray();
        languageRangeList1.clear();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor35 = languageRangeList1.listIterator();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39, locale41);
        calendar42.clear(7);
        calendar42.set(16, (int) (byte) 0);
        java.time.Instant instant48 = calendar42.toInstant();
        boolean boolean50 = calendar42.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar42.set(17, 9, (int) '#', 0, 10, 17);
        calendar42.roll(5, 14);
        boolean boolean61 = languageRangeList1.remove((java.lang.Object) 14);
        languageRangeList1.clear();
        java.util.Calendar.Builder builder63 = new java.util.Calendar.Builder();
        java.util.Date date64 = new java.util.Date();
        int int65 = date64.getSeconds();
        java.util.Date date66 = new java.util.Date();
        int int67 = date66.getTimezoneOffset();
        date66.setMinutes(6);
        boolean boolean70 = date64.after(date66);
        java.util.Calendar.Builder builder71 = builder63.setInstant(date66);
        java.util.Calendar.Builder builder73 = builder71.setInstant((long) 36);
        java.util.Calendar.Builder builder77 = builder73.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder81 = builder73.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder85 = builder81.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Calendar calendar86 = builder85.build();
        java.util.Calendar.Builder builder90 = builder85.setTimeOfDay((int) (short) 1, 51, 45);
        java.util.Locale locale94 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str95 = locale94.getDisplayScript();
        java.lang.String str96 = locale94.getDisplayCountry();
        java.util.Calendar.Builder builder97 = builder90.setLocale(locale94);
        boolean boolean98 = languageRangeList1.remove((java.lang.Object) locale94);
        boolean boolean99 = languageRangeList1.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22 Feb 2022 07:12:14 GMT" + "'", str29, "22 Feb 2022 07:12:14 GMT");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(languageRangeItor35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=18,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=887,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 14 + "'", int65 == 14);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Tue Feb 22 07:06:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=-60388591703009,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=56,MONTH=4,WEEK_OF_YEAR=20,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=134,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=11,SECOND=37,MILLISECOND=0,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals(locale94.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "1/1/70 12:00 AM" + "'", str96, "1/1/70 12:00 AM");
        org.junit.Assert.assertNotNull(builder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test05781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05781");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        int int6 = fastDateFormat4.getMaxLengthEstimate();
        boolean boolean7 = fastDateFormat4.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        calendar18.clear(7);
        calendar18.set(16, (int) (byte) 0);
        java.time.Instant instant24 = calendar18.toInstant();
        boolean boolean26 = calendar18.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str27 = fastDateFormat11.format(calendar18);
        java.lang.Object obj28 = fastDateFormat11.clone();
        java.lang.String str29 = fastDateFormat11.toString();
        java.util.Locale locale30 = fastDateFormat11.getLocale();
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getTimezoneOffset();
        java.util.Date date33 = new java.util.Date();
        java.lang.String str34 = date33.toGMTString();
        boolean boolean35 = date31.before(date33);
        java.lang.String str36 = date33.toLocaleString();
        int int37 = date33.getTimezoneOffset();
        date33.setDate(292278994);
        java.lang.StringBuffer stringBuffer40 = null;
        java.lang.StringBuffer stringBuffer41 = fastDateFormat11.format(date33, stringBuffer40);
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getTimezoneOffset();
        java.util.Date date44 = new java.util.Date();
        java.lang.String str45 = date44.toGMTString();
        boolean boolean46 = date42.before(date44);
        long long47 = date44.getTime();
        java.lang.String str48 = date44.toGMTString();
        java.util.Date date49 = new java.util.Date();
        int int50 = date49.getTimezoneOffset();
        int int51 = date49.getSeconds();
        java.time.Instant instant52 = date49.toInstant();
        int int53 = date49.getDate();
        boolean boolean54 = date44.before(date49);
        java.lang.StringBuffer stringBuffer55 = null;
        java.text.FieldPosition fieldPosition57 = new java.text.FieldPosition((int) (byte) 0);
        int int58 = fieldPosition57.getEndIndex();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = locale59.getDisplayCountry();
        boolean boolean63 = fieldPosition57.equals((java.lang.Object) locale59);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone64.hasSameRules(timeZone65);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone65.hasSameRules(timeZone67);
        java.util.Locale locale69 = java.util.Locale.CHINA;
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone67, locale69);
        calendar70.clear(7);
        boolean boolean73 = calendar70.isWeekDateSupported();
        int int74 = calendar70.getMinimalDaysInFirstWeek();
        int int76 = calendar70.getActualMaximum((int) (byte) 1);
        boolean boolean77 = fieldPosition57.equals((java.lang.Object) (byte) 1);
        java.lang.StringBuffer stringBuffer78 = fastDateFormat11.format((java.lang.Object) date44, stringBuffer55, fieldPosition57);
        java.util.TimeZone timeZone79 = fastDateFormat11.getTimeZone();
        boolean boolean80 = timeZone8.hasSameRules(timeZone79);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = timeZone79.getOffset(22, 130, 53, 49, 51, 130);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645513934921,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=930,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDateFormat[]" + "'", str29, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Mon Oct 16 07:12:14 GMT+00:00 802254");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22 Feb 2022 07:12:14 GMT" + "'", str34, "22 Feb 2022 07:12:14 GMT");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "22 f\351vr. 2022 07:12:14" + "'", str36, "22 f\351vr. 2022 07:12:14");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(stringBuffer41);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22 Feb 2022 07:12:14 GMT" + "'", str45, "22 Feb 2022 07:12:14 GMT");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645513934921L + "'", long47 == 1645513934921L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "22 Feb 2022 07:12:14 GMT" + "'", str48, "22 Feb 2022 07:12:14 GMT");
        org.junit.Assert.assertEquals(date49.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 14 + "'", int51 == 14);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh" + "'", str60, "zh");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar70);
        org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=930,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 292278994 + "'", int76 == 292278994);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(stringBuffer78);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test05782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05782");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        int int9 = timeZone7.getRawOffset();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        calendar16.clear(7);
        boolean boolean19 = calendar16.isWeekDateSupported();
        int int21 = calendar16.getMinimum(4);
        java.util.TimeZone timeZone22 = calendar16.getTimeZone();
        timeZone22.setRawOffset(7);
        int int26 = timeZone22.getOffset(1645513677733L);
        timeZone22.setID("Tue Feb 22 00:37:03 GMT 2022");
        boolean boolean29 = timeZone7.hasSameRules(timeZone22);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId30 = timeZone22.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: Tue Feb 22 00:37:03 GMT 2022");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Tue Feb 22 00:37:03 GMT 2022\",offset=7,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=965,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test05783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05783");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.util.Locale locale20 = fastDateFormat2.getLocale();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        int int24 = parsePosition23.getErrorIndex();
        java.lang.String str25 = parsePosition23.toString();
        java.lang.Object obj26 = null;
        boolean boolean27 = parsePosition23.equals(obj26);
        int int28 = parsePosition23.getIndex();
        boolean boolean30 = parsePosition23.equals((java.lang.Object) 1645513657332L);
        java.lang.String str31 = parsePosition23.toString();
        int int32 = parsePosition23.getErrorIndex();
        int int33 = parsePosition23.getErrorIndex();
        java.lang.String str34 = parsePosition23.toString();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Date date36 = new java.util.Date();
        int int37 = date36.getSeconds();
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getTimezoneOffset();
        date38.setMinutes(6);
        boolean boolean42 = date36.after(date38);
        java.util.Calendar.Builder builder43 = builder35.setInstant(date38);
        java.util.Calendar.Builder builder45 = builder43.setInstant((long) 36);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder47 = builder45.setLocale(locale46);
        java.util.Calendar.Builder builder49 = builder47.setLenient(false);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        timeZone52.setRawOffset((int) (byte) 1);
        boolean boolean57 = timeZone52.observesDaylightTime();
        java.util.Calendar.Builder builder58 = builder47.setTimeZone(timeZone52);
        java.util.Date date62 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date62.setMonth(4);
        java.util.Calendar.Builder builder65 = builder47.setInstant(date62);
        boolean boolean66 = parsePosition23.equals((java.lang.Object) builder47);
        java.lang.Object obj67 = fastDateFormat2.parseObject("2022-02-22 08:37:00", parsePosition23);
        boolean boolean68 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale69 = fastDateFormat2.getLocale();
        java.lang.StringBuffer stringBuffer71 = null;
        java.lang.StringBuffer stringBuffer72 = fastDateFormat2.format(1645513921416L, stringBuffer71);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513934975,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=14,MILLISECOND=984,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale20);
// flaky:         org.junit.Assert.assertEquals(locale20.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str25, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str31, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str34, "java.text.ParsePosition[index=16,errorIndex=-1]");
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 07:12:14 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 14 + "'", int37 == 14);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Tue Feb 22 07:06:14 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
// flaky:         org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertNull(stringBuffer72);
    }

    @Test
    public void test05784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05784");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Set<java.lang.String> strSet25 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet25.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet25.parallelStream();
        boolean boolean28 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Date date29 = new java.util.Date();
        long long30 = date29.getTime();
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getTimezoneOffset();
        int int33 = date31.getSeconds();
        int int34 = date31.getMinutes();
        long long35 = date31.getTime();
        java.lang.String str36 = date31.toLocaleString();
        boolean boolean37 = date29.before(date31);
        java.time.Instant instant38 = date29.toInstant();
        date29.setDate((int) (short) 10);
        int int41 = languageRangeList13.indexOf((java.lang.Object) date29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList44 = languageRangeList13.subList(10, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: toIndex = 117");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Feb 10 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513935008L + "'", long30 == 1645513935008L);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 12 + "'", int34 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645513935008L + "'", long35 == 1645513935008L);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Feb 22, 2022 7:12:15 AM" + "'", str36, "Feb 22, 2022 7:12:15 AM");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test05785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05785");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        int int4 = fastDateFormat2.getMaxLengthEstimate();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        timeZone5.setRawOffset(49);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05786");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale15.getDisplayName(locale22);
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder10.setLocale(locale22);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale locale29 = builder28.build();
        java.util.Locale.Builder builder30 = builder28.clearExtensions();
        java.util.Locale locale31 = builder30.build();
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        java.lang.String str33 = locale31.getDisplayScript();
        java.util.Calendar.Builder builder34 = builder26.setLocale(locale31);
        java.util.Locale locale36 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale37 = locale36.stripExtensions();
        java.lang.String str38 = locale36.getScript();
        java.util.Locale locale42 = new java.util.Locale("", "hi!", "");
        java.lang.String str43 = locale36.getDisplayVariant(locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str45 = locale42.getScript();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        boolean boolean49 = locale47.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale47);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone52);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone55.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57, locale59);
        calendar60.clear(7);
        calendar60.set(16, (int) (byte) 0);
        java.time.Instant instant66 = calendar60.toInstant();
        boolean boolean68 = calendar60.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str69 = fastDateFormat53.format(calendar60);
        java.lang.Object obj70 = fastDateFormat53.clone();
        java.util.Locale locale71 = fastDateFormat53.getLocale();
        java.lang.String str72 = locale71.getLanguage();
        java.util.Locale locale73 = null;
        java.lang.String str74 = locale71.getDisplayVariant(locale73);
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.lang.String str76 = locale75.getLanguage();
        boolean boolean77 = locale75.hasExtensions();
        java.lang.String str78 = locale75.getDisplayCountry();
        java.lang.String str79 = locale75.getDisplayLanguage();
        java.lang.String str80 = locale75.getDisplayLanguage();
        java.lang.String str81 = locale71.getDisplayLanguage(locale75);
        java.util.Locale locale82 = java.util.Locale.ITALY;
        java.lang.String str83 = locale82.getVariant();
        java.lang.String str84 = locale71.getDisplayLanguage(locale82);
        java.lang.String str85 = locale47.getDisplayCountry(locale71);
        java.lang.String str86 = locale42.getDisplayScript(locale47);
        java.util.Calendar.Builder builder87 = builder34.setLocale(locale42);
        java.lang.String str88 = locale42.getVariant();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513935045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=54,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u4e2d\u6587" + "'", str24, "\u4e2d\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "China" + "'", str25, "China");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertEquals(locale36.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals(locale42.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar60);
// flaky:         org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645513935045,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=54,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "_HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zh" + "'", str76, "zh");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Chinese" + "'", str79, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Chinese" + "'", str80, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test05787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05787");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        int int29 = date27.getSeconds();
        int int30 = languageRangeList13.indexOf((java.lang.Object) date27);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList13.listIterator();
        boolean boolean32 = languageRangeList13.isEmpty();
        java.lang.Object obj33 = null;
        boolean boolean34 = languageRangeList13.remove(obj33);
        java.util.function.UnaryOperator<java.util.Locale.LanguageRange> languageRangeUnaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            languageRangeList13.replaceAll(languageRangeUnaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 15 + "'", int29 == 15);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(languageRangeItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05788");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        int int6 = date4.getSeconds();
        int int7 = date4.getMinutes();
        long long8 = date4.getTime();
        long long9 = date4.getTime();
        date4.setHours(122);
        java.lang.String str12 = fastDateFormat2.format(date4);
        java.util.TimeZone timeZone13 = fastDateFormat2.getTimeZone();
        boolean boolean14 = fastDateFormat2.getTimeZoneOverridesCalendar();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj16 = fastDateFormat2.parseObject("\u4e0a\u5348\u65f6\u5206\u79d2 UTC");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 27 02:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513935254L + "'", long8 == 1645513935254L);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645513935254L + "'", long9 == 1645513935254L);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "02 h 12 UTC" + "'", str12, "02 h 12 UTC");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05789");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getSeconds();
        int int9 = date6.getMinutes();
        long long10 = date6.getTime();
        java.lang.String str11 = date6.toLocaleString();
        boolean boolean12 = date4.before(date6);
        java.lang.String str13 = fastDateFormat2.format(date4);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Date date15 = new java.util.Date();
        int int16 = date15.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setMinutes(6);
        boolean boolean21 = date15.after(date17);
        java.util.Calendar.Builder builder22 = builder14.setInstant(date17);
        java.util.Calendar.Builder builder24 = builder22.setInstant((long) 36);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        boolean boolean27 = fastDateFormat2.equals((java.lang.Object) builder24);
        java.util.Calendar calendar28 = builder24.build();
        int int29 = calendar28.getFirstDayOfWeek();
        java.lang.String str30 = calendar28.getCalendarType();
        int int32 = calendar28.getGreatestMinimum(11);
        // The following exception was thrown during execution in test generation
        try {
            calendar28.set(35, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645513935270L + "'", long5 == 1645513935270L);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513935270L + "'", long10 == 1645513935270L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-2-22 7:12:15" + "'", str11, "2022-2-22 7:12:15");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "07 h 12 UTC" + "'", str13, "07 h 12 UTC");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=36,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=45,ZONE_OFFSET=9,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test05790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05790");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale locale4 = builder1.build();
        java.lang.String str5 = locale4.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, locale4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = fastDateFormat6.parseObject("7:10:42 AM GMT");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fastDateFormat6);
    }

    @Test
    public void test05791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05791");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.Date date27 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date27.setMonth(4);
        java.util.Calendar.Builder builder30 = builder12.setInstant(date27);
        java.util.Date date37 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        date37.setMonth(50400000);
        date37.setMonth(32769);
        java.util.Calendar.Builder builder42 = builder12.setInstant(date37);
        int int43 = date37.getMinutes();
        int int44 = date37.getMonth();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone49.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        calendar54.clear(7);
        calendar54.set(16, (int) (byte) 0);
        int int60 = calendar54.getFirstDayOfWeek();
        java.lang.String str61 = fastDateFormat47.format(calendar54);
        java.lang.String str62 = fastDateFormat47.toString();
        java.util.Date date63 = new java.util.Date();
        int int64 = date63.getTimezoneOffset();
        date63.setMonth(0);
        java.time.Instant instant67 = date63.toInstant();
        java.util.Date date68 = java.util.Date.from(instant67);
        long long69 = date68.getTime();
        java.lang.String str70 = fastDateFormat47.format(date68);
        int int71 = date68.getYear();
        int int72 = date68.getHours();
        int int73 = date37.compareTo(date68);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder30);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Thu Oct 31 15:13:15 GMT+00:00 4204633");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 13 + "'", int43 == 13);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645513935304,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=313,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "7:12:15 AM GMT+00:00" + "'", str61, "7:12:15 AM GMT+00:00");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str62, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Sat Jan 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(date68);
// flaky:         org.junit.Assert.assertEquals(date68.toString(), "Sat Jan 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1642835535304L + "'", long69 == 1642835535304L);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "7:12:15 AM GMT+00:00" + "'", str70, "7:12:15 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 122 + "'", int71 == 122);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test05792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05792");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.setLanguage("Italia");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder0.setUnicodeLocaleKeyword("7:10:20 AM GMT+00:00", "7.09.43 GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 7:10:20 AM GMT+00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test05793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05793");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format(1645513657001L);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        java.util.TimeZone timeZone17 = calendar16.getTimeZone();
        calendar16.set(5, 16);
        boolean boolean21 = parsePosition10.equals((java.lang.Object) 5);
        java.lang.Object obj22 = fastDateFormat2.parseObject("2022-02-22 08:37:55", parsePosition10);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayCountry(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale26);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.lang.String str42 = locale33.getDisplayName(locale40);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.lang.String str45 = locale40.getDisplayName(locale43);
        java.lang.String str46 = locale40.getISO3Language();
        boolean boolean47 = fastDateFormat32.equals((java.lang.Object) locale40);
        java.lang.String str48 = fastDateFormat32.getPattern();
        java.lang.String str49 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.lang.String str55 = fastDateFormat53.toString();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition(16);
        parsePosition58.setErrorIndex(5);
        parsePosition58.setErrorIndex(1);
        java.lang.Object obj63 = fastDateFormat53.parseObject("22 Feb 2022 07:07:39 GMT", parsePosition58);
        java.lang.Object obj64 = fastDateFormat32.parseObject("java.text.ParsePosition[index=52,errorIndex=0]", parsePosition58);
        java.lang.Object obj65 = fastDateFormat2.parseObject("java.text.ParsePosition[index=16,errorIndex=5]", parsePosition58);
        java.util.TimeZone timeZone66 = fastDateFormat2.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId67 = timeZone66.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2 fe?vr. 2022 07:09:37");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:07:37 AM GMT+00:00" + "'", str7, "7:07:37 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=397,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "China" + "'", str31, "China");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645513935388,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=397,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str45, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zho" + "'", str46, "zho");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u5e74\u6708\u65e5' ah:mm" + "'", str48, "\u5e74\u6708\u65e5' ah:mm");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5e74\u6708\u65e5' ah:mm" + "'", str49, "\u5e74\u6708\u65e5' ah:mm");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "h:mm:ss a z" + "'", str54, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str55, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05794");
        java.util.Date date1 = new java.util.Date("22 Feb 2022 07:08:15 GMT");
        int int2 = date1.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:08:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
    }

    @Test
    public void test05795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05795");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar calendar15 = builder14.build();
        // The following exception was thrown during execution in test generation
        try {
            calendar15.set(46, 4202733);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=36,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=45,ZONE_OFFSET=9,DST_OFFSET=0]");
    }

    @Test
    public void test05796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05796");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        calendar6.set(38, 69, 2022);
        int int17 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.setLenient(true);
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getSeconds();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMinutes(6);
        boolean boolean30 = date24.after(date26);
        java.util.Calendar.Builder builder31 = builder23.setInstant(date26);
        java.util.Calendar.Builder builder33 = builder31.setInstant((long) 36);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder35 = builder33.setLocale(locale34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone39);
        int int43 = timeZone39.getOffset(1645513656868L);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone45.hasSameRules(timeZone47);
        boolean boolean49 = timeZone39.hasSameRules(timeZone45);
        timeZone45.setRawOffset(6);
        timeZone45.setRawOffset((int) '#');
        java.util.Calendar.Builder builder54 = builder35.setTimeZone(timeZone45);
        java.util.TimeZone timeZone55 = null;
        boolean boolean56 = timeZone45.hasSameRules(timeZone55);
        java.lang.String str57 = timeZone45.getID();
        boolean boolean58 = timeZone45.observesDaylightTime();
        java.util.Calendar.Builder builder59 = new java.util.Calendar.Builder();
        java.util.Date date60 = new java.util.Date();
        int int61 = date60.getSeconds();
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getTimezoneOffset();
        date62.setMinutes(6);
        boolean boolean66 = date60.after(date62);
        java.util.Calendar.Builder builder67 = builder59.setInstant(date62);
        java.util.Calendar.Builder builder69 = builder67.setInstant((long) 36);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder71 = builder69.setLocale(locale70);
        java.util.Calendar.Builder builder73 = builder71.setLenient(false);
        java.util.Calendar.Builder builder75 = builder71.setLenient(false);
        java.util.Calendar.Builder builder77 = builder75.setLenient(false);
        java.util.TimeZone timeZone79 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone79);
        java.lang.String str81 = fastDateFormat80.getPattern();
        java.lang.String str82 = fastDateFormat80.toString();
        java.lang.String str83 = fastDateFormat80.getPattern();
        java.util.TimeZone timeZone84 = fastDateFormat80.getTimeZone();
        java.util.Calendar.Builder builder85 = builder77.setTimeZone(timeZone84);
        boolean boolean86 = timeZone45.hasSameRules(timeZone84);
        java.util.Locale locale90 = new java.util.Locale("FastDateFormat[H.mm.ss]", "22 Feb 2022 07:09:15 GMT", "7.08.20");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone45, locale90);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap92 = calendar6.getDisplayNames(55, (int) '4', locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=38,MONTH=69,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=2022,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=489,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 15 + "'", int25 == 15);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645513935480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=489,ZONE_OFFSET=9,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str57, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 15 + "'", int61 == 15);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(fastDateFormat80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "h:mm:ss a z" + "'", str81, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str82, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "h:mm:ss a z" + "'", str83, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals(locale90.toString(), "fastdateformat[h.mm.ss]_22 FEB 2022 07:09:15 GMT_7.08.20");
        org.junit.Assert.assertNotNull(fastDateFormat91);
    }

    @Test
    public void test05797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05797");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-2-22 7:07:59");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(true, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645513935530,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=530,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05798");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        timeZone17.setRawOffset((int) (byte) 1);
        boolean boolean22 = timeZone17.observesDaylightTime();
        java.util.Calendar.Builder builder23 = builder12.setTimeZone(timeZone17);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        boolean boolean29 = timeZone17.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str32 = fastDateFormat30.format((long) ' ');
        java.util.Locale locale33 = fastDateFormat30.getLocale();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale33);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = timeZone25.getOffset(11, 456, 36, (-46800000), 999, 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 15 + "'", int2 == 15);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1/1/70 12:00 AM" + "'", str32, "1/1/70 12:00 AM");
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "_HI!");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513935550,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=559,ZONE_OFFSET=9,DST_OFFSET=0]");
    }

    @Test
    public void test05799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05799");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.lang.String str1 = attribute0.toString();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale.LanguageRange languageRange5 = null;
        boolean boolean6 = languageRangeList3.add(languageRange5);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor7 = languageRangeList3.iterator();
        java.util.Set<java.lang.String> strSet8 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet8.parallelStream();
        boolean boolean11 = languageRangeList3.retainAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale.LanguageRange languageRange12 = null;
        boolean boolean13 = languageRangeList3.add(languageRange12);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor14 = languageRangeList3.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator15 = languageRangeList3.spliterator();
        boolean boolean16 = attribute0.equals((java.lang.Object) languageRangeList3);
        java.util.Locale locale18 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayScript(locale19);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale26, locale27, locale28, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale locale34 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale38, locale39, locale40, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale locale46 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList44);
        int int47 = languageRangeList24.lastIndexOf((java.lang.Object) languageRangeList36);
        int int49 = languageRangeList36.indexOf((java.lang.Object) '4');
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getSeconds();
        int int52 = date50.getSeconds();
        int int53 = languageRangeList36.indexOf((java.lang.Object) date50);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor54 = languageRangeList36.listIterator();
        java.util.Locale.LanguageRange[] languageRangeArray55 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList56 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList56, languageRangeArray55);
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale58, locale59, locale60, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor67 = languageRangeList56.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator68 = languageRangeList56.spliterator();
        java.util.Locale locale72 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList56, (java.util.Collection<java.lang.String>) strSet73);
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet73);
        boolean boolean76 = languageRangeList3.retainAll((java.util.Collection<java.lang.String>) strList75);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(reading)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(reading)");
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(languageRangeItor7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(languageRangeItor14);
        org.junit.Assert.assertNotNull(languageRangeSpliterator15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals(locale18.toString(), "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 15 + "'", int51 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 15 + "'", int52 == 15);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(languageRangeItor54);
        org.junit.Assert.assertNotNull(languageRangeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(locale66);
        org.junit.Assert.assertNotNull(languageRangeItor67);
        org.junit.Assert.assertNotNull(languageRangeSpliterator68);
        org.junit.Assert.assertEquals(locale72.toString(), "feb 22, 2022 7:07:42 am_22 FEB 2022 07:07:38 GMT_22 Feb 2022 07:07:44 GMT");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test05800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05800");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        java.util.Date date2 = new java.util.Date();
        java.lang.String str3 = date2.toGMTString();
        boolean boolean4 = date0.before(date2);
        java.lang.String str5 = date2.toLocaleString();
        date2.setMonth((-46800000));
        java.util.Calendar.Builder builder8 = new java.util.Calendar.Builder();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getSeconds();
        java.util.Date date11 = new java.util.Date();
        int int12 = date11.getTimezoneOffset();
        date11.setMinutes(6);
        boolean boolean15 = date9.after(date11);
        java.util.Calendar.Builder builder16 = builder8.setInstant(date11);
        java.util.Calendar.Builder builder18 = builder16.setInstant((long) 36);
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder20 = builder18.setLocale(locale19);
        java.util.Calendar.Builder builder22 = builder20.setLenient(false);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        timeZone25.setRawOffset((int) (byte) 1);
        boolean boolean30 = timeZone25.observesDaylightTime();
        java.util.Calendar.Builder builder31 = builder20.setTimeZone(timeZone25);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone35.hasSameRules(timeZone37);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone37);
        java.util.TimeZone timeZone40 = calendar39.getTimeZone();
        calendar39.set(5, 16);
        boolean boolean44 = parsePosition33.equals((java.lang.Object) 5);
        java.util.Locale locale46 = new java.util.Locale("gregory");
        boolean boolean47 = parsePosition33.equals((java.lang.Object) locale46);
        java.util.Calendar.Builder builder48 = builder31.setLocale(locale46);
        java.util.Date date49 = new java.util.Date();
        int int50 = date49.getTimezoneOffset();
        java.util.Date date51 = new java.util.Date();
        java.lang.String str52 = date51.toGMTString();
        boolean boolean53 = date49.before(date51);
        int int54 = date49.getHours();
        java.lang.String str55 = date49.toGMTString();
        java.util.Calendar.Builder builder56 = builder48.setInstant(date49);
        int int57 = date2.compareTo(date49);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Jan 22 07:12:15 GMT+00:00 3897979");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "22 Feb 2022 07:12:15 GMT" + "'", str3, "22 Feb 2022 07:12:15 GMT");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22 07:12:15" + "'", str5, "2022-02-22 07:12:15");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 15 + "'", int10 == 15);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Feb 22 07:06:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=686,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals(locale46.toString(), "gregory");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "22 Feb 2022 07:12:15 GMT" + "'", str52, "22 Feb 2022 07:12:15 GMT");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "22 Feb 2022 07:12:15 GMT" + "'", str55, "22 Feb 2022 07:12:15 GMT");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test05801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05801");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(43);
        java.lang.String str2 = fieldPosition1.toString();
        int int3 = fieldPosition1.getField();
        fieldPosition1.setBeginIndex(5752);
        int int6 = fieldPosition1.getField();
        java.util.Date date8 = new java.util.Date(1645513662388L);
        date8.setYear(11);
        date8.setTime((long) 58);
        java.lang.String str13 = date8.toGMTString();
        date8.setHours(53);
        int int16 = date8.getDay();
        boolean boolean17 = fieldPosition1.equals((java.lang.Object) int16);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.FieldPosition[field=43,attribute=null,beginIndex=0,endIndex=0]" + "'", str2, "java.text.FieldPosition[field=43,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 43 + "'", int3 == 43);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 43 + "'", int6 == 43);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Sat Jan 03 05:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str13, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 6 + "'", int16 == 6);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05802");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        date6.setYear(0);
        java.lang.String str11 = fastDateFormat2.format(date6);
        java.util.TimeZone timeZone12 = fastDateFormat2.getTimeZone();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 22 07:12:15 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513935713L + "'", long8 == 1645513935713L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "7:12:15 AM GMT+00:00" + "'", str11, "7:12:15 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test05803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05803");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 122);
    }

    @Test
    public void test05804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05804");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (byte) 100);
        fieldPosition1.setBeginIndex(0);
        int int4 = fieldPosition1.getEndIndex();
        int int5 = fieldPosition1.getEndIndex();
        int int6 = fieldPosition1.getField();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 100 + "'", int6 == 100);
    }

    @Test
    public void test05805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05805");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.lang.String str17 = fastDateFormat2.toString();
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        date18.setMonth(0);
        java.time.Instant instant22 = date18.toInstant();
        java.util.Date date23 = java.util.Date.from(instant22);
        long long24 = date23.getTime();
        java.lang.String str25 = fastDateFormat2.format(date23);
        boolean boolean26 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        boolean boolean30 = locale28.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale28);
        int int32 = fastDateFormat31.getMaxLengthEstimate();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        calendar39.clear(7);
        calendar39.set(16, (int) (byte) 0);
        java.time.Instant instant45 = calendar39.toInstant();
        boolean boolean47 = calendar39.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar39.set(17, 9, (int) '#', 0, 10, 17);
        int int55 = calendar39.getWeekYear();
        long long56 = calendar39.getTimeInMillis();
        java.util.Date date57 = calendar39.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator58 = fastDateFormat31.formatToCharacterIterator((java.lang.Object) date57);
        java.util.Date date64 = new java.util.Date(32772, 32772, 58, 0, 10);
        int int65 = date64.getHours();
        boolean boolean66 = date57.before(date64);
        java.lang.String str67 = date57.toLocaleString();
        java.lang.String str68 = fastDateFormat2.format(date57);
        date57.setTime(1645513877655L);
        java.lang.String str71 = date57.toString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513935778,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=787,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:15 AM GMT+00:00" + "'", str16, "7:12:15 AM GMT+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Jan 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Sat Jan 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1642835535778L + "'", long24 == 1642835535778L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:15 AM GMT+00:00" + "'", str25, "7:12:15 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 18 + "'", int32 == 18);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-61604322582222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=787,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 17 + "'", int55 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-61604322582222L) + "'", long56 == (-61604322582222L));
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Tue Feb 22 07:11:17 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(attributedCharacterIterator58);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Sun Feb 27 00:10:00 GMT+00:00 37403");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0017-11-04 00:10:17" + "'", str67, "0017-11-04 00:10:17");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "12:10:17 AM GMT+00:00" + "'", str68, "12:10:17 AM GMT+00:00");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Tue Feb 22 07:11:17 GMT+00:00 2022" + "'", str71, "Tue Feb 22 07:11:17 GMT+00:00 2022");
    }

    @Test
    public void test05806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05806");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 1645513897462L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.645513897462E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05807");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer5 = null;
        java.lang.StringBuffer stringBuffer6 = fastDateFormat2.format(date3, stringBuffer5);
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.lang.Object obj8 = timeZone7.clone();
        org.junit.Assert.assertNotNull(fastDateFormat2);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertNull(stringBuffer6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05808");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        calendar10.setFirstDayOfWeek(37);
        int int14 = calendar10.getGreatestMinimum(5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        int int20 = timeZone16.getOffset(1645513657024L);
        timeZone16.setID("fra");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone16.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayCountry();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone16, locale25);
        boolean boolean30 = fastDateFormat15.equals((java.lang.Object) locale25);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        calendar37.clear(7);
        calendar37.set(16, (int) (byte) 0);
        int int43 = calendar37.getFirstDayOfWeek();
        int int44 = calendar37.getWeekYear();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        int int49 = timeZone45.getOffset(1645513657024L);
        timeZone45.setID("fra");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone45.hasSameRules(timeZone52);
        timeZone52.setRawOffset(9);
        calendar37.setTimeZone(timeZone52);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone60);
        int int64 = timeZone60.getOffset(1645513656868L);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone66.hasSameRules(timeZone68);
        boolean boolean70 = timeZone60.hasSameRules(timeZone66);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone72.hasSameRules(timeZone74);
        boolean boolean76 = timeZone66.hasSameRules(timeZone74);
        java.lang.String str77 = timeZone74.getID();
        calendar37.setTimeZone(timeZone74);
        java.lang.String str79 = fastDateFormat15.format(calendar37);
        boolean boolean80 = calendar10.after((java.lang.Object) calendar37);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = calendar37.getMaximum(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645513935898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=907,ZONE_OFFSET=9,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513935898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=37,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=907,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645513935898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=907,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513935898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=907,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(calendar62);
        org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1645513935898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=15,MILLISECOND=907,ZONE_OFFSET=9,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 9 + "'", int64 == 9);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str77, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e0a\u5348" + "'", str79, "\u4e0a\u5348");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test05809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05809");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        timeZone8.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone8);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getSeconds();
        int int15 = date13.getSeconds();
        int int16 = date13.getSeconds();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        java.util.Date date19 = new java.util.Date();
        java.lang.String str20 = date19.toGMTString();
        boolean boolean21 = date17.before(date19);
        long long22 = date19.getTime();
        boolean boolean23 = date13.after(date19);
        java.lang.String str24 = fastDateFormat12.format(date13);
        int int25 = date13.getMonth();
        int int26 = date13.getMinutes();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(fastDateFormat12);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 15 + "'", int15 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 15 + "'", int16 == 15);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:12:15 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22 Feb 2022 07:12:15 GMT" + "'", str20, "22 Feb 2022 07:12:15 GMT");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513935931L + "'", long22 == 1645513935931L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "7.12.16" + "'", str24, "7.12.16");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
    }

    @Test
    public void test05810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05810");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        boolean boolean15 = calendar6.isWeekDateSupported();
        calendar6.clear();
        long long17 = calendar6.getTimeInMillis();
        int int19 = calendar6.getActualMinimum((int) (short) 10);
        calendar6.setFirstDayOfWeek(18);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-9,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=9,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=18,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-9L) + "'", long17 == (-9L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test05811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05811");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = new java.util.Locale("", "hi!", "");
        java.lang.String str7 = locale2.getDisplayCountry(locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale2);
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(7);
        fieldPosition10.setBeginIndex(7);
        int int13 = fieldPosition10.getField();
        java.lang.String str14 = fieldPosition10.toString();
        java.lang.String str15 = fieldPosition10.toString();
        int int16 = fieldPosition10.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator17 = fastDateFormat8.formatToCharacterIterator((java.lang.Object) int16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale6.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "China" + "'", str7, "China");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.FieldPosition[field=7,attribute=null,beginIndex=7,endIndex=0]" + "'", str14, "java.text.FieldPosition[field=7,attribute=null,beginIndex=7,endIndex=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.FieldPosition[field=7,attribute=null,beginIndex=7,endIndex=0]" + "'", str15, "java.text.FieldPosition[field=7,attribute=null,beginIndex=7,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test05812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05812");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("IT");
        int int2 = languageRangeList1.size();
        boolean boolean3 = languageRangeList1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray12 = new java.util.Locale[] { locale7, locale8, locale9, locale10, locale11 };
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray24 = new java.util.Locale[] { locale19, locale20, locale21, locale22, locale23 };
        java.util.ArrayList<java.util.Locale> localeList25 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList25, localeArray24);
        java.util.Locale locale27 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList25);
        int int28 = languageRangeList5.lastIndexOf((java.lang.Object) languageRangeList17);
        boolean boolean29 = languageRangeList5.isEmpty();
        int int30 = languageRangeList5.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList5.iterator();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor32 = languageRangeList5.listIterator();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray44 = new java.util.Locale[] { locale39, locale40, locale41, locale42, locale43 };
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.Locale locale47 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale51, locale52, locale53, locale54, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale locale59 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList57);
        int int60 = languageRangeList37.lastIndexOf((java.lang.Object) languageRangeList49);
        java.util.Set<java.lang.String> strSet61 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream62 = strSet61.parallelStream();
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strSet61, filteringMode63);
        boolean boolean65 = languageRangeList34.removeAll((java.util.Collection<java.lang.String>) strSet61);
        boolean boolean66 = languageRangeList5.retainAll((java.util.Collection<java.lang.String>) strSet61);
        java.util.stream.Stream<java.lang.String> strStream67 = strSet61.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream68 = strSet61.stream();
        java.util.stream.Stream<java.lang.String> strStream69 = strSet61.parallelStream();
        boolean boolean70 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strSet61);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor31);
        org.junit.Assert.assertNotNull(languageRangeItor32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode63.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05813");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8, locale10);
        calendar11.clear(7);
        calendar11.set(16, (int) (byte) 0);
        int int17 = calendar11.getFirstDayOfWeek();
        java.lang.String str18 = fastDateFormat4.format(calendar11);
        calendar11.set((int) (short) 100, 37, 2);
        int int23 = calendar11.getWeeksInWeekYear();
        int int24 = calendar11.getWeeksInWeekYear();
        calendar11.add(9, (int) ' ');
        calendar11.set(11, (int) 'x', (int) ' ', 122, 22);
        java.time.Instant instant34 = calendar11.toInstant();
        java.lang.StringBuffer stringBuffer35 = null;
        java.text.Format.Field field36 = null;
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition(field36, 292278994);
        int int39 = fieldPosition38.getBeginIndex();
        int int40 = fieldPosition38.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer41 = fastDateFormat1.format((java.lang.Object) instant34, stringBuffer35, fieldPosition38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-61501498663895,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=21,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=37,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=22,SECOND=16,MILLISECOND=105,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7:12:16 AM GMT" + "'", str18, "7:12:16 AM GMT");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 52 + "'", int23 == 52);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 292278994 + "'", int40 == 292278994);
    }

    @Test
    public void test05814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05814");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Date date26 = calendar13.getTime();
        calendar13.set(6, (int) (short) 1);
        int int30 = calendar13.getWeekYear();
        java.lang.String str31 = calendar13.toString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58916911663877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=123,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:16 AM GMT" + "'", str20, "7:12:16 AM GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:16 AM GMT" + "'", str25, "7:12:16 AM GMT");
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Thu Feb 02 07:12:16 GMT 103");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 103 + "'", int30 == 103);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.util.GregorianCalendar[time=-58916911663877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=123,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str31, "java.util.GregorianCalendar[time=-58916911663877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=123,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05815");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale.FilteringMode filteringMode38 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        boolean boolean39 = languageRangeList36.equals((java.lang.Object) filteringMode38);
        languageRangeList36.clear();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.CHINA;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44, locale46);
        calendar47.clear(7);
        calendar47.set(16, (int) (byte) 0);
        java.time.Instant instant53 = calendar47.toInstant();
        boolean boolean55 = calendar47.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar47.set(17, 9, (int) '#', 0, 10, 17);
        calendar47.roll(5, 14);
        int int66 = calendar47.getWeeksInWeekYear();
        int int68 = calendar47.getActualMinimum(12);
        java.text.AttributedCharacterIterator.Attribute attribute69 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = attribute69.equals((java.lang.Object) timeZone70);
        java.lang.String str72 = timeZone70.getID();
        boolean boolean73 = timeZone70.observesDaylightTime();
        calendar47.setTimeZone(timeZone70);
        boolean boolean75 = languageRangeList36.remove((java.lang.Object) calendar47);
        java.util.Date date76 = new java.util.Date();
        long long77 = date76.getTime();
        java.util.Date date78 = new java.util.Date();
        int int79 = date78.getTimezoneOffset();
        int int80 = date78.getSeconds();
        int int81 = date78.getMinutes();
        long long82 = date78.getTime();
        java.lang.String str83 = date78.toLocaleString();
        boolean boolean84 = date76.before(date78);
        date76.setMonth((int) 'a');
        date76.setTime(0L);
        boolean boolean89 = languageRangeList36.equals((java.lang.Object) date76);
        boolean boolean90 = calendar34.after((java.lang.Object) boolean89);
        calendar34.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int93 = calendar34.getActualMinimum(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513936167,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "h:mm:ss a z" + "'", str16, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str18, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7:07:39 am utc" + "'", str33, "7:07:39 am utc");
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + filteringMode38 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode38.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=18,DAY_OF_YEAR=308,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=17,MILLISECOND=167,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(attribute69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "GMT" + "'", str72, "GMT");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertEquals(date76.toString(), "Thu Jan 01 00:00:00 GMT 1970");
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645513936167L + "'", long77 == 1645513936167L);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Tue Feb 22 07:12:16 GMT 2022");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 16 + "'", int80 == 16);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 12 + "'", int81 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645513936167L + "'", long82 == 1645513936167L);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-2-22 7:12:16" + "'", str83, "2022-2-22 7:12:16");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test05816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05816");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 103);
    }

    @Test
    public void test05817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05817");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        languageRangeList1.clear();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor27 = languageRangeList1.iterator();
        java.lang.String[] strArray29 = java.util.TimeZone.getAvailableIDs(56);
        boolean boolean30 = languageRangeList1.remove((java.lang.Object) strArray29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale34, locale35, locale36, locale37, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor44 = languageRangeList32.listIterator(0);
        boolean boolean45 = languageRangeList32.isEmpty();
        java.util.Locale.LanguageRange languageRange46 = null;
        boolean boolean47 = languageRangeList32.add(languageRange46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray56 = new java.util.Locale[] { locale51, locale52, locale53, locale54, locale55 };
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale locale59 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Locale.LanguageRange[] languageRangeArray60 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList61 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList61, languageRangeArray60);
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.util.Locale locale67 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale63, locale64, locale65, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.util.Locale>) localeList69);
        int int72 = languageRangeList49.lastIndexOf((java.lang.Object) languageRangeList61);
        int int74 = languageRangeList61.indexOf((java.lang.Object) '4');
        java.util.Set<java.lang.String> strSet75 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList61, (java.util.Collection<java.lang.String>) strSet75);
        java.util.stream.Stream<java.lang.String> strStream77 = strList76.stream();
        java.util.Locale.FilteringMode filteringMode78 = null;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.lang.String>) strList76, filteringMode78);
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList79, filteringMode80);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList84 = languageRangeList1.subList(18, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromIndex(18) > toIndex(0)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(languageRangeItor27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertNotNull(languageRangeItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertNotNull(languageRangeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode80.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList81);
    }

    @Test
    public void test05818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05818");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("IT");
        languageRangeList1.clear();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        java.util.Date date5 = new java.util.Date();
        java.lang.String str6 = date5.toGMTString();
        boolean boolean7 = date3.before(date5);
        long long8 = date5.getTime();
        java.lang.String str9 = date5.toGMTString();
        java.util.Date date13 = new java.util.Date(32770, 36, 3);
        int int14 = date13.getMonth();
        date13.setMinutes(50400000);
        int int17 = date13.getDay();
        boolean boolean18 = date5.before(date13);
        java.time.Instant instant19 = date13.toInstant();
        boolean boolean20 = languageRangeList1.remove((java.lang.Object) date13);
        languageRangeList1.clear();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray31 = new java.util.Locale[] { locale26, locale27, locale28, locale29, locale30 };
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale locale34 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList32);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale38, locale39, locale40, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale locale46 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList44);
        int int47 = languageRangeList24.lastIndexOf((java.lang.Object) languageRangeList36);
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getTimezoneOffset();
        int int50 = date48.getSeconds();
        java.time.Instant instant51 = date48.toInstant();
        java.util.Date date52 = java.util.Date.from(instant51);
        date52.setMonth(122);
        int int55 = languageRangeList24.lastIndexOf((java.lang.Object) 122);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator56 = languageRangeList24.spliterator();
        java.util.Locale.LanguageRange languageRange58 = new java.util.Locale.LanguageRange("zh");
        java.lang.String str59 = languageRange58.getRange();
        boolean boolean60 = languageRangeList24.add(languageRange58);
        // The following exception was thrown during execution in test generation
        try {
            languageRangeList1.add((int) (short) -1, languageRange58);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str6, "22 Feb 2022 07:12:16 GMT");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513936332L + "'", long8 == 1645513936332L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str9, "22 Feb 2022 07:12:16 GMT");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Nov 01 00:00:00 GMT+00:00 34768");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16 + "'", int50 == 16);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Mon Mar 22 07:12:16 GMT+00:00 2032");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(languageRangeSpliterator56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh" + "'", str59, "zh");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test05819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05819");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.String str19 = calendar9.getCalendarType();
        boolean boolean20 = calendar9.isWeekDateSupported();
        java.time.Instant instant21 = calendar9.toInstant();
        java.util.Date date22 = java.util.Date.from(instant21);
        java.util.Date date23 = java.util.Date.from(instant21);
        date23.setHours(51);
        date23.setSeconds((int) (byte) 10);
        date23.setSeconds((int) 'x');
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        boolean boolean31 = date23.equals((java.lang.Object) locale30);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513936356,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Thu Feb 24 03:14:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05820");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder4 = builder2.clear();
        java.util.Locale locale5 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.lang.String str17 = locale8.getDisplayName(locale15);
        java.util.Locale.Builder builder18 = builder6.setLocale(locale8);
        java.util.Locale locale20 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = locale21.getDisplayLanguage(locale22);
        java.util.Locale locale24 = java.util.Locale.US;
        java.lang.String str25 = locale22.getDisplayCountry(locale24);
        java.lang.String str26 = locale8.getDisplayName(locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(58, 8, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 8");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513936384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals(locale20.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7:07:37 am utc" + "'", str23, "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Taiwan" + "'", str25, "Taiwan");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587" + "'", str26, "\u4e2d\u6587");
    }

    @Test
    public void test05821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05821");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.TimeZone.setDefault(timeZone2);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(124, timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 124");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645513936406,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=406,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05822");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone6);
        java.util.TimeZone timeZone9 = calendar8.getTimeZone();
        java.util.Locale locale13 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone9);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getDisplayVariant();
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        calendar34.clear(7);
        calendar34.set(16, (int) (byte) 0);
        java.time.Instant instant40 = calendar34.toInstant();
        boolean boolean42 = calendar34.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str43 = fastDateFormat27.format(calendar34);
        java.lang.Object obj44 = fastDateFormat27.clone();
        java.util.Locale locale45 = fastDateFormat27.getLocale();
        java.lang.String str46 = locale45.getLanguage();
        java.util.Locale locale47 = null;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.lang.String str53 = locale49.getDisplayLanguage();
        java.lang.String str54 = locale49.getDisplayLanguage();
        java.lang.String str55 = locale45.getDisplayLanguage(locale49);
        java.lang.String str56 = locale21.getDisplayCountry(locale49);
        java.lang.String str57 = locale21.getDisplayName();
        java.util.Set<java.lang.String> strSet58 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale61 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str62 = locale21.getDisplayCountry(locale61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone9, locale21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-02-22 07:09:08", timeZone9);
        java.lang.String str65 = timeZone9.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId66 = timeZone9.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.zone.ZoneRulesException; message: Unknown time-zone ID: gregory");
        } catch (java.time.zone.ZoneRulesException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645513936428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale13.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645513936428,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=428,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513936429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513936429,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh" + "'", str50, "zh");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese" + "'", str53, "Chinese");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Chinese" + "'", str54, "Chinese");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587" + "'", str55, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u56fd" + "'", str56, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Chinese (China)" + "'", str57, "Chinese (China)");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertEquals(locale61.toString(), "feb 22, 2022 7:07:42 am_ZHO");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "China" + "'", str62, "China");
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645513936429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=429,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "gregory" + "'", str65, "gregory");
    }

    @Test
    public void test05823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05823");
        java.util.Locale locale3 = new java.util.Locale("22 Feb 2022 07:10:34 GMT", "7:10:03 AM UTC", "22 Feb 2022 07:10:33 GMT");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "22 feb 2022 07:10:34 gmt_7:10:03 AM UTC_22 Feb 2022 07:10:33 GMT");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test05824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05824");
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.lang.String str3 = locale1.getCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale1);
        java.util.Locale locale6 = new java.util.Locale("\u4e2d\u6587\u4e2d\u56fd)");
        java.util.Locale locale7 = null;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("Feb 22, 2022 7:06:39 AM");
        java.lang.String str12 = locale6.getDisplayCountry(locale11);
        java.lang.String str13 = locale6.toLanguageTag();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar23.clear(7);
        calendar23.set(16, (int) (byte) 0);
        java.time.Instant instant29 = calendar23.toInstant();
        boolean boolean31 = calendar23.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str32 = fastDateFormat16.format(calendar23);
        java.lang.Object obj33 = fastDateFormat16.clone();
        java.util.Locale locale34 = fastDateFormat16.getLocale();
        java.lang.String str35 = locale34.getLanguage();
        java.util.Locale locale36 = null;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale38.getDisplayCountry();
        java.lang.String str42 = locale38.getDisplayLanguage();
        java.lang.String str43 = locale38.getDisplayLanguage();
        java.lang.String str44 = locale34.getDisplayLanguage(locale38);
        java.util.Locale locale45 = java.util.Locale.ITALY;
        java.lang.String str46 = locale45.getVariant();
        java.lang.String str47 = locale34.getDisplayLanguage(locale45);
        java.util.Locale locale48 = java.util.Locale.CHINA;
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "");
        java.lang.String str53 = locale48.getDisplayVariant(locale52);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale48);
        java.lang.String str55 = locale48.getDisplayVariant();
        java.lang.String str56 = locale48.getDisplayVariant();
        java.lang.String str57 = locale34.getDisplayScript(locale48);
        java.lang.String str58 = locale6.getDisplayScript(locale48);
        boolean boolean59 = locale48.hasExtensions();
        java.lang.String str60 = locale1.getDisplayVariant(locale48);
        java.util.Locale.Category category61 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category61, locale63);
        java.util.Locale locale65 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale69 = new java.util.Locale("", "hi!", "");
        java.lang.String str70 = locale65.getDisplayCountry(locale69);
        java.util.Set<java.lang.String> strSet71 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale69.getLanguage();
        java.util.Locale.setDefault(category61, locale69);
        java.lang.String str75 = locale69.getExtension('a');
        boolean boolean76 = locale69.hasExtensions();
        java.lang.String str77 = locale48.getDisplayScript(locale69);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals(locale6.toString(), "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "und" + "'", str13, "und");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513936469,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh" + "'", str35, "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh" + "'", str39, "zh");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese" + "'", str42, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinese" + "'", str43, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587" + "'", str44, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "cinese" + "'", str47, "cinese");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645513936469,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=469,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.FORMAT + "'", category61.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale69.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "China" + "'", str70, "China");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test05825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05825");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale2.getDisplayScript(locale4);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale4);
        java.lang.String str8 = locale4.getDisplayLanguage();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513936508,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=508,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "French" + "'", str8, "French");
    }

    @Test
    public void test05826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05826");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        boolean boolean3 = timeZone2.observesDaylightTime();
        int int5 = timeZone2.getOffset(1645513662660L);
        java.time.ZoneId zoneId6 = timeZone2.toZoneId();
        timeZone2.setRawOffset((-1));
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.lang.String str11 = locale10.getVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1941-1-22 7:08:38", timeZone2, locale10);
        java.lang.Object obj13 = fastDateFormat12.clone();
        java.lang.StringBuffer stringBuffer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer16 = fastDateFormat12.format(1645513881484L, stringBuffer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(zoneId6);
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "FastDateFormat[1941-1-22 7:08:38]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "FastDateFormat[1941-1-22 7:08:38]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "FastDateFormat[1941-1-22 7:08:38]");
    }

    @Test
    public void test05827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05827");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:09:35", timeZone1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9, locale11);
        calendar12.clear(7);
        calendar12.set(16, (int) (byte) 0);
        java.time.Instant instant18 = calendar12.toInstant();
        boolean boolean20 = calendar12.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str21 = fastDateFormat5.format(calendar12);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale37, locale38, locale39, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList43);
        int int46 = languageRangeList23.lastIndexOf((java.lang.Object) languageRangeList35);
        boolean boolean47 = languageRangeList23.isEmpty();
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getTimezoneOffset();
        java.util.Date date50 = new java.util.Date();
        java.lang.String str51 = date50.toGMTString();
        boolean boolean52 = date48.before(date50);
        int int53 = languageRangeList23.lastIndexOf((java.lang.Object) date50);
        date50.setMinutes(36);
        java.lang.String str56 = fastDateFormat5.format(date50);
        date50.setSeconds(52);
        int int59 = date50.getSeconds();
        java.lang.StringBuffer stringBuffer60 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer61 = fastDateFormat2.format(date50, stringBuffer60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645513936544,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Tue Feb 22 07:36:52 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str51, "22 Feb 2022 07:12:16 GMT");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 52 + "'", int59 == 52);
    }

    @Test
    public void test05828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05828");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Calendar.Builder builder16 = builder12.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder20 = builder12.setDate((int) '4', 52, 14);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        boolean boolean23 = timeZone22.observesDaylightTime();
        int int25 = timeZone22.getOffset(1645513662660L);
        java.time.ZoneId zoneId26 = timeZone22.toZoneId();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone(zoneId26);
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone27);
        java.util.Locale locale30 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale32 = null;
        java.lang.String str33 = locale31.getDisplayCountry(locale32);
        java.lang.String str34 = locale31.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(32770, 22, timeZone27, locale31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:06:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(zoneId26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals(locale30.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test05829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05829");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.Object obj19 = fastDateFormat2.clone();
        java.lang.String str20 = fastDateFormat2.toString();
        java.util.Locale locale21 = fastDateFormat2.getLocale();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        boolean boolean25 = locale23.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale23);
        int int27 = fastDateFormat26.getMaxLengthEstimate();
        java.util.Locale locale28 = fastDateFormat26.getLocale();
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition((int) '4');
        int int32 = fieldPosition31.getEndIndex();
        int int33 = fieldPosition31.getBeginIndex();
        int int34 = fieldPosition31.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer35 = fastDateFormat2.format((java.lang.Object) fastDateFormat26, stringBuffer29, fieldPosition31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: org.apache.commons.lang3.time.FastDateFormat");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513936640,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[]" + "'", str20, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 18 + "'", int27 == 18);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test05830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05830");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(53);
        java.lang.Object obj9 = fastDateFormat2.parseObject("", parsePosition8);
        java.util.TimeZone timeZone10 = fastDateFormat2.getTimeZone();
        int int12 = timeZone10.getOffset((-58914147076879L));
        java.util.Locale locale14 = new java.util.Locale("7:07:37 AM UTC");
        java.lang.String str15 = locale14.getISO3Country();
        java.util.Locale locale16 = locale14.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone10, locale16);
        calendar17.set(16, 10, (int) (short) 10, (int) (short) 10, 51);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = calendar17.isSet((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str5, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 49 + "'", int12 == 49);
        org.junit.Assert.assertEquals(locale14.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=16,MONTH=10,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=10,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=10,MINUTE=51,SECOND=16,MILLISECOND=710,ZONE_OFFSET=49,DST_OFFSET=0]");
    }

    @Test
    public void test05831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05831");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2);
        java.util.Locale locale2 = fastDateFormat1.getLocale();
        java.lang.String str3 = locale2.getISO3Country();
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CHN" + "'", str3, "CHN");
    }

    @Test
    public void test05832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05832");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Calendar.Builder builder24 = builder12.setWeekDate(10, 0, 2);
        int[] intArray25 = new int[] {};
        java.util.Calendar.Builder builder26 = builder24.setFields(intArray25);
        java.util.Calendar.Builder builder31 = builder26.setTimeOfDay(0, 37, 0, 0);
        java.util.Calendar.Builder builder35 = builder31.setWeekDate((int) (short) -1, 292278994, 12);
        java.util.Date date39 = new java.util.Date(0, 25, 34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder40 = builder31.setInstant(date39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Thu Mar 06 00:00:00 GMT+00:00 1902");
    }

    @Test
    public void test05833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05833");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str7 = fastDateFormat2.format(1645513657001L);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone14);
        java.util.TimeZone timeZone17 = calendar16.getTimeZone();
        calendar16.set(5, 16);
        boolean boolean21 = parsePosition10.equals((java.lang.Object) 5);
        java.lang.Object obj22 = fastDateFormat2.parseObject("2022-02-22 08:37:55", parsePosition10);
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale30 = new java.util.Locale("", "hi!", "");
        java.lang.String str31 = locale26.getDisplayCountry(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale26);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.lang.String str42 = locale33.getDisplayName(locale40);
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleKeys();
        java.lang.String str45 = locale40.getDisplayName(locale43);
        java.lang.String str46 = locale40.getISO3Language();
        boolean boolean47 = fastDateFormat32.equals((java.lang.Object) locale40);
        java.lang.String str48 = fastDateFormat32.getPattern();
        java.lang.String str49 = fastDateFormat32.getPattern();
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.lang.String str55 = fastDateFormat53.toString();
        java.text.ParsePosition parsePosition58 = new java.text.ParsePosition(16);
        parsePosition58.setErrorIndex(5);
        parsePosition58.setErrorIndex(1);
        java.lang.Object obj63 = fastDateFormat53.parseObject("22 Feb 2022 07:07:39 GMT", parsePosition58);
        java.lang.Object obj64 = fastDateFormat32.parseObject("java.text.ParsePosition[index=52,errorIndex=0]", parsePosition58);
        java.lang.Object obj65 = fastDateFormat2.parseObject("java.text.ParsePosition[index=16,errorIndex=5]", parsePosition58);
        java.lang.Object obj66 = fastDateFormat2.clone();
        java.util.TimeZone timeZone67 = fastDateFormat2.getTimeZone();
        int int68 = timeZone67.getDSTSavings();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7:07:37 AM GMT+00:00" + "'", str7, "7:07:37 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=853,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale30.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "China" + "'", str31, "China");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645513936853,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"gregory\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=853,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str45, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zho" + "'", str46, "zho");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u5e74\u6708\u65e5' ah:mm" + "'", str48, "\u5e74\u6708\u65e5' ah:mm");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5e74\u6708\u65e5' ah:mm" + "'", str49, "\u5e74\u6708\u65e5' ah:mm");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "h:mm:ss a z" + "'", str54, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str55, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test05834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05834");
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(2744, 12, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05835");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        timeZone7.setID("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone.setDefault(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7);
        java.lang.String str12 = timeZone7.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513936935,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=935,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT+00:00" + "'", str12, "GMT+00:00");
    }

    @Test
    public void test05836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05836");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        calendar6.clear();
        java.util.Date date19 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        calendar6.setTime(date19);
        int int22 = calendar6.getMaximum(16);
        java.time.Instant instant23 = calendar6.toInstant();
        int int24 = calendar6.getWeekYear();
        java.util.Date date25 = calendar6.getTime();
        java.util.Locale.Category category28 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category28, locale30);
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale36 = new java.util.Locale("", "hi!", "");
        java.lang.String str37 = locale32.getDisplayCountry(locale36);
        java.util.Set<java.lang.String> strSet38 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str39 = locale36.getLanguage();
        java.util.Locale.setDefault(category28, locale36);
        java.lang.String str42 = locale36.getExtension('a');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap43 = calendar6.getDisplayNames(47, 17, locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-1889999280000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1910,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=12,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7200000 + "'", int22 == 7200000);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1910 + "'", int24 == 1910);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.FORMAT + "'", category28.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale36.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "China" + "'", str37, "China");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str42);
    }

    @Test
    public void test05837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05837");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.util.TimeZone timeZone25 = fastDateFormat11.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        java.util.Locale locale30 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.getLanguage();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone25, locale30);
        java.lang.Class<?> wildcardClass35 = locale30.getClass();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513936974,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=974,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "h:mm:ss a z" + "'", str16, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str18, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals(locale30.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7:07:39 am utc" + "'", str33, "7:07:39 am utc");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513936975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=16,MILLISECOND=975,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test05838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05838");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.String str19 = calendar9.getCalendarType();
        boolean boolean20 = calendar9.isWeekDateSupported();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        int int25 = timeZone21.getOffset(1645513657024L);
        timeZone21.setID("fra");
        calendar9.setTimeZone(timeZone21);
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        java.util.Date date31 = new java.util.Date();
        java.lang.String str32 = date31.toGMTString();
        boolean boolean33 = date29.before(date31);
        int int34 = date29.getHours();
        java.lang.String str35 = date29.toGMTString();
        date29.setYear(0);
        calendar9.setTime(date29);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.util.Date date44 = new java.util.Date();
        int int45 = date44.getTimezoneOffset();
        java.util.Date date46 = new java.util.Date();
        java.lang.String str47 = date46.toGMTString();
        boolean boolean48 = date44.before(date46);
        long long49 = date46.getTime();
        java.lang.String str50 = date46.toGMTString();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getTimezoneOffset();
        int int53 = date51.getSeconds();
        java.time.Instant instant54 = date51.toInstant();
        int int55 = date51.getDate();
        boolean boolean56 = date46.before(date51);
        java.lang.String str57 = fastDateFormat43.format((java.lang.Object) date51);
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        java.util.Date date60 = new java.util.Date();
        java.lang.String str61 = date60.toGMTString();
        boolean boolean62 = date58.before(date60);
        int int63 = date58.getHours();
        java.lang.String str64 = date58.toGMTString();
        java.util.Date date65 = new java.util.Date();
        int int66 = date65.getTimezoneOffset();
        date65.setMinutes(6);
        int int69 = date65.getMinutes();
        java.util.Date date76 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean77 = date65.before(date76);
        boolean boolean78 = date58.after(date76);
        java.lang.String str79 = fastDateFormat43.format(date58);
        java.util.Date date80 = new java.util.Date();
        long long81 = date80.getTime();
        java.util.Date date82 = new java.util.Date();
        int int83 = date82.getTimezoneOffset();
        int int84 = date82.getSeconds();
        int int85 = date82.getMinutes();
        long long86 = date82.getTime();
        java.lang.String str87 = date82.toLocaleString();
        boolean boolean88 = date80.before(date82);
        int int89 = date82.getSeconds();
        date82.setMinutes(38);
        boolean boolean92 = date58.before(date82);
        calendar9.setTime(date82);
        // The following exception was thrown during execution in test generation
        try {
            int int95 = calendar9.getActualMaximum(27);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 27");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645515496997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=38,SECOND=16,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Thu Feb 22 07:12:16 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str32, "22 Feb 2022 07:12:16 GMT");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str35, "22 Feb 2022 07:12:16 GMT");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(fastDateFormat43);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str47, "22 Feb 2022 07:12:16 GMT");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645513936997L + "'", long49 == 1645513936997L);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str50, "22 Feb 2022 07:12:16 GMT");
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "7:12:16 AM GMT+00:00" + "'", str57, "7:12:16 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str61, "22 Feb 2022 07:12:16 GMT");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 7 + "'", int63 == 7);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "22 Feb 2022 07:12:16 GMT" + "'", str64, "22 Feb 2022 07:12:16 GMT");
        org.junit.Assert.assertEquals(date65.toString(), "Tue Feb 22 07:06:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
        org.junit.Assert.assertEquals(date76.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "7:12:16 AM GMT+00:00" + "'", str79, "7:12:16 AM GMT+00:00");
        org.junit.Assert.assertEquals(date80.toString(), "Tue Feb 22 07:12:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645513936997L + "'", long81 == 1645513936997L);
        org.junit.Assert.assertEquals(date82.toString(), "Tue Feb 22 07:38:16 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 16 + "'", int84 == 16);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 12 + "'", int85 == 12);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645513936997L + "'", long86 == 1645513936997L);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Feb 22, 2022 7:12:16 AM" + "'", str87, "Feb 22, 2022 7:12:16 AM");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 16 + "'", int89 == 16);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test05839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05839");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setScript("");
        java.util.Locale.Builder builder7 = builder0.setLanguage("Italia");
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale12 = new java.util.Locale("", "hi!", "");
        java.lang.String str13 = locale8.getDisplayCountry(locale12);
        java.lang.String str14 = locale12.toLanguageTag();
        java.lang.String str15 = locale12.getDisplayVariant();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getSeconds();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        date19.setMinutes(6);
        boolean boolean23 = date17.after(date19);
        java.util.Calendar.Builder builder24 = builder16.setInstant(date19);
        java.util.Calendar.Builder builder26 = builder24.setInstant((long) 36);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder28 = builder26.setLocale(locale27);
        java.util.Calendar calendar29 = builder28.build();
        calendar29.set(31, 22, 50, 14, 5, 0);
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.util.Map<java.lang.String, java.lang.Integer> strMap40 = calendar29.getDisplayNames(5, (int) (byte) 1, locale39);
        java.lang.String str41 = locale39.getVariant();
        java.lang.String str42 = locale12.getDisplayScript(locale39);
        java.lang.String str43 = locale12.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder44 = builder7.setLocale(locale12);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: HI! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale12.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "China" + "'", str13, "China");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "und" + "'", str14, "und");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:12:17 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 17 + "'", int18 == 17);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:06:17 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=31,MONTH=22,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=50,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=14,MINUTE=5,SECOND=0,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNull(strMap40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test05840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05840");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        int int26 = languageRangeList1.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor27 = languageRangeList1.iterator();
        languageRangeList1.clear();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap32);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale37, locale38, locale39, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList43);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList43, filteringMode46);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList43, filteringMode48);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale54 = java.util.Locale.FRANCE;
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.util.Locale locale56 = java.util.Locale.FRANCE;
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale53, locale54, locale55, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale locale61 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale66 = java.util.Locale.FRANCE;
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale65, locale66, locale67, locale68, locale69 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList71);
        int int74 = languageRangeList51.lastIndexOf((java.lang.Object) languageRangeList63);
        boolean boolean75 = languageRangeList51.isEmpty();
        int int76 = languageRangeList51.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor77 = languageRangeList51.iterator();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor78 = languageRangeList51.listIterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap79 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, strMap79);
        java.text.Format[] formatArray81 = new java.text.Format[] {};
        java.text.Format[][] formatArray82 = new java.text.Format[][] { formatArray81 };
        java.text.Format[][] formatArray83 = languageRangeList51.toArray(formatArray82);
        java.text.Format[][] formatArray84 = languageRangeList1.toArray(formatArray83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor27);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode46.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode48.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(locale61);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(locale73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor77);
        org.junit.Assert.assertNotNull(languageRangeItor78);
        org.junit.Assert.assertNotNull(languageRangeList80);
        org.junit.Assert.assertNotNull(formatArray81);
        org.junit.Assert.assertNotNull(formatArray82);
        org.junit.Assert.assertNotNull(formatArray83);
        org.junit.Assert.assertNotNull(formatArray84);
    }

    @Test
    public void test05841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05841");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        boolean boolean8 = timeZone3.observesDaylightTime();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone3, locale9);
        boolean boolean11 = timeZone3.observesDaylightTime();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone13.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.CHINA;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayVariant();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar30.clear(7);
        calendar30.set(16, (int) (byte) 0);
        java.time.Instant instant36 = calendar30.toInstant();
        boolean boolean38 = calendar30.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str39 = fastDateFormat23.format(calendar30);
        java.lang.Object obj40 = fastDateFormat23.clone();
        java.util.Locale locale41 = fastDateFormat23.getLocale();
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.lang.String str49 = locale45.getDisplayLanguage();
        java.lang.String str50 = locale45.getDisplayLanguage();
        java.lang.String str51 = locale41.getDisplayLanguage(locale45);
        java.lang.String str52 = locale17.getDisplayCountry(locale45);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone54.hasSameRules(timeZone56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone56);
        java.util.TimeZone timeZone59 = calendar58.getTimeZone();
        java.util.Locale locale63 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone59, locale63);
        java.lang.String str65 = locale45.getDisplayLanguage(locale63);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone3, locale63);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = calendar66.get((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645513937249,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=249,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513937249,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=249,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645513937250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645513937250,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese" + "'", str50, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u4e2d\u6587" + "'", str51, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u56fd" + "'", str52, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645513937250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale63.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645513937250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Chinese" + "'", str65, "Chinese");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1645513937250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=250,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05842");
        java.util.Locale locale3 = new java.util.Locale("2022-2-22 7:06:07", "JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]", "7:08:23 AM GMT+00:00");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-2-22 7:06:07_JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0]_7:08:23 AM GMT+00:00");
    }

    @Test
    public void test05843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05843");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.lang.String str3 = parsePosition1.toString();
        java.lang.Object obj4 = null;
        boolean boolean5 = parsePosition1.equals(obj4);
        int int6 = parsePosition1.getIndex();
        boolean boolean8 = parsePosition1.equals((java.lang.Object) 1645513657332L);
        java.lang.String str9 = parsePosition1.toString();
        int int10 = parsePosition1.getErrorIndex();
        java.lang.String str11 = parsePosition1.toString();
        int int12 = parsePosition1.getErrorIndex();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        java.lang.String str23 = fastDateFormat15.toString();
        boolean boolean24 = parsePosition1.equals((java.lang.Object) fastDateFormat15);
        boolean boolean25 = fastDateFormat15.getTimeZoneOverridesCalendar();
        java.util.Date date27 = new java.util.Date(1645519022992L);
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.FieldPosition fieldPosition30 = new java.text.FieldPosition(7);
        fieldPosition30.setEndIndex(8);
        int int33 = fieldPosition30.getEndIndex();
        int int34 = fieldPosition30.getEndIndex();
        int int35 = fieldPosition30.getField();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer36 = fastDateFormat15.format((java.lang.Object) 1645519022992L, stringBuffer28, fieldPosition30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str9, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str11, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "h:mm:ss a z" + "'", str16, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str18, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str23, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 08:37:02 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 8 + "'", int34 == 8);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
    }

    @Test
    public void test05844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05844");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        java.util.Date date13 = calendar12.getTime();
        calendar12.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = calendar12.getMinimum(34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645513937351,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=352,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645513937351,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=352,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:12:17 GMT+00:00 2022");
    }

    @Test
    public void test05845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05845");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int2 = timeZone0.getRawOffset();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.lang.String str12 = locale4.getDisplayVariant(locale6);
        java.lang.String str13 = locale4.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale4);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        boolean boolean24 = calendar21.isWeekDateSupported();
        int int26 = calendar21.getMinimum(4);
        calendar21.setMinimalDaysInFirstWeek(15);
        int int29 = calendar21.getWeeksInWeekYear();
        java.lang.String str30 = fastDateFormat14.format(calendar21);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getSeconds();
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getTimezoneOffset();
        date34.setMinutes(6);
        boolean boolean38 = date32.after(date34);
        java.util.Calendar.Builder builder39 = builder31.setInstant(date34);
        java.util.Calendar.Builder builder41 = builder39.setInstant((long) 36);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder43 = builder41.setLocale(locale42);
        java.util.Calendar.Builder builder45 = builder43.setLenient(false);
        java.util.Calendar.Builder builder47 = builder43.setLenient(false);
        java.util.Calendar.Builder builder51 = builder43.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale52 = java.util.Locale.CHINA;
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Calendar.Builder builder54 = builder51.setLocale(locale52);
        java.lang.String str55 = locale52.getISO3Country();
        java.lang.String str56 = locale52.getDisplayName();
        java.util.Set<java.lang.Character> charSet57 = locale52.getExtensionKeys();
        boolean boolean58 = fastDateFormat14.equals((java.lang.Object) charSet57);
        java.lang.String str60 = fastDateFormat14.format(1645513677743L);
        java.util.TimeZone timeZone61 = fastDateFormat14.getTimeZone();
        java.lang.String str62 = fastDateFormat14.toString();
        java.util.TimeZone timeZone63 = fastDateFormat14.getTimeZone();
        java.lang.String str64 = timeZone63.getID();
        boolean boolean65 = timeZone0.hasSameRules(timeZone63);
        int int66 = timeZone63.getRawOffset();
        int int68 = timeZone63.getOffset(1645513673315L);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str30, "\u4e2d\u6587\u4e2d\u56fd)");
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:12:17 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 17 + "'", int33 == 17);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 07:06:17 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh-CN" + "'", str53, "zh-CN");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CHN" + "'", str55, "CHN");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Chinese (China)" + "'", str56, "Chinese (China)");
        org.junit.Assert.assertNotNull(charSet57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str60, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)]" + "'", str62, "\u4e2d\u6587\u4e2d\u56fd)]");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str64, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
    }

    @Test
    public void test05846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05846");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        int int26 = languageRangeList1.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor27 = languageRangeList1.iterator();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor28 = languageRangeList1.listIterator();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale35, locale36, locale37, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList53);
        int int56 = languageRangeList33.lastIndexOf((java.lang.Object) languageRangeList45);
        java.util.Set<java.lang.String> strSet57 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream58 = strSet57.parallelStream();
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strSet57, filteringMode59);
        boolean boolean61 = languageRangeList30.removeAll((java.util.Collection<java.lang.String>) strSet57);
        boolean boolean62 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.lang.String str64 = locale63.getLanguage();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone66.hasSameRules(timeZone68);
        java.util.Locale locale70 = java.util.Locale.CHINA;
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone68, locale70);
        java.lang.String str72 = locale63.getDisplayName(locale70);
        java.util.Locale locale73 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet74 = locale73.getUnicodeLocaleKeys();
        java.lang.String str75 = locale70.getDisplayName(locale73);
        java.lang.String str76 = locale70.getISO3Language();
        java.lang.String str77 = locale70.getVariant();
        java.util.Set<java.lang.String> strSet78 = locale70.getUnicodeLocaleKeys();
        boolean boolean79 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap80);
        java.text.Format.Field field82 = null;
        java.text.FieldPosition fieldPosition84 = new java.text.FieldPosition(field82, 43);
        fieldPosition84.setEndIndex((int) (byte) 100);
        int int87 = languageRangeList81.indexOf((java.lang.Object) fieldPosition84);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor27);
        org.junit.Assert.assertNotNull(languageRangeItor28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode59.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zh" + "'", str64, "zh");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645513937419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=419,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u4e2d\u6587" + "'", str72, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet74);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str75, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zho" + "'", str76, "zho");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(languageRangeList81);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test05847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05847");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.FilteringMode filteringMode3 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        boolean boolean4 = languageRangeList1.equals((java.lang.Object) filteringMode3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = languageRangeList1.contains((java.lang.Object) builder12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        int int19 = timeZone15.getOffset(1645513657024L);
        timeZone15.setID("fra");
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone15.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone15, locale24);
        boolean boolean29 = fastDateFormat14.equals((java.lang.Object) locale24);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition(1970);
        java.lang.Object obj33 = fastDateFormat14.parseObject("Italia", parsePosition32);
        int int34 = languageRangeList1.indexOf((java.lang.Object) parsePosition32);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone36);
        java.lang.String str38 = fastDateFormat37.toString();
        boolean boolean39 = fastDateFormat37.getTimeZoneOverridesCalendar();
        java.lang.String str40 = fastDateFormat37.toString();
        java.util.Locale locale41 = fastDateFormat37.getLocale();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.lang.String str46 = fastDateFormat45.toString();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone48);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone51.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.CHINA;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone53, locale55);
        calendar56.clear(7);
        calendar56.set(16, (int) (byte) 0);
        int int62 = calendar56.getFirstDayOfWeek();
        java.lang.String str63 = fastDateFormat49.format(calendar56);
        calendar56.set((int) (short) 100, 37, 2);
        java.lang.String str68 = fastDateFormat45.format(calendar56);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition(16);
        parsePosition71.setErrorIndex(5);
        parsePosition71.setErrorIndex(1);
        java.lang.Object obj76 = fastDateFormat45.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition71);
        java.lang.String str77 = parsePosition71.toString();
        java.lang.Object obj78 = fastDateFormat37.parseObject("7:08:05 AM GMT+00:00", parsePosition71);
        java.text.ParsePosition parsePosition81 = new java.text.ParsePosition(16);
        parsePosition81.setErrorIndex(5);
        parsePosition81.setErrorIndex(31);
        java.lang.Object obj86 = fastDateFormat37.parseObject("Feb 2, 2022 7:08:29 AM", parsePosition81);
        java.lang.Object obj87 = fastDateFormat37.clone();
        boolean boolean88 = parsePosition32.equals((java.lang.Object) fastDateFormat37);
        int int89 = parsePosition32.getErrorIndex();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + filteringMode3 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode3.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645513937490,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=490,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str38, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str40, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str46, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=-58914146862510,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=490,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7:12:17 AM GMT+00:00" + "'", str63, "7:12:17 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "7:12:17 AM GMT+00:00" + "'", str68, "7:12:17 AM GMT+00:00");
        org.junit.Assert.assertNull(obj76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str77, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test05848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05848");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.lang.String str11 = fastDateFormat9.toString();
        java.lang.String str12 = fastDateFormat9.getPattern();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition(16);
        parsePosition15.setErrorIndex(5);
        int int18 = parsePosition15.getErrorIndex();
        java.lang.Object obj19 = fastDateFormat9.parseObject("7:07:41 AM UTC", parsePosition15);
        parsePosition15.setIndex(59);
        java.lang.Object obj22 = fastDateFormat2.parseObject("\u610f\u5927\u5229\u6587", parsePosition15);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        calendar32.clear(7);
        calendar32.set(16, (int) (byte) 0);
        java.time.Instant instant38 = calendar32.toInstant();
        boolean boolean40 = calendar32.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str41 = fastDateFormat25.format(calendar32);
        calendar32.roll(39, (int) (short) 0);
        java.util.Date date45 = new java.util.Date();
        int int46 = date45.getSeconds();
        long long47 = date45.getTime();
        date45.setTime((long) 37);
        date45.setDate((int) (short) 0);
        int int52 = date45.getMonth();
        java.util.Calendar.Builder builder53 = new java.util.Calendar.Builder();
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getSeconds();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getTimezoneOffset();
        date56.setMinutes(6);
        boolean boolean60 = date54.after(date56);
        java.util.Calendar.Builder builder61 = builder53.setInstant(date56);
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getSeconds();
        java.util.Date date64 = new java.util.Date();
        int int65 = date64.getTimezoneOffset();
        date64.setMinutes(6);
        boolean boolean68 = date62.after(date64);
        date62.setHours((int) (short) 100);
        boolean boolean71 = date56.before(date62);
        boolean boolean72 = date45.after(date62);
        date45.setDate(46);
        boolean boolean75 = calendar32.before((java.lang.Object) 46);
        java.lang.StringBuffer stringBuffer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = fastDateFormat2.format(calendar32, stringBuffer76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "h:mm:ss a z" + "'", str10, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "h:mm:ss a z" + "'", str12, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645513937527,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=527,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 15 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 17 + "'", int46 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645513937527L + "'", long47 == 1645513937527L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 11 + "'", int52 == 11);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 07:12:17 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 17 + "'", int55 == 17);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Feb 22 07:06:17 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(builder61);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Sat Feb 26 04:12:17 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 17 + "'", int63 == 17);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Tue Feb 22 07:06:17 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test05849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05849");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clearExtensions();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Locale.Builder builder5 = builder1.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str9 = fastDateFormat7.format((long) ' ');
        java.util.Locale locale10 = fastDateFormat7.getLocale();
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayName();
        java.util.Locale.Builder builder13 = builder6.setLocale(locale10);
        java.util.Locale locale14 = builder6.build();
        java.lang.String str15 = locale14.getDisplayVariant();
        java.lang.String str16 = locale14.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(fastDateFormat7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e0a\u5348" + "'", str9, "\u4e0a\u5348");
        org.junit.Assert.assertNotNull(locale10);
// flaky:         org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese (China)" + "'", str12, "Chinese (China)");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "China" + "'", str16, "China");
    }

    @Test
    public void test05850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05850");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor12 = languageRangeList1.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator13 = languageRangeList1.spliterator();
        java.util.Locale locale17 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale24, locale25, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor33 = languageRangeList21.listIterator(0);
        boolean boolean34 = languageRangeList21.isEmpty();
        java.util.Locale.LanguageRange languageRange35 = null;
        boolean boolean36 = languageRangeList21.add(languageRange35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale40, locale41, locale42, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.util.Locale locale55 = java.util.Locale.FRANCE;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale52, locale53, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList58);
        int int61 = languageRangeList38.lastIndexOf((java.lang.Object) languageRangeList50);
        int int63 = languageRangeList50.indexOf((java.lang.Object) '4');
        java.util.Set<java.lang.String> strSet64 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strSet64);
        java.util.stream.Stream<java.lang.String> strStream66 = strList65.stream();
        java.util.Locale.FilteringMode filteringMode67 = null;
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList65, filteringMode67);
        java.util.Locale.LanguageRange languageRange70 = new java.util.Locale.LanguageRange("France");
        java.lang.String str71 = languageRange70.getRange();
        boolean boolean72 = languageRangeList21.add(languageRange70);
        java.lang.String str73 = languageRange70.getRange();
        java.lang.String str74 = languageRange70.getRange();
        double double75 = languageRange70.getWeight();
        boolean boolean76 = languageRangeList1.add(languageRange70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap77);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeItor12);
        org.junit.Assert.assertNotNull(languageRangeSpliterator13);
        org.junit.Assert.assertEquals(locale17.toString(), "feb 22, 2022 7:07:42 am_22 FEB 2022 07:07:38 GMT_22 Feb 2022 07:07:44 GMT");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(languageRangeItor33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(locale60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "france" + "'", str71, "france");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "france" + "'", str73, "france");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "france" + "'", str74, "france");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 1.0d + "'", double75 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(languageRangeList78);
    }

    @Test
    public void test05851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05851");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.lang.String str8 = fastDateFormat6.toString();
        java.lang.String str9 = fastDateFormat6.getPattern();
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        parsePosition12.setErrorIndex(5);
        int int15 = parsePosition12.getErrorIndex();
        java.lang.Object obj16 = fastDateFormat6.parseObject("7:07:41 AM UTC", parsePosition12);
        java.lang.Object obj17 = fastDateFormat2.parseObject("h:mm:ss a z", parsePosition12);
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        date18.setMinutes(6);
        int int22 = date18.getMinutes();
        java.util.Date date29 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean30 = date18.before(date29);
        java.util.Date date36 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean37 = date18.before(date36);
        java.time.Instant instant38 = date18.toInstant();
        java.lang.StringBuffer stringBuffer39 = null;
        java.lang.StringBuffer stringBuffer40 = fastDateFormat2.format(date18, stringBuffer39);
        java.util.Date date44 = new java.util.Date(32770, 36, 3);
        boolean boolean45 = date18.before(date44);
        long long46 = date44.getTime();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "h:mm:ss a z" + "'", str7, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str8, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "h:mm:ss a z" + "'", str9, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Tue Feb 22 07:06:17 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertEquals(date29.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals(date36.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNull(stringBuffer40);
        org.junit.Assert.assertEquals(date44.toString(), "Fri Jan 03 00:00:00 GMT+00:00 34673");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1032007219200000L + "'", long46 == 1032007219200000L);
    }

    @Test
    public void test05852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05852");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        java.lang.String str7 = timeZone2.getID();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = java.util.Locale.FRANCE;
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale locale19 = java.util.Locale.FRANCE;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray21 = new java.util.Locale[] { locale16, locale17, locale18, locale19, locale20 };
        java.util.ArrayList<java.util.Locale> localeList22 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList22, localeArray21);
        java.util.Locale locale24 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray33 = new java.util.Locale[] { locale28, locale29, locale30, locale31, locale32 };
        java.util.ArrayList<java.util.Locale> localeList34 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList34, localeArray33);
        java.util.Locale locale36 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList34);
        int int37 = languageRangeList14.lastIndexOf((java.lang.Object) languageRangeList26);
        java.lang.String[] strArray56 = new java.lang.String[] { "7:07:39 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "22 Feb 2022 07:07:37 GMT", "7:07:38 AM UTC", "", "22 Feb 2022 07:07:39 GMT", "12:00:00 AM UTC", "China", "7:07:37 AM UTC", "7:07:39 AM UTC", "22 Feb 2022 07:07:38 GMT", "Sat Jan 22 07:07:37 UTC 2022", "1/1/70 12:00 AM", "7:07:37 AM UTC", "java.text.FieldPosition[field=7,attribute=null,beginIndex=0,endIndex=8]", "", "Coordinated Universal Time", "China" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        boolean boolean59 = languageRangeList26.retainAll((java.util.Collection<java.lang.String>) strList57);
        boolean boolean60 = languageRangeList12.removeAll((java.util.Collection<java.lang.String>) strList57);
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("it-IT");
        boolean boolean63 = languageRangeList12.equals((java.lang.Object) locale62);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone2, locale62);
        calendar64.setMinimalDaysInFirstWeek(4);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = calendar64.getMinimum(46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 46");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str7, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(locale36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645513937662,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=663,ZONE_OFFSET=1,DST_OFFSET=0]");
    }

    @Test
    public void test05853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05853");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.clear(7);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = calendar9.getActualMaximum((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=690,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:17 AM GMT+00:00" + "'", str16, "7:12:17 AM GMT+00:00");
    }

    @Test
    public void test05854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05854");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar calendar13 = builder12.build();
        int int14 = calendar13.getFirstDayOfWeek();
        calendar13.setFirstDayOfWeek(28);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setDate(15, (int) 'u', (int) ' ');
        java.util.Calendar calendar22 = builder17.build();
        java.util.Calendar.Builder builder26 = builder17.setDate(40, 100, 103);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone30);
        int int34 = timeZone30.getOffset(1645513656868L);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone36.hasSameRules(timeZone38);
        boolean boolean40 = timeZone30.hasSameRules(timeZone36);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone42.hasSameRules(timeZone44);
        boolean boolean46 = timeZone36.hasSameRules(timeZone44);
        java.util.Calendar.Builder builder47 = builder26.setTimeZone(timeZone36);
        java.util.TimeZone timeZone49 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone49);
        java.lang.String str51 = fastDateFormat50.toString();
        int int52 = fastDateFormat50.getMaxLengthEstimate();
        java.util.TimeZone timeZone53 = fastDateFormat50.getTimeZone();
        boolean boolean54 = timeZone36.hasSameRules(timeZone53);
        int int56 = timeZone36.getOffset(1645513723070L);
        calendar13.setTimeZone(timeZone36);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = calendar13.getLeastMaximum(51);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 51");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:17 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 17 + "'", int2 == 17);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:17 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=36,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=28,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-61383657600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=24,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=306,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645513937721,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=721,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str51, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 18 + "'", int52 == 18);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test05855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05855");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 37);
        int int3 = fieldPosition2.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 37 + "'", int3 == 37);
    }

    @Test
    public void test05856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05856");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = attribute0.equals((java.lang.Object) timeZone1);
        java.util.Locale.Category category3 = java.util.Locale.Category.FORMAT;
        boolean boolean4 = attribute0.equals((java.lang.Object) category3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category3);
        java.util.Locale.Category category6 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale7 = java.util.Locale.getDefault(category6);
        java.lang.String str8 = locale7.getVariant();
        java.util.Locale.setDefault(category3, locale7);
        java.util.Locale locale10 = java.util.Locale.getDefault(category3);
        java.util.Locale locale12 = new java.util.Locale("java.text.ParsePosition[index=16,errorIndex=5]");
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.lang.String str18 = locale13.getDisplayVariant(locale17);
        java.lang.String str19 = locale13.getISO3Language();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        calendar29.clear(7);
        calendar29.set(16, (int) (byte) 0);
        java.time.Instant instant35 = calendar29.toInstant();
        boolean boolean37 = calendar29.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str38 = fastDateFormat22.format(calendar29);
        java.lang.Object obj39 = fastDateFormat22.clone();
        java.util.Locale locale40 = fastDateFormat22.getLocale();
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale40.getDisplayName();
        java.lang.String str43 = locale13.getDisplayCountry(locale40);
        java.lang.String str45 = locale40.getExtension('x');
        java.lang.String str46 = locale12.getDisplayVariant(locale40);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale12);
        java.util.Locale.setDefault(category3, locale12);
        java.lang.String str49 = locale12.getVariant();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.FORMAT + "'", category3.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.FORMAT + "'", category6.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseposition[index=16,errorindex=5]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645513937892,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=892,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinese (China)" + "'", str42, "Chinese (China)");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u56fd" + "'", str43, "\u4e2d\u56fd");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645513937893,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=893,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
    }

    @Test
    public void test05857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05857");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.lang.String str6 = fastDateFormat2.getPattern();
        java.lang.String str8 = fastDateFormat2.format(0L);
        boolean boolean9 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str10 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone12.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        calendar17.clear(7);
        calendar17.setMinimalDaysInFirstWeek(69);
        calendar17.setLenient(true);
        java.lang.String str24 = fastDateFormat2.format(calendar17);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "h:mm:ss a z" + "'", str6, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str8, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "h:mm:ss a z" + "'", str10, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645513937917,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=69,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=917,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "7:12:17 AM GMT+00:00" + "'", str24, "7:12:17 AM GMT+00:00");
    }

    @Test
    public void test05858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05858");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMinutes(6);
        int int30 = date26.getMinutes();
        java.util.Date date37 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean38 = date26.before(date37);
        java.util.Date date44 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean45 = date26.before(date44);
        boolean boolean46 = calendar13.after((java.lang.Object) date44);
        java.util.TimeZone timeZone47 = calendar13.getTimeZone();
        int int48 = timeZone47.getRawOffset();
        boolean boolean49 = timeZone47.observesDaylightTime();
        java.lang.Class<?> wildcardClass50 = timeZone47.getClass();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146862065,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=935,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:17 AM GMT+00:00" + "'", str20, "7:12:17 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:17 AM GMT+00:00" + "'", str25, "7:12:17 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:06:17 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals(date44.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test05859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05859");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.String str19 = calendar9.getCalendarType();
        boolean boolean20 = calendar9.isWeekDateSupported();
        calendar9.add(10, 8);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone27);
        int int31 = timeZone27.getOffset(1645513656868L);
        calendar9.setTimeZone(timeZone27);
        calendar9.setLenient(false);
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getSeconds();
        long long37 = date35.getTime();
        date35.setTime((long) 37);
        date35.setDate((int) (short) 0);
        int int42 = date35.getYear();
        date35.setYear(53);
        calendar9.setTime(date35);
        int int46 = calendar9.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-505007999963,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1953,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=37,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645513937959,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=959,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals(date35.toString(), "Thu Dec 31 00:00:00 GMT+00:00 1953");
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 17 + "'", int36 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645513937959L + "'", long37 == 1645513937959L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 69 + "'", int42 == 69);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test05860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05860");
        java.util.Date date1 = new java.util.Date("22 Feb 2022 07:08:45 GMT");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone6.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.CHINA;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8, locale10);
        calendar11.clear(7);
        calendar11.set(16, (int) (byte) 0);
        java.time.Instant instant17 = calendar11.toInstant();
        boolean boolean19 = calendar11.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str20 = fastDateFormat4.format(calendar11);
        java.lang.String str21 = calendar11.getCalendarType();
        boolean boolean22 = calendar11.isWeekDateSupported();
        java.time.Instant instant23 = calendar11.toInstant();
        int int24 = calendar11.getWeeksInWeekYear();
        java.util.Date date25 = calendar11.getTime();
        date25.setSeconds(45);
        boolean boolean28 = date1.after(date25);
        date1.setMinutes(20);
        java.lang.String str31 = date1.toGMTString();
        org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:20:45 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645513937992,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=17,MILLISECOND=992,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "gregory" + "'", str21, "gregory");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 07:12:45 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "22 Feb 2022 07:20:45 GMT" + "'", str31, "22 Feb 2022 07:20:45 GMT");
    }

    @Test
    public void test05861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05861");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Calendar.Builder builder24 = builder12.setWeekDate(10, 0, 2);
        java.util.Locale locale27 = new java.util.Locale("2022-2-22 7:07:44");
        java.lang.String str28 = locale27.getVariant();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale.LanguageRange languageRange32 = null;
        boolean boolean33 = languageRangeList30.add(languageRange32);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor34 = languageRangeList30.iterator();
        java.util.Set<java.lang.String> strSet35 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet35.parallelStream();
        boolean boolean38 = languageRangeList30.retainAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale locale40 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        boolean boolean44 = languageRangeList30.contains((java.lang.Object) locale41);
        java.lang.String str45 = locale41.getCountry();
        java.util.Set<java.lang.String> strSet46 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale47 = locale41.stripExtensions();
        java.lang.String str48 = locale27.getDisplayLanguage(locale47);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale27);
        java.lang.String str50 = locale27.toLanguageTag();
        java.util.Calendar.Builder builder51 = builder12.setLocale(locale27);
        java.lang.String str52 = locale27.getISO3Country();
        java.lang.String str53 = locale27.getDisplayVariant();
        java.lang.String str54 = locale27.toLanguageTag();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-2-22 7:07:44");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(languageRangeItor34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals(locale40.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-2-22 7:07:44" + "'", str48, "2022-2-22 7:07:44");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "und" + "'", str50, "und");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "und" + "'", str54, "und");
    }

    @Test
    public void test05862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05862");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((int) (short) 10);
        int int2 = fieldPosition1.getEndIndex();
        int int3 = fieldPosition1.getField();
        fieldPosition1.setEndIndex((int) (short) 1);
        java.lang.String str6 = fieldPosition1.toString();
        int int7 = fieldPosition1.getBeginIndex();
        int int8 = fieldPosition1.getField();
        java.text.Format.Field field9 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.FieldPosition[field=10,attribute=null,beginIndex=0,endIndex=1]" + "'", str6, "java.text.FieldPosition[field=10,attribute=null,beginIndex=0,endIndex=1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(field9);
    }

    @Test
    public void test05863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05863");
        java.util.Locale locale1 = java.util.Locale.CHINA;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale1.getDisplayCountry(locale4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale4);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e2d\u6587" + "'", str2, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-CN" + "'", str5, "zh-CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u56fd" + "'", str6, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(fastDateFormat7);
    }

    @Test
    public void test05864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05864");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale10, locale11, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale locale17 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList7.listIterator(0);
        boolean boolean20 = languageRangeList7.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet24.parallelStream();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        boolean boolean27 = languageRangeList7.retainAll((java.util.Collection<java.lang.String>) strList26);
        java.lang.String str28 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList26);
        int int29 = languageRangeList1.size();
        languageRangeList1.clear();
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getSeconds();
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getTimezoneOffset();
        date34.setMinutes(6);
        boolean boolean38 = date32.after(date34);
        java.util.Calendar.Builder builder39 = builder31.setInstant(date34);
        java.util.Calendar.Builder builder41 = builder39.setInstant((long) 36);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder43 = builder41.setLocale(locale42);
        java.util.Calendar.Builder builder45 = builder43.setLenient(false);
        java.util.Calendar.Builder builder47 = builder43.setLenient(false);
        int int48 = languageRangeList1.lastIndexOf((java.lang.Object) builder43);
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale53 = new java.util.Locale("", "hi!", "");
        java.lang.String str54 = locale49.getDisplayCountry(locale53);
        java.lang.String str55 = locale53.getISO3Language();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        java.util.Locale locale58 = java.util.Locale.CHINA;
        java.util.Locale locale62 = new java.util.Locale("", "hi!", "");
        java.lang.String str63 = locale58.getDisplayVariant(locale62);
        java.lang.String str64 = locale56.getDisplayVariant(locale58);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale58);
        java.lang.String str66 = locale53.getDisplayCountry(locale58);
        java.lang.String str67 = locale58.getDisplayLanguage();
        java.util.Locale locale68 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale72 = new java.util.Locale("", "hi!", "");
        java.lang.String str73 = locale68.getDisplayCountry(locale72);
        java.lang.String str74 = locale58.getDisplayScript(locale72);
        java.lang.String str75 = locale58.getDisplayLanguage();
        java.util.Calendar.Builder builder76 = builder43.setLocale(locale58);
        java.util.Calendar.Builder builder78 = builder76.setLenient(true);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 18 + "'", int33 == 18);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 07:06:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale53.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "China" + "'", str54, "China");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale62.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645513938090,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=90,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "HI!" + "'", str66, "HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u4e2d\u6587" + "'", str67, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale72.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "China" + "'", str73, "China");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u4e2d\u6587" + "'", str75, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test05865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05865");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder18 = builder10.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Calendar.Builder builder27 = builder18.setTimeOfDay(39, (int) (byte) 100, 42, 52);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone31.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.lang.String str37 = locale28.getDisplayName(locale35);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleKeys();
        java.lang.String str40 = locale35.getDisplayName(locale38);
        java.lang.String str41 = locale35.getISO3Language();
        java.lang.String str42 = locale35.getVariant();
        java.util.Set<java.lang.String> strSet43 = locale35.getUnicodeLocaleKeys();
        java.lang.String str44 = locale35.getDisplayScript();
        java.util.Calendar.Builder builder45 = builder18.setLocale(locale35);
        java.util.Calendar calendar46 = builder45.build();
        calendar46.set(2, 2);
        calendar46.clear(4);
        calendar46.roll(4, false);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645513938157,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=157,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str40, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zho" + "'", str41, "zho");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=56,MONTH=2,WEEK_OF_YEAR=12,WEEK_OF_MONTH=3,DAY_OF_MONTH=8,DAY_OF_YEAR=75,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=40,SECOND=42,MILLISECOND=52,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05866");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        int int29 = date27.getSeconds();
        int int30 = languageRangeList13.indexOf((java.lang.Object) date27);
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale35 = new java.util.Locale("", "hi!", "");
        java.lang.String str36 = locale31.getDisplayCountry(locale35);
        java.lang.String str37 = locale31.toLanguageTag();
        boolean boolean38 = languageRangeList13.equals((java.lang.Object) str37);
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition(7);
        fieldPosition40.setEndIndex(8);
        fieldPosition40.setEndIndex(8);
        fieldPosition40.setEndIndex(11);
        int int47 = fieldPosition40.getEndIndex();
        boolean boolean48 = languageRangeList13.contains((java.lang.Object) fieldPosition40);
        languageRangeList13.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 18 + "'", int28 == 18);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale35.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "China" + "'", str36, "China");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh-CN" + "'", str37, "zh-CN");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 11 + "'", int47 == 11);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05867");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.Calendar.Builder builder32 = builder26.setWeekDate(69, 13, 0);
        java.util.Locale locale34 = new java.util.Locale("feb 22, 2022 7:07:42 am");
        java.util.Calendar.Builder builder35 = builder32.setLocale(locale34);
        java.util.Locale locale36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = locale34.getDisplayName(locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals(locale34.toString(), "feb 22, 2022 7:07:42 am");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test05868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05868");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CHINA;
        java.util.Locale locale7 = new java.util.Locale("", "hi!", "");
        java.lang.String str8 = locale3.getDisplayVariant(locale7);
        java.lang.String str9 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, locale3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.lang.String str18 = fastDateFormat15.format((long) '#');
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(53);
        java.lang.Object obj22 = fastDateFormat15.parseObject("", parsePosition21);
        int int23 = parsePosition21.getErrorIndex();
        java.lang.Object obj24 = fastDateFormat11.parseObject("22 Feb 2022 07:07:51 GMT", parsePosition21);
        java.lang.String str25 = fastDateFormat11.getPattern();
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition(16);
        int int29 = parsePosition28.getErrorIndex();
        java.lang.String str30 = parsePosition28.toString();
        java.lang.Object obj31 = null;
        boolean boolean32 = parsePosition28.equals(obj31);
        int int33 = parsePosition28.getIndex();
        boolean boolean35 = parsePosition28.equals((java.lang.Object) 1645513657332L);
        java.lang.String str36 = parsePosition28.toString();
        int int37 = parsePosition28.getErrorIndex();
        int int38 = parsePosition28.getIndex();
        parsePosition28.setErrorIndex(43);
        parsePosition28.setIndex((int) 'a');
        int int43 = parsePosition28.getErrorIndex();
        parsePosition28.setIndex((int) (byte) -1);
        java.lang.Object obj46 = fastDateFormat11.parseObject("Feb 2, 2022 7:09:12 AM", parsePosition28);
        java.lang.StringBuffer stringBuffer48 = null;
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition((int) (short) 10);
        fieldPosition50.setEndIndex(16);
        fieldPosition50.setEndIndex(11);
        int int55 = fieldPosition50.getEndIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer56 = fastDateFormat11.format((java.lang.Object) "2022-02-22 07:06:12", stringBuffer48, fieldPosition50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.lang.String");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale7.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513938254,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=254,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "h:mm:ss a z" + "'", str16, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str18, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(obj24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u5e74\u6708\u65e5'" + "'", str25, "\u5e74\u6708\u65e5'");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str30, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str36, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 43 + "'", int43 == 43);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 11 + "'", int55 == 11);
    }

    @Test
    public void test05869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05869");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        int int26 = languageRangeList13.indexOf((java.lang.Object) '4');
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        int int29 = date27.getSeconds();
        int int30 = languageRangeList13.indexOf((java.lang.Object) date27);
        java.lang.Object[] objArray31 = languageRangeList13.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale35, locale36, locale37, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray52 = new java.util.Locale[] { locale47, locale48, locale49, locale50, locale51 };
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList53);
        int int56 = languageRangeList33.lastIndexOf((java.lang.Object) languageRangeList45);
        boolean boolean57 = languageRangeList33.isEmpty();
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        java.util.Date date60 = new java.util.Date();
        java.lang.String str61 = date60.toGMTString();
        boolean boolean62 = date58.before(date60);
        int int63 = languageRangeList33.lastIndexOf((java.lang.Object) date60);
        languageRangeList33.clear();
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, strMap68);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale74 = java.util.Locale.FRANCE;
        java.util.Locale locale75 = java.util.Locale.CHINESE;
        java.util.Locale locale76 = java.util.Locale.FRANCE;
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale73, locale74, locale75, locale76, locale77 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList79, filteringMode82);
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList84);
        java.lang.Object[] objArray86 = languageRangeList13.toArray();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor87 = languageRangeList13.listIterator();
        boolean boolean88 = languageRangeList13.isEmpty();
        java.lang.Object[] objArray89 = languageRangeList13.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 18 + "'", int28 == 18);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 18 + "'", int29 == 18);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
// flaky:         org.junit.Assert.assertEquals(date60.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "22 Feb 2022 07:12:18 GMT" + "'", str61, "22 Feb 2022 07:12:18 GMT");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(languageRangeList69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode82.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(languageRangeItor87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
    }

    @Test
    public void test05870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05870");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale5 = new java.util.Locale("", "hi!", "");
        java.lang.String str6 = locale1.getDisplayCountry(locale5);
        java.lang.String str7 = locale5.toLanguageTag();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale locale11 = builder8.build();
        java.util.Locale.Builder builder12 = builder8.clear();
        java.util.Locale locale13 = builder12.build();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        java.lang.String str23 = locale14.getDisplayName(locale21);
        java.util.Locale.Builder builder24 = builder12.setLocale(locale14);
        java.util.Locale locale25 = builder12.build();
        java.lang.String str26 = locale5.getDisplayCountry(locale25);
        java.util.Locale locale30 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str31 = locale30.getDisplayCountry();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale30);
        java.lang.String str33 = locale30.getDisplayLanguage();
        java.util.Set<java.lang.Character> charSet34 = locale30.getExtensionKeys();
        java.lang.String str35 = locale5.getDisplayName(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-22 7:09:39", locale30);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        calendar43.clear(7);
        calendar43.set(16, (int) (byte) 0);
        int int49 = calendar43.getWeeksInWeekYear();
        calendar43.clear();
        java.util.Date date56 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        calendar43.setTime(date56);
        java.lang.StringBuffer stringBuffer58 = null;
        java.text.FieldPosition fieldPosition60 = new java.text.FieldPosition(28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer61 = fastDateFormat36.format((java.lang.Object) calendar43, stringBuffer58, fieldPosition60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale5.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "China" + "'", str6, "China");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513938383,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=383,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u6587" + "'", str23, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "HI!" + "'", str26, "HI!");
        org.junit.Assert.assertEquals(locale30.toString(), "feb 22, 2022 7:07:42 am_22 FEB 2022 07:07:38 GMT_22 Feb 2022 07:07:44 GMT");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "22 FEB 2022 07:07:38 GMT" + "'", str31, "22 FEB 2022 07:07:38 GMT");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645513938384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=384,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "feb 22, 2022 7:07:42 am" + "'", str33, "feb 22, 2022 7:07:42 am");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "HI!" + "'", str35, "HI!");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-1889999280000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1910,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=12,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertEquals(date56.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
    }

    @Test
    public void test05871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05871");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.clear(7);
        calendar9.set(0, 0, (int) (short) 0, 122, 2, 5);
        calendar9.set(3, 38, 0, (int) (byte) 100, 36);
        calendar9.roll(13, true);
        int int36 = calendar9.getGreatestMinimum(14);
        long long37 = calendar9.getTimeInMillis();
        boolean boolean38 = calendar9.isWeekDateSupported();
        int int39 = calendar9.getWeekYear();
        calendar9.set(41, 456, 41, 122, 9, 26);
        int int47 = calendar9.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=41,MONTH=456,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=41,DAY_OF_YEAR=63,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=122,MINUTE=9,SECOND=26,MILLISECOND=416,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:18 AM GMT+00:00" + "'", str16, "7:12:18 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-61972629833584L) + "'", long37 == (-61972629833584L));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
    }

    @Test
    public void test05872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05872");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(7);
        fieldPosition1.setEndIndex(8);
        int int4 = fieldPosition1.getEndIndex();
        int int5 = fieldPosition1.getEndIndex();
        int int6 = fieldPosition1.getField();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone8);
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getSeconds();
        java.lang.StringBuffer stringBuffer12 = null;
        java.lang.StringBuffer stringBuffer13 = fastDateFormat9.format(date10, stringBuffer12);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.CHINA;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        calendar20.clear(7);
        boolean boolean23 = calendar20.isWeekDateSupported();
        java.util.TimeZone timeZone24 = calendar20.getTimeZone();
        int int26 = calendar20.getMaximum(3);
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDateFormat9.format(calendar20, stringBuffer27);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, locale31);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition(16);
        java.lang.Object obj36 = fastDateFormat32.parseObject("\u4e2d\u6587", parsePosition35);
        java.lang.Object obj37 = fastDateFormat9.parseObject("fr_CA", parsePosition35);
        boolean boolean38 = fieldPosition1.equals((java.lang.Object) parsePosition35);
        int int39 = fieldPosition1.getField();
        int int40 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(fastDateFormat9);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 18 + "'", int11 == 18);
        org.junit.Assert.assertNull(stringBuffer13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=446,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 7 + "'", int39 == 7);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test05873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05873");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("7:12:16 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05874");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Italy");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: I");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05875");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        java.util.Locale locale9 = new java.util.Locale("FastDateFormat[h:mm:ss a z]");
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale17 = new java.util.Locale("", "hi!", "");
        java.lang.String str18 = locale13.getDisplayVariant(locale17);
        java.lang.String str19 = locale11.getDisplayVariant(locale13);
        java.lang.String str20 = locale11.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e2d\u6587\u4e2d\u56fd)", locale11);
        java.lang.String str22 = locale9.getDisplayLanguage(locale11);
        java.lang.String str23 = locale9.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder7.setLocale(locale9);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: fastdateformat[h:mm:ss a z] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals(locale9.toString(), "fastdateformat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale17.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fastdateformat[h:mm:ss a z]" + "'", str22, "fastdateformat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "fastdateformat[h:mm:ss a z]" + "'", str23, "fastdateformat[h:mm:ss a z]");
    }

    @Test
    public void test05876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05876");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        java.lang.String str7 = locale0.getDisplayVariant();
        java.lang.String str8 = locale0.getDisplayVariant();
        java.util.Locale locale10 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        java.lang.String str14 = locale0.getDisplayLanguage(locale12);
        java.util.Locale.setDefault(locale0);
        java.lang.String str16 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513938629,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=629,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale10.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7:07:37 am utc" + "'", str13, "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587" + "'", str14, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh_CN" + "'", str16, "zh_CN");
    }

    @Test
    public void test05877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05877");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.lang.String str17 = fastDateFormat2.toString();
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        date18.setMonth(0);
        java.time.Instant instant22 = date18.toInstant();
        java.util.Date date23 = java.util.Date.from(instant22);
        long long24 = date23.getTime();
        java.lang.String str25 = fastDateFormat2.format(date23);
        int int26 = date23.getSeconds();
        date23.setHours(800302);
        long long29 = date23.getTime();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513938640,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=640,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:18 AM GMT+00:00" + "'", str16, "7:12:18 AM GMT+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Jan 22 07:12:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed May 10 22:12:18 GMT+00:00 2113");
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1642835538640L + "'", long24 == 1642835538640L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:18 AM GMT+00:00" + "'", str25, "7:12:18 AM GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 18 + "'", int26 == 18);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4523897538640L + "'", long29 == 4523897538640L);
    }

    @Test
    public void test05878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05878");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        java.lang.String str14 = locale5.getDisplayName(locale12);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = locale12.getDisplayName(locale15);
        java.lang.String str18 = locale12.getISO3Language();
        java.lang.String str19 = locale12.getVariant();
        java.lang.String str20 = timeZone2.getDisplayName(locale12);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513938682,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=682,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587" + "'", str14, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str17, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "GMT+00:00" + "'", str20, "GMT+00:00");
    }

    @Test
    public void test05879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05879");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar calendar15 = builder10.build();
        java.util.Calendar.Builder builder17 = builder10.setLenient(true);
        java.util.Calendar calendar18 = builder10.build();
        calendar18.set(0, 123, 9);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-61609075200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=8,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=253,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=123,WEEK_OF_YEAR=37,WEEK_OF_MONTH=2,DAY_OF_MONTH=9,DAY_OF_YEAR=253,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05880");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        calendar35.clear(7);
        calendar35.set(16, (int) (byte) 0);
        java.time.Instant instant41 = calendar35.toInstant();
        java.util.TimeZone timeZone42 = calendar35.getTimeZone();
        java.util.TimeZone timeZone43 = calendar35.getTimeZone();
        java.lang.String str44 = timeZone43.getID();
        java.util.Calendar.Builder builder45 = builder28.setTimeZone(timeZone43);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone47.hasSameRules(timeZone49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone49);
        java.util.TimeZone timeZone52 = calendar51.getTimeZone();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        int int57 = timeZone53.getOffset(1645513657024L);
        timeZone53.setID("fra");
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone53.hasSameRules(timeZone60);
        boolean boolean62 = timeZone52.hasSameRules(timeZone60);
        java.util.Calendar.Builder builder63 = builder28.setTimeZone(timeZone60);
        java.util.Calendar.Builder builder65 = builder28.setLenient(true);
        java.util.Calendar.Builder builder69 = builder65.setDate((int) 'x', 43, 32769);
        java.util.Locale locale73 = new java.util.Locale("", "22 Feb 2022 07:08:25 GMT", "22 Feb 2022 07:08:21 GMT");
        java.util.Calendar.Builder builder74 = builder69.setLocale(locale73);
        java.util.Calendar.Builder builder77 = builder74.set(0, 40);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645513938728,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str44, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645513938728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals(locale73.toString(), "_22 FEB 2022 07:08:25 GMT_22 Feb 2022 07:08:21 GMT");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test05881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05881");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.lang.String str6 = locale4.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale9.getDisplayVariant(locale13);
        java.lang.String str15 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale9);
        java.lang.String str17 = locale4.getDisplayCountry(locale9);
        java.lang.String str18 = locale9.getDisplayLanguage();
        java.lang.String str19 = locale9.getCountry();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale24, locale25, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray40 = new java.util.Locale[] { locale35, locale36, locale37, locale38, locale39 };
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList41);
        int int44 = languageRangeList21.lastIndexOf((java.lang.Object) languageRangeList33);
        boolean boolean45 = languageRangeList21.isEmpty();
        int int46 = languageRangeList21.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor47 = languageRangeList21.iterator();
        languageRangeList21.clear();
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strMap52);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale58 = java.util.Locale.FRANCE;
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray62 = new java.util.Locale[] { locale57, locale58, locale59, locale60, locale61 };
        java.util.ArrayList<java.util.Locale> localeList63 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList63, localeArray62);
        java.util.Locale locale65 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList63, filteringMode66);
        java.util.Locale.FilteringMode filteringMode68 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList69 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList63, filteringMode68);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3);
        int int72 = languageRangeList21.indexOf((java.lang.Object) 3);
        boolean boolean73 = locale9.equals((java.lang.Object) 3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "China" + "'", str5, "China");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh" + "'", str8, "zh");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513938781,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=781,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "HI!" + "'", str17, "HI!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CN" + "'", str19, "CN");
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor47);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNull(locale65);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertTrue("'" + filteringMode68 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode68.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList69);
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test05882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05882");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(4);
        java.util.TimeZone timeZone12 = calendar6.getTimeZone();
        int int13 = timeZone12.getRawOffset();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale21 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale21.getScript();
        java.util.Locale locale27 = new java.util.Locale("", "hi!", "");
        java.lang.String str28 = locale21.getDisplayVariant(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone16, locale27);
        java.lang.String str30 = locale27.getDisplayCountry();
        java.lang.String str31 = timeZone12.getDisplayName(locale27);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=834,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertEquals(locale21.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "HI!" + "'", str30, "HI!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "GMT+00:00" + "'", str31, "GMT+00:00");
    }

    @Test
    public void test05883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05883");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e0a\u5348\u65f6\u5206\u79d2");
        org.junit.Assert.assertNotNull(fastDateFormat1);
    }

    @Test
    public void test05884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05884");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        java.util.Date date2 = new java.util.Date();
        java.lang.String str3 = date2.toGMTString();
        boolean boolean4 = date0.before(date2);
        java.lang.String str5 = date2.toLocaleString();
        int int6 = date2.getTimezoneOffset();
        date2.setDate(292278994);
        int int9 = date2.getDate();
        java.util.Date date16 = new java.util.Date(45, (int) (short) 1, (int) 'a', 46, 43, 0);
        boolean boolean17 = date2.before(date16);
        date16.setTime(1645513763204L);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Feb 22 07:12:18 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Oct 16 07:12:18 GMT+00:00 802254");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "22 Feb 2022 07:12:18 GMT" + "'", str3, "22 Feb 2022 07:12:18 GMT");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-2-22 7:12:18" + "'", str5, "2022-2-22 7:12:18");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Feb 22 07:09:23 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05885");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Set<java.lang.String> strSet25 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet25.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet25.parallelStream();
        boolean boolean28 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.lang.Object[] objArray29 = languageRangeList13.toArray();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap30);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap32 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList31, strMap32);
        languageRangeList33.clear();
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale38, locale39, locale40, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale locale46 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.util.Locale>) localeList44);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale50, locale51, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList56);
        int int59 = languageRangeList36.lastIndexOf((java.lang.Object) languageRangeList48);
        boolean boolean60 = languageRangeList36.isEmpty();
        languageRangeList36.clear();
        java.util.Set<java.lang.String> strSet62 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream63 = strSet62.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream64 = strSet62.parallelStream();
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet62);
        java.lang.Object[] objArray66 = languageRangeList36.toArray();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor67 = languageRangeList36.iterator();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone71.hasSameRules(timeZone73);
        java.util.Locale locale75 = java.util.Locale.CHINA;
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone73, locale75);
        java.lang.String str77 = locale68.getDisplayName(locale75);
        java.util.Set<java.lang.String> strSet78 = locale75.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream79 = strSet78.parallelStream();
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, (java.util.Collection<java.lang.String>) strSet78, filteringMode80);
        boolean boolean82 = languageRangeList33.removeAll((java.util.Collection<java.lang.String>) strSet78);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(locale58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strStream63);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(languageRangeItor67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zh" + "'", str69, "zh");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar76);
// flaky:         org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1645513938941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=18,MILLISECOND=941,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u4e2d\u6587" + "'", str77, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode80.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test05886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05886");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder6 = builder2.setDate(15, (int) 'u', (int) ' ');
        java.util.Locale locale8 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale8);
        java.lang.Object obj10 = fastDateFormat9.clone();
        java.util.Date date11 = new java.util.Date();
        int int12 = date11.getTimezoneOffset();
        int int13 = date11.getSeconds();
        int int14 = date11.getMinutes();
        long long15 = date11.getTime();
        long long16 = date11.getTime();
        date11.setHours(122);
        java.lang.String str19 = fastDateFormat9.format(date11);
        java.util.TimeZone timeZone20 = fastDateFormat9.getTimeZone();
        java.util.Calendar.Builder builder21 = builder2.setTimeZone(timeZone20);
        java.lang.String str22 = timeZone20.getID();
        timeZone20.setRawOffset(8);
        java.lang.String str25 = timeZone20.getID();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("hi!");
        boolean boolean28 = timeZone20.hasSameRules(timeZone27);
        timeZone20.setID("Feb 22, 2022 7:06:51 AM");
        java.util.Locale locale31 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getISO3Country();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone20, locale31);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayCountry();
        java.lang.String str41 = locale37.getDisplayLanguage();
        java.lang.String str42 = locale37.getDisplayLanguage();
        java.lang.String str43 = locale37.toLanguageTag();
        java.lang.String str44 = locale36.getDisplayCountry(locale37);
        java.lang.String str45 = locale36.getCountry();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(25, (int) (byte) 0, timeZone20, locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 25");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 27 02:12:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645513939019L + "'", long15 == 1645513939019L);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645513939019L + "'", long16 == 1645513939019L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "02 h 12 UTC" + "'", str19, "02 h 12 UTC");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "28 Sep 1950 23:32:59 GMT" + "'", str22, "28 Sep 1950 23:32:59 GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "28 Sep 1950 23:32:59 GMT" + "'", str25, "28 Sep 1950 23:32:59 GMT");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645513939019,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Feb 22, 2022 7:06:51 AM\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=27,ZONE_OFFSET=8,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587" + "'", str41, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645513939020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=20,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05887");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = null;
        java.lang.String str5 = locale3.getDisplayCountry(locale4);
        java.lang.String str6 = locale3.getCountry();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test05888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05888");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        java.lang.String str13 = calendar6.getCalendarType();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(7);
        calendar27.set(16, (int) (byte) 0);
        int int33 = calendar27.getFirstDayOfWeek();
        java.lang.String str34 = fastDateFormat20.format(calendar27);
        calendar27.set((int) (short) 100, 37, 2);
        java.lang.String str39 = fastDateFormat16.format(calendar27);
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getTimezoneOffset();
        date40.setMinutes(6);
        int int44 = date40.getMinutes();
        java.util.Date date51 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean52 = date40.before(date51);
        java.util.Date date58 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        boolean boolean59 = date40.before(date58);
        boolean boolean60 = calendar27.after((java.lang.Object) date58);
        java.util.TimeZone timeZone61 = calendar27.getTimeZone();
        int int62 = timeZone61.getRawOffset();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        calendar72.clear(7);
        calendar72.set(16, (int) (byte) 0);
        int int78 = calendar72.getFirstDayOfWeek();
        java.lang.String str79 = fastDateFormat65.format(calendar72);
        java.util.TimeZone timeZone80 = calendar72.getTimeZone();
        java.util.Date date81 = new java.util.Date();
        int int82 = date81.getTimezoneOffset();
        java.util.Date date83 = new java.util.Date();
        java.lang.String str84 = date83.toGMTString();
        boolean boolean85 = date81.before(date83);
        boolean boolean86 = calendar72.after((java.lang.Object) date83);
        java.util.Date date87 = calendar72.getTime();
        java.util.TimeZone timeZone88 = calendar72.getTimeZone();
        boolean boolean89 = timeZone61.hasSameRules(timeZone88);
        calendar6.setTimeZone(timeZone88);
        timeZone88.setID("Jan 24, 1921 5:10:00 AM");
        boolean boolean93 = timeZone88.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Jan 24, 1921 5:10:00 AM\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "gregory" + "'", str13, "gregory");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-58914146860943,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str34, "7:12:19 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str39, "7:12:19 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Feb 22 07:06:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals(date58.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645513939058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Jan 24, 1921 5:10:00 AM\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str79, "7:12:19 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone80);
        org.junit.Assert.assertEquals(timeZone80.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date81.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
// flaky:         org.junit.Assert.assertEquals(date83.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "22 Feb 2022 07:12:19 GMT" + "'", str84, "22 Feb 2022 07:12:19 GMT");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(date87);
// flaky:         org.junit.Assert.assertEquals(date87.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeZone88);
        org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test05889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05889");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Date date4 = new java.util.Date();
        long long5 = date4.getTime();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getSeconds();
        int int9 = date6.getMinutes();
        long long10 = date6.getTime();
        java.lang.String str11 = date6.toLocaleString();
        boolean boolean12 = date4.before(date6);
        java.lang.String str13 = fastDateFormat2.format(date4);
        java.lang.StringBuffer stringBuffer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer16 = fastDateFormat2.format(1645513929905L, stringBuffer15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645513939099L + "'", long5 == 1645513939099L);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513939099L + "'", long10 == 1645513939099L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-2-22 7:12:19" + "'", str11, "2022-2-22 7:12:19");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "07 h 12 UTC" + "'", str13, "07 h 12 UTC");
    }

    @Test
    public void test05890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05890");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        int int7 = timeZone3.getOffset(1645513656868L);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone9.hasSameRules(timeZone11);
        boolean boolean13 = timeZone3.hasSameRules(timeZone9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        boolean boolean19 = timeZone9.hasSameRules(timeZone17);
        boolean boolean20 = timeZone17.observesDaylightTime();
        boolean boolean21 = timeZone17.observesDaylightTime();
        timeZone17.setID("it");
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone25.hasSameRules(timeZone27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone27);
        int int31 = timeZone27.getOffset(1645513656868L);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone33.hasSameRules(timeZone35);
        boolean boolean37 = timeZone27.hasSameRules(timeZone33);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone39.hasSameRules(timeZone41);
        boolean boolean43 = timeZone33.hasSameRules(timeZone41);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        boolean boolean49 = timeZone41.hasSameRules(timeZone46);
        boolean boolean50 = timeZone17.hasSameRules(timeZone46);
        java.lang.Object obj51 = timeZone17.clone();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645513939229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645513939229,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=229,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "sun.util.calendar.ZoneInfo[id=\"it\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "sun.util.calendar.ZoneInfo[id=\"it\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "sun.util.calendar.ZoneInfo[id=\"it\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05891");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        int int26 = languageRangeList1.size();
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor27 = languageRangeList1.iterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator28 = languageRangeList1.spliterator();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Set<java.lang.String> strSet32 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.parallelStream();
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet32);
        boolean boolean35 = languageRangeList30.isEmpty();
        boolean boolean36 = languageRangeList30.isEmpty();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getDay();
        boolean boolean39 = languageRangeList30.contains((java.lang.Object) int38);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.lang.String str41 = locale40.getISO3Language();
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleKeys();
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.lang.String>) strSet42);
        java.util.Locale locale45 = new java.util.Locale("7:09:32 AM GMT");
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        boolean boolean47 = languageRangeList30.retainAll((java.util.Collection<java.lang.String>) strSet46);
        java.text.AttributedCharacterIterator.Attribute attribute48 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = attribute48.equals((java.lang.Object) timeZone49);
        java.util.Locale.Category category51 = java.util.Locale.Category.FORMAT;
        boolean boolean52 = attribute48.equals((java.lang.Object) category51);
        java.util.Locale locale53 = java.util.Locale.getDefault(category51);
        boolean boolean54 = locale53.hasExtensions();
        java.util.Set<java.lang.String> strSet55 = locale53.getUnicodeLocaleKeys();
        boolean boolean56 = languageRangeList30.retainAll((java.util.Collection<java.lang.String>) strSet55);
        boolean boolean57 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet55);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor27);
        org.junit.Assert.assertNotNull(languageRangeSpliterator28);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "fra" + "'", str41, "fra");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertEquals(locale45.toString(), "7:09:32 am gmt");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(attribute48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.FORMAT + "'", category51.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05892");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(7200000);
        parsePosition1.setIndex(39);
        int int4 = parsePosition1.getIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 39 + "'", int4 == 39);
    }

    @Test
    public void test05893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05893");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone27.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        calendar32.clear(7);
        boolean boolean35 = calendar32.isWeekDateSupported();
        java.util.TimeZone timeZone36 = calendar32.getTimeZone();
        int int38 = calendar32.getMaximum(3);
        java.lang.String str39 = fastDateFormat2.format(calendar32);
        int int40 = calendar32.getWeekYear();
        boolean boolean41 = calendar32.isWeekDateSupported();
        calendar32.clear();
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale.LanguageRange languageRange46 = null;
        boolean boolean47 = languageRangeList44.add(languageRange46);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor48 = languageRangeList44.iterator();
        java.util.Set<java.lang.String> strSet49 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream50 = strSet49.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream51 = strSet49.parallelStream();
        boolean boolean52 = languageRangeList44.retainAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale locale54 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale55 = locale54.stripExtensions();
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        boolean boolean58 = languageRangeList44.contains((java.lang.Object) locale55);
        java.lang.String str59 = locale55.getCountry();
        java.util.Set<java.lang.String> strSet60 = locale55.getUnicodeLocaleKeys();
        boolean boolean61 = calendar32.after((java.lang.Object) locale55);
        calendar32.add(47, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = calendar32.getGreatestMinimum(101);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146860562,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=438,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str20, "7:12:19 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str25, "7:12:19 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 53 + "'", int38 == 53);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str39, "7:12:19 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(languageRangeItor48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals(locale54.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test05894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05894");
        java.util.Locale locale1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:09:24 AM GMT+00:00", locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05895");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str4 = fastDateFormat2.toString();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone6 = fastDateFormat2.getTimeZone();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Locale locale15 = new java.util.Locale("", "hi!", "");
        java.lang.String str16 = locale11.getDisplayVariant(locale15);
        java.lang.String str17 = locale9.getDisplayVariant(locale11);
        java.lang.String str18 = locale9.getScript();
        java.util.Set<java.lang.String> strSet19 = locale9.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = timeZone6.getDisplayName(false, 19, locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 19");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale15.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test05896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05896");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.lang.String str9 = locale4.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale4);
        java.util.Date date11 = calendar10.getTime();
        calendar10.setLenient(true);
        int int15 = calendar10.getActualMaximum(12);
        java.lang.String str16 = fastDateFormat2.format(calendar10);
        java.util.Date date18 = new java.util.Date(1645513662388L);
        int int19 = date18.getHours();
        int int20 = date18.getDay();
        java.lang.String str21 = fastDateFormat2.format(date18);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[]" + "'", str3, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513939506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 59 + "'", int15 == 59);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(date18.toString(), "Tue Feb 22 07:07:42 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test05897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05897");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Locale locale9 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = locale0.getDisplayName(locale9);
        boolean boolean12 = locale0.hasExtensions();
        java.lang.String str13 = locale0.getDisplayVariant();
        java.lang.String str14 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "China" + "'", str5, "China");
        org.junit.Assert.assertEquals(locale9.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinese (China)" + "'", str11, "Chinese (China)");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test05898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05898");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.toString();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        int int27 = calendar21.getFirstDayOfWeek();
        java.lang.String str28 = fastDateFormat14.format(calendar21);
        calendar21.set((int) (short) 100, 37, 2);
        java.lang.String str33 = fastDateFormat10.format(calendar21);
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(16);
        parsePosition36.setErrorIndex(5);
        parsePosition36.setErrorIndex(1);
        java.lang.Object obj41 = fastDateFormat10.parseObject("\u4e2d\u6587\u4e2d\u56fd)", parsePosition36);
        java.lang.String str42 = parsePosition36.toString();
        java.lang.Object obj43 = fastDateFormat2.parseObject("7:08:05 AM GMT+00:00", parsePosition36);
        java.lang.Object obj44 = fastDateFormat2.clone();
        java.util.TimeZone timeZone45 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone48);
        java.lang.String str50 = fastDateFormat49.toString();
        boolean boolean51 = fastDateFormat49.getTimeZoneOverridesCalendar();
        java.lang.String str52 = fastDateFormat49.getPattern();
        java.lang.String str54 = fastDateFormat49.format(1645513657001L);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone59.hasSameRules(timeZone61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone61);
        java.util.TimeZone timeZone64 = calendar63.getTimeZone();
        calendar63.set(5, 16);
        boolean boolean68 = parsePosition57.equals((java.lang.Object) 5);
        java.lang.Object obj69 = fastDateFormat49.parseObject("2022-02-22 08:37:55", parsePosition57);
        parsePosition57.setIndex(54);
        int int72 = parsePosition57.getIndex();
        java.lang.Object obj73 = fastDateFormat2.parseObject("6:43:10 PM UTC", parsePosition57);
        java.util.Date date75 = new java.util.Date(1645513783982L);
        java.lang.StringBuffer stringBuffer76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer77 = fastDateFormat2.format(date75, stringBuffer76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-58914146860432,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=568,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str28, "7:12:19 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str33, "7:12:19 AM GMT+00:00");
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str42, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str50, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "h:mm:ss a z" + "'", str52, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "7:07:37 AM GMT+00:00" + "'", str54, "7:07:37 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=568,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 54 + "'", int72 == 54);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertEquals(date75.toString(), "Tue Feb 22 07:09:43 GMT+00:00 2022");
    }

    @Test
    public void test05899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05899");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        java.util.Locale locale26 = fastDateFormat2.getLocale();
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleKeys();
        java.lang.String str28 = locale26.toString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-58914146860403,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=597,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str20, "7:12:19 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str25, "7:12:19 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en_US" + "'", str28, "en_US");
    }

    @Test
    public void test05900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05900");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder21 = builder19.setLenient(false);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale23);
        java.lang.Object obj25 = fastDateFormat24.clone();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        int int28 = date26.getSeconds();
        int int29 = date26.getMinutes();
        long long30 = date26.getTime();
        long long31 = date26.getTime();
        date26.setHours(122);
        java.lang.String str34 = fastDateFormat24.format(date26);
        java.util.TimeZone timeZone35 = fastDateFormat24.getTimeZone();
        java.util.Calendar.Builder builder36 = builder21.setTimeZone(timeZone35);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder38 = builder21.setInstant(1645513790140L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 19 + "'", int2 == 19);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "FastDateFormat[HH' h 'mm z]");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Sun Feb 27 02:12:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513939609L + "'", long30 == 1645513939609L);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513939609L + "'", long31 == 1645513939609L);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "02 h 12 UTC" + "'", str34, "02 h 12 UTC");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test05901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05901");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.addUnicodeLocaleAttribute("CAN");
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder6 = builder4.setScript("");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = builder6.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test05902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05902");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(33, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05903");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        java.util.Locale locale12 = new java.util.Locale("7:07:39 AM UTC", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]", "");
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone8);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayVariant();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        java.time.Instant instant39 = calendar33.toInstant();
        boolean boolean41 = calendar33.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str42 = fastDateFormat26.format(calendar33);
        java.lang.Object obj43 = fastDateFormat26.clone();
        java.util.Locale locale44 = fastDateFormat26.getLocale();
        java.lang.String str45 = locale44.getLanguage();
        java.util.Locale locale46 = null;
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.lang.String str52 = locale48.getDisplayLanguage();
        java.lang.String str53 = locale48.getDisplayLanguage();
        java.lang.String str54 = locale44.getDisplayLanguage(locale48);
        java.lang.String str55 = locale20.getDisplayCountry(locale48);
        java.lang.String str56 = locale20.getDisplayName();
        java.util.Set<java.lang.String> strSet57 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale60 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "zho");
        java.lang.String str61 = locale20.getDisplayCountry(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone8, locale20);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = calendar62.getMaximum((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513939651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale12.toString(), "7:07:39 am utc_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513939651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645513939651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645513939651,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u6587" + "'", str52, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u4e2d\u6587" + "'", str53, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u6587" + "'", str54, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u56fd" + "'", str55, "\u4e2d\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str56, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertEquals(locale60.toString(), "feb 22, 2022 7:07:42 am_ZHO");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "China" + "'", str61, "China");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1645513939651,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=651,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05904");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getSeconds();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getTimezoneOffset();
        date24.setMinutes(6);
        boolean boolean28 = date22.after(date24);
        java.util.Calendar.Builder builder29 = builder21.setInstant(date24);
        java.util.Calendar.Builder builder31 = builder29.setInstant((long) 36);
        java.util.Calendar.Builder builder33 = builder31.setLenient(true);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.lang.String str36 = locale35.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale35.getDisplayName(locale38);
        java.lang.String str40 = locale35.getDisplayCountry();
        java.lang.String str41 = locale35.getDisplayScript();
        java.util.Calendar.Builder builder42 = builder31.setLocale(locale35);
        java.util.Locale locale43 = null;
        java.lang.String str44 = locale35.getDisplayVariant(locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10, locale35);
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone48);
        java.lang.String str50 = fastDateFormat49.toString();
        boolean boolean51 = fastDateFormat49.getTimeZoneOverridesCalendar();
        java.lang.String str52 = fastDateFormat49.toString();
        java.lang.Object obj53 = fastDateFormat49.clone();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone56);
        java.lang.String str58 = fastDateFormat57.toString();
        boolean boolean59 = fastDateFormat57.getTimeZoneOverridesCalendar();
        java.lang.String str60 = fastDateFormat57.getPattern();
        java.lang.String str62 = fastDateFormat57.format(1645513657001L);
        java.text.ParsePosition parsePosition65 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone69);
        java.util.TimeZone timeZone72 = calendar71.getTimeZone();
        calendar71.set(5, 16);
        boolean boolean76 = parsePosition65.equals((java.lang.Object) 5);
        java.lang.Object obj77 = fastDateFormat57.parseObject("2022-02-22 08:37:55", parsePosition65);
        parsePosition65.setIndex(54);
        java.lang.Object obj80 = fastDateFormat49.parseObject("chinese (china) (JAVA.UTIL.GREGORIANCALENDAR[TIME=1645513665356,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\",OFFSET=0,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=7,SECOND=45,MILLISECOND=356,ZONE_OFFSET=0,DST_OFFSET=0])", parsePosition65);
        java.lang.Object obj81 = fastDateFormat45.parseObject("22 Feb 2022 07:09:12 GMT", parsePosition65);
        parsePosition65.setErrorIndex((int) 'x');
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513939678,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=678,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 07:12:19 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Tue Feb 22 07:06:19 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fra" + "'", str36, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str39, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u6cd5\u56fd" + "'", str40, "\u6cd5\u56fd");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str50, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str52, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str58, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "h:mm:ss a z" + "'", str60, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "7:07:37 AM GMT+00:00" + "'", str62, "7:07:37 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=678,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(obj77);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNull(obj81);
    }

    @Test
    public void test05905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05905");
        java.util.Locale locale2 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.getScript();
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.lang.String str9 = locale2.getDisplayVariant(locale8);
        java.util.Set<java.lang.Character> charSet10 = locale2.getExtensionKeys();
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleKeys();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getISO3Country();
        java.lang.String str15 = locale2.getDisplayLanguage(locale11);
        java.lang.String str17 = locale2.getExtension('x');
        java.util.Locale locale20 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale24 = new java.util.Locale("", "hi!", "");
        java.lang.String str25 = locale20.getDisplayCountry(locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 3, locale20);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale.Builder builder29 = builder27.clear();
        java.util.Locale locale30 = builder27.build();
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale20.getDisplayName(locale30);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.toString();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.CHINA;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        calendar46.clear(7);
        calendar46.set(16, (int) (byte) 0);
        int int52 = calendar46.getFirstDayOfWeek();
        java.lang.String str53 = fastDateFormat39.format(calendar46);
        calendar46.set((int) (short) 100, 37, 2);
        java.lang.String str58 = fastDateFormat35.format(calendar46);
        java.util.TimeZone timeZone59 = fastDateFormat35.getTimeZone();
        java.util.Locale locale60 = fastDateFormat35.getLocale();
        java.lang.String str61 = locale20.getDisplayScript(locale60);
        java.util.Locale locale62 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale66 = new java.util.Locale("", "hi!", "");
        java.lang.String str67 = locale62.getDisplayCountry(locale66);
        java.lang.String str68 = locale62.toLanguageTag();
        java.lang.String str69 = locale62.getScript();
        java.lang.String str71 = locale62.getExtension('a');
        java.lang.String str72 = locale62.getScript();
        java.lang.String str73 = locale20.getDisplayLanguage(locale62);
        java.util.Locale locale74 = locale62.stripExtensions();
        java.lang.String str75 = locale2.getDisplayVariant(locale62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e0a\u5348 GMT+00:00", locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "7:07:37 am utc" + "'", str15, "7:07:37 am utc");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale24.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "China" + "'", str25, "China");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese (China)" + "'", str32, "Chinese (China)");
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str36, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=-58914146860277,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=723,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str53, "7:12:19 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str58, "7:12:19 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale66.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "China" + "'", str67, "China");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "zh-CN" + "'", str68, "zh-CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u4e2d\u6587" + "'", str73, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test05906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05906");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        java.lang.String str8 = fastDateFormat6.toString();
        java.lang.String str9 = fastDateFormat6.getPattern();
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        parsePosition12.setErrorIndex(5);
        int int15 = parsePosition12.getErrorIndex();
        java.lang.Object obj16 = fastDateFormat6.parseObject("7:07:41 AM UTC", parsePosition12);
        java.lang.Object obj17 = fastDateFormat2.parseObject("h:mm:ss a z", parsePosition12);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone22.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.CHINA;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(7);
        calendar27.set(16, (int) (byte) 0);
        int int33 = calendar27.getFirstDayOfWeek();
        java.lang.String str34 = fastDateFormat20.format(calendar27);
        calendar27.clear(7);
        calendar27.set(0, 0, (int) (short) 0, 122, 2, 5);
        calendar27.set(3, 38, 0, (int) (byte) 100, 36);
        calendar27.roll(13, true);
        int int54 = calendar27.getGreatestMinimum(14);
        long long55 = calendar27.getTimeInMillis();
        boolean boolean56 = calendar27.isWeekDateSupported();
        int int57 = calendar27.getWeekYear();
        java.lang.String str58 = fastDateFormat2.format((java.lang.Object) calendar27);
        java.lang.String str59 = calendar27.getCalendarType();
        java.util.TimeZone timeZone60 = null;
        calendar27.setTimeZone(timeZone60);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "h:mm:ss a z" + "'", str7, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str8, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "h:mm:ss a z" + "'", str9, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=-61972629833252,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=63,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=36,SECOND=6,MILLISECOND=748,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "7:12:19 AM GMT+00:00" + "'", str34, "7:12:19 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-61972629833252L) + "'", long55 == (-61972629833252L));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 6 + "'", int57 == 6);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "gregory" + "'", str59, "gregory");
    }

    @Test
    public void test05907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05907");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("22 Feb 2022 07:06:18 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05908");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        timeZone1.setID("fra");
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone1.hasSameRules(timeZone8);
        timeZone8.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone8);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.lang.String str17 = locale13.getDisplayLanguage();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone8, locale13);
        java.util.Locale locale21 = new java.util.Locale("February 22, 2022");
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone8, locale21);
        int int24 = timeZone8.getOffset((-1827569400000L));
        boolean boolean25 = timeZone8.observesDaylightTime();
        int int26 = timeZone8.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645513939897,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=966,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale21.toString(), "february 22, 2022");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513939897,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=966,ZONE_OFFSET=69,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 69 + "'", int24 == 69);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test05909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05909");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str6 = locale5.getDisplayScript();
        boolean boolean7 = locale5.hasExtensions();
        java.util.Locale locale8 = locale5.stripExtensions();
        java.util.Locale.setDefault(category0, locale5);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale5);
        // The following exception was thrown during execution in test generation
        try {
            calendar10.roll(17, 53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513939924,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=924,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05910");
        java.util.Date date5 = new java.util.Date(17, 47, 55, 5, (int) (short) 10);
        java.lang.String str6 = date5.toLocaleString();
        int int7 = date5.getSeconds();
        int int8 = date5.getTimezoneOffset();
        date5.setHours(40);
        int int11 = date5.getTimezoneOffset();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        java.time.Instant instant27 = calendar21.toInstant();
        boolean boolean29 = calendar21.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str30 = fastDateFormat14.format(calendar21);
        java.lang.String str31 = calendar21.getCalendarType();
        boolean boolean32 = calendar21.isWeekDateSupported();
        java.time.Instant instant33 = calendar21.toInstant();
        java.util.Date date34 = java.util.Date.from(instant33);
        date34.setHours(30);
        java.lang.String str37 = date34.toLocaleString();
        int int38 = date5.compareTo(date34);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jan 25 16:10:00 GMT+00:00 1921");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Jan 24, 1921 5:10:00 AM" + "'", str6, "Jan 24, 1921 5:10:00 AM");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645513939952,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=19,MILLISECOND=952,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "gregory" + "'", str31, "gregory");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Wed Feb 23 06:12:19 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Feb 23, 2022 6:12:19 AM" + "'", str37, "Feb 23, 2022 6:12:19 AM");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test05911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05911");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale0);
        calendar6.set(13, 32772, (int) (byte) 10, (int) (byte) 0, 0);
        calendar6.add(13, 0);
        int int17 = calendar6.getActualMinimum(0);
        calendar6.clear();
        calendar6.set(999, 15, (-1899), 58, 0, 0);
        calendar6.set(54, 51, 69, 29, 123);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=54,MONTH=51,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=69,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=29,MINUTE=123,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test05912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05912");
        java.util.Date date6 = new java.util.Date(27, 1910, 11, 2022, 50400000, 101);
        int int7 = date6.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Apr 01 06:01:41 GMT+00:00 2182");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
    }

    @Test
    public void test05913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05913");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        java.util.Date date27 = new java.util.Date();
        java.lang.String str28 = date27.toGMTString();
        boolean boolean29 = date25.before(date27);
        int int30 = date25.getHours();
        java.lang.String str31 = date25.toGMTString();
        int int32 = date25.getDay();
        boolean boolean33 = languageRangeList13.remove((java.lang.Object) date25);
        java.lang.Object[] objArray34 = languageRangeList13.toArray();
        org.apache.commons.lang3.time.FastDateFormat[] fastDateFormatArray35 = new org.apache.commons.lang3.time.FastDateFormat[] {};
        org.apache.commons.lang3.time.FastDateFormat[] fastDateFormatArray36 = languageRangeList13.toArray(fastDateFormatArray35);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor37 = languageRangeList13.listIterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22 Feb 2022 07:12:20 GMT" + "'", str28, "22 Feb 2022 07:12:20 GMT");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "22 Feb 2022 07:12:20 GMT" + "'", str31, "22 Feb 2022 07:12:20 GMT");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(fastDateFormatArray35);
        org.junit.Assert.assertNotNull(fastDateFormatArray36);
        org.junit.Assert.assertNotNull(languageRangeItor37);
    }

    @Test
    public void test05914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05914");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645513692198,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=8,SECOND=12,MILLISECOND=198,ZONE_OFFSET=0,DST_OFFSET=0]");
        timeZone1.setID("java.util.GregorianCalendar[time=1645513823671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=7,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=23,MILLISECOND=678,ZONE_OFFSET=7,DST_OFFSET=0]");
        java.util.Date date5 = new java.util.Date((long) 11);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        date6.setYear(0);
        java.lang.String str11 = date6.toGMTString();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        int int27 = calendar21.getFirstDayOfWeek();
        java.lang.String str28 = fastDateFormat14.format(calendar21);
        java.util.TimeZone timeZone29 = calendar21.getTimeZone();
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        java.util.Date date32 = new java.util.Date();
        java.lang.String str33 = date32.toGMTString();
        boolean boolean34 = date30.before(date32);
        boolean boolean35 = calendar21.after((java.lang.Object) date32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone37.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.CHINA;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39, locale41);
        calendar42.clear(7);
        calendar42.set(16, (int) (byte) 0);
        java.time.Instant instant48 = calendar42.toInstant();
        java.util.Date date49 = java.util.Date.from(instant48);
        boolean boolean50 = date32.before(date49);
        int int51 = date32.getMinutes();
        int int52 = date32.getDay();
        java.time.Instant instant53 = date32.toInstant();
        boolean boolean54 = date6.before(date32);
        boolean boolean55 = date5.before(date6);
        boolean boolean56 = timeZone1.inDaylightTime(date6);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 22 07:12:20 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645513940248L + "'", long8 == 1645513940248L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22 Feb 1900 07:12:20 GMT" + "'", str11, "22 Feb 1900 07:12:20 GMT");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645513940248,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=248,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str28, "7:12:20 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22 Feb 2022 07:12:20 GMT" + "'", str33, "22 Feb 2022 07:12:20 GMT");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645513940248,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=248,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 12 + "'", int51 == 12);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test05915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05915");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        boolean boolean14 = calendar6.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        calendar6.set(38, 0, 15, 24228570, 0, 32770);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=38,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=15,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=24228570,MINUTE=0,SECOND=32770,MILLISECOND=291,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test05916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05916");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.roll(0, 41);
        java.lang.String str20 = calendar9.toString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=319,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str16, "7:12:20 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=319,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str20, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=319,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05917");
        java.util.Locale locale1 = new java.util.Locale("7:10:57 AM GMT+00:00");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for 7:10:57 am gmt+00:00");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "7:10:57 am gmt+00:00");
    }

    @Test
    public void test05918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05918");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList1.iterator();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone28.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        calendar33.clear(7);
        calendar33.set(16, (int) (byte) 0);
        int int39 = calendar33.getFirstDayOfWeek();
        java.lang.String str40 = fastDateFormat26.format(calendar33);
        calendar33.set((int) (short) 100, 37, 2);
        java.lang.String str45 = fastDateFormat22.format(calendar33);
        java.util.Locale locale46 = fastDateFormat22.getLocale();
        boolean boolean47 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.String str48 = fastDateFormat22.getPattern();
        boolean boolean49 = languageRangeList1.remove((java.lang.Object) fastDateFormat22);
        boolean boolean50 = languageRangeList1.isEmpty();
        java.util.Locale locale54 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str55 = locale54.getDisplayCountry();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale54);
        int int57 = calendar56.getFirstDayOfWeek();
        boolean boolean58 = languageRangeList1.remove((java.lang.Object) calendar56);
        java.util.TimeZone timeZone60 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone60);
        java.lang.String str62 = fastDateFormat61.toString();
        java.util.TimeZone timeZone64 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone67.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        calendar72.clear(7);
        calendar72.set(16, (int) (byte) 0);
        int int78 = calendar72.getFirstDayOfWeek();
        java.lang.String str79 = fastDateFormat65.format(calendar72);
        calendar72.set((int) (short) 100, 37, 2);
        java.lang.String str84 = fastDateFormat61.format(calendar72);
        java.util.Locale locale85 = fastDateFormat61.getLocale();
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleKeys();
        boolean boolean87 = languageRangeList1.removeAll((java.util.Collection<java.lang.String>) strSet86);
        boolean boolean88 = languageRangeList1.isEmpty();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator89 = languageRangeList1.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor91 = languageRangeList1.listIterator(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 43");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str23, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=-58914146859662,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=338,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str40, "7:12:20 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str45, "7:12:20 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "h:mm:ss a z" + "'", str48, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals(locale54.toString(), "feb 22, 2022 7:07:42 am_22 FEB 2022 07:07:38 GMT_22 Feb 2022 07:07:44 GMT");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "22 FEB 2022 07:07:38 GMT" + "'", str55, "22 FEB 2022 07:07:38 GMT");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645513940338,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=338,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str62, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat65);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-58914146859662,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=338,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str79, "7:12:20 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str84, "7:12:20 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(languageRangeSpliterator89);
    }

    @Test
    public void test05919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05919");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1910, 56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 56");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05920");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        boolean boolean14 = calendar6.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        int int20 = timeZone16.getOffset(1645513657024L);
        timeZone16.setID("fra");
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone16.hasSameRules(timeZone23);
        timeZone23.setRawOffset(69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(2, timeZone23);
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getSeconds();
        int int30 = date28.getSeconds();
        int int31 = date28.getSeconds();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        java.util.Date date34 = new java.util.Date();
        java.lang.String str35 = date34.toGMTString();
        boolean boolean36 = date32.before(date34);
        long long37 = date34.getTime();
        boolean boolean38 = date28.after(date34);
        java.lang.String str39 = fastDateFormat27.format(date28);
        calendar6.setTime(date28);
        int int42 = calendar6.getLeastMaximum(0);
        java.lang.String str43 = calendar6.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            calendar6.roll(21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513940393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=393,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 20 + "'", int30 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 20 + "'", int31 == 20);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "22 Feb 2022 07:12:20 GMT" + "'", str35, "22 Feb 2022 07:12:20 GMT");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645513940393L + "'", long37 == 1645513940393L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7.12.20" + "'", str39, "7.12.20");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "gregory" + "'", str43, "gregory");
    }

    @Test
    public void test05921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05921");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getISO3Language();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        calendar22.clear(7);
        calendar22.set(16, (int) (byte) 0);
        java.time.Instant instant28 = calendar22.toInstant();
        boolean boolean30 = calendar22.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str31 = fastDateFormat15.format(calendar22);
        java.lang.Object obj32 = fastDateFormat15.clone();
        java.util.Locale locale33 = fastDateFormat15.getLocale();
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale33.getDisplayName();
        java.lang.String str36 = locale6.getDisplayCountry(locale33);
        java.lang.String str37 = locale4.getDisplayCountry(locale6);
        java.util.Calendar.Builder builder38 = new java.util.Calendar.Builder();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getSeconds();
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getTimezoneOffset();
        date41.setMinutes(6);
        boolean boolean45 = date39.after(date41);
        java.util.Calendar.Builder builder46 = builder38.setInstant(date41);
        java.util.Calendar.Builder builder48 = builder46.setInstant((long) 36);
        java.util.Calendar.Builder builder52 = builder48.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder56 = builder48.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder60 = builder56.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone63.hasSameRules(timeZone64);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone64.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone66, locale68);
        java.lang.String str70 = locale61.getDisplayName(locale68);
        java.util.Locale locale71 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.lang.String str73 = locale68.getDisplayName(locale71);
        java.lang.String str74 = locale68.getISO3Language();
        java.lang.String str75 = locale68.getVariant();
        java.util.Calendar.Builder builder76 = builder60.setLocale(locale68);
        java.lang.String str77 = locale6.getDisplayScript(locale68);
        java.util.Locale locale79 = new java.util.Locale("7:08:16 AM UTC");
        java.lang.String str80 = locale68.getDisplayCountry(locale79);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "China" + "'", str5, "China");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513940413,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=413,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "_1/1/70 12:00 AM");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1/1/70 12:00 AM" + "'", str35, "1/1/70 12:00 AM");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "China" + "'", str36, "China");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "HI!" + "'", str37, "HI!");
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 20 + "'", int40 == 20);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Tue Feb 22 07:06:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645513940413,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=413,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u4e2d\u6587" + "'", str70, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str73, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "zho" + "'", str74, "zho");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals(locale79.toString(), "7:08:16 am utc");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "China" + "'", str80, "China");
    }

    @Test
    public void test05922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05922");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        languageRangeList1.clear();
        java.text.FieldPosition fieldPosition8 = new java.text.FieldPosition(28);
        boolean boolean9 = languageRangeList1.remove((java.lang.Object) fieldPosition8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale13, locale14, locale15, locale16, locale17 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList31);
        int int34 = languageRangeList11.lastIndexOf((java.lang.Object) languageRangeList23);
        java.util.Set<java.lang.String> strSet35 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.parallelStream();
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.lang.String>) strSet35, filteringMode37);
        java.util.stream.Stream<java.lang.String> strStream39 = strList38.parallelStream();
        boolean boolean40 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strList38);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor41 = languageRangeList1.listIterator();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(16);
        int int44 = parsePosition43.getErrorIndex();
        java.lang.String str45 = parsePosition43.toString();
        boolean boolean47 = parsePosition43.equals((java.lang.Object) "22 Feb 2022 07:07:46 GMT");
        int int48 = parsePosition43.getIndex();
        int int49 = parsePosition43.getErrorIndex();
        int int50 = languageRangeList1.indexOf((java.lang.Object) int49);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        int int55 = timeZone51.getOffset(1645513657024L);
        timeZone51.setID("fra");
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone51.hasSameRules(timeZone58);
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        boolean boolean62 = locale60.hasExtensions();
        java.lang.String str63 = locale60.getDisplayCountry();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone51, locale60);
        int int65 = calendar64.getMinimalDaysInFirstWeek();
        calendar64.set((int) '#', 45, (int) (short) 1, 36, 11);
        calendar64.setMinimalDaysInFirstWeek(0);
        boolean boolean74 = languageRangeList1.remove((java.lang.Object) calendar64);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor76 = languageRangeList1.listIterator((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeItor41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str45, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh" + "'", str61, "zh");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=35,MONTH=45,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=36,MINUTE=11,SECOND=20,MILLISECOND=445,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test05923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05923");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str5 = fastDateFormat2.format((long) '#');
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone7.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9, locale11);
        calendar12.clear(7);
        calendar12.set(16, (int) (byte) 0);
        int int18 = calendar12.getWeeksInWeekYear();
        java.util.Date date24 = new java.util.Date(58, 41, 39, 31, 41);
        calendar12.setTime(date24);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        int int28 = date26.getSeconds();
        int int29 = date26.getMinutes();
        long long30 = date26.getTime();
        java.lang.String str31 = date26.toLocaleString();
        boolean boolean32 = date24.before(date26);
        boolean boolean33 = fastDateFormat2.equals((java.lang.Object) boolean32);
        java.util.Date date35 = new java.util.Date(1645513662388L);
        date35.setYear(11);
        date35.setTime((long) 58);
        java.lang.String str40 = date35.toGMTString();
        date35.setHours(53);
        int int43 = date35.getDay();
        java.lang.String str44 = fastDateFormat2.format(date35);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str5, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-267553140000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1961,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=191,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=41,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertEquals(date24.toString(), "Mon Jul 10 07:41:00 GMT+00:00 1961");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645513940479L + "'", long30 == 1645513940479L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Feb 22, 2022 7:12:20 AM" + "'", str31, "Feb 22, 2022 7:12:20 AM");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals(date35.toString(), "Sat Jan 03 05:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str40, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "5:00:00 AM GMT+00:00" + "'", str44, "5:00:00 AM GMT+00:00");
    }

    @Test
    public void test05924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05924");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder18 = builder10.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Calendar.Builder builder27 = builder18.setTimeOfDay(39, (int) (byte) 100, 42, 52);
        java.util.Calendar.Builder builder31 = builder18.setDate(18, 59, 17);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getSeconds();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        date35.setMinutes(6);
        boolean boolean39 = date33.after(date35);
        java.util.Calendar.Builder builder40 = builder32.setInstant(date35);
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 36);
        java.util.Calendar.Builder builder46 = builder42.setWeekDate(2, 0, 2022);
        int[] intArray47 = new int[] {};
        java.util.Calendar.Builder builder48 = builder42.setFields(intArray47);
        java.util.Calendar.Builder builder49 = builder18.setFields(intArray47);
        java.util.Calendar calendar50 = builder18.build();
        int int52 = calendar50.getMinimum(3);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = calendar50.getGreatestMinimum(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32772");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Feb 22 07:06:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=-61442695157948,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=22,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=352,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=40,SECOND=42,MILLISECOND=52,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test05925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05925");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = fastDateFormat4.getMaxLengthEstimate();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        java.time.Instant instant19 = calendar13.toInstant();
        int int20 = calendar13.getMinimalDaysInFirstWeek();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        calendar13.add((int) (short) 0, 100);
        calendar13.setMinimalDaysInFirstWeek(38);
        long long27 = calendar13.getTimeInMillis();
        java.lang.String str28 = fastDateFormat4.format(calendar13);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone32.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.CHINA;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.lang.String str38 = locale29.getDisplayName(locale36);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone41.hasSameRules(timeZone43);
        java.util.Locale locale46 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale47 = locale46.stripExtensions();
        java.lang.String str48 = locale46.getScript();
        java.util.Locale locale52 = new java.util.Locale("", "hi!", "");
        java.lang.String str53 = locale46.getDisplayVariant(locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone41, locale52);
        java.lang.String str55 = locale52.getDisplayCountry();
        java.lang.String str56 = locale52.getVariant();
        java.lang.String str57 = locale36.getDisplayCountry(locale52);
        boolean boolean58 = calendar13.after((java.lang.Object) locale36);
        java.util.Date date59 = calendar13.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar13.set((int) '#', 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 23 + "'", int5 == 23);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "h:mm:ss a z" + "'", str6, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513940541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=38,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=541,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645513940541L + "'", long27 == 1645513940541L);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str28, "7:12:20 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh" + "'", str30, "zh");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513940541,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=541,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u4e2d\u6587" + "'", str38, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals(locale46.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals(locale52.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "HI!" + "'", str55, "HI!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "China" + "'", str57, "China");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(date59);
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
    }

    @Test
    public void test05926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05926");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        timeZone7.setID("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayVariant();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone20);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone23.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        calendar28.clear(7);
        calendar28.set(16, (int) (byte) 0);
        java.time.Instant instant34 = calendar28.toInstant();
        boolean boolean36 = calendar28.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str37 = fastDateFormat21.format(calendar28);
        java.lang.Object obj38 = fastDateFormat21.clone();
        java.util.Locale locale39 = fastDateFormat21.getLocale();
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayCountry();
        java.lang.String str47 = locale43.getDisplayLanguage();
        java.lang.String str48 = locale43.getDisplayLanguage();
        java.lang.String str49 = locale39.getDisplayLanguage(locale43);
        java.lang.String str50 = locale15.getDisplayCountry(locale43);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(locale43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("Feb 22, 2022 7:10:34 AM", timeZone7, locale43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513940592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513940592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645513940592,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "_1/1/70 12:00 AM");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh" + "'", str44, "zh");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese" + "'", str47, "Chinese");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese" + "'", str48, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u4e2d\u56fd" + "'", str50, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645513940592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05927");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale9 = java.util.Locale.FRANCE;
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale8, locale9, locale10, locale11, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.Locale locale16 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14, filteringMode17);
        java.util.Locale.LanguageRange languageRange20 = null;
        languageRangeList1.add(0, languageRange20);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray30 = new java.util.Locale[] { locale25, locale26, locale27, locale28, locale29 };
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.Locale locale33 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray42 = new java.util.Locale[] { locale37, locale38, locale39, locale40, locale41 };
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList43);
        int int46 = languageRangeList23.lastIndexOf((java.lang.Object) languageRangeList35);
        int int48 = languageRangeList35.indexOf((java.lang.Object) '4');
        java.util.Date date49 = new java.util.Date();
        int int50 = date49.getSeconds();
        int int51 = date49.getSeconds();
        int int52 = languageRangeList35.indexOf((java.lang.Object) date49);
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale57 = new java.util.Locale("", "hi!", "");
        java.lang.String str58 = locale53.getDisplayCountry(locale57);
        java.lang.String str59 = locale53.toLanguageTag();
        boolean boolean60 = languageRangeList35.equals((java.lang.Object) str59);
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleKeys();
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet62);
        boolean boolean64 = languageRangeList1.removeAll((java.util.Collection<java.lang.String>) strList63);
        languageRangeList1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor67 = languageRangeList1.listIterator(292269054);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 292269054");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(locale16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode17.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20 + "'", int50 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale57.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "China" + "'", str58, "China");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-CN" + "'", str59, "zh-CN");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05928");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setLenient(false);
        int int4 = calendar0.getMaximum(12);
        boolean boolean5 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645513940658,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=658,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 59 + "'", int4 == 59);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test05929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05929");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone6 = calendar5.getTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        int int11 = timeZone7.getOffset(1645513657024L);
        timeZone7.setID("fra");
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone7.hasSameRules(timeZone14);
        boolean boolean16 = timeZone6.hasSameRules(timeZone14);
        java.util.TimeZone.setDefault(timeZone6);
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getSeconds();
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getTimezoneOffset();
        date21.setMinutes(6);
        boolean boolean25 = date19.after(date21);
        java.util.Calendar.Builder builder26 = builder18.setInstant(date21);
        java.util.Calendar.Builder builder28 = builder26.setInstant((long) 36);
        java.util.Calendar.Builder builder30 = builder28.setLenient(true);
        java.util.Calendar.Builder builder32 = builder30.setLenient(false);
        java.text.AttributedCharacterIterator.Attribute attribute33 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = attribute33.equals((java.lang.Object) timeZone34);
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale37);
        java.lang.Object obj39 = fastDateFormat38.clone();
        boolean boolean40 = attribute33.equals(obj39);
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getSeconds();
        java.util.Date date43 = new java.util.Date();
        int int44 = date43.getTimezoneOffset();
        date43.setMinutes(6);
        boolean boolean47 = date41.after(date43);
        date41.setHours((int) (short) 100);
        int int50 = date41.getMinutes();
        boolean boolean51 = attribute33.equals((java.lang.Object) date41);
        java.util.Calendar.Builder builder52 = builder30.setInstant(date41);
        boolean boolean53 = timeZone6.inDaylightTime(date41);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645513940665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=665,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:06:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(attribute33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sat Feb 26 04:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Tue Feb 22 07:06:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test05930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05930");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        int int26 = languageRangeList1.size();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap27);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        java.lang.String str32 = fastDateFormat31.toString();
        boolean boolean33 = fastDateFormat31.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone34 = fastDateFormat31.getTimeZone();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Locale locale39 = new java.util.Locale("", "hi!", "");
        java.lang.String str40 = locale35.getDisplayVariant(locale39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale35);
        java.util.Date date42 = calendar41.getTime();
        calendar41.clear();
        java.util.TimeZone timeZone44 = calendar41.getTimeZone();
        timeZone44.setRawOffset(8);
        boolean boolean47 = timeZone44.observesDaylightTime();
        timeZone44.setRawOffset(292278994);
        boolean boolean50 = timeZone34.hasSameRules(timeZone44);
        boolean boolean51 = languageRangeList1.remove((java.lang.Object) boolean50);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60, locale62);
        java.lang.String str64 = locale62.getDisplayVariant();
        boolean boolean65 = locale62.hasExtensions();
        java.lang.String str66 = locale53.getDisplayLanguage(locale62);
        java.lang.String str67 = locale52.getDisplayScript(locale62);
        java.util.Set<java.lang.String> strSet68 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet68);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange71 = languageRangeList1.remove(44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 44, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str32, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale39.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
        org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=292278994,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+81:11");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645513940753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=753,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e2d\u6587" + "'", str66, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test05931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05931");
        java.util.Locale locale2 = new java.util.Locale("7:07:39 AM UTC");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale2);
        java.util.TimeZone timeZone4 = fastDateFormat3.getTimeZone();
        java.lang.String str5 = fastDateFormat3.getPattern();
        java.lang.StringBuffer stringBuffer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer8 = fastDateFormat3.format(1645513704277L, stringBuffer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "7:07:39 am utc");
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "M/d/yy" + "'", str5, "M/d/yy");
    }

    @Test
    public void test05932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05932");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone18.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.CHINA;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        calendar23.clear(7);
        boolean boolean26 = calendar23.isWeekDateSupported();
        java.util.TimeZone timeZone27 = calendar23.getTimeZone();
        int int29 = calendar23.getMaximum(3);
        java.lang.String str30 = fastDateFormat2.format(calendar23);
        java.lang.String str32 = fastDateFormat2.format(1645513660916L);
        java.text.FieldPosition fieldPosition34 = new java.text.FieldPosition(7);
        fieldPosition34.setBeginIndex(7);
        int int37 = fieldPosition34.getField();
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition((int) (byte) 0);
        int int40 = fieldPosition39.getEndIndex();
        int int41 = fieldPosition39.getField();
        boolean boolean42 = fieldPosition34.equals((java.lang.Object) fieldPosition39);
        int int43 = fieldPosition39.getBeginIndex();
        boolean boolean44 = fastDateFormat2.equals((java.lang.Object) int43);
        java.util.Locale locale46 = new java.util.Locale("Chinese (China)");
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        calendar47.setMinimalDaysInFirstWeek((-1899));
        java.lang.String str50 = fastDateFormat2.format(calendar47);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513940881,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=881,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str16, "7:12:20 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645513940881,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=881,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str30, "7:12:20 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "7:07:40 AM GMT+00:00" + "'", str32, "7:07:40 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals(locale46.toString(), "chinese (china)");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645513940881,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=-1899,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=881,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "7:12:20 AM GMT+00:00" + "'", str50, "7:12:20 AM GMT+00:00");
    }

    @Test
    public void test05933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05933");
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Locale locale8 = new java.util.Locale("", "hi!", "");
        java.lang.String str9 = locale4.getDisplayVariant(locale8);
        java.lang.String str10 = locale2.getDisplayVariant(locale4);
        java.lang.String str12 = locale4.getExtension('x');
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, locale4);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale4);
        calendar14.clear();
        long long16 = calendar14.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = calendar14.getActualMinimum(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32772");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale8.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test05934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05934");
        java.util.Date date3 = new java.util.Date(38, 1, 8);
        date3.setYear(19);
        date3.setMinutes((int) (short) 0);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Feb 08 00:00:00 GMT+00:00 1919");
    }

    @Test
    public void test05935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05935");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar calendar13 = builder12.build();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone19.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.CHINA;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        calendar24.clear(7);
        calendar24.set(16, (int) (byte) 0);
        java.time.Instant instant30 = calendar24.toInstant();
        boolean boolean32 = calendar24.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str33 = fastDateFormat17.format(calendar24);
        java.lang.Object obj34 = fastDateFormat17.clone();
        java.util.Locale locale35 = fastDateFormat17.getLocale();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition(16);
        int int39 = parsePosition38.getErrorIndex();
        java.lang.String str40 = parsePosition38.toString();
        java.lang.Object obj41 = null;
        boolean boolean42 = parsePosition38.equals(obj41);
        int int43 = parsePosition38.getIndex();
        boolean boolean45 = parsePosition38.equals((java.lang.Object) 1645513657332L);
        java.lang.String str46 = parsePosition38.toString();
        int int47 = parsePosition38.getErrorIndex();
        int int48 = parsePosition38.getErrorIndex();
        java.lang.String str49 = parsePosition38.toString();
        java.util.Calendar.Builder builder50 = new java.util.Calendar.Builder();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getSeconds();
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getTimezoneOffset();
        date53.setMinutes(6);
        boolean boolean57 = date51.after(date53);
        java.util.Calendar.Builder builder58 = builder50.setInstant(date53);
        java.util.Calendar.Builder builder60 = builder58.setInstant((long) 36);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder62 = builder60.setLocale(locale61);
        java.util.Calendar.Builder builder64 = builder62.setLenient(false);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone67);
        timeZone67.setRawOffset((int) (byte) 1);
        boolean boolean72 = timeZone67.observesDaylightTime();
        java.util.Calendar.Builder builder73 = builder62.setTimeZone(timeZone67);
        java.util.Date date77 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date77.setMonth(4);
        java.util.Calendar.Builder builder80 = builder62.setInstant(date77);
        boolean boolean81 = parsePosition38.equals((java.lang.Object) builder62);
        java.lang.Object obj82 = fastDateFormat17.parseObject("2022-02-22 08:37:00", parsePosition38);
        int int83 = parsePosition38.getIndex();
        boolean boolean84 = calendar13.before((java.lang.Object) parsePosition38);
        calendar13.clear();
        java.lang.Object obj86 = calendar13.clone();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645513940943,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=20,MILLISECOND=943,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale35);
// flaky:         org.junit.Assert.assertEquals(locale35.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str40, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str46, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str49, "java.text.ParsePosition[index=16,errorIndex=-1]");
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Tue Feb 22 07:12:20 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Tue Feb 22 07:06:20 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertEquals(date77.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(obj86);
// flaky:         org.junit.Assert.assertEquals(obj86.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test05936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05936");
        java.util.Date date5 = new java.util.Date(54, (int) (byte) 1, 44, 34, (int) '4');
        org.junit.Assert.assertEquals(date5.toString(), "Wed Mar 17 10:52:00 GMT+00:00 1954");
    }

    @Test
    public void test05937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05937");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        calendar8.clear(7);
        calendar8.setMinimalDaysInFirstWeek(69);
        boolean boolean14 = calendar8.after((java.lang.Object) (byte) 10);
        calendar8.add((int) (byte) 1, 39);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale21, locale22, locale23, locale24, locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale locale29 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList19.listIterator(0);
        boolean boolean32 = languageRangeList19.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Set<java.lang.String> strSet36 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet36.parallelStream();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet36);
        boolean boolean39 = languageRangeList19.retainAll((java.util.Collection<java.lang.String>) strList38);
        int int40 = languageRangeList19.size();
        boolean boolean41 = calendar8.after((java.lang.Object) int40);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        java.lang.String str45 = fastDateFormat44.toString();
        boolean boolean46 = fastDateFormat44.getTimeZoneOverridesCalendar();
        java.lang.String str47 = fastDateFormat44.getPattern();
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj51 = fastDateFormat44.parseObject("22 Feb 2022 07:07:38 GMT", parsePosition50);
        java.util.TimeZone timeZone52 = fastDateFormat44.getTimeZone();
        calendar8.setTimeZone(timeZone52);
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone55);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone58.hasSameRules(timeZone60);
        java.util.Locale locale62 = java.util.Locale.CHINA;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60, locale62);
        calendar63.clear(7);
        calendar63.set(16, (int) (byte) 0);
        java.time.Instant instant69 = calendar63.toInstant();
        boolean boolean71 = calendar63.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str72 = fastDateFormat56.format(calendar63);
        java.lang.String str73 = calendar63.getCalendarType();
        boolean boolean74 = calendar63.isWeekDateSupported();
        calendar63.add(10, 8);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone78.hasSameRules(timeZone79);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone79.hasSameRules(timeZone81);
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone81);
        int int85 = timeZone81.getOffset(1645513656868L);
        calendar63.setTimeZone(timeZone81);
        boolean boolean87 = timeZone52.hasSameRules(timeZone81);
        int int89 = timeZone52.getOffset(1645513691372L);
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("22-feb-2022 7.11.28");
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone52, locale91);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat93 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 6, timeZone52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=69,ERA=1,YEAR=2061,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(languageRangeItor31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str45, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "h:mm:ss a z" + "'", str47, "h:mm:ss a z");
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645542741022,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=12,SECOND=21,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "gregory" + "'", str73, "gregory");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(timeZone81);
        org.junit.Assert.assertEquals(timeZone81.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(calendar83);
// flaky:         org.junit.Assert.assertEquals(calendar83.toString(), "java.util.GregorianCalendar[time=1645513941022,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 49 + "'", int89 == 49);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertNotNull(calendar92);
// flaky:         org.junit.Assert.assertEquals(calendar92.toString(), "java.util.GregorianCalendar[time=1645513941023,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=72,ZONE_OFFSET=49,DST_OFFSET=0]");
    }

    @Test
    public void test05938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05938");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder18 = builder10.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder22 = builder18.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Calendar.Builder builder27 = builder18.setTimeOfDay(39, (int) (byte) 100, 42, 52);
        java.util.Calendar.Builder builder31 = builder18.setDate(18, 59, 17);
        java.util.Calendar.Builder builder35 = builder31.setTimeOfDay(292278994, (int) (byte) 100, 51);
        java.util.Calendar.Builder builder36 = new java.util.Calendar.Builder();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getSeconds();
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getTimezoneOffset();
        date39.setMinutes(6);
        boolean boolean43 = date37.after(date39);
        java.util.Calendar.Builder builder44 = builder36.setInstant(date39);
        java.util.Calendar.Builder builder46 = builder44.setInstant((long) 36);
        java.util.Calendar.Builder builder50 = builder46.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder54 = builder46.setDate((int) '4', 52, 14);
        java.util.Calendar.Builder builder58 = builder54.setTimeOfDay((-1), (int) (short) 10, (int) 'a');
        java.util.Calendar.Builder builder63 = builder54.setTimeOfDay(39, (int) (byte) 100, 42, 52);
        java.util.Calendar.Builder builder67 = builder54.setDate(18, 59, 17);
        java.util.Calendar.Builder builder68 = new java.util.Calendar.Builder();
        java.util.Date date69 = new java.util.Date();
        int int70 = date69.getSeconds();
        java.util.Date date71 = new java.util.Date();
        int int72 = date71.getTimezoneOffset();
        date71.setMinutes(6);
        boolean boolean75 = date69.after(date71);
        java.util.Calendar.Builder builder76 = builder68.setInstant(date71);
        java.util.Calendar.Builder builder78 = builder76.setInstant((long) 36);
        java.util.Calendar.Builder builder82 = builder78.setWeekDate(2, 0, 2022);
        int[] intArray83 = new int[] {};
        java.util.Calendar.Builder builder84 = builder78.setFields(intArray83);
        java.util.Calendar.Builder builder85 = builder54.setFields(intArray83);
        java.util.Calendar.Builder builder86 = builder35.setFields(intArray83);
        java.util.Calendar.Builder builder88 = builder35.setLenient(false);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 21 + "'", int2 == 21);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder35);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 21 + "'", int38 == 21);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Tue Feb 22 07:06:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder67);
// flaky:         org.junit.Assert.assertEquals(date69.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 21 + "'", int70 == 21);
// flaky:         org.junit.Assert.assertEquals(date71.toString(), "Tue Feb 22 07:06:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[]");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
    }

    @Test
    public void test05939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05939");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("22 f\351vr. 2022 07:10:25", timeZone1, locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test05940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05940");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.String str19 = calendar9.getCalendarType();
        boolean boolean20 = calendar9.isWeekDateSupported();
        calendar9.clear(3);
        java.time.Instant instant23 = calendar9.toInstant();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513941266,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=266,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(instant23);
    }

    @Test
    public void test05941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05941");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.lang.String str5 = locale4.getCountry();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.parse("fra", strMap7);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor9 = languageRangeList8.iterator();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.lang.String str15 = locale11.getDisplayLanguage();
        java.lang.String str16 = locale11.getDisplayLanguage();
        java.lang.String str17 = locale11.toLanguageTag();
        java.lang.String str18 = locale10.getDisplayCountry(locale11);
        boolean boolean19 = locale10.hasExtensions();
        boolean boolean20 = languageRangeList8.equals((java.lang.Object) locale10);
        java.lang.String str21 = locale10.getISO3Language();
        java.lang.String str22 = locale4.getDisplayLanguage(locale10);
        java.lang.String str23 = locale4.getDisplayLanguage();
        java.lang.Object obj24 = locale4.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeItor9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Chinese" + "'", str16, "Chinese");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "");
    }

    @Test
    public void test05942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05942");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        java.util.Date date7 = new java.util.Date();
        java.lang.String str8 = date7.toGMTString();
        boolean boolean9 = date5.before(date7);
        long long10 = date7.getTime();
        java.lang.String str11 = date7.toGMTString();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        int int14 = date12.getSeconds();
        java.time.Instant instant15 = date12.toInstant();
        int int16 = date12.getDate();
        boolean boolean17 = date7.before(date12);
        java.lang.String str18 = fastDateFormat4.format((java.lang.Object) date12);
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        java.util.Date date21 = new java.util.Date();
        java.lang.String str22 = date21.toGMTString();
        boolean boolean23 = date19.before(date21);
        int int24 = date19.getHours();
        java.lang.String str25 = date19.toGMTString();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        date26.setMinutes(6);
        int int30 = date26.getMinutes();
        java.util.Date date37 = new java.util.Date(0, 39, (int) (short) -1, 39, 13, 15);
        boolean boolean38 = date26.before(date37);
        boolean boolean39 = date19.after(date37);
        java.lang.String str40 = fastDateFormat4.format(date19);
        java.lang.Object obj41 = fastDateFormat4.clone();
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.getDefault(category42);
        java.util.Locale locale47 = new java.util.Locale("22 Feb 2022 07:07:38 GMT", "FastDateFormat[]", "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        java.lang.String str48 = locale47.getDisplayScript();
        boolean boolean49 = locale47.hasExtensions();
        java.util.Locale locale50 = locale47.stripExtensions();
        java.util.Locale.setDefault(category42, locale47);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale47);
        java.lang.StringBuffer stringBuffer53 = null;
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition((int) (byte) 0);
        int int56 = fieldPosition55.getEndIndex();
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale57.getLanguage();
        boolean boolean59 = locale57.hasExtensions();
        java.lang.String str60 = locale57.getDisplayCountry();
        boolean boolean61 = fieldPosition55.equals((java.lang.Object) locale57);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone62.hasSameRules(timeZone63);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone63.hasSameRules(timeZone65);
        java.util.Locale locale67 = java.util.Locale.CHINA;
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone65, locale67);
        calendar68.clear(7);
        boolean boolean71 = calendar68.isWeekDateSupported();
        int int72 = calendar68.getMinimalDaysInFirstWeek();
        int int74 = calendar68.getActualMaximum((int) (byte) 1);
        boolean boolean75 = fieldPosition55.equals((java.lang.Object) (byte) 1);
        boolean boolean77 = fieldPosition55.equals((java.lang.Object) "\u4e0a\u5348\u65f6\u5206\u79d2");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer78 = fastDateFormat4.format((java.lang.Object) locale47, stringBuffer53, fieldPosition55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "22 Feb 2022 07:12:21 GMT" + "'", str8, "22 Feb 2022 07:12:21 GMT");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645513941309L + "'", long10 == 1645513941309L);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22 Feb 2022 07:12:21 GMT" + "'", str11, "22 Feb 2022 07:12:21 GMT");
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7:12:21 AM GMT+00:00" + "'", str18, "7:12:21 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "22 Feb 2022 07:12:21 GMT" + "'", str22, "22 Feb 2022 07:12:21 GMT");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "22 Feb 2022 07:12:21 GMT" + "'", str25, "22 Feb 2022 07:12:21 GMT");
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:06:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
        org.junit.Assert.assertEquals(date37.toString(), "Tue Mar 31 15:13:15 GMT+00:00 1903");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "7:12:21 AM GMT+00:00" + "'", str40, "7:12:21 AM GMT+00:00");
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + category42 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category42.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals(locale47.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "\u5e74\u6708\u65e5\u4e0a\u53487:07");
        org.junit.Assert.assertNotNull(calendar52);
        org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645513941309,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "zh" + "'", str58, "zh");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=309,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 292278994 + "'", int74 == 292278994);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test05943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05943");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("7:08:37 AM GMT+00:00");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("2022-2-22 7:08:13");
        java.time.ZoneId zoneId4 = timeZone3.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        boolean boolean6 = timeZone1.hasSameRules(timeZone5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeZone1.getDisplayName(true, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 32");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test05944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05944");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale6);
        java.util.Date date13 = calendar12.getTime();
        calendar12.clear();
        java.util.TimeZone timeZone15 = calendar12.getTimeZone();
        timeZone15.setRawOffset(8);
        boolean boolean18 = timeZone15.observesDaylightTime();
        timeZone15.setRawOffset(292278994);
        boolean boolean21 = timeZone5.hasSameRules(timeZone15);
        java.lang.String str22 = timeZone15.getID();
        timeZone15.setID("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=11,MILLISECOND=28,ZONE_OFFSET=35,DST_OFFSET=0]");
        timeZone15.setRawOffset((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int int33 = timeZone15.getOffset(18, (int) (short) 10, 2022, (-46800000), 0, 1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str22, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05945");
        java.text.AttributedCharacterIterator.Attribute attribute2 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getTimezoneOffset();
        date7.setMinutes(6);
        boolean boolean11 = date5.after(date7);
        java.util.Calendar.Builder builder12 = builder4.setInstant(date7);
        java.util.Calendar.Builder builder14 = builder12.setInstant((long) 36);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder16 = builder14.setLocale(locale15);
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        timeZone21.setRawOffset((int) (byte) 1);
        boolean boolean26 = timeZone21.observesDaylightTime();
        java.util.Calendar.Builder builder27 = builder16.setTimeZone(timeZone21);
        java.util.Date date31 = new java.util.Date(53, (int) (byte) -1, (int) (short) 10);
        date31.setMonth(4);
        java.util.Calendar.Builder builder34 = builder16.setInstant(date31);
        java.util.Calendar.Builder builder36 = builder16.setInstant(1645513674789L);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone40);
        int int44 = timeZone40.getOffset(1645513656868L);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone46.hasSameRules(timeZone48);
        boolean boolean50 = timeZone40.hasSameRules(timeZone46);
        java.util.Calendar.Builder builder51 = builder16.setTimeZone(timeZone40);
        java.util.Locale locale55 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str56 = locale55.getDisplayScript();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.util.Calendar.Builder builder58 = new java.util.Calendar.Builder();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getSeconds();
        java.util.Date date61 = new java.util.Date();
        int int62 = date61.getTimezoneOffset();
        date61.setMinutes(6);
        boolean boolean65 = date59.after(date61);
        java.util.Calendar.Builder builder66 = builder58.setInstant(date61);
        java.util.Calendar.Builder builder68 = builder66.setInstant((long) 36);
        java.util.Calendar.Builder builder72 = builder68.setWeekDate(17, 37, 6);
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.lang.String str74 = locale73.getLanguage();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        boolean boolean77 = timeZone75.hasSameRules(timeZone76);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone76.hasSameRules(timeZone78);
        java.util.Locale locale80 = java.util.Locale.CHINA;
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone78, locale80);
        java.lang.String str82 = locale73.getDisplayName(locale80);
        java.lang.String str83 = locale80.getDisplayCountry();
        java.util.Calendar.Builder builder84 = builder68.setLocale(locale80);
        java.util.Set<java.lang.String> strSet85 = locale80.getUnicodeLocaleKeys();
        java.lang.String str86 = locale55.getDisplayLanguage(locale80);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone40, locale80);
        boolean boolean88 = attribute2.equals((java.lang.Object) timeZone40);
        timeZone40.setRawOffset(97);
        java.util.Locale locale94 = new java.util.Locale("2022-2-22 7:06:34", "Chinese (Taiwan)", "java.util.GregorianCalendar[time=1645513741111,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=1,MILLISECOND=146,ZONE_OFFSET=35,DST_OFFSET=0]");
        java.util.Set<java.lang.String> strSet95 = locale94.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat96 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100, 11, timeZone40, locale94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute2);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21 + "'", int6 == 21);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 07:06:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals(date31.toString(), "Sat May 10 00:00:00 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645513941370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=97,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals(locale55.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1/1/70 12:00 AM" + "'", str57, "1/1/70 12:00 AM");
// flaky:         org.junit.Assert.assertEquals(date59.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 21 + "'", int60 == 21);
// flaky:         org.junit.Assert.assertEquals(date61.toString(), "Tue Feb 22 07:06:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "zh" + "'", str74, "zh");
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone76);
        org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(timeZone78);
        org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645513941370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\u4e2d\u6587" + "'", str82, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "China" + "'", str83, "China");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(fastDateFormat87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals(locale94.toString(), "2022-2-22 7:06:34_CHINESE (TAIWAN)_java.util.GregorianCalendar[time=1645513741111,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=9,SECOND=1,MILLISECOND=146,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test05946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05946");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        boolean boolean10 = calendar7.isWeekDateSupported();
        int int12 = calendar7.getMinimum(4);
        java.util.TimeZone timeZone13 = calendar7.getTimeZone();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone17);
        java.util.TimeZone timeZone20 = calendar19.getTimeZone();
        boolean boolean21 = timeZone13.hasSameRules(timeZone20);
        boolean boolean22 = timeZone13.observesDaylightTime();
        java.lang.String str23 = timeZone13.getID();
        int int24 = timeZone13.getRawOffset();
        java.util.Locale locale26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        java.lang.String str29 = fastDateFormat27.toString();
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        calendar39.clear(7);
        calendar39.set(16, (int) (byte) 0);
        int int45 = calendar39.getFirstDayOfWeek();
        java.lang.String str46 = fastDateFormat32.format(calendar39);
        calendar39.set((int) (short) 100, 37, 2);
        java.lang.String str51 = fastDateFormat27.format(calendar39);
        java.util.Locale locale53 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale54.getDisplayVariant();
        java.util.Locale locale56 = locale54.stripExtensions();
        boolean boolean57 = calendar39.before((java.lang.Object) locale56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("7:08:34 AM GMT+00:00", timeZone13, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645513941426,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str23, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "h:mm:ss a z" + "'", str28, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str29, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=-58914146858574,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "7:12:21 AM GMT+00:00" + "'", str46, "7:12:21 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "7:12:21 AM GMT+00:00" + "'", str51, "7:12:21 AM GMT+00:00");
        org.junit.Assert.assertEquals(locale53.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "7:07:37 am utc");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test05947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05947");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        timeZone2.setRawOffset((int) (byte) 1);
        boolean boolean7 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        boolean boolean11 = locale9.hasExtensions();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2, locale9);
        boolean boolean13 = locale9.hasExtensions();
        java.lang.String str14 = locale9.getScript();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645513941463,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=464,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645513941463,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=464,ZONE_OFFSET=1,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test05948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05948");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        java.util.Set<java.lang.String> strSet25 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream26 = strSet25.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet25.parallelStream();
        boolean boolean28 = languageRangeList13.retainAll((java.util.Collection<java.lang.String>) strSet25);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("France");
        java.lang.String str31 = locale30.getDisplayCountry();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        boolean boolean33 = languageRangeList13.containsAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean35 = languageRangeList13.remove((java.lang.Object) 1645513675042L);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "france");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05949");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        int int4 = fastDateFormat2.getMaxLengthEstimate();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        timeZone5.setID("\u610f\u5927\u5229");
        int int8 = timeZone5.getRawOffset();
        timeZone5.setID("2 f\351vr. 2022 07:09:37");
        java.util.TimeZone.setDefault(timeZone5);
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale.setDefault(category12, locale14);
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getSeconds();
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        date19.setMinutes(6);
        boolean boolean23 = date17.after(date19);
        java.util.Calendar.Builder builder24 = builder16.setInstant(date19);
        java.util.Calendar.Builder builder26 = builder24.setInstant((long) 36);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder28 = builder26.setLocale(locale27);
        java.lang.String str29 = locale27.toLanguageTag();
        java.lang.String str30 = locale27.getScript();
        java.lang.String str31 = locale27.getISO3Language();
        java.lang.String str32 = locale27.getLanguage();
        java.util.Locale.setDefault(category12, locale27);
        java.util.Locale locale34 = java.util.Locale.getDefault(category12);
        java.util.Locale.setDefault(locale34);
        java.lang.String str36 = timeZone5.getDisplayName(locale34);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49 + "'", int8 == 49);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 21 + "'", int18 == 21);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:06:21 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "fr-FR" + "'", str29, "fr-FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fra" + "'", str31, "fra");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr" + "'", str32, "fr");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "GMT+00:00" + "'", str36, "GMT+00:00");
    }

    @Test
    public void test05950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05950");
        java.util.Locale locale3 = new java.util.Locale("Feb 22, 2022 7:07:42 AM", "22 Feb 2022 07:07:38 GMT", "22 Feb 2022 07:07:44 GMT");
        java.lang.String str4 = locale3.getDisplayCountry();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale3);
        long long6 = calendar5.getTimeInMillis();
        calendar5.clear();
        org.junit.Assert.assertEquals(locale3.toString(), "feb 22, 2022 7:07:42 am_22 FEB 2022 07:07:38 GMT_22 Feb 2022 07:07:44 GMT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "22 FEB 2022 07:07:38 GMT" + "'", str4, "22 FEB 2022 07:07:38 GMT");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645513941569L + "'", long6 == 1645513941569L);
    }

    @Test
    public void test05951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05951");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone10.hasSameRules(timeZone12);
        boolean boolean14 = timeZone4.hasSameRules(timeZone10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        boolean boolean20 = timeZone10.hasSameRules(timeZone18);
        java.lang.String str21 = timeZone18.getID();
        java.text.AttributedCharacterIterator.Attribute attribute22 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = attribute22.equals((java.lang.Object) timeZone23);
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        boolean boolean26 = attribute22.equals((java.lang.Object) category25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale.LanguageRange languageRange31 = null;
        boolean boolean32 = languageRangeList29.add(languageRange31);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor33 = languageRangeList29.iterator();
        java.util.Set<java.lang.String> strSet34 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream35 = strSet34.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet34.parallelStream();
        boolean boolean37 = languageRangeList29.retainAll((java.util.Collection<java.lang.String>) strSet34);
        java.util.Locale locale39 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale41 = null;
        java.lang.String str42 = locale40.getDisplayCountry(locale41);
        boolean boolean43 = languageRangeList29.contains((java.lang.Object) locale40);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = locale40.getDisplayCountry(locale44);
        java.lang.String str46 = locale27.getDisplayScript(locale40);
        java.lang.String str47 = locale40.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u4e0a\u5348 07:10:49", timeZone18, locale40);
        int int50 = timeZone18.getOffset(1645513759742L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513941581,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=630,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49 + "'", int8 == 49);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2 f\351vr. 2022 07:09:37" + "'", str21, "2 f\351vr. 2022 07:09:37");
        org.junit.Assert.assertNotNull(attribute22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(languageRangeItor33);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals(locale39.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 49 + "'", int50 == 49);
    }

    @Test
    public void test05952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05952");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale4 = new java.util.Locale("");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        java.lang.String str14 = locale5.getDisplayName(locale12);
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = locale12.getDisplayName(locale15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale15);
        java.lang.String str19 = locale4.getDisplayCountry(locale15);
        java.lang.String str20 = locale2.getDisplayVariant(locale15);
        java.lang.String str21 = locale2.toLanguageTag();
        java.lang.String str23 = locale2.getExtension('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513941620,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=669,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u4e2d\u6587" + "'", str14, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str17, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645513941620,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=669,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ko" + "'", str21, "ko");
        org.junit.Assert.assertNull(str23);
    }

    @Test
    public void test05953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05953");
        java.util.Locale locale3 = new java.util.Locale("7:07:39 AM UTC");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(3, locale3);
        java.util.TimeZone timeZone5 = fastDateFormat4.getTimeZone();
        boolean boolean6 = timeZone5.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, timeZone5);
        java.lang.String str9 = fastDateFormat7.format(1645513812348L);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        boolean boolean14 = fastDateFormat13.getTimeZoneOverridesCalendar();
        java.lang.String str16 = fastDateFormat13.format((-838185410000L));
        java.lang.Object obj17 = fastDateFormat13.clone();
        int int18 = fastDateFormat13.getMaxLengthEstimate();
        int int19 = fastDateFormat13.getMaxLengthEstimate();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.lang.String str25 = fastDateFormat23.toString();
        boolean boolean26 = fastDateFormat23.getTimeZoneOverridesCalendar();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(11);
        java.lang.Object obj30 = fastDateFormat23.parseObject("22 Feb 2022 07:08:22 GMT", parsePosition29);
        java.lang.Object obj31 = fastDateFormat13.parseObject("22 Feb 2022 07:08:57 GMT", parsePosition29);
        java.lang.String str32 = parsePosition29.toString();
        java.lang.Object obj33 = fastDateFormat7.parseObject("22 Feb 2022 07:09:52 GMT", parsePosition29);
        org.junit.Assert.assertEquals(locale3.toString(), "7:07:39 am utc");
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fastDateFormat7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00" + "'", str9, "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "6:43:10 PM GMT+00:00" + "'", str16, "6:43:10 PM GMT+00:00");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 18 + "'", int18 == 18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 18 + "'", int19 == 18);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "h:mm:ss a z" + "'", str24, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str25, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str32, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test05954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05954");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale10, locale11, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale locale17 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList7.listIterator(0);
        boolean boolean20 = languageRangeList7.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet24.parallelStream();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        boolean boolean27 = languageRangeList7.retainAll((java.util.Collection<java.lang.String>) strList26);
        java.lang.String str28 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList26);
        java.lang.Object obj29 = null;
        boolean boolean30 = languageRangeList1.remove(obj29);
        boolean boolean31 = languageRangeList1.isEmpty();
        boolean boolean32 = languageRangeList1.isEmpty();
        java.lang.Object obj33 = null;
        int int34 = languageRangeList1.indexOf(obj33);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test05955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05955");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale7 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getScript();
        java.util.Locale locale13 = new java.util.Locale("", "hi!", "");
        java.lang.String str14 = locale7.getDisplayVariant(locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone2, locale13);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone2);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = calendar16.getActualMaximum(26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 26");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals(locale7.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale13.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645513941676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=725,ZONE_OFFSET=49,DST_OFFSET=0]");
    }

    @Test
    public void test05956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05956");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        calendar7.clear(7);
        boolean boolean10 = calendar7.isWeekDateSupported();
        int int12 = calendar7.getMinimum(4);
        java.util.TimeZone timeZone13 = calendar7.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("22 Feb 2022 07:09:21 GMT", timeZone13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=740,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645513941691,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=740,ZONE_OFFSET=49,DST_OFFSET=0]");
    }

    @Test
    public void test05957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05957");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(134, 32769, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 32769");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test05958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05958");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        int int8 = timeZone4.getOffset(1645513656868L);
        int int10 = timeZone4.getOffset(1644995363796L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("22 Feb 2022 07:09:09 GMT", timeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513941807,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=856,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 49 + "'", int8 == 49);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 49 + "'", int10 == 49);
    }

    @Test
    public void test05959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05959");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(1645513657024L);
        timeZone0.setID("fra");
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone0.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone0, locale9);
        java.lang.String str14 = locale9.getDisplayCountry();
        java.lang.String str16 = locale9.getExtension('a');
        java.util.Set<java.lang.String> strSet17 = locale9.getUnicodeLocaleAttributes();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale9);
        java.util.Date date19 = calendar18.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar18.clear((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 49 + "'", int4 == 49);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645513941834,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=883,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645513941834,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"2 f\351vr. 2022 07:09:37\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=21,MILLISECOND=883,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Tue Feb 22 07:12:21 GMT+00:00 2022");
    }

    @Test
    public void test05960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05960");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray14 = new java.util.Locale[] { locale9, locale10, locale11, locale12, locale13 };
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.Locale locale17 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor19 = languageRangeList7.listIterator(0);
        boolean boolean20 = languageRangeList7.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Set<java.lang.String> strSet24 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet24.parallelStream();
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet24);
        boolean boolean27 = languageRangeList7.retainAll((java.util.Collection<java.lang.String>) strList26);
        java.lang.String str28 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList26);
        java.util.Locale.LanguageRange languageRange29 = null;
        boolean boolean30 = languageRangeList1.add(languageRange29);
        java.util.Locale locale32 = new java.util.Locale("February 22, 2022");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet33);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor35 = languageRangeList1.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor37 = languageRangeList1.listIterator(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNotNull(languageRangeItor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals(locale32.toString(), "february 22, 2022");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(languageRangeItor35);
    }

    @Test
    public void test05961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05961");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        boolean boolean25 = languageRangeList1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap29);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray39 = new java.util.Locale[] { locale34, locale35, locale36, locale37, locale38 };
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList40);
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList44 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList40, filteringMode43);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList44);
        boolean boolean46 = languageRangeList1.isEmpty();
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale48);
        java.util.Locale locale50 = null;
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.util.Set<java.lang.String> strSet52 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet52);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor55 = languageRangeList1.listIterator(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 46");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode43.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList44);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test05962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05962");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        java.util.TimeZone timeZone7 = calendar6.getTimeZone();
        timeZone7.setID("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone.setDefault(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone7);
        java.lang.String str12 = timeZone7.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = timeZone7.getOffset(52, 40, 37, 103, 161, (-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513941986,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=35,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str12, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05963");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder2.setExtension('a', "gregory");
        java.util.Locale.Builder builder8 = builder2.setScript("");
        java.util.Locale.Builder builder9 = builder2.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setVariant("2022-2-22 7:11:40");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-2-22 7:11:40 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test05964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05964");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.String str19 = calendar9.getCalendarType();
        boolean boolean20 = calendar9.isWeekDateSupported();
        java.time.Instant instant21 = calendar9.toInstant();
        long long22 = calendar9.getTimeInMillis();
        int int24 = calendar9.getGreatestMinimum(9);
        java.util.TimeZone timeZone25 = calendar9.getTimeZone();
        int int27 = timeZone25.getOffset((-61604322582725L));
        int int28 = timeZone25.getRawOffset();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645513942103,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=152,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(instant21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645513942103L + "'", long22 == 1645513942103L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 49 + "'", int27 == 49);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 49 + "'", int28 == 49);
    }

    @Test
    public void test05965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05965");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(7);
        fieldPosition1.setBeginIndex(7);
        java.text.Format.Field field4 = fieldPosition1.getFieldAttribute();
        int int5 = fieldPosition1.getBeginIndex();
        java.text.Format.Field field6 = fieldPosition1.getFieldAttribute();
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray15 = new java.util.Locale[] { locale10, locale11, locale12, locale13, locale14 };
        java.util.ArrayList<java.util.Locale> localeList16 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList16, localeArray15);
        java.util.Locale locale18 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray27 = new java.util.Locale[] { locale22, locale23, locale24, locale25, locale26 };
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale locale30 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList28);
        int int31 = languageRangeList8.lastIndexOf((java.lang.Object) languageRangeList20);
        boolean boolean32 = languageRangeList8.isEmpty();
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getTimezoneOffset();
        java.util.Date date35 = new java.util.Date();
        java.lang.String str36 = date35.toGMTString();
        boolean boolean37 = date33.before(date35);
        int int38 = languageRangeList8.lastIndexOf((java.lang.Object) date35);
        int int39 = date35.getYear();
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getTimezoneOffset();
        java.util.Date date42 = new java.util.Date();
        java.lang.String str43 = date42.toGMTString();
        boolean boolean44 = date40.before(date42);
        long long45 = date42.getTime();
        java.lang.String str46 = date42.toGMTString();
        int int47 = date42.getDay();
        date42.setDate(10);
        long long50 = date42.getTime();
        boolean boolean51 = date35.before(date42);
        boolean boolean52 = fieldPosition1.equals((java.lang.Object) boolean51);
        org.junit.Assert.assertNull(field4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNull(field6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "22 Feb 2022 07:12:22 GMT" + "'", str36, "22 Feb 2022 07:12:22 GMT");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 122 + "'", int39 == 122);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Thu Feb 10 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "22 Feb 2022 07:12:22 GMT" + "'", str43, "22 Feb 2022 07:12:22 GMT");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645513942116L + "'", long45 == 1645513942116L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "22 Feb 2022 07:12:22 GMT" + "'", str46, "22 Feb 2022 07:12:22 GMT");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644477142116L + "'", long50 == 1644477142116L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05966");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone3.hasSameRules(timeZone5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone timeZone8 = calendar7.getTimeZone();
        calendar7.set(5, 16);
        boolean boolean12 = parsePosition1.equals((java.lang.Object) 5);
        java.util.Locale locale14 = new java.util.Locale("gregory");
        boolean boolean15 = parsePosition1.equals((java.lang.Object) locale14);
        int int16 = parsePosition1.getIndex();
        java.lang.String str17 = parsePosition1.toString();
        parsePosition1.setErrorIndex(55);
        parsePosition1.setErrorIndex(32);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=272,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "gregory");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10 + "'", int16 == 10);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=-1]" + "'", str17, "java.text.ParsePosition[index=10,errorIndex=-1]");
    }

    @Test
    public void test05967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05967");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        java.time.Instant instant15 = calendar9.toInstant();
        boolean boolean17 = calendar9.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str18 = fastDateFormat2.format(calendar9);
        java.lang.String str19 = calendar9.getCalendarType();
        boolean boolean20 = calendar9.isWeekDateSupported();
        java.time.Instant instant21 = calendar9.toInstant();
        int int22 = calendar9.getWeeksInWeekYear();
        java.util.Date date23 = calendar9.getTime();
        int int25 = calendar9.getGreatestMinimum(16);
        calendar9.set(29, 24358801, 0, 42, 9, 32769);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        boolean boolean37 = timeZone34.observesDaylightTime();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone34);
        int int39 = timeZone34.getRawOffset();
        java.text.Format.Field field40 = null;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition(field40);
        fieldPosition41.setBeginIndex(59);
        java.lang.String str44 = fieldPosition41.toString();
        fieldPosition41.setBeginIndex(15);
        java.util.Calendar.Builder builder47 = new java.util.Calendar.Builder();
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getSeconds();
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getTimezoneOffset();
        date50.setMinutes(6);
        boolean boolean54 = date48.after(date50);
        java.util.Calendar.Builder builder55 = builder47.setInstant(date50);
        java.util.Calendar.Builder builder57 = builder55.setInstant((long) 36);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.lang.String str60 = locale59.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale59);
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.lang.String str63 = locale59.getDisplayName(locale62);
        java.lang.String str64 = locale59.getDisplayCountry();
        java.lang.String str65 = locale59.getDisplayScript();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale66.toLanguageTag();
        java.util.Locale.setDefault(locale66);
        java.lang.String str69 = locale59.getDisplayName(locale66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str72 = fastDateFormat70.format((long) ' ');
        java.lang.String str74 = fastDateFormat70.format((java.lang.Object) 1645513657024L);
        java.lang.Object obj75 = fastDateFormat70.clone();
        java.util.Locale locale76 = fastDateFormat70.getLocale();
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale78);
        java.lang.Object obj80 = fastDateFormat79.clone();
        java.util.Locale locale81 = fastDateFormat79.getLocale();
        java.lang.String str82 = locale76.getDisplayScript(locale81);
        java.lang.String str83 = locale66.getDisplayScript(locale76);
        java.util.Calendar.Builder builder84 = builder55.setLocale(locale66);
        boolean boolean85 = fieldPosition41.equals((java.lang.Object) locale66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat86 = org.apache.commons.lang3.time.FastDateFormat.getInstance("HH' h 'mm z", timeZone34, locale66);
        calendar9.setTimeZone(timeZone34);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=29,MONTH=24358801,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=42,MINUTE=9,SECOND=32769,MILLISECOND=318,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "gregory" + "'", str19, "gregory");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645513942269,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=318,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 49 + "'", int39 == 49);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=59,endIndex=0]" + "'", str44, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=59,endIndex=0]");
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "fra" + "'", str60, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str63, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "France" + "'", str64, "France");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it-IT" + "'", str67, "it-IT");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "francese (Francia)" + "'", str69, "francese (Francia)");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "1/1/70 12:00 AM" + "'", str72, "1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2/22/22 7:07 AM" + "'", str74, "2/22/22 7:07 AM");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "FastDateFormat[M/d/yy h:mm a]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "FastDateFormat[M/d/yy h:mm a]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "FastDateFormat[M/d/yy h:mm a]");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(fastDateFormat86);
    }

    @Test
    public void test05968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05968");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.toString();
        java.lang.Object obj6 = fastDateFormat2.clone();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(10);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone11.hasSameRules(timeZone13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone13);
        java.util.TimeZone timeZone16 = calendar15.getTimeZone();
        calendar15.set(5, 16);
        boolean boolean20 = parsePosition9.equals((java.lang.Object) 5);
        int int21 = parsePosition9.getErrorIndex();
        java.lang.Object obj22 = fastDateFormat2.parseObject("22 Feb 2022 07:07:46 GMT", parsePosition9);
        int int23 = parsePosition9.getErrorIndex();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=363,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test05969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05969");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.addUnicodeLocaleAttribute("CAN");
        java.util.Locale locale5 = builder1.build();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.LanguageRange languageRange9 = null;
        boolean boolean10 = languageRangeList7.add(languageRange9);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor11 = languageRangeList7.iterator();
        java.util.Set<java.lang.String> strSet12 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream13 = strSet12.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet12.parallelStream();
        boolean boolean15 = languageRangeList7.retainAll((java.util.Collection<java.lang.String>) strSet12);
        java.util.Locale.LanguageRange languageRange16 = null;
        boolean boolean17 = languageRangeList7.add(languageRange16);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor18 = languageRangeList7.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator19 = languageRangeList7.spliterator();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        int int22 = languageRangeList7.lastIndexOf((java.lang.Object) locale20);
        java.lang.String str23 = locale5.getDisplayName(locale20);
        java.lang.String str24 = locale5.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("22 Feb 2022 07:11:47 GMT", locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeItor11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeItor18);
        org.junit.Assert.assertNotNull(languageRangeSpliterator19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test05970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05970");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale4 = new java.util.Locale("", "hi!", "");
        java.lang.String str5 = locale0.getDisplayCountry(locale4);
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.util.Locale locale10 = new java.util.Locale("", "hi!", "");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        java.lang.String str12 = locale6.getISO3Language();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone17.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        calendar22.clear(7);
        calendar22.set(16, (int) (byte) 0);
        java.time.Instant instant28 = calendar22.toInstant();
        boolean boolean30 = calendar22.after((java.lang.Object) "Sat Jan 22 07:07:37 UTC 2022");
        java.lang.String str31 = fastDateFormat15.format(calendar22);
        java.lang.Object obj32 = fastDateFormat15.clone();
        java.util.Locale locale33 = fastDateFormat15.getLocale();
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale33.getDisplayName();
        java.lang.String str36 = locale6.getDisplayCountry(locale33);
        java.lang.String str37 = locale4.getDisplayCountry(locale6);
        java.util.Set<java.lang.Character> charSet38 = locale4.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale4.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "China" + "'", str5, "China");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale10.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zho" + "'", str12, "zho");
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645513942408,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=457,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "italiano (Italia)" + "'", str35, "italiano (Italia)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Cina" + "'", str36, "Cina");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "HI!" + "'", str37, "HI!");
        org.junit.Assert.assertNotNull(charSet38);
    }

    @Test
    public void test05971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05971");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar.Builder builder23 = builder20.setLocale(locale21);
        java.lang.String str24 = locale21.getISO3Country();
        java.lang.String str25 = locale21.getDisplayName();
        java.lang.String str26 = locale21.getDisplayScript();
        boolean boolean28 = locale21.equals((java.lang.Object) "2022-2-2 7:10:52");
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-CN" + "'", str22, "zh-CN");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CHN" + "'", str24, "CHN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05972");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1645513814361,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=14,MILLISECOND=369,ZONE_OFFSET=8,DST_OFFSET=0]");
        java.lang.Object obj2 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test05973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05973");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone.setDefault(timeZone3);
        int int7 = timeZone3.getRawOffset();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11);
        java.lang.String str13 = fastDateFormat12.toString();
        boolean boolean14 = fastDateFormat12.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone15 = fastDateFormat12.getTimeZone();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        long long18 = date16.getTime();
        date16.setYear(0);
        java.lang.String str21 = fastDateFormat12.format(date16);
        java.util.Locale locale22 = fastDateFormat12.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = timeZone3.getDisplayName(false, 7, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645513942482,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=531,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 49 + "'", int7 == 49);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str13, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Feb 22 07:12:22 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513942482L + "'", long18 == 1645513942482L);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7:12:22 AM GMT+00:00" + "'", str21, "7:12:22 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_US");
    }

    @Test
    public void test05974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05974");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.util.Calendar.Builder builder18 = builder10.setTimeZone(timeZone15);
        java.util.Calendar calendar19 = builder18.build();
        calendar19.clear(0);
        java.util.Calendar.Builder builder24 = new java.util.Calendar.Builder();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getSeconds();
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        date27.setMinutes(6);
        boolean boolean31 = date25.after(date27);
        java.util.Calendar.Builder builder32 = builder24.setInstant(date27);
        java.util.Calendar.Builder builder34 = builder32.setInstant((long) 36);
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder36 = builder34.setLocale(locale35);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone39);
        java.util.Calendar.Builder builder42 = builder34.setTimeZone(timeZone39);
        java.util.Calendar.Builder builder44 = builder34.setInstant((long) (byte) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        int int50 = timeZone46.getOffset(1645513657024L);
        timeZone46.setID("fra");
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone46.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone46, locale55);
        boolean boolean60 = fastDateFormat45.equals((java.lang.Object) locale55);
        java.util.Calendar.Builder builder61 = builder44.setLocale(locale55);
        java.lang.String str62 = locale55.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = calendar19.getDisplayName(0, 6, locale55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=85,ZONE_OFFSET=49,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(fastDateFormat45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 49 + "'", int50 == 49);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh" + "'", str56, "zh");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645513942533,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"fra\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=582,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test05975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05975");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        boolean boolean4 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((int) '4');
        java.lang.Object obj9 = fastDateFormat2.parseObject("22 Feb 2022 07:07:38 GMT", parsePosition8);
        java.lang.String str10 = fastDateFormat2.getPattern();
        java.lang.Object obj11 = fastDateFormat2.clone();
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.CHINA;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        calendar21.clear(7);
        calendar21.set(16, (int) (byte) 0);
        int int27 = calendar21.getFirstDayOfWeek();
        java.lang.String str28 = fastDateFormat14.format(calendar21);
        calendar21.set((int) (short) 100, 37, 2);
        int int33 = calendar21.getWeeksInWeekYear();
        java.util.TimeZone timeZone34 = calendar21.getTimeZone();
        int int36 = timeZone34.getOffset(0L);
        boolean boolean37 = fastDateFormat2.equals((java.lang.Object) 0L);
        java.lang.String str39 = fastDateFormat2.format(1645513692336L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj41 = fastDateFormat2.parseObject("10 Feb 1910 00:12:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "h:mm:ss a z" + "'", str5, "h:mm:ss a z");
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "h:mm:ss a z" + "'", str10, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=37,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=2,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=606,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7:12:22 AM GMT+00:00" + "'", str28, "7:12:22 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 52 + "'", int33 == 52);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 49 + "'", int36 == 49);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7:08:12 AM GMT+00:00" + "'", str39, "7:08:12 AM GMT+00:00");
    }

    @Test
    public void test05976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05976");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("Chinese");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale11, locale12, locale13, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray28 = new java.util.Locale[] { locale23, locale24, locale25, locale26, locale27 };
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList29);
        int int32 = languageRangeList9.lastIndexOf((java.lang.Object) languageRangeList21);
        boolean boolean33 = languageRangeList9.isEmpty();
        int int34 = languageRangeList9.size();
        int int35 = languageRangeList7.indexOf((java.lang.Object) int34);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor36 = languageRangeList7.iterator();
        java.text.AttributedCharacterIterator.Attribute attribute37 = java.text.AttributedCharacterIterator.Attribute.READING;
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = attribute37.equals((java.lang.Object) timeZone38);
        java.util.Locale.Category category40 = java.util.Locale.Category.FORMAT;
        boolean boolean41 = attribute37.equals((java.lang.Object) category40);
        java.util.Locale locale42 = java.util.Locale.getDefault(category40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale.LanguageRange languageRange46 = null;
        boolean boolean47 = languageRangeList44.add(languageRange46);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor48 = languageRangeList44.iterator();
        java.util.Set<java.lang.String> strSet49 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream50 = strSet49.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream51 = strSet49.parallelStream();
        boolean boolean52 = languageRangeList44.retainAll((java.util.Collection<java.lang.String>) strSet49);
        java.util.Locale locale54 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale55 = locale54.stripExtensions();
        java.util.Locale locale56 = null;
        java.lang.String str57 = locale55.getDisplayCountry(locale56);
        boolean boolean58 = languageRangeList44.contains((java.lang.Object) locale55);
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = locale55.getDisplayCountry(locale59);
        java.lang.String str61 = locale42.getDisplayScript(locale55);
        java.util.Set<java.lang.String> strSet62 = locale42.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet62);
        java.lang.String str64 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet62);
        boolean boolean65 = languageRangeList1.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(languageRangeItor36);
        org.junit.Assert.assertNotNull(attribute37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.FORMAT + "'", category40.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(languageRangeItor48);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertEquals(locale54.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test05977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05977");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor6 = languageRangeList1.listIterator();
        boolean boolean7 = languageRangeList1.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Locale locale14 = java.util.Locale.FRANCE;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray16 = new java.util.Locale[] { locale11, locale12, locale13, locale14, locale15 };
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor21 = languageRangeList9.listIterator(0);
        boolean boolean22 = languageRangeList9.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Set<java.lang.String> strSet26 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.parallelStream();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet26);
        boolean boolean29 = languageRangeList9.retainAll((java.util.Collection<java.lang.String>) strList28);
        int int30 = languageRangeList9.size();
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor31 = languageRangeList9.listIterator();
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap35 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList36 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strMap35);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray45 = new java.util.Locale[] { locale40, locale41, locale42, locale43, locale44 };
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.Locale locale48 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList46);
        java.util.Locale.FilteringMode filteringMode49 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList50 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList46, filteringMode49);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList46, filteringMode51);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList46);
        boolean boolean54 = languageRangeList1.isEmpty();
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder55.clear();
        java.util.Locale locale57 = builder56.build();
        java.util.Locale.Builder builder58 = builder56.clearExtensions();
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.lang.String str61 = locale60.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale60);
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = locale60.getDisplayName(locale63);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale63);
        java.util.Locale.Builder builder66 = builder58.setLocale(locale63);
        java.lang.String str68 = locale63.getExtension('a');
        java.lang.String str69 = locale63.getVariant();
        java.util.Set<java.lang.String> strSet70 = locale63.getUnicodeLocaleKeys();
        boolean boolean71 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet70);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(languageRangeItor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(languageRangeItor21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(languageRangeItor31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeList36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(locale48);
        org.junit.Assert.assertTrue("'" + filteringMode49 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode49.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode51.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fra" + "'", str61, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str64, "\u6cd5\u6587\u6cd5\u570b)");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645513942674,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=723,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test05978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05978");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.Calendar.Builder builder32 = builder26.setWeekDate(69, 13, 0);
        java.util.Calendar.Builder builder33 = new java.util.Calendar.Builder();
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getSeconds();
        java.util.Date date36 = new java.util.Date();
        int int37 = date36.getTimezoneOffset();
        date36.setMinutes(6);
        boolean boolean40 = date34.after(date36);
        java.util.Calendar.Builder builder41 = builder33.setInstant(date36);
        java.util.Calendar.Builder builder43 = builder41.setInstant((long) 36);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder45 = builder43.setLocale(locale44);
        java.util.Calendar.Builder builder47 = builder45.setLenient(false);
        java.util.Calendar.Builder builder49 = builder45.setLenient(false);
        java.util.Calendar.Builder builder53 = builder45.setWeekDate(43, 0, (int) '4');
        java.util.Calendar.Builder builder57 = builder45.setWeekDate(10, 0, 2);
        int[] intArray58 = new int[] {};
        java.util.Calendar.Builder builder59 = builder57.setFields(intArray58);
        java.util.Calendar.Builder builder60 = builder26.setFields(intArray58);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone62.hasSameRules(timeZone64);
        java.util.Locale locale66 = java.util.Locale.CHINA;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone64, locale66);
        boolean boolean68 = locale66.hasExtensions();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(locale66);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        boolean boolean72 = locale70.hasExtensions();
        java.lang.String str73 = locale70.getDisplayLanguage();
        java.lang.String str74 = locale66.getDisplayName(locale70);
        java.util.Calendar.Builder builder75 = builder60.setLocale(locale66);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder77 = builder60.setInstant((-61604322582824L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[]");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645513942744,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=793,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645513942744,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=793,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh" + "'", str71, "zh");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "cinese" + "'", str73, "cinese");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str74, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test05979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05979");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getSeconds();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setMinutes(6);
        boolean boolean9 = date3.after(date5);
        java.util.Calendar.Builder builder10 = builder2.setInstant(date5);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 36);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder14 = builder12.setLocale(locale13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone16.hasSameRules(timeZone18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone18);
        int int22 = timeZone18.getOffset(1645513656868L);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone24.hasSameRules(timeZone26);
        boolean boolean28 = timeZone18.hasSameRules(timeZone24);
        timeZone24.setRawOffset(6);
        timeZone24.setRawOffset((int) '#');
        java.util.Calendar.Builder builder33 = builder14.setTimeZone(timeZone24);
        java.util.TimeZone timeZone34 = null;
        boolean boolean35 = timeZone24.hasSameRules(timeZone34);
        java.lang.String str36 = timeZone24.getID();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(40, (int) (short) 1, timeZone24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 40");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645513942764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=813,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 49 + "'", int22 == 49);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str36, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645513942764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=799,ZONE_OFFSET=35,DST_OFFSET=0]");
    }

    @Test
    public void test05980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05980");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.lang.String str4 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        parsePosition7.setErrorIndex(5);
        parsePosition7.setErrorIndex(1);
        java.lang.Object obj12 = fastDateFormat2.parseObject("22 Feb 2022 07:07:39 GMT", parsePosition7);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone15.hasSameRules(timeZone17);
        java.util.Locale locale20 = new java.util.Locale("7:07:37 AM UTC");
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale20.getScript();
        java.util.Locale locale26 = new java.util.Locale("", "hi!", "");
        java.lang.String str27 = locale20.getDisplayVariant(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone15, locale26);
        java.lang.String str29 = locale26.getLanguage();
        boolean boolean30 = fastDateFormat2.equals((java.lang.Object) str29);
        int int31 = fastDateFormat2.getMaxLengthEstimate();
        java.util.TimeZone timeZone32 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        timeZone37.setRawOffset((int) (byte) 1);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 0, timeZone37, locale42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone45.hasSameRules(timeZone47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone47);
        java.util.TimeZone timeZone50 = calendar49.getTimeZone();
        calendar49.set(5, 16);
        calendar49.setFirstDayOfWeek(40);
        boolean boolean56 = fastDateFormat43.equals((java.lang.Object) 40);
        boolean boolean57 = fastDateFormat43.getTimeZoneOverridesCalendar();
        boolean boolean58 = fastDateFormat2.equals((java.lang.Object) fastDateFormat43);
        java.lang.String str60 = fastDateFormat43.format(1645513756119L);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale20.toString(), "7:07:37 am utc");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "7:07:37 am utc");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals(locale26.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 18 + "'", int31 == 18);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=40,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=861,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u5e74\u6708\u65e5\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00" + "'", str60, "\u5e74\u6708\u65e5\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
    }

    @Test
    public void test05981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05981");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        java.util.Calendar.Builder builder12 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder14 = builder12.setLenient(false);
        java.util.Calendar.Builder builder16 = builder12.setLenient(false);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(43, 0, (int) '4');
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar.Builder builder23 = builder20.setLocale(locale21);
        java.lang.String str24 = locale21.getISO3Country();
        java.lang.String str25 = locale21.getDisplayName();
        java.lang.String str26 = locale21.getDisplayScript();
        java.util.Locale locale30 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str31 = locale30.getDisplayLanguage();
        java.lang.String str32 = locale30.getScript();
        java.util.Set<java.lang.Character> charSet33 = locale30.getExtensionKeys();
        java.lang.String str34 = locale21.getDisplayCountry(locale30);
        java.lang.String str35 = locale30.toLanguageTag();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale30);
        calendar36.setLenient(true);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale40);
        java.lang.String str44 = locale40.getDisplayVariant();
        java.util.Locale.setDefault(locale40);
        boolean boolean46 = calendar36.after((java.lang.Object) locale40);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:22 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:22 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-CN" + "'", str22, "zh-CN");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CHN" + "'", str24, "CHN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "cinese (Cina)" + "'", str25, "cinese (Cina)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale30.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "China" + "'", str34, "China");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645513942851,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=900,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test05982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05982");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getVariant();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1970, 57, timeZone3, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 57");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645513942874,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=22,MILLISECOND=923,ZONE_OFFSET=49,DST_OFFSET=0]");
    }

    @Test
    public void test05983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05983");
        java.util.Locale locale2 = new java.util.Locale("7:09:32 AM GMT");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale2.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(24, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 24");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "7:09:32 am gmt");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test05984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05984");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        int int5 = timeZone2.getRawOffset();
        int int7 = timeZone2.getOffset((long) (byte) 1);
        timeZone2.setRawOffset(4);
        java.util.Date date16 = new java.util.Date((int) (byte) 1, (int) (short) 10, 15, 34, 5, 32769);
        boolean boolean17 = timeZone2.inDaylightTime(date16);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49 + "'", int5 == 49);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 49 + "'", int7 == 49);
        org.junit.Assert.assertEquals(date16.toString(), "Sat Nov 16 19:11:09 GMT+00:00 1901");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05985");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange languageRange3 = null;
        boolean boolean4 = languageRangeList1.add(languageRange3);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor5 = languageRangeList1.iterator();
        java.util.Set<java.lang.String> strSet6 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet6.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet6.parallelStream();
        boolean boolean9 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange languageRange11 = null;
        languageRangeList1.add(0, languageRange11);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor13 = languageRangeList1.iterator();
        java.util.Locale.LanguageRange languageRange15 = new java.util.Locale.LanguageRange("France");
        double double16 = languageRange15.getWeight();
        java.lang.String str17 = languageRange15.getRange();
        boolean boolean18 = languageRangeList1.add(languageRange15);
        java.util.Locale locale21 = new java.util.Locale("7:07:37 am utc", "7:08:00 AM GMT+00:00");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream23 = strSet22.parallelStream();
        boolean boolean24 = languageRangeList1.retainAll((java.util.Collection<java.lang.String>) strSet22);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(languageRangeItor5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(languageRangeItor13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "france" + "'", str17, "france");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale21.toString(), "7:07:37 am utc_7:08:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test05986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05986");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        int int12 = calendar6.getWeeksInWeekYear();
        calendar6.clear();
        java.util.Date date19 = new java.util.Date((int) (byte) 10, (int) (short) 1, (int) (byte) 10, 0, 12);
        calendar6.setTime(date19);
        int int22 = calendar6.getMaximum(16);
        calendar6.clear();
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category24);
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale32 = new java.util.Locale("", "hi!", "");
        java.lang.String str33 = locale28.getDisplayVariant(locale32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale28);
        java.lang.String str35 = locale28.getDisplayVariant();
        java.util.Locale.setDefault(category24, locale28);
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale41 = new java.util.Locale("", "hi!", "");
        java.lang.String str42 = locale37.getDisplayCountry(locale41);
        java.util.Locale locale46 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str47 = locale46.getDisplayScript();
        java.lang.String str48 = locale37.getDisplayName(locale46);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.lang.String str51 = locale50.getISO3Language();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 0, locale50);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = locale50.getDisplayName(locale53);
        java.lang.String str55 = locale50.getDisplayCountry();
        java.lang.String str56 = locale50.getDisplayScript();
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale57.toLanguageTag();
        java.util.Locale.setDefault(locale57);
        java.lang.String str60 = locale50.getDisplayName(locale57);
        java.lang.String str61 = locale37.getDisplayName(locale50);
        java.util.Locale.setDefault(category24, locale37);
        java.util.Locale locale63 = java.util.Locale.getDefault(category24);
        java.util.Locale locale64 = java.util.Locale.getDefault(category24);
        java.util.Locale locale65 = java.util.Locale.getDefault(category24);
        boolean boolean66 = calendar6.before((java.lang.Object) category24);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Feb 10 00:12:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7200000 + "'", int22 == 7200000);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale32.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645513942992,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=23,MILLISECOND=41,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale41.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "China" + "'", str42, "China");
        org.junit.Assert.assertEquals(locale46.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Chinese (China)" + "'", str48, "Chinese (China)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "fra" + "'", str51, "fra");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u6cd5\u6587\u6cd5\u570b)" + "'", str54, "\u6cd5\u6587\u6cd5\u570b)");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Francia" + "'", str55, "Francia");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "it-IT" + "'", str58, "it-IT");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "francese (Francia)" + "'", str60, "francese (Francia)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "chinois (Chine)" + "'", str61, "chinois (Chine)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test05987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05987");
        java.util.Date date5 = new java.util.Date(122, 292278994, (-46800000), 25, (int) '4');
        date5.setHours(23);
        java.lang.String str8 = date5.toLocaleString();
        org.junit.Assert.assertEquals(date5.toString(), "Tue Oct 14 23:52:00 GMT+00:00 24230470");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "24230470-10-14 23:52:00" + "'", str8, "24230470-10-14 23:52:00");
    }

    @Test
    public void test05988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05988");
        java.util.Locale locale4 = new java.util.Locale("", "1/1/70 12:00 AM", "");
        java.lang.String str5 = locale4.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(134, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 134");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "_1/1/70 12:00 AM");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test05989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05989");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        java.util.Calendar.Builder builder10 = builder8.setInstant((long) 36);
        java.util.Calendar.Builder builder14 = builder10.setWeekDate(17, 37, 6);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(100, 10, 18, 14);
        java.util.Calendar.Builder builder24 = builder19.setTimeOfDay(100, 43, 0, 2022);
        java.util.Calendar.Builder builder26 = builder24.setLenient(true);
        java.util.Calendar.Builder builder28 = builder26.setLenient(false);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone30.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.CHINA;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        calendar35.clear(7);
        calendar35.set(16, (int) (byte) 0);
        java.time.Instant instant41 = calendar35.toInstant();
        java.util.TimeZone timeZone42 = calendar35.getTimeZone();
        java.util.TimeZone timeZone43 = calendar35.getTimeZone();
        java.lang.String str44 = timeZone43.getID();
        java.util.Calendar.Builder builder45 = builder28.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder49 = builder28.setWeekDate(50, 59, 2022);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone("Sat Jan 22 07:07:37 UTC 2022");
        boolean boolean52 = timeZone51.observesDaylightTime();
        java.time.ZoneId zoneId53 = timeZone51.toZoneId();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone(zoneId53);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone(zoneId53);
        java.util.Calendar.Builder builder56 = builder28.setTimeZone(timeZone55);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        boolean boolean60 = locale58.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getInstance("h:mm:ss a z", locale58);
        java.lang.String str62 = fastDateFormat61.toString();
        java.lang.String str63 = fastDateFormat61.getPattern();
        java.util.Date date64 = new java.util.Date();
        int int65 = date64.getDay();
        date64.setDate(2);
        java.util.Date date68 = new java.util.Date();
        int int69 = date68.getTimezoneOffset();
        date68.setMinutes(6);
        int int72 = date68.getMinutes();
        boolean boolean73 = date64.after(date68);
        int int74 = date68.getSeconds();
        java.lang.String str75 = fastDateFormat61.format(date68);
        date68.setYear(33);
        int int78 = date68.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder79 = builder56.setInstant(date68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:23 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:06:23 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645513943042,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=23,MILLISECOND=91,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str44, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(zoneId53);
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh" + "'", str59, "zh");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(fastDateFormat61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str62, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "h:mm:ss a z" + "'", str63, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Wed Feb 02 07:12:23 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
// flaky:         org.junit.Assert.assertEquals(date68.toString(), "Wed Feb 22 07:06:23 GMT+00:00 1933");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 6 + "'", int72 == 6);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 23 + "'", int74 == 23);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u4e0a\u5348 GMT+00:00" + "'", str75, "\u4e0a\u5348 GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 23 + "'", int78 == 23);
    }

    @Test
    public void test05990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05990");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        int int21 = calendar9.getWeekYear();
        boolean boolean22 = calendar9.isWeekDateSupported();
        calendar9.clear();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:23 AM GMT+00:00" + "'", str16, "7:12:23 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 103 + "'", int21 == 103);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test05991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05991");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.CHINA;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        calendar6.clear(7);
        calendar6.set(16, (int) (byte) 0);
        java.time.Instant instant12 = calendar6.toInstant();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        int int14 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.set((-1), 32769, (-46800000));
        calendar6.setTimeInMillis(1645513842220L);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645513842220,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=10,SECOND=42,MILLISECOND=269,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test05992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05992");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone4.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        calendar9.clear(7);
        calendar9.set(16, (int) (byte) 0);
        int int15 = calendar9.getFirstDayOfWeek();
        java.lang.String str16 = fastDateFormat2.format(calendar9);
        calendar9.set((int) (short) 100, 37, 2);
        java.util.TimeZone timeZone21 = calendar9.getTimeZone();
        calendar9.set(44, 48, 97);
        int int26 = calendar9.getFirstDayOfWeek();
        java.lang.Class<?> wildcardClass27 = calendar9.getClass();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=44,MONTH=48,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=97,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=23,MILLISECOND=144,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7:12:23 AM GMT+00:00" + "'", str16, "7:12:23 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test05993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05993");
        java.util.Date date5 = new java.util.Date(32, 53, (int) (byte) 1, 44, 0);
        org.junit.Assert.assertEquals(date5.toString(), "Tue Jun 02 20:00:00 GMT+00:00 1936");
    }

    @Test
    public void test05994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05994");
        java.util.Locale locale1 = java.util.Locale.FRANCE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = fastDateFormat2.format((java.lang.Object) "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.lang.String");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[HH' h 'mm z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[HH' h 'mm z]");
    }

    @Test
    public void test05995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05995");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        int int5 = timeZone1.getOffset(1645513657024L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("1921-01-24 05:10:00", timeZone1);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getVariant();
        java.util.Set<java.lang.Character> charSet9 = locale7.getExtensionKeys();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone1, locale7);
        java.lang.String str11 = locale7.getISO3Language();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder14 = builder12.clear();
        java.util.Locale locale15 = builder12.build();
        java.lang.String str16 = locale15.getScript();
        java.util.Locale locale20 = new java.util.Locale("java.util.GregorianCalendar[time=36,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=36,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-22 07:07:51", "7:08:28 AM GMT+00:00");
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.lang.String str22 = locale7.getDisplayName(locale15);
        java.util.Locale locale23 = locale15.stripExtensions();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 49 + "'", int5 == 49);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645513943226,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=23,MILLISECOND=275,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "deu" + "'", str11, "deu");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale20.toString(), "java.util.gregoriancalendar[time=36,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"java.util.gregoriancalendar[time=?,arefieldsset=false,areallfieldsset=false,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=3,month=38,week_of_year=9,week_of_month=4,day_of_month=0,day_of_year=53,day_of_week=?,day_of_week_in_month=4,am_pm=0,hour=7,hour_of_day=100,minute=36,second=5,millisecond=548,zone_offset=0,dst_offset=0]\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=2,minimaldaysinfirstweek=4,era=1,year=1970,month=0,week_of_year=1,week_of_month=1,day_of_month=1,day_of_year=1,day_of_week=5,day_of_week_in_month=1,am_pm=0,hour=0,hour_of_day=0,minute=0,second=0,millisecond=36,zone_offset=0,dst_offset=0]_2022-02-22 07:07:51_7:08:28 AM GMT+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
    }

    @Test
    public void test05996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05996");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getSeconds();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        boolean boolean7 = date1.after(date3);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date3);
        int int9 = date3.getMonth();
        date3.setTime(1645513689715L);
        date3.setSeconds(38);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:12:23 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Feb 22 07:08:38 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test05997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05997");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone8.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.CHINA;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        calendar13.clear(7);
        calendar13.set(16, (int) (byte) 0);
        int int19 = calendar13.getFirstDayOfWeek();
        java.lang.String str20 = fastDateFormat6.format(calendar13);
        calendar13.set((int) (short) 100, 37, 2);
        java.lang.String str25 = fastDateFormat2.format(calendar13);
        long long26 = calendar13.getTimeInMillis();
        calendar13.set(45, (int) (short) 1, 292278994, 69, 49, 0);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone38.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        calendar43.clear(7);
        calendar43.set(16, (int) (byte) 0);
        int int49 = calendar43.getFirstDayOfWeek();
        java.lang.String str50 = fastDateFormat36.format(calendar43);
        java.util.TimeZone timeZone51 = calendar43.getTimeZone();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        java.util.Date date54 = new java.util.Date();
        java.lang.String str55 = date54.toGMTString();
        boolean boolean56 = date52.before(date54);
        boolean boolean57 = calendar43.after((java.lang.Object) date54);
        java.util.Date date58 = calendar43.getTime();
        date58.setHours((int) (short) 0);
        date58.setHours(19);
        calendar13.setTime(date58);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645557143393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=12,SECOND=23,MILLISECOND=442,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7:12:23 AM GMT+00:00" + "'", str20, "7:12:23 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7:12:23 AM GMT+00:00" + "'", str25, "7:12:23 AM GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-58914146856607L) + "'", long26 == (-58914146856607L));
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645513943393,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=23,MILLISECOND=442,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "7:12:23 AM GMT+00:00" + "'", str50, "7:12:23 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Feb 22 07:12:23 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Tue Feb 22 07:12:23 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "22 Feb 2022 07:12:23 GMT" + "'", str55, "22 Feb 2022 07:12:23 GMT");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Feb 22 19:12:23 GMT+00:00 2022");
    }

    @Test
    public void test05998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05998");
        java.util.Locale locale1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, locale1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.Object obj5 = locale4.clone();
        boolean boolean6 = fastDateFormat2.equals(obj5);
        java.lang.Object obj7 = fastDateFormat2.clone();
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition(16);
        int int11 = parsePosition10.getErrorIndex();
        int int12 = parsePosition10.getErrorIndex();
        int int13 = parsePosition10.getErrorIndex();
        java.lang.String str14 = parsePosition10.toString();
        java.lang.Object obj15 = fastDateFormat2.parseObject("22 f\351vr. 2022 07:09:27", parsePosition10);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "en");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str14, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test05999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test05999");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = java.util.Locale.FRANCE;
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.util.Locale locale6 = java.util.Locale.FRANCE;
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray8 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7 };
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.Locale locale11 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale15, locale16, locale17, locale18, locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList21);
        int int24 = languageRangeList1.lastIndexOf((java.lang.Object) languageRangeList13);
        languageRangeList13.clear();
        int int26 = languageRangeList13.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor28 = languageRangeList13.listIterator(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 53");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(locale11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test06000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest11.test06000");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("IT");
        languageRangeList1.clear();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange languageRange6 = null;
        boolean boolean7 = languageRangeList4.add(languageRange6);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor8 = languageRangeList4.iterator();
        java.util.Set<java.lang.String> strSet9 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet9.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet9.parallelStream();
        boolean boolean12 = languageRangeList4.retainAll((java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale.LanguageRange languageRange13 = null;
        boolean boolean14 = languageRangeList4.add(languageRange13);
        java.util.ListIterator<java.util.Locale.LanguageRange> languageRangeItor15 = languageRangeList4.listIterator();
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator16 = languageRangeList4.spliterator();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        int int19 = languageRangeList4.lastIndexOf((java.lang.Object) locale17);
        java.util.Spliterator<java.util.Locale.LanguageRange> languageRangeSpliterator20 = languageRangeList4.spliterator();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale22);
        java.util.Locale locale24 = null;
        java.lang.String str25 = locale22.getDisplayVariant(locale24);
        java.util.Set<java.lang.String> strSet26 = locale22.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream27 = strSet26.parallelStream();
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet26);
        boolean boolean29 = languageRangeList1.containsAll((java.util.Collection<java.lang.String>) strSet26);
        java.util.Iterator<java.util.Locale.LanguageRange> languageRangeItor30 = languageRangeList1.iterator();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone34.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.lang.String str40 = locale31.getDisplayName(locale38);
        java.lang.String str41 = locale31.getScript();
        java.util.Set<java.lang.String> strSet42 = locale31.getUnicodeLocaleKeys();
        java.lang.String str43 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet42);
        java.util.stream.Stream<java.lang.String> strStream44 = strSet42.stream();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(languageRangeItor8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeItor15);
        org.junit.Assert.assertNotNull(languageRangeSpliterator16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(languageRangeSpliterator20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeItor30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645513943487,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=38,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=53,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=100,MINUTE=36,SECOND=5,MILLISECOND=548,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=12,SECOND=23,MILLISECOND=536,ZONE_OFFSET=49,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(strStream44);
    }
}
